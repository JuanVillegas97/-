
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CHAR COLON COMMA CTEF CTEI DIVIDE ELSE EQUALS FLOAT GREATER ID IF INT LBRACE LESS LPAREN MINUS NOTEQUAL PLUS PRINT PROGRAM RBRACE RPAREN SEMICOLON STRING THEN TIMES WHILE\n    program : program_statement\n            | empty\n    \n    program_statement : var_declaration\n                        | statement\n    \n    var_declaration : type ID SEMICOLON\n    \n    statement : print_statement\n                | assignment_statement\n                | if_statement\n                | while_statement\n    \n    print_statement : PRINT LPAREN expression RPAREN SEMICOLON\n    \n    assignment_statement : ID EQUALS expression SEMICOLON\n    \n    if_statement : IF LPAREN expression RPAREN statement\n                | IF LPAREN expression RPAREN statement ELSE statement\n    \n    while_statement : WHILE LPAREN expression RPAREN statement\n    \n    expression : expression PLUS term\n            | expression MINUS term\n            | term\n    term : term TIMES factor\n            | term DIVIDE factor\n            | factor\n        \n    factor : LPAREN expression RPAREN\n    | ID\n    | type\n    \n    type : INT\n        | FLOAT\n        | STRING\n        | CHAR\n    empty :'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,8,9,10,11,24,34,48,49,50,52,],[-28,0,-1,-2,-3,-4,-6,-7,-8,-9,-5,-11,-10,-12,-14,-13,]),'INT':([0,20,21,22,23,29,35,36,37,38,],[12,12,12,12,12,12,12,12,12,12,]),'FLOAT':([0,20,21,22,23,29,35,36,37,38,],[13,13,13,13,13,13,13,13,13,13,]),'STRING':([0,20,21,22,23,29,35,36,37,38,],[14,14,14,14,14,14,14,14,14,14,]),'CHAR':([0,20,21,22,23,29,35,36,37,38,],[15,15,15,15,15,15,15,15,15,15,]),'PRINT':([0,41,42,51,],[16,16,16,16,]),'ID':([0,6,12,13,14,15,20,21,22,23,29,35,36,37,38,41,42,51,],[7,19,-24,-25,-26,-27,25,25,25,25,25,25,25,25,25,7,7,7,]),'IF':([0,41,42,51,],[17,17,17,17,]),'WHILE':([0,41,42,51,],[18,18,18,18,]),'EQUALS':([7,],[20,]),'ELSE':([8,9,10,11,34,48,49,50,52,],[-6,-7,-8,-9,-11,-10,51,-14,-13,]),'TIMES':([12,13,14,15,25,27,28,30,43,44,45,46,47,],[-24,-25,-26,-27,-22,37,-20,-23,37,37,-18,-19,-21,]),'DIVIDE':([12,13,14,15,25,27,28,30,43,44,45,46,47,],[-24,-25,-26,-27,-22,38,-20,-23,38,38,-18,-19,-21,]),'SEMICOLON':([12,13,14,15,19,25,26,27,28,30,40,43,44,45,46,47,],[-24,-25,-26,-27,24,-22,34,-17,-20,-23,48,-15,-16,-18,-19,-21,]),'PLUS':([12,13,14,15,25,26,27,28,30,31,32,33,39,43,44,45,46,47,],[-24,-25,-26,-27,-22,35,-17,-20,-23,35,35,35,35,-15,-16,-18,-19,-21,]),'MINUS':([12,13,14,15,25,26,27,28,30,31,32,33,39,43,44,45,46,47,],[-24,-25,-26,-27,-22,36,-17,-20,-23,36,36,36,36,-15,-16,-18,-19,-21,]),'RPAREN':([12,13,14,15,25,27,28,30,31,32,33,39,43,44,45,46,47,],[-24,-25,-26,-27,-22,-17,-20,-23,40,41,42,47,-15,-16,-18,-19,-21,]),'LPAREN':([16,17,18,20,21,22,23,29,35,36,37,38,],[21,22,23,29,29,29,29,29,29,29,29,29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_statement':([0,],[2,]),'empty':([0,],[3,]),'var_declaration':([0,],[4,]),'statement':([0,41,42,51,],[5,49,50,52,]),'type':([0,20,21,22,23,29,35,36,37,38,],[6,30,30,30,30,30,30,30,30,30,]),'print_statement':([0,41,42,51,],[8,8,8,8,]),'assignment_statement':([0,41,42,51,],[9,9,9,9,]),'if_statement':([0,41,42,51,],[10,10,10,10,]),'while_statement':([0,41,42,51,],[11,11,11,11,]),'expression':([20,21,22,23,29,],[26,31,32,33,39,]),'term':([20,21,22,23,29,35,36,],[27,27,27,27,27,43,44,]),'factor':([20,21,22,23,29,35,36,37,38,],[28,28,28,28,28,28,28,45,46,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program_statement','program',1,'p_program','parser_1.py',6),
  ('program -> empty','program',1,'p_program','parser_1.py',7),
  ('program_statement -> var_declaration','program_statement',1,'p_program_statement','parser_1.py',14),
  ('program_statement -> statement','program_statement',1,'p_program_statement','parser_1.py',15),
  ('var_declaration -> type ID SEMICOLON','var_declaration',3,'p_var_declaration','parser_1.py',22),
  ('statement -> print_statement','statement',1,'p_statement','parser_1.py',30),
  ('statement -> assignment_statement','statement',1,'p_statement','parser_1.py',31),
  ('statement -> if_statement','statement',1,'p_statement','parser_1.py',32),
  ('statement -> while_statement','statement',1,'p_statement','parser_1.py',33),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMICOLON','print_statement',5,'p_print_statement','parser_1.py',39),
  ('assignment_statement -> ID EQUALS expression SEMICOLON','assignment_statement',4,'p_assignment_statement','parser_1.py',45),
  ('if_statement -> IF LPAREN expression RPAREN statement','if_statement',5,'p_if_statement','parser_1.py',51),
  ('if_statement -> IF LPAREN expression RPAREN statement ELSE statement','if_statement',7,'p_if_statement','parser_1.py',52),
  ('while_statement -> WHILE LPAREN expression RPAREN statement','while_statement',5,'p_while_statement','parser_1.py',58),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser_1.py',64),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser_1.py',65),
  ('expression -> term','expression',1,'p_expression','parser_1.py',66),
  ('term -> term TIMES factor','term',3,'p_term','parser_1.py',71),
  ('term -> term DIVIDE factor','term',3,'p_term','parser_1.py',72),
  ('term -> factor','term',1,'p_term','parser_1.py',73),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser_1.py',79),
  ('factor -> ID','factor',1,'p_factor','parser_1.py',80),
  ('factor -> type','factor',1,'p_factor','parser_1.py',81),
  ('type -> INT','type',1,'p_type','parser_1.py',87),
  ('type -> FLOAT','type',1,'p_type','parser_1.py',88),
  ('type -> STRING','type',1,'p_type','parser_1.py',89),
  ('type -> CHAR','type',1,'p_type','parser_1.py',90),
  ('empty -> <empty>','empty',0,'p_empty','parser_1.py',95),
]
