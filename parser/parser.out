Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMENT
    THEN

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END
Rule 2     global_scope -> empty
Rule 3     functions -> functions function
Rule 4     functions -> function
Rule 5     functions -> empty
Rule 6     function -> FUNCTION function_signature block
Rule 7     function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
Rule 8     function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
Rule 9     return -> RETURN expressions SEMICOLON
Rule 10    function_1 -> empty
Rule 11    main -> MAIN LPAREN RPAREN main_scope var_declarations block
Rule 12    main_scope -> empty
Rule 13    var_declarations -> var_declaration_list
Rule 14    var_declarations -> empty
Rule 15    var_declaration_list -> var_declaration var_declarations
Rule 16    var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration
Rule 17    open_var_declaration -> empty
Rule 18    close_var_declaration -> empty
Rule 19    variables -> variable
Rule 20    variables -> variable COMMA variables
Rule 21    variable -> ID
Rule 22    variable -> ID LBRACK expression RBRACK
Rule 23    variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK
Rule 24    parameters -> parameters COMMA parameter
Rule 25    parameters -> parameter
Rule 26    parameters -> empty
Rule 27    parameter -> simple_type ID
Rule 28    block -> LBRACE block2 RBRACE
Rule 29    block2 -> block3
Rule 30    block2 -> empty
Rule 31    block3 -> statement block2
Rule 32    statement -> special_func
Rule 33    statement -> assingation
Rule 34    statement -> for
Rule 35    statement -> do_while
Rule 36    statement -> while
Rule 37    statement -> if_else
Rule 38    statement -> invocation
Rule 39    statement -> if
Rule 40    statement -> print
Rule 41    statement -> read
Rule 42    special_func -> gen_key
Rule 43    special_func -> encrypt
Rule 44    special_func -> decrypt
Rule 45    gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON
Rule 46    encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
Rule 47    decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
Rule 48    read -> READ LPAREN ID RPAREN SEMICOLON
Rule 49    assing_to_call -> variable ASSIGN invocation
Rule 50    do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
Rule 51    for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
Rule 52    for_1 -> empty
Rule 53    for_2 -> empty
Rule 54    for_3 -> empty
Rule 55    for_4 -> empty
Rule 56    while -> WHILE breadcrumb LPAREN expression RPAREN gotof block
Rule 57    breadcrumb -> empty
Rule 58    if -> IF LPAREN expression RPAREN gotof block
Rule 59    if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block
Rule 60    gotot -> empty
Rule 61    goto -> empty
Rule 62    gotof -> empty
Rule 63    variable_list -> variable
Rule 64    variable_list -> variable_list COMMA variable
Rule 65    invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
Rule 66    invocation_1 -> empty
Rule 67    invocation_2 -> empty
Rule 68    invocation_3 -> empty
Rule 69    invocation_4 -> empty
Rule 70    invocation_5 -> empty
Rule 71    invocation_6 -> empty
Rule 72    expressions -> expressions COMMA invocation_4 expression invocation_3
Rule 73    expressions -> expression invocation_3
Rule 74    expressions -> empty
Rule 75    expression -> t_expression
Rule 76    expression -> NOT t_expression
Rule 77    print -> PRINT LPAREN print_arguments RPAREN SEMICOLON
Rule 78    print_arguments -> print_argument
Rule 79    print_arguments -> print_arguments COMMA print_argument
Rule 80    print_argument -> CTES
Rule 81    print_argument -> expression
Rule 82    assingation -> variable ASSIGN expression SEMICOLON
Rule 83    t_expression -> g_expression
Rule 84    t_expression -> t_expression boolean_operator g_expression
Rule 85    g_expression -> m_expression
Rule 86    g_expression -> g_expression comparison_operator m_expression
Rule 87    m_expression -> term
Rule 88    m_expression -> m_expression addition_operator term
Rule 89    term -> factor
Rule 90    term -> term multiplication_operator factor
Rule 91    factor -> variable
Rule 92    factor -> cte
Rule 93    factor -> invocation
Rule 94    factor -> expression_parenthesis
Rule 95    expression_parenthesis -> LPAREN expression RPAREN
Rule 96    comparison_operator -> LESS
Rule 97    comparison_operator -> GREATER
Rule 98    comparison_operator -> EQUALS
Rule 99    comparison_operator -> NOTEQUAL
Rule 100   comparison_operator -> GREATERTHAN
Rule 101   comparison_operator -> LESSTHAN
Rule 102   addition_operator -> PLUS
Rule 103   addition_operator -> MINUS
Rule 104   boolean_operator -> AND
Rule 105   boolean_operator -> OR
Rule 106   multiplication_operator -> TIMES
Rule 107   multiplication_operator -> DIVIDE
Rule 108   simple_type -> INT
Rule 109   simple_type -> FLOAT
Rule 110   simple_type -> CHAR
Rule 111   simple_type -> BOOLEAN
Rule 112   simple_type -> STRING
Rule 113   cte -> CTEI
Rule 114   cte -> CTEF
Rule 115   cte -> CTEC
Rule 116   cte -> CTEB
Rule 117   cte -> CTES
Rule 118   empty -> <empty>

Terminals, with rules where they appear

AND                  : 104
ASSIGN               : 49 51 82
BOOLEAN              : 111
CHAR                 : 110
COLON                : 
COMMA                : 20 24 46 47 64 72 79
COMMENT              : 
CTEB                 : 116
CTEC                 : 115
CTEF                 : 114
CTEI                 : 113
CTES                 : 80 117
DECRYPT              : 47
DIVIDE               : 107
DO                   : 50 51
ELSE                 : 59
ENCRYPT              : 46
END                  : 1
EQUALS               : 98
FLOAT                : 109
FOR                  : 51
FROM                 : 51
FUNCTION             : 6
GENKEY               : 45
GREATER              : 97
GREATERTHAN          : 100
ID                   : 1 7 8 21 22 23 27 45 46 46 46 47 47 47 48 51 65
IF                   : 58 59
INT                  : 108
LBRACE               : 28
LBRACK               : 22 23 23
LESS                 : 96
LESSTHAN             : 101
LPAREN               : 7 8 11 45 46 47 48 50 51 56 58 59 65 77 95
MAIN                 : 11
MINUS                : 103
NOT                  : 76
NOTEQUAL             : 99
OR                   : 105
PLUS                 : 102
PRINT                : 77
PROGRAM              : 1
RBRACE               : 28
RBRACK               : 22 23 23
READ                 : 48
RETURN               : 9
RPAREN               : 7 8 11 45 46 47 48 50 51 56 58 59 65 77 95
SEMICOLON            : 1 9 16 45 46 47 48 50 65 77 82
SPECIAL              : 45 46 47
STRING               : 112
THEN                 : 
TIMES                : 106
VARIABLE             : 16
VOID                 : 8
WHILE                : 50 56
error                : 

Nonterminals, with rules where they appear

addition_operator    : 88
assing_to_call       : 
assingation          : 33
block                : 6 11 50 51 56 58 59 59
block2               : 28 31
block3               : 29
boolean_operator     : 84
breadcrumb           : 50 56
close_var_declaration : 7 8 16
comparison_operator  : 86
cte                  : 92
decrypt              : 44
do_while             : 35
empty                : 2 5 10 12 14 17 18 26 30 52 53 54 55 57 60 61 62 66 67 68 69 70 71 74
encrypt              : 43
expression           : 22 23 23 50 51 51 56 58 59 72 73 81 82 95
expression_parenthesis : 94
expressions          : 9 65 72
factor               : 89 90
for                  : 34
for_1                : 51
for_2                : 51
for_3                : 51
for_4                : 51
function             : 3 4
function_1           : 7 8
function_signature   : 6
functions            : 1 3
g_expression         : 83 84 86
gen_key              : 42
global_scope         : 1
goto                 : 59
gotof                : 56 58 59
gotot                : 50
if                   : 39
if_else              : 37
invocation           : 38 49 93
invocation_1         : 65
invocation_2         : 65
invocation_3         : 72 73
invocation_4         : 72
invocation_5         : 65
invocation_6         : 65
m_expression         : 85 86 88
main                 : 1
main_scope           : 11
multiplication_operator : 90
open_var_declaration : 7 8 16
parameter            : 24 25
parameters           : 7 8 24
print                : 40
print_argument       : 78 79
print_arguments      : 77 79
program              : 0
read                 : 41
return               : 
simple_type          : 7 16 27
special_func         : 32
statement            : 31
t_expression         : 75 76 84
term                 : 87 88 90
var_declaration      : 15
var_declaration_list : 13
var_declarations     : 1 7 8 11 15
variable             : 19 20 49 63 64 82 91
variable_list        : 64
variables            : 16 20
while                : 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON global_scope var_declarations functions main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON global_scope var_declarations functions main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON global_scope var_declarations functions main END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . global_scope var_declarations functions main END
    (2) global_scope -> . empty
    (118) empty -> .

    VARIABLE        reduce using rule 118 (empty -> .)
    FUNCTION        reduce using rule 118 (empty -> .)
    MAIN            reduce using rule 118 (empty -> .)

    global_scope                   shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON global_scope . var_declarations functions main END
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (118) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 118 (empty -> .)
    MAIN            reduce using rule 118 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 7
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 6

    (2) global_scope -> empty .

    VARIABLE        reduce using rule 2 (global_scope -> empty .)
    FUNCTION        reduce using rule 2 (global_scope -> empty .)
    MAIN            reduce using rule 2 (global_scope -> empty .)


state 7

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations . functions main END
    (3) functions -> . functions function
    (4) functions -> . function
    (5) functions -> . empty
    (6) function -> . FUNCTION function_signature block
    (118) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 118 (empty -> .)

  ! FUNCTION        [ reduce using rule 118 (empty -> .) ]

    functions                      shift and go to state 12
    function                       shift and go to state 13
    empty                          shift and go to state 14

state 8

    (13) var_declarations -> var_declaration_list .

    FUNCTION        reduce using rule 13 (var_declarations -> var_declaration_list .)
    MAIN            reduce using rule 13 (var_declarations -> var_declaration_list .)
    LBRACE          reduce using rule 13 (var_declarations -> var_declaration_list .)


state 9

    (14) var_declarations -> empty .

    FUNCTION        reduce using rule 14 (var_declarations -> empty .)
    MAIN            reduce using rule 14 (var_declarations -> empty .)
    LBRACE          reduce using rule 14 (var_declarations -> empty .)


state 10

    (15) var_declaration_list -> var_declaration . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (118) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 118 (empty -> .)
    MAIN            reduce using rule 118 (empty -> .)
    LBRACE          reduce using rule 118 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declaration                shift and go to state 10
    var_declarations               shift and go to state 16
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9

state 11

    (16) var_declaration -> VARIABLE . open_var_declaration simple_type variables SEMICOLON close_var_declaration
    (17) open_var_declaration -> . empty
    (118) empty -> .

    INT             reduce using rule 118 (empty -> .)
    FLOAT           reduce using rule 118 (empty -> .)
    CHAR            reduce using rule 118 (empty -> .)
    BOOLEAN         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

    open_var_declaration           shift and go to state 17
    empty                          shift and go to state 18

state 12

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions . main END
    (3) functions -> functions . function
    (11) main -> . MAIN LPAREN RPAREN main_scope var_declarations block
    (6) function -> . FUNCTION function_signature block

    MAIN            shift and go to state 21
    FUNCTION        shift and go to state 15

    main                           shift and go to state 19
    function                       shift and go to state 20

state 13

    (4) functions -> function .

    MAIN            reduce using rule 4 (functions -> function .)
    FUNCTION        reduce using rule 4 (functions -> function .)


state 14

    (5) functions -> empty .

    MAIN            reduce using rule 5 (functions -> empty .)
    FUNCTION        reduce using rule 5 (functions -> empty .)


state 15

    (6) function -> FUNCTION . function_signature block
    (7) function_signature -> . simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (8) function_signature -> . VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (108) simple_type -> . INT
    (109) simple_type -> . FLOAT
    (110) simple_type -> . CHAR
    (111) simple_type -> . BOOLEAN
    (112) simple_type -> . STRING

    VOID            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    function_signature             shift and go to state 22
    simple_type                    shift and go to state 23

state 16

    (15) var_declaration_list -> var_declaration var_declarations .

    FUNCTION        reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)
    MAIN            reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)
    LBRACE          reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)


state 17

    (16) var_declaration -> VARIABLE open_var_declaration . simple_type variables SEMICOLON close_var_declaration
    (108) simple_type -> . INT
    (109) simple_type -> . FLOAT
    (110) simple_type -> . CHAR
    (111) simple_type -> . BOOLEAN
    (112) simple_type -> . STRING

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    simple_type                    shift and go to state 30

state 18

    (17) open_var_declaration -> empty .

    INT             reduce using rule 17 (open_var_declaration -> empty .)
    FLOAT           reduce using rule 17 (open_var_declaration -> empty .)
    CHAR            reduce using rule 17 (open_var_declaration -> empty .)
    BOOLEAN         reduce using rule 17 (open_var_declaration -> empty .)
    STRING          reduce using rule 17 (open_var_declaration -> empty .)
    COMMA           reduce using rule 17 (open_var_declaration -> empty .)
    RPAREN          reduce using rule 17 (open_var_declaration -> empty .)


state 19

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main . END

    END             shift and go to state 31


state 20

    (3) functions -> functions function .

    MAIN            reduce using rule 3 (functions -> functions function .)
    FUNCTION        reduce using rule 3 (functions -> functions function .)


state 21

    (11) main -> MAIN . LPAREN RPAREN main_scope var_declarations block

    LPAREN          shift and go to state 32


state 22

    (6) function -> FUNCTION function_signature . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 33

state 23

    (7) function_signature -> simple_type . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    ID              shift and go to state 35


state 24

    (8) function_signature -> VOID . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    ID              shift and go to state 36


state 25

    (108) simple_type -> INT .

    ID              reduce using rule 108 (simple_type -> INT .)


state 26

    (109) simple_type -> FLOAT .

    ID              reduce using rule 109 (simple_type -> FLOAT .)


state 27

    (110) simple_type -> CHAR .

    ID              reduce using rule 110 (simple_type -> CHAR .)


state 28

    (111) simple_type -> BOOLEAN .

    ID              reduce using rule 111 (simple_type -> BOOLEAN .)


state 29

    (112) simple_type -> STRING .

    ID              reduce using rule 112 (simple_type -> STRING .)


state 30

    (16) var_declaration -> VARIABLE open_var_declaration simple_type . variables SEMICOLON close_var_declaration
    (19) variables -> . variable
    (20) variables -> . variable COMMA variables
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 39

    variables                      shift and go to state 37
    variable                       shift and go to state 38

state 31

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .)


state 32

    (11) main -> MAIN LPAREN . RPAREN main_scope var_declarations block

    RPAREN          shift and go to state 40


state 33

    (6) function -> FUNCTION function_signature block .

    MAIN            reduce using rule 6 (function -> FUNCTION function_signature block .)
    FUNCTION        reduce using rule 6 (function -> FUNCTION function_signature block .)


state 34

    (28) block -> LBRACE . block2 RBRACE
    (29) block2 -> . block3
    (30) block2 -> . empty
    (31) block3 -> . statement block2
    (118) empty -> .
    (32) statement -> . special_func
    (33) statement -> . assingation
    (34) statement -> . for
    (35) statement -> . do_while
    (36) statement -> . while
    (37) statement -> . if_else
    (38) statement -> . invocation
    (39) statement -> . if
    (40) statement -> . print
    (41) statement -> . read
    (42) special_func -> . gen_key
    (43) special_func -> . encrypt
    (44) special_func -> . decrypt
    (82) assingation -> . variable ASSIGN expression SEMICOLON
    (51) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (50) do_while -> . DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (56) while -> . WHILE breadcrumb LPAREN expression RPAREN gotof block
    (59) if_else -> . IF LPAREN expression RPAREN gotof block ELSE goto block
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (58) if -> . IF LPAREN expression RPAREN gotof block
    (77) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (48) read -> . READ LPAREN ID RPAREN SEMICOLON
    (45) gen_key -> . GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON
    (46) encrypt -> . ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (47) decrypt -> . DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          reduce using rule 118 (empty -> .)
    FOR             shift and go to state 59
    DO              shift and go to state 61
    WHILE           shift and go to state 62
    IF              shift and go to state 63
    ID              shift and go to state 60
    PRINT           shift and go to state 64
    READ            shift and go to state 65
    GENKEY          shift and go to state 66
    ENCRYPT         shift and go to state 67
    DECRYPT         shift and go to state 68

    block2                         shift and go to state 41
    block3                         shift and go to state 42
    empty                          shift and go to state 43
    statement                      shift and go to state 44
    special_func                   shift and go to state 45
    assingation                    shift and go to state 46
    for                            shift and go to state 47
    do_while                       shift and go to state 48
    while                          shift and go to state 49
    if_else                        shift and go to state 50
    invocation                     shift and go to state 51
    if                             shift and go to state 52
    print                          shift and go to state 53
    read                           shift and go to state 54
    gen_key                        shift and go to state 55
    encrypt                        shift and go to state 56
    decrypt                        shift and go to state 57
    variable                       shift and go to state 58

state 35

    (7) function_signature -> simple_type ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (10) function_1 -> . empty
    (118) empty -> .

    LPAREN          reduce using rule 118 (empty -> .)

    function_1                     shift and go to state 69
    empty                          shift and go to state 70

state 36

    (8) function_signature -> VOID ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (10) function_1 -> . empty
    (118) empty -> .

    LPAREN          reduce using rule 118 (empty -> .)

    function_1                     shift and go to state 71
    empty                          shift and go to state 70

state 37

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables . SEMICOLON close_var_declaration

    SEMICOLON       shift and go to state 72


state 38

    (19) variables -> variable .
    (20) variables -> variable . COMMA variables

    SEMICOLON       reduce using rule 19 (variables -> variable .)
    COMMA           shift and go to state 73


state 39

    (21) variable -> ID .
    (22) variable -> ID . LBRACK expression RBRACK
    (23) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK

    COMMA           reduce using rule 21 (variable -> ID .)
    SEMICOLON       reduce using rule 21 (variable -> ID .)
    LBRACK          shift and go to state 74


state 40

    (11) main -> MAIN LPAREN RPAREN . main_scope var_declarations block
    (12) main_scope -> . empty
    (118) empty -> .

    VARIABLE        reduce using rule 118 (empty -> .)
    LBRACE          reduce using rule 118 (empty -> .)

    main_scope                     shift and go to state 75
    empty                          shift and go to state 76

state 41

    (28) block -> LBRACE block2 . RBRACE

    RBRACE          shift and go to state 77


state 42

    (29) block2 -> block3 .

    RBRACE          reduce using rule 29 (block2 -> block3 .)


state 43

    (30) block2 -> empty .

    RBRACE          reduce using rule 30 (block2 -> empty .)


state 44

    (31) block3 -> statement . block2
    (29) block2 -> . block3
    (30) block2 -> . empty
    (31) block3 -> . statement block2
    (118) empty -> .
    (32) statement -> . special_func
    (33) statement -> . assingation
    (34) statement -> . for
    (35) statement -> . do_while
    (36) statement -> . while
    (37) statement -> . if_else
    (38) statement -> . invocation
    (39) statement -> . if
    (40) statement -> . print
    (41) statement -> . read
    (42) special_func -> . gen_key
    (43) special_func -> . encrypt
    (44) special_func -> . decrypt
    (82) assingation -> . variable ASSIGN expression SEMICOLON
    (51) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (50) do_while -> . DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (56) while -> . WHILE breadcrumb LPAREN expression RPAREN gotof block
    (59) if_else -> . IF LPAREN expression RPAREN gotof block ELSE goto block
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (58) if -> . IF LPAREN expression RPAREN gotof block
    (77) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (48) read -> . READ LPAREN ID RPAREN SEMICOLON
    (45) gen_key -> . GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON
    (46) encrypt -> . ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (47) decrypt -> . DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          reduce using rule 118 (empty -> .)
    FOR             shift and go to state 59
    DO              shift and go to state 61
    WHILE           shift and go to state 62
    IF              shift and go to state 63
    ID              shift and go to state 60
    PRINT           shift and go to state 64
    READ            shift and go to state 65
    GENKEY          shift and go to state 66
    ENCRYPT         shift and go to state 67
    DECRYPT         shift and go to state 68

    statement                      shift and go to state 44
    block2                         shift and go to state 78
    block3                         shift and go to state 42
    empty                          shift and go to state 43
    special_func                   shift and go to state 45
    assingation                    shift and go to state 46
    for                            shift and go to state 47
    do_while                       shift and go to state 48
    while                          shift and go to state 49
    if_else                        shift and go to state 50
    invocation                     shift and go to state 51
    if                             shift and go to state 52
    print                          shift and go to state 53
    read                           shift and go to state 54
    gen_key                        shift and go to state 55
    encrypt                        shift and go to state 56
    decrypt                        shift and go to state 57
    variable                       shift and go to state 58

state 45

    (32) statement -> special_func .

    FOR             reduce using rule 32 (statement -> special_func .)
    DO              reduce using rule 32 (statement -> special_func .)
    WHILE           reduce using rule 32 (statement -> special_func .)
    IF              reduce using rule 32 (statement -> special_func .)
    ID              reduce using rule 32 (statement -> special_func .)
    PRINT           reduce using rule 32 (statement -> special_func .)
    READ            reduce using rule 32 (statement -> special_func .)
    GENKEY          reduce using rule 32 (statement -> special_func .)
    ENCRYPT         reduce using rule 32 (statement -> special_func .)
    DECRYPT         reduce using rule 32 (statement -> special_func .)
    RBRACE          reduce using rule 32 (statement -> special_func .)


state 46

    (33) statement -> assingation .

    FOR             reduce using rule 33 (statement -> assingation .)
    DO              reduce using rule 33 (statement -> assingation .)
    WHILE           reduce using rule 33 (statement -> assingation .)
    IF              reduce using rule 33 (statement -> assingation .)
    ID              reduce using rule 33 (statement -> assingation .)
    PRINT           reduce using rule 33 (statement -> assingation .)
    READ            reduce using rule 33 (statement -> assingation .)
    GENKEY          reduce using rule 33 (statement -> assingation .)
    ENCRYPT         reduce using rule 33 (statement -> assingation .)
    DECRYPT         reduce using rule 33 (statement -> assingation .)
    RBRACE          reduce using rule 33 (statement -> assingation .)


state 47

    (34) statement -> for .

    FOR             reduce using rule 34 (statement -> for .)
    DO              reduce using rule 34 (statement -> for .)
    WHILE           reduce using rule 34 (statement -> for .)
    IF              reduce using rule 34 (statement -> for .)
    ID              reduce using rule 34 (statement -> for .)
    PRINT           reduce using rule 34 (statement -> for .)
    READ            reduce using rule 34 (statement -> for .)
    GENKEY          reduce using rule 34 (statement -> for .)
    ENCRYPT         reduce using rule 34 (statement -> for .)
    DECRYPT         reduce using rule 34 (statement -> for .)
    RBRACE          reduce using rule 34 (statement -> for .)


state 48

    (35) statement -> do_while .

    FOR             reduce using rule 35 (statement -> do_while .)
    DO              reduce using rule 35 (statement -> do_while .)
    WHILE           reduce using rule 35 (statement -> do_while .)
    IF              reduce using rule 35 (statement -> do_while .)
    ID              reduce using rule 35 (statement -> do_while .)
    PRINT           reduce using rule 35 (statement -> do_while .)
    READ            reduce using rule 35 (statement -> do_while .)
    GENKEY          reduce using rule 35 (statement -> do_while .)
    ENCRYPT         reduce using rule 35 (statement -> do_while .)
    DECRYPT         reduce using rule 35 (statement -> do_while .)
    RBRACE          reduce using rule 35 (statement -> do_while .)


state 49

    (36) statement -> while .

    FOR             reduce using rule 36 (statement -> while .)
    DO              reduce using rule 36 (statement -> while .)
    WHILE           reduce using rule 36 (statement -> while .)
    IF              reduce using rule 36 (statement -> while .)
    ID              reduce using rule 36 (statement -> while .)
    PRINT           reduce using rule 36 (statement -> while .)
    READ            reduce using rule 36 (statement -> while .)
    GENKEY          reduce using rule 36 (statement -> while .)
    ENCRYPT         reduce using rule 36 (statement -> while .)
    DECRYPT         reduce using rule 36 (statement -> while .)
    RBRACE          reduce using rule 36 (statement -> while .)


state 50

    (37) statement -> if_else .

    FOR             reduce using rule 37 (statement -> if_else .)
    DO              reduce using rule 37 (statement -> if_else .)
    WHILE           reduce using rule 37 (statement -> if_else .)
    IF              reduce using rule 37 (statement -> if_else .)
    ID              reduce using rule 37 (statement -> if_else .)
    PRINT           reduce using rule 37 (statement -> if_else .)
    READ            reduce using rule 37 (statement -> if_else .)
    GENKEY          reduce using rule 37 (statement -> if_else .)
    ENCRYPT         reduce using rule 37 (statement -> if_else .)
    DECRYPT         reduce using rule 37 (statement -> if_else .)
    RBRACE          reduce using rule 37 (statement -> if_else .)


state 51

    (38) statement -> invocation .

    FOR             reduce using rule 38 (statement -> invocation .)
    DO              reduce using rule 38 (statement -> invocation .)
    WHILE           reduce using rule 38 (statement -> invocation .)
    IF              reduce using rule 38 (statement -> invocation .)
    ID              reduce using rule 38 (statement -> invocation .)
    PRINT           reduce using rule 38 (statement -> invocation .)
    READ            reduce using rule 38 (statement -> invocation .)
    GENKEY          reduce using rule 38 (statement -> invocation .)
    ENCRYPT         reduce using rule 38 (statement -> invocation .)
    DECRYPT         reduce using rule 38 (statement -> invocation .)
    RBRACE          reduce using rule 38 (statement -> invocation .)


state 52

    (39) statement -> if .

    FOR             reduce using rule 39 (statement -> if .)
    DO              reduce using rule 39 (statement -> if .)
    WHILE           reduce using rule 39 (statement -> if .)
    IF              reduce using rule 39 (statement -> if .)
    ID              reduce using rule 39 (statement -> if .)
    PRINT           reduce using rule 39 (statement -> if .)
    READ            reduce using rule 39 (statement -> if .)
    GENKEY          reduce using rule 39 (statement -> if .)
    ENCRYPT         reduce using rule 39 (statement -> if .)
    DECRYPT         reduce using rule 39 (statement -> if .)
    RBRACE          reduce using rule 39 (statement -> if .)


state 53

    (40) statement -> print .

    FOR             reduce using rule 40 (statement -> print .)
    DO              reduce using rule 40 (statement -> print .)
    WHILE           reduce using rule 40 (statement -> print .)
    IF              reduce using rule 40 (statement -> print .)
    ID              reduce using rule 40 (statement -> print .)
    PRINT           reduce using rule 40 (statement -> print .)
    READ            reduce using rule 40 (statement -> print .)
    GENKEY          reduce using rule 40 (statement -> print .)
    ENCRYPT         reduce using rule 40 (statement -> print .)
    DECRYPT         reduce using rule 40 (statement -> print .)
    RBRACE          reduce using rule 40 (statement -> print .)


state 54

    (41) statement -> read .

    FOR             reduce using rule 41 (statement -> read .)
    DO              reduce using rule 41 (statement -> read .)
    WHILE           reduce using rule 41 (statement -> read .)
    IF              reduce using rule 41 (statement -> read .)
    ID              reduce using rule 41 (statement -> read .)
    PRINT           reduce using rule 41 (statement -> read .)
    READ            reduce using rule 41 (statement -> read .)
    GENKEY          reduce using rule 41 (statement -> read .)
    ENCRYPT         reduce using rule 41 (statement -> read .)
    DECRYPT         reduce using rule 41 (statement -> read .)
    RBRACE          reduce using rule 41 (statement -> read .)


state 55

    (42) special_func -> gen_key .

    FOR             reduce using rule 42 (special_func -> gen_key .)
    DO              reduce using rule 42 (special_func -> gen_key .)
    WHILE           reduce using rule 42 (special_func -> gen_key .)
    IF              reduce using rule 42 (special_func -> gen_key .)
    ID              reduce using rule 42 (special_func -> gen_key .)
    PRINT           reduce using rule 42 (special_func -> gen_key .)
    READ            reduce using rule 42 (special_func -> gen_key .)
    GENKEY          reduce using rule 42 (special_func -> gen_key .)
    ENCRYPT         reduce using rule 42 (special_func -> gen_key .)
    DECRYPT         reduce using rule 42 (special_func -> gen_key .)
    RBRACE          reduce using rule 42 (special_func -> gen_key .)


state 56

    (43) special_func -> encrypt .

    FOR             reduce using rule 43 (special_func -> encrypt .)
    DO              reduce using rule 43 (special_func -> encrypt .)
    WHILE           reduce using rule 43 (special_func -> encrypt .)
    IF              reduce using rule 43 (special_func -> encrypt .)
    ID              reduce using rule 43 (special_func -> encrypt .)
    PRINT           reduce using rule 43 (special_func -> encrypt .)
    READ            reduce using rule 43 (special_func -> encrypt .)
    GENKEY          reduce using rule 43 (special_func -> encrypt .)
    ENCRYPT         reduce using rule 43 (special_func -> encrypt .)
    DECRYPT         reduce using rule 43 (special_func -> encrypt .)
    RBRACE          reduce using rule 43 (special_func -> encrypt .)


state 57

    (44) special_func -> decrypt .

    FOR             reduce using rule 44 (special_func -> decrypt .)
    DO              reduce using rule 44 (special_func -> decrypt .)
    WHILE           reduce using rule 44 (special_func -> decrypt .)
    IF              reduce using rule 44 (special_func -> decrypt .)
    ID              reduce using rule 44 (special_func -> decrypt .)
    PRINT           reduce using rule 44 (special_func -> decrypt .)
    READ            reduce using rule 44 (special_func -> decrypt .)
    GENKEY          reduce using rule 44 (special_func -> decrypt .)
    ENCRYPT         reduce using rule 44 (special_func -> decrypt .)
    DECRYPT         reduce using rule 44 (special_func -> decrypt .)
    RBRACE          reduce using rule 44 (special_func -> decrypt .)


state 58

    (82) assingation -> variable . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 79


state 59

    (51) for -> FOR . LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    LPAREN          shift and go to state 80


state 60

    (65) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (21) variable -> ID .
    (22) variable -> ID . LBRACK expression RBRACK
    (23) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (66) invocation_1 -> . empty
    (118) empty -> .

    ASSIGN          reduce using rule 21 (variable -> ID .)
    LBRACK          shift and go to state 74
    LPAREN          reduce using rule 118 (empty -> .)

    invocation_1                   shift and go to state 81
    empty                          shift and go to state 82

state 61

    (50) do_while -> DO . breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (57) breadcrumb -> . empty
    (118) empty -> .

    LBRACE          reduce using rule 118 (empty -> .)

    breadcrumb                     shift and go to state 83
    empty                          shift and go to state 84

state 62

    (56) while -> WHILE . breadcrumb LPAREN expression RPAREN gotof block
    (57) breadcrumb -> . empty
    (118) empty -> .

    LPAREN          reduce using rule 118 (empty -> .)

    breadcrumb                     shift and go to state 85
    empty                          shift and go to state 84

state 63

    (59) if_else -> IF . LPAREN expression RPAREN gotof block ELSE goto block
    (58) if -> IF . LPAREN expression RPAREN gotof block

    LPAREN          shift and go to state 86


state 64

    (77) print -> PRINT . LPAREN print_arguments RPAREN SEMICOLON

    LPAREN          shift and go to state 87


state 65

    (48) read -> READ . LPAREN ID RPAREN SEMICOLON

    LPAREN          shift and go to state 88


state 66

    (45) gen_key -> GENKEY . LPAREN RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 89


state 67

    (46) encrypt -> ENCRYPT . LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 90


state 68

    (47) decrypt -> DECRYPT . LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 91


state 69

    (7) function_signature -> simple_type ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    LPAREN          shift and go to state 92


state 70

    (10) function_1 -> empty .

    LPAREN          reduce using rule 10 (function_1 -> empty .)


state 71

    (8) function_signature -> VOID ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    LPAREN          shift and go to state 93


state 72

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON . close_var_declaration
    (18) close_var_declaration -> . empty
    (118) empty -> .

    VARIABLE        reduce using rule 118 (empty -> .)
    FUNCTION        reduce using rule 118 (empty -> .)
    MAIN            reduce using rule 118 (empty -> .)
    LBRACE          reduce using rule 118 (empty -> .)

    close_var_declaration          shift and go to state 94
    empty                          shift and go to state 95

state 73

    (20) variables -> variable COMMA . variables
    (19) variables -> . variable
    (20) variables -> . variable COMMA variables
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 39

    variable                       shift and go to state 38
    variables                      shift and go to state 96

state 74

    (22) variable -> ID LBRACK . expression RBRACK
    (23) variable -> ID LBRACK . expression RBRACK LBRACK expression RBRACK
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (83) t_expression -> . g_expression
    (84) t_expression -> . t_expression boolean_operator g_expression
    (85) g_expression -> . m_expression
    (86) g_expression -> . g_expression comparison_operator m_expression
    (87) m_expression -> . term
    (88) m_expression -> . m_expression addition_operator term
    (89) term -> . factor
    (90) term -> . term multiplication_operator factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 100
    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    CTES            shift and go to state 113
    LPAREN          shift and go to state 114

    expression                     shift and go to state 98
    t_expression                   shift and go to state 99
    g_expression                   shift and go to state 101
    m_expression                   shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    variable                       shift and go to state 105
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 75

    (11) main -> MAIN LPAREN RPAREN main_scope . var_declarations block
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (118) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 118 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 115
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 76

    (12) main_scope -> empty .

    VARIABLE        reduce using rule 12 (main_scope -> empty .)
    LBRACE          reduce using rule 12 (main_scope -> empty .)


state 77

    (28) block -> LBRACE block2 RBRACE .

    MAIN            reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    FUNCTION        reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    WHILE           reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    END             reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    ELSE            reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    FOR             reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    DO              reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    IF              reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    ID              reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    PRINT           reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    READ            reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    GENKEY          reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    ENCRYPT         reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    DECRYPT         reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    RBRACE          reduce using rule 28 (block -> LBRACE block2 RBRACE .)


state 78

    (31) block3 -> statement block2 .

    RBRACE          reduce using rule 31 (block3 -> statement block2 .)


state 79

    (82) assingation -> variable ASSIGN . expression SEMICOLON
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (83) t_expression -> . g_expression
    (84) t_expression -> . t_expression boolean_operator g_expression
    (85) g_expression -> . m_expression
    (86) g_expression -> . g_expression comparison_operator m_expression
    (87) m_expression -> . term
    (88) m_expression -> . m_expression addition_operator term
    (89) term -> . factor
    (90) term -> . term multiplication_operator factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 100
    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    CTES            shift and go to state 113
    LPAREN          shift and go to state 114

    variable                       shift and go to state 105
    expression                     shift and go to state 116
    t_expression                   shift and go to state 99
    g_expression                   shift and go to state 101
    m_expression                   shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 80

    (51) for -> FOR LPAREN . ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    ID              shift and go to state 117


state 81

    (65) invocation -> ID invocation_1 . LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    LPAREN          shift and go to state 118


state 82

    (66) invocation_1 -> empty .

    LPAREN          reduce using rule 66 (invocation_1 -> empty .)


state 83

    (50) do_while -> DO breadcrumb . block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 119

state 84

    (57) breadcrumb -> empty .

    LBRACE          reduce using rule 57 (breadcrumb -> empty .)
    LPAREN          reduce using rule 57 (breadcrumb -> empty .)


state 85

    (56) while -> WHILE breadcrumb . LPAREN expression RPAREN gotof block

    LPAREN          shift and go to state 120


state 86

    (59) if_else -> IF LPAREN . expression RPAREN gotof block ELSE goto block
    (58) if -> IF LPAREN . expression RPAREN gotof block
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (83) t_expression -> . g_expression
    (84) t_expression -> . t_expression boolean_operator g_expression
    (85) g_expression -> . m_expression
    (86) g_expression -> . g_expression comparison_operator m_expression
    (87) m_expression -> . term
    (88) m_expression -> . m_expression addition_operator term
    (89) term -> . factor
    (90) term -> . term multiplication_operator factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 100
    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    CTES            shift and go to state 113
    LPAREN          shift and go to state 114

    expression                     shift and go to state 121
    t_expression                   shift and go to state 99
    g_expression                   shift and go to state 101
    m_expression                   shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    variable                       shift and go to state 105
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 87

    (77) print -> PRINT LPAREN . print_arguments RPAREN SEMICOLON
    (78) print_arguments -> . print_argument
    (79) print_arguments -> . print_arguments COMMA print_argument
    (80) print_argument -> . CTES
    (81) print_argument -> . expression
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (83) t_expression -> . g_expression
    (84) t_expression -> . t_expression boolean_operator g_expression
    (85) g_expression -> . m_expression
    (86) g_expression -> . g_expression comparison_operator m_expression
    (87) m_expression -> . term
    (88) m_expression -> . m_expression addition_operator term
    (89) term -> . factor
    (90) term -> . term multiplication_operator factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    CTES            shift and go to state 124
    NOT             shift and go to state 100
    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    LPAREN          shift and go to state 114

    print_arguments                shift and go to state 122
    print_argument                 shift and go to state 123
    expression                     shift and go to state 125
    t_expression                   shift and go to state 99
    g_expression                   shift and go to state 101
    m_expression                   shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    variable                       shift and go to state 105
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 88

    (48) read -> READ LPAREN . ID RPAREN SEMICOLON

    ID              shift and go to state 126


state 89

    (45) gen_key -> GENKEY LPAREN . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 127


state 90

    (46) encrypt -> ENCRYPT LPAREN . ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 128


state 91

    (47) decrypt -> DECRYPT LPAREN . ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 129


state 92

    (7) function_signature -> simple_type ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (17) open_var_declaration -> . empty
    (118) empty -> .

    INT             reduce using rule 118 (empty -> .)
    FLOAT           reduce using rule 118 (empty -> .)
    CHAR            reduce using rule 118 (empty -> .)
    BOOLEAN         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    RPAREN          reduce using rule 118 (empty -> .)

    open_var_declaration           shift and go to state 130
    empty                          shift and go to state 18

state 93

    (8) function_signature -> VOID ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (17) open_var_declaration -> . empty
    (118) empty -> .

    INT             reduce using rule 118 (empty -> .)
    FLOAT           reduce using rule 118 (empty -> .)
    CHAR            reduce using rule 118 (empty -> .)
    BOOLEAN         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    RPAREN          reduce using rule 118 (empty -> .)

    open_var_declaration           shift and go to state 131
    empty                          shift and go to state 18

state 94

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .

    VARIABLE        reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    FUNCTION        reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    MAIN            reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    LBRACE          reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)


state 95

    (18) close_var_declaration -> empty .

    VARIABLE        reduce using rule 18 (close_var_declaration -> empty .)
    FUNCTION        reduce using rule 18 (close_var_declaration -> empty .)
    MAIN            reduce using rule 18 (close_var_declaration -> empty .)
    LBRACE          reduce using rule 18 (close_var_declaration -> empty .)
    RPAREN          reduce using rule 18 (close_var_declaration -> empty .)


state 96

    (20) variables -> variable COMMA variables .

    SEMICOLON       reduce using rule 20 (variables -> variable COMMA variables .)


state 97

    (21) variable -> ID .
    (22) variable -> ID . LBRACK expression RBRACK
    (23) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (65) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (66) invocation_1 -> . empty
    (118) empty -> .

    TIMES           reduce using rule 21 (variable -> ID .)
    DIVIDE          reduce using rule 21 (variable -> ID .)
    PLUS            reduce using rule 21 (variable -> ID .)
    MINUS           reduce using rule 21 (variable -> ID .)
    LESS            reduce using rule 21 (variable -> ID .)
    GREATER         reduce using rule 21 (variable -> ID .)
    EQUALS          reduce using rule 21 (variable -> ID .)
    NOTEQUAL        reduce using rule 21 (variable -> ID .)
    GREATERTHAN     reduce using rule 21 (variable -> ID .)
    LESSTHAN        reduce using rule 21 (variable -> ID .)
    AND             reduce using rule 21 (variable -> ID .)
    OR              reduce using rule 21 (variable -> ID .)
    RBRACK          reduce using rule 21 (variable -> ID .)
    SEMICOLON       reduce using rule 21 (variable -> ID .)
    RPAREN          reduce using rule 21 (variable -> ID .)
    COMMA           reduce using rule 21 (variable -> ID .)
    FROM            reduce using rule 21 (variable -> ID .)
    LBRACK          shift and go to state 74
    LPAREN          reduce using rule 118 (empty -> .)

    invocation_1                   shift and go to state 81
    empty                          shift and go to state 82

state 98

    (22) variable -> ID LBRACK expression . RBRACK
    (23) variable -> ID LBRACK expression . RBRACK LBRACK expression RBRACK

    RBRACK          shift and go to state 132


state 99

    (75) expression -> t_expression .
    (84) t_expression -> t_expression . boolean_operator g_expression
    (104) boolean_operator -> . AND
    (105) boolean_operator -> . OR

    RBRACK          reduce using rule 75 (expression -> t_expression .)
    SEMICOLON       reduce using rule 75 (expression -> t_expression .)
    RPAREN          reduce using rule 75 (expression -> t_expression .)
    COMMA           reduce using rule 75 (expression -> t_expression .)
    FROM            reduce using rule 75 (expression -> t_expression .)
    AND             shift and go to state 134
    OR              shift and go to state 135

    boolean_operator               shift and go to state 133

state 100

    (76) expression -> NOT . t_expression
    (83) t_expression -> . g_expression
    (84) t_expression -> . t_expression boolean_operator g_expression
    (85) g_expression -> . m_expression
    (86) g_expression -> . g_expression comparison_operator m_expression
    (87) m_expression -> . term
    (88) m_expression -> . m_expression addition_operator term
    (89) term -> . factor
    (90) term -> . term multiplication_operator factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    CTES            shift and go to state 113
    LPAREN          shift and go to state 114

    t_expression                   shift and go to state 136
    g_expression                   shift and go to state 101
    m_expression                   shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    variable                       shift and go to state 105
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 101

    (83) t_expression -> g_expression .
    (86) g_expression -> g_expression . comparison_operator m_expression
    (96) comparison_operator -> . LESS
    (97) comparison_operator -> . GREATER
    (98) comparison_operator -> . EQUALS
    (99) comparison_operator -> . NOTEQUAL
    (100) comparison_operator -> . GREATERTHAN
    (101) comparison_operator -> . LESSTHAN

    AND             reduce using rule 83 (t_expression -> g_expression .)
    OR              reduce using rule 83 (t_expression -> g_expression .)
    RBRACK          reduce using rule 83 (t_expression -> g_expression .)
    SEMICOLON       reduce using rule 83 (t_expression -> g_expression .)
    RPAREN          reduce using rule 83 (t_expression -> g_expression .)
    COMMA           reduce using rule 83 (t_expression -> g_expression .)
    FROM            reduce using rule 83 (t_expression -> g_expression .)
    LESS            shift and go to state 138
    GREATER         shift and go to state 139
    EQUALS          shift and go to state 140
    NOTEQUAL        shift and go to state 141
    GREATERTHAN     shift and go to state 142
    LESSTHAN        shift and go to state 143

    comparison_operator            shift and go to state 137

state 102

    (85) g_expression -> m_expression .
    (88) m_expression -> m_expression . addition_operator term
    (102) addition_operator -> . PLUS
    (103) addition_operator -> . MINUS

    LESS            reduce using rule 85 (g_expression -> m_expression .)
    GREATER         reduce using rule 85 (g_expression -> m_expression .)
    EQUALS          reduce using rule 85 (g_expression -> m_expression .)
    NOTEQUAL        reduce using rule 85 (g_expression -> m_expression .)
    GREATERTHAN     reduce using rule 85 (g_expression -> m_expression .)
    LESSTHAN        reduce using rule 85 (g_expression -> m_expression .)
    AND             reduce using rule 85 (g_expression -> m_expression .)
    OR              reduce using rule 85 (g_expression -> m_expression .)
    RBRACK          reduce using rule 85 (g_expression -> m_expression .)
    SEMICOLON       reduce using rule 85 (g_expression -> m_expression .)
    RPAREN          reduce using rule 85 (g_expression -> m_expression .)
    COMMA           reduce using rule 85 (g_expression -> m_expression .)
    FROM            reduce using rule 85 (g_expression -> m_expression .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146

    addition_operator              shift and go to state 144

state 103

    (87) m_expression -> term .
    (90) term -> term . multiplication_operator factor
    (106) multiplication_operator -> . TIMES
    (107) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 87 (m_expression -> term .)
    MINUS           reduce using rule 87 (m_expression -> term .)
    LESS            reduce using rule 87 (m_expression -> term .)
    GREATER         reduce using rule 87 (m_expression -> term .)
    EQUALS          reduce using rule 87 (m_expression -> term .)
    NOTEQUAL        reduce using rule 87 (m_expression -> term .)
    GREATERTHAN     reduce using rule 87 (m_expression -> term .)
    LESSTHAN        reduce using rule 87 (m_expression -> term .)
    AND             reduce using rule 87 (m_expression -> term .)
    OR              reduce using rule 87 (m_expression -> term .)
    RBRACK          reduce using rule 87 (m_expression -> term .)
    SEMICOLON       reduce using rule 87 (m_expression -> term .)
    RPAREN          reduce using rule 87 (m_expression -> term .)
    COMMA           reduce using rule 87 (m_expression -> term .)
    FROM            reduce using rule 87 (m_expression -> term .)
    TIMES           shift and go to state 148
    DIVIDE          shift and go to state 149

    multiplication_operator        shift and go to state 147

state 104

    (89) term -> factor .

    TIMES           reduce using rule 89 (term -> factor .)
    DIVIDE          reduce using rule 89 (term -> factor .)
    PLUS            reduce using rule 89 (term -> factor .)
    MINUS           reduce using rule 89 (term -> factor .)
    LESS            reduce using rule 89 (term -> factor .)
    GREATER         reduce using rule 89 (term -> factor .)
    EQUALS          reduce using rule 89 (term -> factor .)
    NOTEQUAL        reduce using rule 89 (term -> factor .)
    GREATERTHAN     reduce using rule 89 (term -> factor .)
    LESSTHAN        reduce using rule 89 (term -> factor .)
    AND             reduce using rule 89 (term -> factor .)
    OR              reduce using rule 89 (term -> factor .)
    RBRACK          reduce using rule 89 (term -> factor .)
    SEMICOLON       reduce using rule 89 (term -> factor .)
    RPAREN          reduce using rule 89 (term -> factor .)
    COMMA           reduce using rule 89 (term -> factor .)
    FROM            reduce using rule 89 (term -> factor .)


state 105

    (91) factor -> variable .

    TIMES           reduce using rule 91 (factor -> variable .)
    DIVIDE          reduce using rule 91 (factor -> variable .)
    PLUS            reduce using rule 91 (factor -> variable .)
    MINUS           reduce using rule 91 (factor -> variable .)
    LESS            reduce using rule 91 (factor -> variable .)
    GREATER         reduce using rule 91 (factor -> variable .)
    EQUALS          reduce using rule 91 (factor -> variable .)
    NOTEQUAL        reduce using rule 91 (factor -> variable .)
    GREATERTHAN     reduce using rule 91 (factor -> variable .)
    LESSTHAN        reduce using rule 91 (factor -> variable .)
    AND             reduce using rule 91 (factor -> variable .)
    OR              reduce using rule 91 (factor -> variable .)
    RBRACK          reduce using rule 91 (factor -> variable .)
    SEMICOLON       reduce using rule 91 (factor -> variable .)
    RPAREN          reduce using rule 91 (factor -> variable .)
    COMMA           reduce using rule 91 (factor -> variable .)
    FROM            reduce using rule 91 (factor -> variable .)


state 106

    (92) factor -> cte .

    TIMES           reduce using rule 92 (factor -> cte .)
    DIVIDE          reduce using rule 92 (factor -> cte .)
    PLUS            reduce using rule 92 (factor -> cte .)
    MINUS           reduce using rule 92 (factor -> cte .)
    LESS            reduce using rule 92 (factor -> cte .)
    GREATER         reduce using rule 92 (factor -> cte .)
    EQUALS          reduce using rule 92 (factor -> cte .)
    NOTEQUAL        reduce using rule 92 (factor -> cte .)
    GREATERTHAN     reduce using rule 92 (factor -> cte .)
    LESSTHAN        reduce using rule 92 (factor -> cte .)
    AND             reduce using rule 92 (factor -> cte .)
    OR              reduce using rule 92 (factor -> cte .)
    RBRACK          reduce using rule 92 (factor -> cte .)
    SEMICOLON       reduce using rule 92 (factor -> cte .)
    RPAREN          reduce using rule 92 (factor -> cte .)
    COMMA           reduce using rule 92 (factor -> cte .)
    FROM            reduce using rule 92 (factor -> cte .)


state 107

    (93) factor -> invocation .

    TIMES           reduce using rule 93 (factor -> invocation .)
    DIVIDE          reduce using rule 93 (factor -> invocation .)
    PLUS            reduce using rule 93 (factor -> invocation .)
    MINUS           reduce using rule 93 (factor -> invocation .)
    LESS            reduce using rule 93 (factor -> invocation .)
    GREATER         reduce using rule 93 (factor -> invocation .)
    EQUALS          reduce using rule 93 (factor -> invocation .)
    NOTEQUAL        reduce using rule 93 (factor -> invocation .)
    GREATERTHAN     reduce using rule 93 (factor -> invocation .)
    LESSTHAN        reduce using rule 93 (factor -> invocation .)
    AND             reduce using rule 93 (factor -> invocation .)
    OR              reduce using rule 93 (factor -> invocation .)
    RBRACK          reduce using rule 93 (factor -> invocation .)
    SEMICOLON       reduce using rule 93 (factor -> invocation .)
    RPAREN          reduce using rule 93 (factor -> invocation .)
    COMMA           reduce using rule 93 (factor -> invocation .)
    FROM            reduce using rule 93 (factor -> invocation .)


state 108

    (94) factor -> expression_parenthesis .

    TIMES           reduce using rule 94 (factor -> expression_parenthesis .)
    DIVIDE          reduce using rule 94 (factor -> expression_parenthesis .)
    PLUS            reduce using rule 94 (factor -> expression_parenthesis .)
    MINUS           reduce using rule 94 (factor -> expression_parenthesis .)
    LESS            reduce using rule 94 (factor -> expression_parenthesis .)
    GREATER         reduce using rule 94 (factor -> expression_parenthesis .)
    EQUALS          reduce using rule 94 (factor -> expression_parenthesis .)
    NOTEQUAL        reduce using rule 94 (factor -> expression_parenthesis .)
    GREATERTHAN     reduce using rule 94 (factor -> expression_parenthesis .)
    LESSTHAN        reduce using rule 94 (factor -> expression_parenthesis .)
    AND             reduce using rule 94 (factor -> expression_parenthesis .)
    OR              reduce using rule 94 (factor -> expression_parenthesis .)
    RBRACK          reduce using rule 94 (factor -> expression_parenthesis .)
    SEMICOLON       reduce using rule 94 (factor -> expression_parenthesis .)
    RPAREN          reduce using rule 94 (factor -> expression_parenthesis .)
    COMMA           reduce using rule 94 (factor -> expression_parenthesis .)
    FROM            reduce using rule 94 (factor -> expression_parenthesis .)


state 109

    (113) cte -> CTEI .

    TIMES           reduce using rule 113 (cte -> CTEI .)
    DIVIDE          reduce using rule 113 (cte -> CTEI .)
    PLUS            reduce using rule 113 (cte -> CTEI .)
    MINUS           reduce using rule 113 (cte -> CTEI .)
    LESS            reduce using rule 113 (cte -> CTEI .)
    GREATER         reduce using rule 113 (cte -> CTEI .)
    EQUALS          reduce using rule 113 (cte -> CTEI .)
    NOTEQUAL        reduce using rule 113 (cte -> CTEI .)
    GREATERTHAN     reduce using rule 113 (cte -> CTEI .)
    LESSTHAN        reduce using rule 113 (cte -> CTEI .)
    AND             reduce using rule 113 (cte -> CTEI .)
    OR              reduce using rule 113 (cte -> CTEI .)
    RBRACK          reduce using rule 113 (cte -> CTEI .)
    SEMICOLON       reduce using rule 113 (cte -> CTEI .)
    RPAREN          reduce using rule 113 (cte -> CTEI .)
    COMMA           reduce using rule 113 (cte -> CTEI .)
    FROM            reduce using rule 113 (cte -> CTEI .)


state 110

    (114) cte -> CTEF .

    TIMES           reduce using rule 114 (cte -> CTEF .)
    DIVIDE          reduce using rule 114 (cte -> CTEF .)
    PLUS            reduce using rule 114 (cte -> CTEF .)
    MINUS           reduce using rule 114 (cte -> CTEF .)
    LESS            reduce using rule 114 (cte -> CTEF .)
    GREATER         reduce using rule 114 (cte -> CTEF .)
    EQUALS          reduce using rule 114 (cte -> CTEF .)
    NOTEQUAL        reduce using rule 114 (cte -> CTEF .)
    GREATERTHAN     reduce using rule 114 (cte -> CTEF .)
    LESSTHAN        reduce using rule 114 (cte -> CTEF .)
    AND             reduce using rule 114 (cte -> CTEF .)
    OR              reduce using rule 114 (cte -> CTEF .)
    RBRACK          reduce using rule 114 (cte -> CTEF .)
    SEMICOLON       reduce using rule 114 (cte -> CTEF .)
    RPAREN          reduce using rule 114 (cte -> CTEF .)
    COMMA           reduce using rule 114 (cte -> CTEF .)
    FROM            reduce using rule 114 (cte -> CTEF .)


state 111

    (115) cte -> CTEC .

    TIMES           reduce using rule 115 (cte -> CTEC .)
    DIVIDE          reduce using rule 115 (cte -> CTEC .)
    PLUS            reduce using rule 115 (cte -> CTEC .)
    MINUS           reduce using rule 115 (cte -> CTEC .)
    LESS            reduce using rule 115 (cte -> CTEC .)
    GREATER         reduce using rule 115 (cte -> CTEC .)
    EQUALS          reduce using rule 115 (cte -> CTEC .)
    NOTEQUAL        reduce using rule 115 (cte -> CTEC .)
    GREATERTHAN     reduce using rule 115 (cte -> CTEC .)
    LESSTHAN        reduce using rule 115 (cte -> CTEC .)
    AND             reduce using rule 115 (cte -> CTEC .)
    OR              reduce using rule 115 (cte -> CTEC .)
    RBRACK          reduce using rule 115 (cte -> CTEC .)
    SEMICOLON       reduce using rule 115 (cte -> CTEC .)
    RPAREN          reduce using rule 115 (cte -> CTEC .)
    COMMA           reduce using rule 115 (cte -> CTEC .)
    FROM            reduce using rule 115 (cte -> CTEC .)


state 112

    (116) cte -> CTEB .

    TIMES           reduce using rule 116 (cte -> CTEB .)
    DIVIDE          reduce using rule 116 (cte -> CTEB .)
    PLUS            reduce using rule 116 (cte -> CTEB .)
    MINUS           reduce using rule 116 (cte -> CTEB .)
    LESS            reduce using rule 116 (cte -> CTEB .)
    GREATER         reduce using rule 116 (cte -> CTEB .)
    EQUALS          reduce using rule 116 (cte -> CTEB .)
    NOTEQUAL        reduce using rule 116 (cte -> CTEB .)
    GREATERTHAN     reduce using rule 116 (cte -> CTEB .)
    LESSTHAN        reduce using rule 116 (cte -> CTEB .)
    AND             reduce using rule 116 (cte -> CTEB .)
    OR              reduce using rule 116 (cte -> CTEB .)
    RBRACK          reduce using rule 116 (cte -> CTEB .)
    SEMICOLON       reduce using rule 116 (cte -> CTEB .)
    RPAREN          reduce using rule 116 (cte -> CTEB .)
    COMMA           reduce using rule 116 (cte -> CTEB .)
    FROM            reduce using rule 116 (cte -> CTEB .)


state 113

    (117) cte -> CTES .

    TIMES           reduce using rule 117 (cte -> CTES .)
    DIVIDE          reduce using rule 117 (cte -> CTES .)
    PLUS            reduce using rule 117 (cte -> CTES .)
    MINUS           reduce using rule 117 (cte -> CTES .)
    LESS            reduce using rule 117 (cte -> CTES .)
    GREATER         reduce using rule 117 (cte -> CTES .)
    EQUALS          reduce using rule 117 (cte -> CTES .)
    NOTEQUAL        reduce using rule 117 (cte -> CTES .)
    GREATERTHAN     reduce using rule 117 (cte -> CTES .)
    LESSTHAN        reduce using rule 117 (cte -> CTES .)
    AND             reduce using rule 117 (cte -> CTES .)
    OR              reduce using rule 117 (cte -> CTES .)
    RBRACK          reduce using rule 117 (cte -> CTES .)
    SEMICOLON       reduce using rule 117 (cte -> CTES .)
    RPAREN          reduce using rule 117 (cte -> CTES .)
    COMMA           reduce using rule 117 (cte -> CTES .)
    FROM            reduce using rule 117 (cte -> CTES .)


state 114

    (95) expression_parenthesis -> LPAREN . expression RPAREN
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (83) t_expression -> . g_expression
    (84) t_expression -> . t_expression boolean_operator g_expression
    (85) g_expression -> . m_expression
    (86) g_expression -> . g_expression comparison_operator m_expression
    (87) m_expression -> . term
    (88) m_expression -> . m_expression addition_operator term
    (89) term -> . factor
    (90) term -> . term multiplication_operator factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 100
    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    CTES            shift and go to state 113
    LPAREN          shift and go to state 114

    expression                     shift and go to state 150
    t_expression                   shift and go to state 99
    g_expression                   shift and go to state 101
    m_expression                   shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    variable                       shift and go to state 105
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 115

    (11) main -> MAIN LPAREN RPAREN main_scope var_declarations . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 151

state 116

    (82) assingation -> variable ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 152


state 117

    (51) for -> FOR LPAREN ID . for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (52) for_1 -> . empty
    (118) empty -> .

    ASSIGN          reduce using rule 118 (empty -> .)

    for_1                          shift and go to state 153
    empty                          shift and go to state 154

state 118

    (65) invocation -> ID invocation_1 LPAREN . invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (67) invocation_2 -> . empty
    (118) empty -> .

    NOT             reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    CTEI            reduce using rule 118 (empty -> .)
    CTEF            reduce using rule 118 (empty -> .)
    CTEC            reduce using rule 118 (empty -> .)
    CTEB            reduce using rule 118 (empty -> .)
    CTES            reduce using rule 118 (empty -> .)
    LPAREN          reduce using rule 118 (empty -> .)
    RPAREN          reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)

    invocation_2                   shift and go to state 155
    empty                          shift and go to state 156

state 119

    (50) do_while -> DO breadcrumb block . WHILE LPAREN expression RPAREN gotot SEMICOLON

    WHILE           shift and go to state 157


state 120

    (56) while -> WHILE breadcrumb LPAREN . expression RPAREN gotof block
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (83) t_expression -> . g_expression
    (84) t_expression -> . t_expression boolean_operator g_expression
    (85) g_expression -> . m_expression
    (86) g_expression -> . g_expression comparison_operator m_expression
    (87) m_expression -> . term
    (88) m_expression -> . m_expression addition_operator term
    (89) term -> . factor
    (90) term -> . term multiplication_operator factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 100
    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    CTES            shift and go to state 113
    LPAREN          shift and go to state 114

    expression                     shift and go to state 158
    t_expression                   shift and go to state 99
    g_expression                   shift and go to state 101
    m_expression                   shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    variable                       shift and go to state 105
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 121

    (59) if_else -> IF LPAREN expression . RPAREN gotof block ELSE goto block
    (58) if -> IF LPAREN expression . RPAREN gotof block

    RPAREN          shift and go to state 159


state 122

    (77) print -> PRINT LPAREN print_arguments . RPAREN SEMICOLON
    (79) print_arguments -> print_arguments . COMMA print_argument

    RPAREN          shift and go to state 160
    COMMA           shift and go to state 161


state 123

    (78) print_arguments -> print_argument .

    RPAREN          reduce using rule 78 (print_arguments -> print_argument .)
    COMMA           reduce using rule 78 (print_arguments -> print_argument .)


state 124

    (80) print_argument -> CTES .
    (117) cte -> CTES .

  ! reduce/reduce conflict for RPAREN resolved using rule 80 (print_argument -> CTES .)
  ! reduce/reduce conflict for COMMA resolved using rule 80 (print_argument -> CTES .)
    RPAREN          reduce using rule 80 (print_argument -> CTES .)
    COMMA           reduce using rule 80 (print_argument -> CTES .)
    TIMES           reduce using rule 117 (cte -> CTES .)
    DIVIDE          reduce using rule 117 (cte -> CTES .)
    PLUS            reduce using rule 117 (cte -> CTES .)
    MINUS           reduce using rule 117 (cte -> CTES .)
    LESS            reduce using rule 117 (cte -> CTES .)
    GREATER         reduce using rule 117 (cte -> CTES .)
    EQUALS          reduce using rule 117 (cte -> CTES .)
    NOTEQUAL        reduce using rule 117 (cte -> CTES .)
    GREATERTHAN     reduce using rule 117 (cte -> CTES .)
    LESSTHAN        reduce using rule 117 (cte -> CTES .)
    AND             reduce using rule 117 (cte -> CTES .)
    OR              reduce using rule 117 (cte -> CTES .)

  ! RPAREN          [ reduce using rule 117 (cte -> CTES .) ]
  ! COMMA           [ reduce using rule 117 (cte -> CTES .) ]


state 125

    (81) print_argument -> expression .

    RPAREN          reduce using rule 81 (print_argument -> expression .)
    COMMA           reduce using rule 81 (print_argument -> expression .)


state 126

    (48) read -> READ LPAREN ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 162


state 127

    (45) gen_key -> GENKEY LPAREN RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 163


state 128

    (46) encrypt -> ENCRYPT LPAREN ID . COMMA ID RPAREN SPECIAL ID SEMICOLON

    COMMA           shift and go to state 164


state 129

    (47) decrypt -> DECRYPT LPAREN ID . COMMA ID RPAREN SPECIAL ID SEMICOLON

    COMMA           shift and go to state 165


state 130

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations
    (24) parameters -> . parameters COMMA parameter
    (25) parameters -> . parameter
    (26) parameters -> . empty
    (27) parameter -> . simple_type ID
    (118) empty -> .
    (108) simple_type -> . INT
    (109) simple_type -> . FLOAT
    (110) simple_type -> . CHAR
    (111) simple_type -> . BOOLEAN
    (112) simple_type -> . STRING

    COMMA           reduce using rule 118 (empty -> .)
    RPAREN          reduce using rule 118 (empty -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    simple_type                    shift and go to state 166
    parameters                     shift and go to state 167
    parameter                      shift and go to state 168
    empty                          shift and go to state 169

state 131

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations
    (24) parameters -> . parameters COMMA parameter
    (25) parameters -> . parameter
    (26) parameters -> . empty
    (27) parameter -> . simple_type ID
    (118) empty -> .
    (108) simple_type -> . INT
    (109) simple_type -> . FLOAT
    (110) simple_type -> . CHAR
    (111) simple_type -> . BOOLEAN
    (112) simple_type -> . STRING

    COMMA           reduce using rule 118 (empty -> .)
    RPAREN          reduce using rule 118 (empty -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    parameters                     shift and go to state 170
    parameter                      shift and go to state 168
    empty                          shift and go to state 169
    simple_type                    shift and go to state 166

state 132

    (22) variable -> ID LBRACK expression RBRACK .
    (23) variable -> ID LBRACK expression RBRACK . LBRACK expression RBRACK

    COMMA           reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    TIMES           reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    PLUS            reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    MINUS           reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    LESS            reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    GREATER         reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    EQUALS          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    AND             reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    OR              reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    RBRACK          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    RPAREN          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    FROM            reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    LBRACK          shift and go to state 171


state 133

    (84) t_expression -> t_expression boolean_operator . g_expression
    (85) g_expression -> . m_expression
    (86) g_expression -> . g_expression comparison_operator m_expression
    (87) m_expression -> . term
    (88) m_expression -> . m_expression addition_operator term
    (89) term -> . factor
    (90) term -> . term multiplication_operator factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    CTES            shift and go to state 113
    LPAREN          shift and go to state 114

    g_expression                   shift and go to state 172
    m_expression                   shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    variable                       shift and go to state 105
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 134

    (104) boolean_operator -> AND .

    ID              reduce using rule 104 (boolean_operator -> AND .)
    CTEI            reduce using rule 104 (boolean_operator -> AND .)
    CTEF            reduce using rule 104 (boolean_operator -> AND .)
    CTEC            reduce using rule 104 (boolean_operator -> AND .)
    CTEB            reduce using rule 104 (boolean_operator -> AND .)
    CTES            reduce using rule 104 (boolean_operator -> AND .)
    LPAREN          reduce using rule 104 (boolean_operator -> AND .)


state 135

    (105) boolean_operator -> OR .

    ID              reduce using rule 105 (boolean_operator -> OR .)
    CTEI            reduce using rule 105 (boolean_operator -> OR .)
    CTEF            reduce using rule 105 (boolean_operator -> OR .)
    CTEC            reduce using rule 105 (boolean_operator -> OR .)
    CTEB            reduce using rule 105 (boolean_operator -> OR .)
    CTES            reduce using rule 105 (boolean_operator -> OR .)
    LPAREN          reduce using rule 105 (boolean_operator -> OR .)


state 136

    (76) expression -> NOT t_expression .
    (84) t_expression -> t_expression . boolean_operator g_expression
    (104) boolean_operator -> . AND
    (105) boolean_operator -> . OR

    RBRACK          reduce using rule 76 (expression -> NOT t_expression .)
    SEMICOLON       reduce using rule 76 (expression -> NOT t_expression .)
    RPAREN          reduce using rule 76 (expression -> NOT t_expression .)
    COMMA           reduce using rule 76 (expression -> NOT t_expression .)
    FROM            reduce using rule 76 (expression -> NOT t_expression .)
    AND             shift and go to state 134
    OR              shift and go to state 135

    boolean_operator               shift and go to state 133

state 137

    (86) g_expression -> g_expression comparison_operator . m_expression
    (87) m_expression -> . term
    (88) m_expression -> . m_expression addition_operator term
    (89) term -> . factor
    (90) term -> . term multiplication_operator factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    CTES            shift and go to state 113
    LPAREN          shift and go to state 114

    m_expression                   shift and go to state 173
    term                           shift and go to state 103
    factor                         shift and go to state 104
    variable                       shift and go to state 105
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 138

    (96) comparison_operator -> LESS .

    ID              reduce using rule 96 (comparison_operator -> LESS .)
    CTEI            reduce using rule 96 (comparison_operator -> LESS .)
    CTEF            reduce using rule 96 (comparison_operator -> LESS .)
    CTEC            reduce using rule 96 (comparison_operator -> LESS .)
    CTEB            reduce using rule 96 (comparison_operator -> LESS .)
    CTES            reduce using rule 96 (comparison_operator -> LESS .)
    LPAREN          reduce using rule 96 (comparison_operator -> LESS .)


state 139

    (97) comparison_operator -> GREATER .

    ID              reduce using rule 97 (comparison_operator -> GREATER .)
    CTEI            reduce using rule 97 (comparison_operator -> GREATER .)
    CTEF            reduce using rule 97 (comparison_operator -> GREATER .)
    CTEC            reduce using rule 97 (comparison_operator -> GREATER .)
    CTEB            reduce using rule 97 (comparison_operator -> GREATER .)
    CTES            reduce using rule 97 (comparison_operator -> GREATER .)
    LPAREN          reduce using rule 97 (comparison_operator -> GREATER .)


state 140

    (98) comparison_operator -> EQUALS .

    ID              reduce using rule 98 (comparison_operator -> EQUALS .)
    CTEI            reduce using rule 98 (comparison_operator -> EQUALS .)
    CTEF            reduce using rule 98 (comparison_operator -> EQUALS .)
    CTEC            reduce using rule 98 (comparison_operator -> EQUALS .)
    CTEB            reduce using rule 98 (comparison_operator -> EQUALS .)
    CTES            reduce using rule 98 (comparison_operator -> EQUALS .)
    LPAREN          reduce using rule 98 (comparison_operator -> EQUALS .)


state 141

    (99) comparison_operator -> NOTEQUAL .

    ID              reduce using rule 99 (comparison_operator -> NOTEQUAL .)
    CTEI            reduce using rule 99 (comparison_operator -> NOTEQUAL .)
    CTEF            reduce using rule 99 (comparison_operator -> NOTEQUAL .)
    CTEC            reduce using rule 99 (comparison_operator -> NOTEQUAL .)
    CTEB            reduce using rule 99 (comparison_operator -> NOTEQUAL .)
    CTES            reduce using rule 99 (comparison_operator -> NOTEQUAL .)
    LPAREN          reduce using rule 99 (comparison_operator -> NOTEQUAL .)


state 142

    (100) comparison_operator -> GREATERTHAN .

    ID              reduce using rule 100 (comparison_operator -> GREATERTHAN .)
    CTEI            reduce using rule 100 (comparison_operator -> GREATERTHAN .)
    CTEF            reduce using rule 100 (comparison_operator -> GREATERTHAN .)
    CTEC            reduce using rule 100 (comparison_operator -> GREATERTHAN .)
    CTEB            reduce using rule 100 (comparison_operator -> GREATERTHAN .)
    CTES            reduce using rule 100 (comparison_operator -> GREATERTHAN .)
    LPAREN          reduce using rule 100 (comparison_operator -> GREATERTHAN .)


state 143

    (101) comparison_operator -> LESSTHAN .

    ID              reduce using rule 101 (comparison_operator -> LESSTHAN .)
    CTEI            reduce using rule 101 (comparison_operator -> LESSTHAN .)
    CTEF            reduce using rule 101 (comparison_operator -> LESSTHAN .)
    CTEC            reduce using rule 101 (comparison_operator -> LESSTHAN .)
    CTEB            reduce using rule 101 (comparison_operator -> LESSTHAN .)
    CTES            reduce using rule 101 (comparison_operator -> LESSTHAN .)
    LPAREN          reduce using rule 101 (comparison_operator -> LESSTHAN .)


state 144

    (88) m_expression -> m_expression addition_operator . term
    (89) term -> . factor
    (90) term -> . term multiplication_operator factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    CTES            shift and go to state 113
    LPAREN          shift and go to state 114

    term                           shift and go to state 174
    factor                         shift and go to state 104
    variable                       shift and go to state 105
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 145

    (102) addition_operator -> PLUS .

    ID              reduce using rule 102 (addition_operator -> PLUS .)
    CTEI            reduce using rule 102 (addition_operator -> PLUS .)
    CTEF            reduce using rule 102 (addition_operator -> PLUS .)
    CTEC            reduce using rule 102 (addition_operator -> PLUS .)
    CTEB            reduce using rule 102 (addition_operator -> PLUS .)
    CTES            reduce using rule 102 (addition_operator -> PLUS .)
    LPAREN          reduce using rule 102 (addition_operator -> PLUS .)


state 146

    (103) addition_operator -> MINUS .

    ID              reduce using rule 103 (addition_operator -> MINUS .)
    CTEI            reduce using rule 103 (addition_operator -> MINUS .)
    CTEF            reduce using rule 103 (addition_operator -> MINUS .)
    CTEC            reduce using rule 103 (addition_operator -> MINUS .)
    CTEB            reduce using rule 103 (addition_operator -> MINUS .)
    CTES            reduce using rule 103 (addition_operator -> MINUS .)
    LPAREN          reduce using rule 103 (addition_operator -> MINUS .)


state 147

    (90) term -> term multiplication_operator . factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    CTES            shift and go to state 113
    LPAREN          shift and go to state 114

    factor                         shift and go to state 175
    variable                       shift and go to state 105
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 148

    (106) multiplication_operator -> TIMES .

    ID              reduce using rule 106 (multiplication_operator -> TIMES .)
    CTEI            reduce using rule 106 (multiplication_operator -> TIMES .)
    CTEF            reduce using rule 106 (multiplication_operator -> TIMES .)
    CTEC            reduce using rule 106 (multiplication_operator -> TIMES .)
    CTEB            reduce using rule 106 (multiplication_operator -> TIMES .)
    CTES            reduce using rule 106 (multiplication_operator -> TIMES .)
    LPAREN          reduce using rule 106 (multiplication_operator -> TIMES .)


state 149

    (107) multiplication_operator -> DIVIDE .

    ID              reduce using rule 107 (multiplication_operator -> DIVIDE .)
    CTEI            reduce using rule 107 (multiplication_operator -> DIVIDE .)
    CTEF            reduce using rule 107 (multiplication_operator -> DIVIDE .)
    CTEC            reduce using rule 107 (multiplication_operator -> DIVIDE .)
    CTEB            reduce using rule 107 (multiplication_operator -> DIVIDE .)
    CTES            reduce using rule 107 (multiplication_operator -> DIVIDE .)
    LPAREN          reduce using rule 107 (multiplication_operator -> DIVIDE .)


state 150

    (95) expression_parenthesis -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 176


state 151

    (11) main -> MAIN LPAREN RPAREN main_scope var_declarations block .

    END             reduce using rule 11 (main -> MAIN LPAREN RPAREN main_scope var_declarations block .)


state 152

    (82) assingation -> variable ASSIGN expression SEMICOLON .

    FOR             reduce using rule 82 (assingation -> variable ASSIGN expression SEMICOLON .)
    DO              reduce using rule 82 (assingation -> variable ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 82 (assingation -> variable ASSIGN expression SEMICOLON .)
    IF              reduce using rule 82 (assingation -> variable ASSIGN expression SEMICOLON .)
    ID              reduce using rule 82 (assingation -> variable ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 82 (assingation -> variable ASSIGN expression SEMICOLON .)
    READ            reduce using rule 82 (assingation -> variable ASSIGN expression SEMICOLON .)
    GENKEY          reduce using rule 82 (assingation -> variable ASSIGN expression SEMICOLON .)
    ENCRYPT         reduce using rule 82 (assingation -> variable ASSIGN expression SEMICOLON .)
    DECRYPT         reduce using rule 82 (assingation -> variable ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 82 (assingation -> variable ASSIGN expression SEMICOLON .)


state 153

    (51) for -> FOR LPAREN ID for_1 . ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    ASSIGN          shift and go to state 177


state 154

    (52) for_1 -> empty .

    ASSIGN          reduce using rule 52 (for_1 -> empty .)


state 155

    (65) invocation -> ID invocation_1 LPAREN invocation_2 . expressions RPAREN invocation_5 SEMICOLON invocation_6
    (72) expressions -> . expressions COMMA invocation_4 expression invocation_3
    (73) expressions -> . expression invocation_3
    (74) expressions -> . empty
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (118) empty -> .
    (83) t_expression -> . g_expression
    (84) t_expression -> . t_expression boolean_operator g_expression
    (85) g_expression -> . m_expression
    (86) g_expression -> . g_expression comparison_operator m_expression
    (87) m_expression -> . term
    (88) m_expression -> . m_expression addition_operator term
    (89) term -> . factor
    (90) term -> . term multiplication_operator factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 100
    RPAREN          reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    CTES            shift and go to state 113
    LPAREN          shift and go to state 114

    expressions                    shift and go to state 178
    expression                     shift and go to state 179
    empty                          shift and go to state 180
    t_expression                   shift and go to state 99
    g_expression                   shift and go to state 101
    m_expression                   shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    variable                       shift and go to state 105
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 156

    (67) invocation_2 -> empty .

    NOT             reduce using rule 67 (invocation_2 -> empty .)
    ID              reduce using rule 67 (invocation_2 -> empty .)
    CTEI            reduce using rule 67 (invocation_2 -> empty .)
    CTEF            reduce using rule 67 (invocation_2 -> empty .)
    CTEC            reduce using rule 67 (invocation_2 -> empty .)
    CTEB            reduce using rule 67 (invocation_2 -> empty .)
    CTES            reduce using rule 67 (invocation_2 -> empty .)
    LPAREN          reduce using rule 67 (invocation_2 -> empty .)
    RPAREN          reduce using rule 67 (invocation_2 -> empty .)
    COMMA           reduce using rule 67 (invocation_2 -> empty .)


state 157

    (50) do_while -> DO breadcrumb block WHILE . LPAREN expression RPAREN gotot SEMICOLON

    LPAREN          shift and go to state 181


state 158

    (56) while -> WHILE breadcrumb LPAREN expression . RPAREN gotof block

    RPAREN          shift and go to state 182


state 159

    (59) if_else -> IF LPAREN expression RPAREN . gotof block ELSE goto block
    (58) if -> IF LPAREN expression RPAREN . gotof block
    (62) gotof -> . empty
    (118) empty -> .

    LBRACE          reduce using rule 118 (empty -> .)

    gotof                          shift and go to state 183
    empty                          shift and go to state 184

state 160

    (77) print -> PRINT LPAREN print_arguments RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 185


state 161

    (79) print_arguments -> print_arguments COMMA . print_argument
    (80) print_argument -> . CTES
    (81) print_argument -> . expression
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (83) t_expression -> . g_expression
    (84) t_expression -> . t_expression boolean_operator g_expression
    (85) g_expression -> . m_expression
    (86) g_expression -> . g_expression comparison_operator m_expression
    (87) m_expression -> . term
    (88) m_expression -> . m_expression addition_operator term
    (89) term -> . factor
    (90) term -> . term multiplication_operator factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    CTES            shift and go to state 124
    NOT             shift and go to state 100
    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    LPAREN          shift and go to state 114

    print_argument                 shift and go to state 186
    expression                     shift and go to state 125
    t_expression                   shift and go to state 99
    g_expression                   shift and go to state 101
    m_expression                   shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    variable                       shift and go to state 105
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 162

    (48) read -> READ LPAREN ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 187


state 163

    (45) gen_key -> GENKEY LPAREN RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 188


state 164

    (46) encrypt -> ENCRYPT LPAREN ID COMMA . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 189


state 165

    (47) decrypt -> DECRYPT LPAREN ID COMMA . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 190


state 166

    (27) parameter -> simple_type . ID

    ID              shift and go to state 191


state 167

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations
    (24) parameters -> parameters . COMMA parameter
    (18) close_var_declaration -> . empty
    (118) empty -> .

    COMMA           shift and go to state 193
    RPAREN          reduce using rule 118 (empty -> .)

    close_var_declaration          shift and go to state 192
    empty                          shift and go to state 95

state 168

    (25) parameters -> parameter .

    COMMA           reduce using rule 25 (parameters -> parameter .)
    RPAREN          reduce using rule 25 (parameters -> parameter .)


state 169

    (26) parameters -> empty .

    COMMA           reduce using rule 26 (parameters -> empty .)
    RPAREN          reduce using rule 26 (parameters -> empty .)


state 170

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations
    (24) parameters -> parameters . COMMA parameter
    (18) close_var_declaration -> . empty
    (118) empty -> .

    COMMA           shift and go to state 193
    RPAREN          reduce using rule 118 (empty -> .)

    close_var_declaration          shift and go to state 194
    empty                          shift and go to state 95

state 171

    (23) variable -> ID LBRACK expression RBRACK LBRACK . expression RBRACK
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (83) t_expression -> . g_expression
    (84) t_expression -> . t_expression boolean_operator g_expression
    (85) g_expression -> . m_expression
    (86) g_expression -> . g_expression comparison_operator m_expression
    (87) m_expression -> . term
    (88) m_expression -> . m_expression addition_operator term
    (89) term -> . factor
    (90) term -> . term multiplication_operator factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 100
    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    CTES            shift and go to state 113
    LPAREN          shift and go to state 114

    expression                     shift and go to state 195
    t_expression                   shift and go to state 99
    g_expression                   shift and go to state 101
    m_expression                   shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    variable                       shift and go to state 105
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 172

    (84) t_expression -> t_expression boolean_operator g_expression .
    (86) g_expression -> g_expression . comparison_operator m_expression
    (96) comparison_operator -> . LESS
    (97) comparison_operator -> . GREATER
    (98) comparison_operator -> . EQUALS
    (99) comparison_operator -> . NOTEQUAL
    (100) comparison_operator -> . GREATERTHAN
    (101) comparison_operator -> . LESSTHAN

    AND             reduce using rule 84 (t_expression -> t_expression boolean_operator g_expression .)
    OR              reduce using rule 84 (t_expression -> t_expression boolean_operator g_expression .)
    RBRACK          reduce using rule 84 (t_expression -> t_expression boolean_operator g_expression .)
    SEMICOLON       reduce using rule 84 (t_expression -> t_expression boolean_operator g_expression .)
    RPAREN          reduce using rule 84 (t_expression -> t_expression boolean_operator g_expression .)
    COMMA           reduce using rule 84 (t_expression -> t_expression boolean_operator g_expression .)
    FROM            reduce using rule 84 (t_expression -> t_expression boolean_operator g_expression .)
    LESS            shift and go to state 138
    GREATER         shift and go to state 139
    EQUALS          shift and go to state 140
    NOTEQUAL        shift and go to state 141
    GREATERTHAN     shift and go to state 142
    LESSTHAN        shift and go to state 143

    comparison_operator            shift and go to state 137

state 173

    (86) g_expression -> g_expression comparison_operator m_expression .
    (88) m_expression -> m_expression . addition_operator term
    (102) addition_operator -> . PLUS
    (103) addition_operator -> . MINUS

    LESS            reduce using rule 86 (g_expression -> g_expression comparison_operator m_expression .)
    GREATER         reduce using rule 86 (g_expression -> g_expression comparison_operator m_expression .)
    EQUALS          reduce using rule 86 (g_expression -> g_expression comparison_operator m_expression .)
    NOTEQUAL        reduce using rule 86 (g_expression -> g_expression comparison_operator m_expression .)
    GREATERTHAN     reduce using rule 86 (g_expression -> g_expression comparison_operator m_expression .)
    LESSTHAN        reduce using rule 86 (g_expression -> g_expression comparison_operator m_expression .)
    AND             reduce using rule 86 (g_expression -> g_expression comparison_operator m_expression .)
    OR              reduce using rule 86 (g_expression -> g_expression comparison_operator m_expression .)
    RBRACK          reduce using rule 86 (g_expression -> g_expression comparison_operator m_expression .)
    SEMICOLON       reduce using rule 86 (g_expression -> g_expression comparison_operator m_expression .)
    RPAREN          reduce using rule 86 (g_expression -> g_expression comparison_operator m_expression .)
    COMMA           reduce using rule 86 (g_expression -> g_expression comparison_operator m_expression .)
    FROM            reduce using rule 86 (g_expression -> g_expression comparison_operator m_expression .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146

    addition_operator              shift and go to state 144

state 174

    (88) m_expression -> m_expression addition_operator term .
    (90) term -> term . multiplication_operator factor
    (106) multiplication_operator -> . TIMES
    (107) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 88 (m_expression -> m_expression addition_operator term .)
    MINUS           reduce using rule 88 (m_expression -> m_expression addition_operator term .)
    LESS            reduce using rule 88 (m_expression -> m_expression addition_operator term .)
    GREATER         reduce using rule 88 (m_expression -> m_expression addition_operator term .)
    EQUALS          reduce using rule 88 (m_expression -> m_expression addition_operator term .)
    NOTEQUAL        reduce using rule 88 (m_expression -> m_expression addition_operator term .)
    GREATERTHAN     reduce using rule 88 (m_expression -> m_expression addition_operator term .)
    LESSTHAN        reduce using rule 88 (m_expression -> m_expression addition_operator term .)
    AND             reduce using rule 88 (m_expression -> m_expression addition_operator term .)
    OR              reduce using rule 88 (m_expression -> m_expression addition_operator term .)
    RBRACK          reduce using rule 88 (m_expression -> m_expression addition_operator term .)
    SEMICOLON       reduce using rule 88 (m_expression -> m_expression addition_operator term .)
    RPAREN          reduce using rule 88 (m_expression -> m_expression addition_operator term .)
    COMMA           reduce using rule 88 (m_expression -> m_expression addition_operator term .)
    FROM            reduce using rule 88 (m_expression -> m_expression addition_operator term .)
    TIMES           shift and go to state 148
    DIVIDE          shift and go to state 149

    multiplication_operator        shift and go to state 147

state 175

    (90) term -> term multiplication_operator factor .

    TIMES           reduce using rule 90 (term -> term multiplication_operator factor .)
    DIVIDE          reduce using rule 90 (term -> term multiplication_operator factor .)
    PLUS            reduce using rule 90 (term -> term multiplication_operator factor .)
    MINUS           reduce using rule 90 (term -> term multiplication_operator factor .)
    LESS            reduce using rule 90 (term -> term multiplication_operator factor .)
    GREATER         reduce using rule 90 (term -> term multiplication_operator factor .)
    EQUALS          reduce using rule 90 (term -> term multiplication_operator factor .)
    NOTEQUAL        reduce using rule 90 (term -> term multiplication_operator factor .)
    GREATERTHAN     reduce using rule 90 (term -> term multiplication_operator factor .)
    LESSTHAN        reduce using rule 90 (term -> term multiplication_operator factor .)
    AND             reduce using rule 90 (term -> term multiplication_operator factor .)
    OR              reduce using rule 90 (term -> term multiplication_operator factor .)
    RBRACK          reduce using rule 90 (term -> term multiplication_operator factor .)
    SEMICOLON       reduce using rule 90 (term -> term multiplication_operator factor .)
    RPAREN          reduce using rule 90 (term -> term multiplication_operator factor .)
    COMMA           reduce using rule 90 (term -> term multiplication_operator factor .)
    FROM            reduce using rule 90 (term -> term multiplication_operator factor .)


state 176

    (95) expression_parenthesis -> LPAREN expression RPAREN .

    TIMES           reduce using rule 95 (expression_parenthesis -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 95 (expression_parenthesis -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 95 (expression_parenthesis -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 95 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESS            reduce using rule 95 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 95 (expression_parenthesis -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 95 (expression_parenthesis -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 95 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 95 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 95 (expression_parenthesis -> LPAREN expression RPAREN .)
    AND             reduce using rule 95 (expression_parenthesis -> LPAREN expression RPAREN .)
    OR              reduce using rule 95 (expression_parenthesis -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 95 (expression_parenthesis -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 95 (expression_parenthesis -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 95 (expression_parenthesis -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 95 (expression_parenthesis -> LPAREN expression RPAREN .)
    FROM            reduce using rule 95 (expression_parenthesis -> LPAREN expression RPAREN .)


state 177

    (51) for -> FOR LPAREN ID for_1 ASSIGN . expression for_2 FROM expression RPAREN for_3 DO block for_4
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (83) t_expression -> . g_expression
    (84) t_expression -> . t_expression boolean_operator g_expression
    (85) g_expression -> . m_expression
    (86) g_expression -> . g_expression comparison_operator m_expression
    (87) m_expression -> . term
    (88) m_expression -> . m_expression addition_operator term
    (89) term -> . factor
    (90) term -> . term multiplication_operator factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 100
    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    CTES            shift and go to state 113
    LPAREN          shift and go to state 114

    expression                     shift and go to state 196
    t_expression                   shift and go to state 99
    g_expression                   shift and go to state 101
    m_expression                   shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    variable                       shift and go to state 105
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 178

    (65) invocation -> ID invocation_1 LPAREN invocation_2 expressions . RPAREN invocation_5 SEMICOLON invocation_6
    (72) expressions -> expressions . COMMA invocation_4 expression invocation_3

    RPAREN          shift and go to state 197
    COMMA           shift and go to state 198


state 179

    (73) expressions -> expression . invocation_3
    (68) invocation_3 -> . empty
    (118) empty -> .

    RPAREN          reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)

    invocation_3                   shift and go to state 199
    empty                          shift and go to state 200

state 180

    (74) expressions -> empty .

    RPAREN          reduce using rule 74 (expressions -> empty .)
    COMMA           reduce using rule 74 (expressions -> empty .)


state 181

    (50) do_while -> DO breadcrumb block WHILE LPAREN . expression RPAREN gotot SEMICOLON
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (83) t_expression -> . g_expression
    (84) t_expression -> . t_expression boolean_operator g_expression
    (85) g_expression -> . m_expression
    (86) g_expression -> . g_expression comparison_operator m_expression
    (87) m_expression -> . term
    (88) m_expression -> . m_expression addition_operator term
    (89) term -> . factor
    (90) term -> . term multiplication_operator factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 100
    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    CTES            shift and go to state 113
    LPAREN          shift and go to state 114

    expression                     shift and go to state 201
    t_expression                   shift and go to state 99
    g_expression                   shift and go to state 101
    m_expression                   shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    variable                       shift and go to state 105
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 182

    (56) while -> WHILE breadcrumb LPAREN expression RPAREN . gotof block
    (62) gotof -> . empty
    (118) empty -> .

    LBRACE          reduce using rule 118 (empty -> .)

    gotof                          shift and go to state 202
    empty                          shift and go to state 184

state 183

    (59) if_else -> IF LPAREN expression RPAREN gotof . block ELSE goto block
    (58) if -> IF LPAREN expression RPAREN gotof . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 203

state 184

    (62) gotof -> empty .

    LBRACE          reduce using rule 62 (gotof -> empty .)


state 185

    (77) print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .

    FOR             reduce using rule 77 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    DO              reduce using rule 77 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    WHILE           reduce using rule 77 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    IF              reduce using rule 77 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ID              reduce using rule 77 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    PRINT           reduce using rule 77 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    READ            reduce using rule 77 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    GENKEY          reduce using rule 77 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ENCRYPT         reduce using rule 77 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    DECRYPT         reduce using rule 77 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    RBRACE          reduce using rule 77 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)


state 186

    (79) print_arguments -> print_arguments COMMA print_argument .

    RPAREN          reduce using rule 79 (print_arguments -> print_arguments COMMA print_argument .)
    COMMA           reduce using rule 79 (print_arguments -> print_arguments COMMA print_argument .)


state 187

    (48) read -> READ LPAREN ID RPAREN SEMICOLON .

    FOR             reduce using rule 48 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    DO              reduce using rule 48 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 48 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    IF              reduce using rule 48 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    ID              reduce using rule 48 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    PRINT           reduce using rule 48 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    READ            reduce using rule 48 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    GENKEY          reduce using rule 48 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    ENCRYPT         reduce using rule 48 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    DECRYPT         reduce using rule 48 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    RBRACE          reduce using rule 48 (read -> READ LPAREN ID RPAREN SEMICOLON .)


state 188

    (45) gen_key -> GENKEY LPAREN RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 204


state 189

    (46) encrypt -> ENCRYPT LPAREN ID COMMA ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 205


state 190

    (47) decrypt -> DECRYPT LPAREN ID COMMA ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 206


state 191

    (27) parameter -> simple_type ID .

    COMMA           reduce using rule 27 (parameter -> simple_type ID .)
    RPAREN          reduce using rule 27 (parameter -> simple_type ID .)


state 192

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations

    RPAREN          shift and go to state 207


state 193

    (24) parameters -> parameters COMMA . parameter
    (27) parameter -> . simple_type ID
    (108) simple_type -> . INT
    (109) simple_type -> . FLOAT
    (110) simple_type -> . CHAR
    (111) simple_type -> . BOOLEAN
    (112) simple_type -> . STRING

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    parameter                      shift and go to state 208
    simple_type                    shift and go to state 166

state 194

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations

    RPAREN          shift and go to state 209


state 195

    (23) variable -> ID LBRACK expression RBRACK LBRACK expression . RBRACK

    RBRACK          shift and go to state 210


state 196

    (51) for -> FOR LPAREN ID for_1 ASSIGN expression . for_2 FROM expression RPAREN for_3 DO block for_4
    (53) for_2 -> . empty
    (118) empty -> .

    FROM            reduce using rule 118 (empty -> .)

    for_2                          shift and go to state 211
    empty                          shift and go to state 212

state 197

    (65) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN . invocation_5 SEMICOLON invocation_6
    (70) invocation_5 -> . empty
    (118) empty -> .

    SEMICOLON       reduce using rule 118 (empty -> .)

    invocation_5                   shift and go to state 213
    empty                          shift and go to state 214

state 198

    (72) expressions -> expressions COMMA . invocation_4 expression invocation_3
    (69) invocation_4 -> . empty
    (118) empty -> .

    NOT             reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    CTEI            reduce using rule 118 (empty -> .)
    CTEF            reduce using rule 118 (empty -> .)
    CTEC            reduce using rule 118 (empty -> .)
    CTEB            reduce using rule 118 (empty -> .)
    CTES            reduce using rule 118 (empty -> .)
    LPAREN          reduce using rule 118 (empty -> .)

    invocation_4                   shift and go to state 215
    empty                          shift and go to state 216

state 199

    (73) expressions -> expression invocation_3 .

    RPAREN          reduce using rule 73 (expressions -> expression invocation_3 .)
    COMMA           reduce using rule 73 (expressions -> expression invocation_3 .)


state 200

    (68) invocation_3 -> empty .

    RPAREN          reduce using rule 68 (invocation_3 -> empty .)
    COMMA           reduce using rule 68 (invocation_3 -> empty .)


state 201

    (50) do_while -> DO breadcrumb block WHILE LPAREN expression . RPAREN gotot SEMICOLON

    RPAREN          shift and go to state 217


state 202

    (56) while -> WHILE breadcrumb LPAREN expression RPAREN gotof . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 218

state 203

    (59) if_else -> IF LPAREN expression RPAREN gotof block . ELSE goto block
    (58) if -> IF LPAREN expression RPAREN gotof block .

    ELSE            shift and go to state 219
    FOR             reduce using rule 58 (if -> IF LPAREN expression RPAREN gotof block .)
    DO              reduce using rule 58 (if -> IF LPAREN expression RPAREN gotof block .)
    WHILE           reduce using rule 58 (if -> IF LPAREN expression RPAREN gotof block .)
    IF              reduce using rule 58 (if -> IF LPAREN expression RPAREN gotof block .)
    ID              reduce using rule 58 (if -> IF LPAREN expression RPAREN gotof block .)
    PRINT           reduce using rule 58 (if -> IF LPAREN expression RPAREN gotof block .)
    READ            reduce using rule 58 (if -> IF LPAREN expression RPAREN gotof block .)
    GENKEY          reduce using rule 58 (if -> IF LPAREN expression RPAREN gotof block .)
    ENCRYPT         reduce using rule 58 (if -> IF LPAREN expression RPAREN gotof block .)
    DECRYPT         reduce using rule 58 (if -> IF LPAREN expression RPAREN gotof block .)
    RBRACE          reduce using rule 58 (if -> IF LPAREN expression RPAREN gotof block .)


state 204

    (45) gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 45 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 45 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 45 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 45 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 45 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 45 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 45 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 45 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 45 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 45 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 45 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)


state 205

    (46) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 220


state 206

    (47) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 221


state 207

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (118) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 118 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 222
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 208

    (24) parameters -> parameters COMMA parameter .

    COMMA           reduce using rule 24 (parameters -> parameters COMMA parameter .)
    RPAREN          reduce using rule 24 (parameters -> parameters COMMA parameter .)


state 209

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (118) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 118 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 223
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 210

    (23) variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .

    COMMA           reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    TIMES           reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    PLUS            reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    MINUS           reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESS            reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATER         reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    EQUALS          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    AND             reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    OR              reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RBRACK          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RPAREN          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    FROM            reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)


state 211

    (51) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 . FROM expression RPAREN for_3 DO block for_4

    FROM            shift and go to state 224


state 212

    (53) for_2 -> empty .

    FROM            reduce using rule 53 (for_2 -> empty .)


state 213

    (65) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 . SEMICOLON invocation_6

    SEMICOLON       shift and go to state 225


state 214

    (70) invocation_5 -> empty .

    SEMICOLON       reduce using rule 70 (invocation_5 -> empty .)


state 215

    (72) expressions -> expressions COMMA invocation_4 . expression invocation_3
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (83) t_expression -> . g_expression
    (84) t_expression -> . t_expression boolean_operator g_expression
    (85) g_expression -> . m_expression
    (86) g_expression -> . g_expression comparison_operator m_expression
    (87) m_expression -> . term
    (88) m_expression -> . m_expression addition_operator term
    (89) term -> . factor
    (90) term -> . term multiplication_operator factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 100
    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    CTES            shift and go to state 113
    LPAREN          shift and go to state 114

    expression                     shift and go to state 226
    t_expression                   shift and go to state 99
    g_expression                   shift and go to state 101
    m_expression                   shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    variable                       shift and go to state 105
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 216

    (69) invocation_4 -> empty .

    NOT             reduce using rule 69 (invocation_4 -> empty .)
    ID              reduce using rule 69 (invocation_4 -> empty .)
    CTEI            reduce using rule 69 (invocation_4 -> empty .)
    CTEF            reduce using rule 69 (invocation_4 -> empty .)
    CTEC            reduce using rule 69 (invocation_4 -> empty .)
    CTEB            reduce using rule 69 (invocation_4 -> empty .)
    CTES            reduce using rule 69 (invocation_4 -> empty .)
    LPAREN          reduce using rule 69 (invocation_4 -> empty .)


state 217

    (50) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN . gotot SEMICOLON
    (60) gotot -> . empty
    (118) empty -> .

    SEMICOLON       reduce using rule 118 (empty -> .)

    gotot                          shift and go to state 227
    empty                          shift and go to state 228

state 218

    (56) while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .

    FOR             reduce using rule 56 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    DO              reduce using rule 56 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    WHILE           reduce using rule 56 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    IF              reduce using rule 56 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    ID              reduce using rule 56 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    PRINT           reduce using rule 56 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    READ            reduce using rule 56 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    GENKEY          reduce using rule 56 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    ENCRYPT         reduce using rule 56 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    DECRYPT         reduce using rule 56 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    RBRACE          reduce using rule 56 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)


state 219

    (59) if_else -> IF LPAREN expression RPAREN gotof block ELSE . goto block
    (61) goto -> . empty
    (118) empty -> .

    LBRACE          reduce using rule 118 (empty -> .)

    goto                           shift and go to state 229
    empty                          shift and go to state 230

state 220

    (46) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 231


state 221

    (47) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 232


state 222

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .

    LBRACE          reduce using rule 7 (function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .)


state 223

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .

    LBRACE          reduce using rule 8 (function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .)


state 224

    (51) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM . expression RPAREN for_3 DO block for_4
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (83) t_expression -> . g_expression
    (84) t_expression -> . t_expression boolean_operator g_expression
    (85) g_expression -> . m_expression
    (86) g_expression -> . g_expression comparison_operator m_expression
    (87) m_expression -> . term
    (88) m_expression -> . m_expression addition_operator term
    (89) term -> . factor
    (90) term -> . term multiplication_operator factor
    (91) factor -> . variable
    (92) factor -> . cte
    (93) factor -> . invocation
    (94) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (113) cte -> . CTEI
    (114) cte -> . CTEF
    (115) cte -> . CTEC
    (116) cte -> . CTEB
    (117) cte -> . CTES
    (65) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (95) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 100
    ID              shift and go to state 97
    CTEI            shift and go to state 109
    CTEF            shift and go to state 110
    CTEC            shift and go to state 111
    CTEB            shift and go to state 112
    CTES            shift and go to state 113
    LPAREN          shift and go to state 114

    expression                     shift and go to state 233
    t_expression                   shift and go to state 99
    g_expression                   shift and go to state 101
    m_expression                   shift and go to state 102
    term                           shift and go to state 103
    factor                         shift and go to state 104
    variable                       shift and go to state 105
    cte                            shift and go to state 106
    invocation                     shift and go to state 107
    expression_parenthesis         shift and go to state 108

state 225

    (65) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON . invocation_6
    (71) invocation_6 -> . empty
    (118) empty -> .

    FOR             reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    PRINT           reduce using rule 118 (empty -> .)
    READ            reduce using rule 118 (empty -> .)
    GENKEY          reduce using rule 118 (empty -> .)
    ENCRYPT         reduce using rule 118 (empty -> .)
    DECRYPT         reduce using rule 118 (empty -> .)
    RBRACE          reduce using rule 118 (empty -> .)
    TIMES           reduce using rule 118 (empty -> .)
    DIVIDE          reduce using rule 118 (empty -> .)
    PLUS            reduce using rule 118 (empty -> .)
    MINUS           reduce using rule 118 (empty -> .)
    LESS            reduce using rule 118 (empty -> .)
    GREATER         reduce using rule 118 (empty -> .)
    EQUALS          reduce using rule 118 (empty -> .)
    NOTEQUAL        reduce using rule 118 (empty -> .)
    GREATERTHAN     reduce using rule 118 (empty -> .)
    LESSTHAN        reduce using rule 118 (empty -> .)
    AND             reduce using rule 118 (empty -> .)
    OR              reduce using rule 118 (empty -> .)
    RBRACK          reduce using rule 118 (empty -> .)
    SEMICOLON       reduce using rule 118 (empty -> .)
    RPAREN          reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)
    FROM            reduce using rule 118 (empty -> .)

    invocation_6                   shift and go to state 234
    empty                          shift and go to state 235

state 226

    (72) expressions -> expressions COMMA invocation_4 expression . invocation_3
    (68) invocation_3 -> . empty
    (118) empty -> .

    RPAREN          reduce using rule 118 (empty -> .)
    COMMA           reduce using rule 118 (empty -> .)

    invocation_3                   shift and go to state 236
    empty                          shift and go to state 200

state 227

    (50) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot . SEMICOLON

    SEMICOLON       shift and go to state 237


state 228

    (60) gotot -> empty .

    SEMICOLON       reduce using rule 60 (gotot -> empty .)


state 229

    (59) if_else -> IF LPAREN expression RPAREN gotof block ELSE goto . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 238

state 230

    (61) goto -> empty .

    LBRACE          reduce using rule 61 (goto -> empty .)


state 231

    (46) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 239


state 232

    (47) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 240


state 233

    (51) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression . RPAREN for_3 DO block for_4

    RPAREN          shift and go to state 241


state 234

    (65) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .

    FOR             reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DO              reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    WHILE           reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    IF              reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ID              reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PRINT           reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    READ            reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GENKEY          reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ENCRYPT         reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DECRYPT         reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACE          reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    TIMES           reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DIVIDE          reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PLUS            reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    MINUS           reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESS            reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATER         reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    EQUALS          reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    NOTEQUAL        reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATERTHAN     reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESSTHAN        reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    AND             reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    OR              reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACK          reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    SEMICOLON       reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RPAREN          reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    COMMA           reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    FROM            reduce using rule 65 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)


state 235

    (71) invocation_6 -> empty .

    FOR             reduce using rule 71 (invocation_6 -> empty .)
    DO              reduce using rule 71 (invocation_6 -> empty .)
    WHILE           reduce using rule 71 (invocation_6 -> empty .)
    IF              reduce using rule 71 (invocation_6 -> empty .)
    ID              reduce using rule 71 (invocation_6 -> empty .)
    PRINT           reduce using rule 71 (invocation_6 -> empty .)
    READ            reduce using rule 71 (invocation_6 -> empty .)
    GENKEY          reduce using rule 71 (invocation_6 -> empty .)
    ENCRYPT         reduce using rule 71 (invocation_6 -> empty .)
    DECRYPT         reduce using rule 71 (invocation_6 -> empty .)
    RBRACE          reduce using rule 71 (invocation_6 -> empty .)
    TIMES           reduce using rule 71 (invocation_6 -> empty .)
    DIVIDE          reduce using rule 71 (invocation_6 -> empty .)
    PLUS            reduce using rule 71 (invocation_6 -> empty .)
    MINUS           reduce using rule 71 (invocation_6 -> empty .)
    LESS            reduce using rule 71 (invocation_6 -> empty .)
    GREATER         reduce using rule 71 (invocation_6 -> empty .)
    EQUALS          reduce using rule 71 (invocation_6 -> empty .)
    NOTEQUAL        reduce using rule 71 (invocation_6 -> empty .)
    GREATERTHAN     reduce using rule 71 (invocation_6 -> empty .)
    LESSTHAN        reduce using rule 71 (invocation_6 -> empty .)
    AND             reduce using rule 71 (invocation_6 -> empty .)
    OR              reduce using rule 71 (invocation_6 -> empty .)
    RBRACK          reduce using rule 71 (invocation_6 -> empty .)
    SEMICOLON       reduce using rule 71 (invocation_6 -> empty .)
    RPAREN          reduce using rule 71 (invocation_6 -> empty .)
    COMMA           reduce using rule 71 (invocation_6 -> empty .)
    FROM            reduce using rule 71 (invocation_6 -> empty .)


state 236

    (72) expressions -> expressions COMMA invocation_4 expression invocation_3 .

    RPAREN          reduce using rule 72 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)
    COMMA           reduce using rule 72 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)


state 237

    (50) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .

    FOR             reduce using rule 50 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    DO              reduce using rule 50 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    WHILE           reduce using rule 50 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    IF              reduce using rule 50 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ID              reduce using rule 50 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    PRINT           reduce using rule 50 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    READ            reduce using rule 50 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    GENKEY          reduce using rule 50 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ENCRYPT         reduce using rule 50 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    DECRYPT         reduce using rule 50 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    RBRACE          reduce using rule 50 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)


state 238

    (59) if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .

    FOR             reduce using rule 59 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    DO              reduce using rule 59 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    WHILE           reduce using rule 59 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    IF              reduce using rule 59 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    ID              reduce using rule 59 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    PRINT           reduce using rule 59 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    READ            reduce using rule 59 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    GENKEY          reduce using rule 59 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    ENCRYPT         reduce using rule 59 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    DECRYPT         reduce using rule 59 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    RBRACE          reduce using rule 59 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)


state 239

    (46) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 46 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 46 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 46 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 46 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 46 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 46 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 46 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 46 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 46 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 46 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 46 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)


state 240

    (47) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 47 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 47 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 47 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 47 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 47 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 47 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 47 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 47 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 47 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 47 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 47 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)


state 241

    (51) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN . for_3 DO block for_4
    (54) for_3 -> . empty
    (118) empty -> .

    DO              reduce using rule 118 (empty -> .)

    for_3                          shift and go to state 242
    empty                          shift and go to state 243

state 242

    (51) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 . DO block for_4

    DO              shift and go to state 244


state 243

    (54) for_3 -> empty .

    DO              reduce using rule 54 (for_3 -> empty .)


state 244

    (51) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO . block for_4
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 245

state 245

    (51) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block . for_4
    (55) for_4 -> . empty
    (118) empty -> .

    FOR             reduce using rule 118 (empty -> .)
    DO              reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    PRINT           reduce using rule 118 (empty -> .)
    READ            reduce using rule 118 (empty -> .)
    GENKEY          reduce using rule 118 (empty -> .)
    ENCRYPT         reduce using rule 118 (empty -> .)
    DECRYPT         reduce using rule 118 (empty -> .)
    RBRACE          reduce using rule 118 (empty -> .)

    for_4                          shift and go to state 246
    empty                          shift and go to state 247

state 246

    (51) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .

    FOR             reduce using rule 51 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    DO              reduce using rule 51 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    WHILE           reduce using rule 51 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    IF              reduce using rule 51 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    ID              reduce using rule 51 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    PRINT           reduce using rule 51 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    READ            reduce using rule 51 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    GENKEY          reduce using rule 51 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    ENCRYPT         reduce using rule 51 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    DECRYPT         reduce using rule 51 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    RBRACE          reduce using rule 51 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)


state 247

    (55) for_4 -> empty .

    FOR             reduce using rule 55 (for_4 -> empty .)
    DO              reduce using rule 55 (for_4 -> empty .)
    WHILE           reduce using rule 55 (for_4 -> empty .)
    IF              reduce using rule 55 (for_4 -> empty .)
    ID              reduce using rule 55 (for_4 -> empty .)
    PRINT           reduce using rule 55 (for_4 -> empty .)
    READ            reduce using rule 55 (for_4 -> empty .)
    GENKEY          reduce using rule 55 (for_4 -> empty .)
    ENCRYPT         reduce using rule 55 (for_4 -> empty .)
    DECRYPT         reduce using rule 55 (for_4 -> empty .)
    RBRACE          reduce using rule 55 (for_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 7 resolved as shift
WARNING: reduce/reduce conflict in state 124 resolved using rule (print_argument -> CTES)
WARNING: rejected rule (cte -> CTES) in state 124
