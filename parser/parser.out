Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMENT
    STRING
    THEN

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END
Rule 2     global_scope -> empty
Rule 3     functions -> functions function
Rule 4     functions -> function
Rule 5     functions -> empty
Rule 6     function -> FUNCTION function_signature block
Rule 7     function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
Rule 8     function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
Rule 9     return -> RETURN expressions SEMICOLON
Rule 10    return -> RETURN SEMICOLON
Rule 11    return -> empty
Rule 12    function_1 -> empty
Rule 13    main -> MAIN LPAREN RPAREN main_scope var_declarations block
Rule 14    main_scope -> empty
Rule 15    var_declarations -> var_declaration_list
Rule 16    var_declarations -> empty
Rule 17    var_declaration_list -> var_declaration var_declarations
Rule 18    var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration
Rule 19    open_var_declaration -> empty
Rule 20    close_var_declaration -> empty
Rule 21    variables -> variable
Rule 22    variables -> variable COMMA variables
Rule 23    variable -> ID
Rule 24    variable -> ID LBRACK expression RBRACK
Rule 25    variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK
Rule 26    parameters -> parameters COMMA parameter
Rule 27    parameters -> parameter
Rule 28    parameters -> empty
Rule 29    parameter -> simple_type ID
Rule 30    block -> LBRACE block2 RBRACE
Rule 31    block2 -> block3
Rule 32    block2 -> empty
Rule 33    block3 -> statement block2
Rule 34    statement -> read
Rule 35    statement -> assing_to_call
Rule 36    statement -> assingation
Rule 37    statement -> for
Rule 38    statement -> do_while
Rule 39    statement -> while
Rule 40    statement -> if_else
Rule 41    statement -> invocation
Rule 42    statement -> if
Rule 43    statement -> print
Rule 44    assing_to_call -> variable ASSIGN invocation
Rule 45    do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
Rule 46    for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
Rule 47    for_1 -> empty
Rule 48    for_2 -> empty
Rule 49    for_3 -> empty
Rule 50    for_4 -> empty
Rule 51    while -> WHILE breadcrumb LPAREN expression RPAREN gotof block
Rule 52    breadcrumb -> empty
Rule 53    if -> IF LPAREN expression RPAREN gotof block
Rule 54    if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block
Rule 55    gotot -> empty
Rule 56    goto -> empty
Rule 57    gotof -> empty
Rule 58    read -> READ LPAREN variable_list RPAREN SEMICOLON
Rule 59    variable_list -> variable
Rule 60    variable_list -> variable_list COMMA variable
Rule 61    invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
Rule 62    invocation_1 -> empty
Rule 63    invocation_2 -> empty
Rule 64    invocation_3 -> empty
Rule 65    invocation_4 -> empty
Rule 66    invocation_5 -> empty
Rule 67    invocation_6 -> empty
Rule 68    expressions -> expressions COMMA invocation_4 expression invocation_3
Rule 69    expressions -> expression invocation_3
Rule 70    expressions -> empty
Rule 71    expression -> t_expression
Rule 72    expression -> NOT t_expression
Rule 73    print -> PRINT LPAREN print_arguments RPAREN SEMICOLON
Rule 74    print_arguments -> print_argument
Rule 75    print_arguments -> print_arguments COMMA print_argument
Rule 76    print_argument -> CTES
Rule 77    print_argument -> expression
Rule 78    assingation -> variable ASSIGN expression SEMICOLON
Rule 79    t_expression -> g_expression
Rule 80    t_expression -> t_expression boolean_operator g_expression
Rule 81    g_expression -> m_expression
Rule 82    g_expression -> g_expression comparison_operator m_expression
Rule 83    m_expression -> term
Rule 84    m_expression -> m_expression addition_operator term
Rule 85    term -> factor
Rule 86    term -> term multiplication_operator factor
Rule 87    factor -> variable
Rule 88    factor -> cte
Rule 89    factor -> invocation
Rule 90    factor -> expression_parenthesis
Rule 91    expression_parenthesis -> LPAREN expression RPAREN
Rule 92    comparison_operator -> LESS
Rule 93    comparison_operator -> GREATER
Rule 94    comparison_operator -> EQUALS
Rule 95    comparison_operator -> NOTEQUAL
Rule 96    comparison_operator -> GREATERTHAN
Rule 97    comparison_operator -> LESSTHAN
Rule 98    addition_operator -> PLUS
Rule 99    addition_operator -> MINUS
Rule 100   boolean_operator -> AND
Rule 101   boolean_operator -> OR
Rule 102   multiplication_operator -> TIMES
Rule 103   multiplication_operator -> DIVIDE
Rule 104   simple_type -> INT
Rule 105   simple_type -> FLOAT
Rule 106   simple_type -> CHAR
Rule 107   simple_type -> BOOLEAN
Rule 108   cte -> CTEI
Rule 109   cte -> CTEF
Rule 110   cte -> CTEC
Rule 111   cte -> CTEB
Rule 112   empty -> <empty>

Terminals, with rules where they appear

AND                  : 100
ASSIGN               : 44 46 78
BOOLEAN              : 107
CHAR                 : 106
COLON                : 
COMMA                : 22 26 60 68 75
COMMENT              : 
CTEB                 : 111
CTEC                 : 110
CTEF                 : 109
CTEI                 : 108
CTES                 : 76
DIVIDE               : 103
DO                   : 45 46
ELSE                 : 54
END                  : 1
EQUALS               : 94
FLOAT                : 105
FOR                  : 46
FROM                 : 46
FUNCTION             : 6
GREATER              : 93
GREATERTHAN          : 96
ID                   : 1 7 8 23 24 25 29 46 61
IF                   : 53 54
INT                  : 104
LBRACE               : 30
LBRACK               : 24 25 25
LESS                 : 92
LESSTHAN             : 97
LPAREN               : 7 8 13 45 46 51 53 54 58 61 73 91
MAIN                 : 13
MINUS                : 99
NOT                  : 72
NOTEQUAL             : 95
OR                   : 101
PLUS                 : 98
PRINT                : 73
PROGRAM              : 1
RBRACE               : 30
RBRACK               : 24 25 25
READ                 : 58
RETURN               : 9 10
RPAREN               : 7 8 13 45 46 51 53 54 58 61 73 91
SEMICOLON            : 1 9 10 18 45 58 61 73 78
STRING               : 
THEN                 : 
TIMES                : 102
VARIABLE             : 18
VOID                 : 8
WHILE                : 45 51
error                : 

Nonterminals, with rules where they appear

addition_operator    : 84
assing_to_call       : 35
assingation          : 36
block                : 6 13 45 46 51 53 54 54
block2               : 30 33
block3               : 31
boolean_operator     : 80
breadcrumb           : 45 51
close_var_declaration : 7 8 18
comparison_operator  : 82
cte                  : 88
do_while             : 38
empty                : 2 5 11 12 14 16 19 20 28 32 47 48 49 50 52 55 56 57 62 63 64 65 66 67 70
expression           : 24 25 25 45 46 46 51 53 54 68 69 77 78 91
expression_parenthesis : 90
expressions          : 9 61 68
factor               : 85 86
for                  : 37
for_1                : 46
for_2                : 46
for_3                : 46
for_4                : 46
function             : 3 4
function_1           : 7 8
function_signature   : 6
functions            : 1 3
g_expression         : 79 80 82
global_scope         : 1
goto                 : 54
gotof                : 51 53 54
gotot                : 45
if                   : 42
if_else              : 40
invocation           : 41 44 89
invocation_1         : 61
invocation_2         : 61
invocation_3         : 68 69
invocation_4         : 68
invocation_5         : 61
invocation_6         : 61
m_expression         : 81 82 84
main                 : 1
main_scope           : 13
multiplication_operator : 86
open_var_declaration : 7 8 18
parameter            : 26 27
parameters           : 7 8 26
print                : 43
print_argument       : 74 75
print_arguments      : 73 75
program              : 0
read                 : 34
return               : 
simple_type          : 7 18 29
statement            : 33
t_expression         : 71 72 80
term                 : 83 84 86
var_declaration      : 17
var_declaration_list : 15
var_declarations     : 1 7 8 13 17
variable             : 21 22 44 59 60 78 87
variable_list        : 58 60
variables            : 18 22
while                : 39

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON global_scope var_declarations functions main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON global_scope var_declarations functions main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON global_scope var_declarations functions main END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . global_scope var_declarations functions main END
    (2) global_scope -> . empty
    (112) empty -> .

    VARIABLE        reduce using rule 112 (empty -> .)
    FUNCTION        reduce using rule 112 (empty -> .)
    MAIN            reduce using rule 112 (empty -> .)

    global_scope                   shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON global_scope . var_declarations functions main END
    (15) var_declarations -> . var_declaration_list
    (16) var_declarations -> . empty
    (17) var_declaration_list -> . var_declaration var_declarations
    (112) empty -> .
    (18) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 112 (empty -> .)
    MAIN            reduce using rule 112 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 7
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 6

    (2) global_scope -> empty .

    VARIABLE        reduce using rule 2 (global_scope -> empty .)
    FUNCTION        reduce using rule 2 (global_scope -> empty .)
    MAIN            reduce using rule 2 (global_scope -> empty .)


state 7

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations . functions main END
    (3) functions -> . functions function
    (4) functions -> . function
    (5) functions -> . empty
    (6) function -> . FUNCTION function_signature block
    (112) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 112 (empty -> .)

  ! FUNCTION        [ reduce using rule 112 (empty -> .) ]

    functions                      shift and go to state 12
    function                       shift and go to state 13
    empty                          shift and go to state 14

state 8

    (15) var_declarations -> var_declaration_list .

    FUNCTION        reduce using rule 15 (var_declarations -> var_declaration_list .)
    MAIN            reduce using rule 15 (var_declarations -> var_declaration_list .)
    LBRACE          reduce using rule 15 (var_declarations -> var_declaration_list .)


state 9

    (16) var_declarations -> empty .

    FUNCTION        reduce using rule 16 (var_declarations -> empty .)
    MAIN            reduce using rule 16 (var_declarations -> empty .)
    LBRACE          reduce using rule 16 (var_declarations -> empty .)


state 10

    (17) var_declaration_list -> var_declaration . var_declarations
    (15) var_declarations -> . var_declaration_list
    (16) var_declarations -> . empty
    (17) var_declaration_list -> . var_declaration var_declarations
    (112) empty -> .
    (18) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 112 (empty -> .)
    MAIN            reduce using rule 112 (empty -> .)
    LBRACE          reduce using rule 112 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declaration                shift and go to state 10
    var_declarations               shift and go to state 16
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9

state 11

    (18) var_declaration -> VARIABLE . open_var_declaration simple_type variables SEMICOLON close_var_declaration
    (19) open_var_declaration -> . empty
    (112) empty -> .

    INT             reduce using rule 112 (empty -> .)
    FLOAT           reduce using rule 112 (empty -> .)
    CHAR            reduce using rule 112 (empty -> .)
    BOOLEAN         reduce using rule 112 (empty -> .)

    open_var_declaration           shift and go to state 17
    empty                          shift and go to state 18

state 12

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions . main END
    (3) functions -> functions . function
    (13) main -> . MAIN LPAREN RPAREN main_scope var_declarations block
    (6) function -> . FUNCTION function_signature block

    MAIN            shift and go to state 21
    FUNCTION        shift and go to state 15

    main                           shift and go to state 19
    function                       shift and go to state 20

state 13

    (4) functions -> function .

    MAIN            reduce using rule 4 (functions -> function .)
    FUNCTION        reduce using rule 4 (functions -> function .)


state 14

    (5) functions -> empty .

    MAIN            reduce using rule 5 (functions -> empty .)
    FUNCTION        reduce using rule 5 (functions -> empty .)


state 15

    (6) function -> FUNCTION . function_signature block
    (7) function_signature -> . simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (8) function_signature -> . VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (104) simple_type -> . INT
    (105) simple_type -> . FLOAT
    (106) simple_type -> . CHAR
    (107) simple_type -> . BOOLEAN

    VOID            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28

    function_signature             shift and go to state 22
    simple_type                    shift and go to state 23

state 16

    (17) var_declaration_list -> var_declaration var_declarations .

    FUNCTION        reduce using rule 17 (var_declaration_list -> var_declaration var_declarations .)
    MAIN            reduce using rule 17 (var_declaration_list -> var_declaration var_declarations .)
    LBRACE          reduce using rule 17 (var_declaration_list -> var_declaration var_declarations .)


state 17

    (18) var_declaration -> VARIABLE open_var_declaration . simple_type variables SEMICOLON close_var_declaration
    (104) simple_type -> . INT
    (105) simple_type -> . FLOAT
    (106) simple_type -> . CHAR
    (107) simple_type -> . BOOLEAN

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28

    simple_type                    shift and go to state 29

state 18

    (19) open_var_declaration -> empty .

    INT             reduce using rule 19 (open_var_declaration -> empty .)
    FLOAT           reduce using rule 19 (open_var_declaration -> empty .)
    CHAR            reduce using rule 19 (open_var_declaration -> empty .)
    BOOLEAN         reduce using rule 19 (open_var_declaration -> empty .)
    COMMA           reduce using rule 19 (open_var_declaration -> empty .)
    RPAREN          reduce using rule 19 (open_var_declaration -> empty .)


state 19

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main . END

    END             shift and go to state 30


state 20

    (3) functions -> functions function .

    MAIN            reduce using rule 3 (functions -> functions function .)
    FUNCTION        reduce using rule 3 (functions -> functions function .)


state 21

    (13) main -> MAIN . LPAREN RPAREN main_scope var_declarations block

    LPAREN          shift and go to state 31


state 22

    (6) function -> FUNCTION function_signature . block
    (30) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 33

    block                          shift and go to state 32

state 23

    (7) function_signature -> simple_type . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    ID              shift and go to state 34


state 24

    (8) function_signature -> VOID . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    ID              shift and go to state 35


state 25

    (104) simple_type -> INT .

    ID              reduce using rule 104 (simple_type -> INT .)


state 26

    (105) simple_type -> FLOAT .

    ID              reduce using rule 105 (simple_type -> FLOAT .)


state 27

    (106) simple_type -> CHAR .

    ID              reduce using rule 106 (simple_type -> CHAR .)


state 28

    (107) simple_type -> BOOLEAN .

    ID              reduce using rule 107 (simple_type -> BOOLEAN .)


state 29

    (18) var_declaration -> VARIABLE open_var_declaration simple_type . variables SEMICOLON close_var_declaration
    (21) variables -> . variable
    (22) variables -> . variable COMMA variables
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 38

    variables                      shift and go to state 36
    variable                       shift and go to state 37

state 30

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .)


state 31

    (13) main -> MAIN LPAREN . RPAREN main_scope var_declarations block

    RPAREN          shift and go to state 39


state 32

    (6) function -> FUNCTION function_signature block .

    MAIN            reduce using rule 6 (function -> FUNCTION function_signature block .)
    FUNCTION        reduce using rule 6 (function -> FUNCTION function_signature block .)


state 33

    (30) block -> LBRACE . block2 RBRACE
    (31) block2 -> . block3
    (32) block2 -> . empty
    (33) block3 -> . statement block2
    (112) empty -> .
    (34) statement -> . read
    (35) statement -> . assing_to_call
    (36) statement -> . assingation
    (37) statement -> . for
    (38) statement -> . do_while
    (39) statement -> . while
    (40) statement -> . if_else
    (41) statement -> . invocation
    (42) statement -> . if
    (43) statement -> . print
    (58) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (44) assing_to_call -> . variable ASSIGN invocation
    (78) assingation -> . variable ASSIGN expression SEMICOLON
    (46) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (45) do_while -> . DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (51) while -> . WHILE breadcrumb LPAREN expression RPAREN gotof block
    (54) if_else -> . IF LPAREN expression RPAREN gotof block ELSE goto block
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (53) if -> . IF LPAREN expression RPAREN gotof block
    (73) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          reduce using rule 112 (empty -> .)
    READ            shift and go to state 54
    FOR             shift and go to state 56
    DO              shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    ID              shift and go to state 57
    PRINT           shift and go to state 61

    block2                         shift and go to state 40
    block3                         shift and go to state 41
    empty                          shift and go to state 42
    statement                      shift and go to state 43
    read                           shift and go to state 44
    assing_to_call                 shift and go to state 45
    assingation                    shift and go to state 46
    for                            shift and go to state 47
    do_while                       shift and go to state 48
    while                          shift and go to state 49
    if_else                        shift and go to state 50
    invocation                     shift and go to state 51
    if                             shift and go to state 52
    print                          shift and go to state 53
    variable                       shift and go to state 55

state 34

    (7) function_signature -> simple_type ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (12) function_1 -> . empty
    (112) empty -> .

    LPAREN          reduce using rule 112 (empty -> .)

    function_1                     shift and go to state 62
    empty                          shift and go to state 63

state 35

    (8) function_signature -> VOID ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (12) function_1 -> . empty
    (112) empty -> .

    LPAREN          reduce using rule 112 (empty -> .)

    function_1                     shift and go to state 64
    empty                          shift and go to state 63

state 36

    (18) var_declaration -> VARIABLE open_var_declaration simple_type variables . SEMICOLON close_var_declaration

    SEMICOLON       shift and go to state 65


state 37

    (21) variables -> variable .
    (22) variables -> variable . COMMA variables

    SEMICOLON       reduce using rule 21 (variables -> variable .)
    COMMA           shift and go to state 66


state 38

    (23) variable -> ID .
    (24) variable -> ID . LBRACK expression RBRACK
    (25) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK

    COMMA           reduce using rule 23 (variable -> ID .)
    SEMICOLON       reduce using rule 23 (variable -> ID .)
    RPAREN          reduce using rule 23 (variable -> ID .)
    LBRACK          shift and go to state 67


state 39

    (13) main -> MAIN LPAREN RPAREN . main_scope var_declarations block
    (14) main_scope -> . empty
    (112) empty -> .

    VARIABLE        reduce using rule 112 (empty -> .)
    LBRACE          reduce using rule 112 (empty -> .)

    main_scope                     shift and go to state 68
    empty                          shift and go to state 69

state 40

    (30) block -> LBRACE block2 . RBRACE

    RBRACE          shift and go to state 70


state 41

    (31) block2 -> block3 .

    RBRACE          reduce using rule 31 (block2 -> block3 .)


state 42

    (32) block2 -> empty .

    RBRACE          reduce using rule 32 (block2 -> empty .)


state 43

    (33) block3 -> statement . block2
    (31) block2 -> . block3
    (32) block2 -> . empty
    (33) block3 -> . statement block2
    (112) empty -> .
    (34) statement -> . read
    (35) statement -> . assing_to_call
    (36) statement -> . assingation
    (37) statement -> . for
    (38) statement -> . do_while
    (39) statement -> . while
    (40) statement -> . if_else
    (41) statement -> . invocation
    (42) statement -> . if
    (43) statement -> . print
    (58) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (44) assing_to_call -> . variable ASSIGN invocation
    (78) assingation -> . variable ASSIGN expression SEMICOLON
    (46) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (45) do_while -> . DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (51) while -> . WHILE breadcrumb LPAREN expression RPAREN gotof block
    (54) if_else -> . IF LPAREN expression RPAREN gotof block ELSE goto block
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (53) if -> . IF LPAREN expression RPAREN gotof block
    (73) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          reduce using rule 112 (empty -> .)
    READ            shift and go to state 54
    FOR             shift and go to state 56
    DO              shift and go to state 58
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    ID              shift and go to state 57
    PRINT           shift and go to state 61

    statement                      shift and go to state 43
    block2                         shift and go to state 71
    block3                         shift and go to state 41
    empty                          shift and go to state 42
    read                           shift and go to state 44
    assing_to_call                 shift and go to state 45
    assingation                    shift and go to state 46
    for                            shift and go to state 47
    do_while                       shift and go to state 48
    while                          shift and go to state 49
    if_else                        shift and go to state 50
    invocation                     shift and go to state 51
    if                             shift and go to state 52
    print                          shift and go to state 53
    variable                       shift and go to state 55

state 44

    (34) statement -> read .

    READ            reduce using rule 34 (statement -> read .)
    FOR             reduce using rule 34 (statement -> read .)
    DO              reduce using rule 34 (statement -> read .)
    WHILE           reduce using rule 34 (statement -> read .)
    IF              reduce using rule 34 (statement -> read .)
    ID              reduce using rule 34 (statement -> read .)
    PRINT           reduce using rule 34 (statement -> read .)
    RBRACE          reduce using rule 34 (statement -> read .)


state 45

    (35) statement -> assing_to_call .

    READ            reduce using rule 35 (statement -> assing_to_call .)
    FOR             reduce using rule 35 (statement -> assing_to_call .)
    DO              reduce using rule 35 (statement -> assing_to_call .)
    WHILE           reduce using rule 35 (statement -> assing_to_call .)
    IF              reduce using rule 35 (statement -> assing_to_call .)
    ID              reduce using rule 35 (statement -> assing_to_call .)
    PRINT           reduce using rule 35 (statement -> assing_to_call .)
    RBRACE          reduce using rule 35 (statement -> assing_to_call .)


state 46

    (36) statement -> assingation .

    READ            reduce using rule 36 (statement -> assingation .)
    FOR             reduce using rule 36 (statement -> assingation .)
    DO              reduce using rule 36 (statement -> assingation .)
    WHILE           reduce using rule 36 (statement -> assingation .)
    IF              reduce using rule 36 (statement -> assingation .)
    ID              reduce using rule 36 (statement -> assingation .)
    PRINT           reduce using rule 36 (statement -> assingation .)
    RBRACE          reduce using rule 36 (statement -> assingation .)


state 47

    (37) statement -> for .

    READ            reduce using rule 37 (statement -> for .)
    FOR             reduce using rule 37 (statement -> for .)
    DO              reduce using rule 37 (statement -> for .)
    WHILE           reduce using rule 37 (statement -> for .)
    IF              reduce using rule 37 (statement -> for .)
    ID              reduce using rule 37 (statement -> for .)
    PRINT           reduce using rule 37 (statement -> for .)
    RBRACE          reduce using rule 37 (statement -> for .)


state 48

    (38) statement -> do_while .

    READ            reduce using rule 38 (statement -> do_while .)
    FOR             reduce using rule 38 (statement -> do_while .)
    DO              reduce using rule 38 (statement -> do_while .)
    WHILE           reduce using rule 38 (statement -> do_while .)
    IF              reduce using rule 38 (statement -> do_while .)
    ID              reduce using rule 38 (statement -> do_while .)
    PRINT           reduce using rule 38 (statement -> do_while .)
    RBRACE          reduce using rule 38 (statement -> do_while .)


state 49

    (39) statement -> while .

    READ            reduce using rule 39 (statement -> while .)
    FOR             reduce using rule 39 (statement -> while .)
    DO              reduce using rule 39 (statement -> while .)
    WHILE           reduce using rule 39 (statement -> while .)
    IF              reduce using rule 39 (statement -> while .)
    ID              reduce using rule 39 (statement -> while .)
    PRINT           reduce using rule 39 (statement -> while .)
    RBRACE          reduce using rule 39 (statement -> while .)


state 50

    (40) statement -> if_else .

    READ            reduce using rule 40 (statement -> if_else .)
    FOR             reduce using rule 40 (statement -> if_else .)
    DO              reduce using rule 40 (statement -> if_else .)
    WHILE           reduce using rule 40 (statement -> if_else .)
    IF              reduce using rule 40 (statement -> if_else .)
    ID              reduce using rule 40 (statement -> if_else .)
    PRINT           reduce using rule 40 (statement -> if_else .)
    RBRACE          reduce using rule 40 (statement -> if_else .)


state 51

    (41) statement -> invocation .

    READ            reduce using rule 41 (statement -> invocation .)
    FOR             reduce using rule 41 (statement -> invocation .)
    DO              reduce using rule 41 (statement -> invocation .)
    WHILE           reduce using rule 41 (statement -> invocation .)
    IF              reduce using rule 41 (statement -> invocation .)
    ID              reduce using rule 41 (statement -> invocation .)
    PRINT           reduce using rule 41 (statement -> invocation .)
    RBRACE          reduce using rule 41 (statement -> invocation .)


state 52

    (42) statement -> if .

    READ            reduce using rule 42 (statement -> if .)
    FOR             reduce using rule 42 (statement -> if .)
    DO              reduce using rule 42 (statement -> if .)
    WHILE           reduce using rule 42 (statement -> if .)
    IF              reduce using rule 42 (statement -> if .)
    ID              reduce using rule 42 (statement -> if .)
    PRINT           reduce using rule 42 (statement -> if .)
    RBRACE          reduce using rule 42 (statement -> if .)


state 53

    (43) statement -> print .

    READ            reduce using rule 43 (statement -> print .)
    FOR             reduce using rule 43 (statement -> print .)
    DO              reduce using rule 43 (statement -> print .)
    WHILE           reduce using rule 43 (statement -> print .)
    IF              reduce using rule 43 (statement -> print .)
    ID              reduce using rule 43 (statement -> print .)
    PRINT           reduce using rule 43 (statement -> print .)
    RBRACE          reduce using rule 43 (statement -> print .)


state 54

    (58) read -> READ . LPAREN variable_list RPAREN SEMICOLON

    LPAREN          shift and go to state 72


state 55

    (44) assing_to_call -> variable . ASSIGN invocation
    (78) assingation -> variable . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 73


state 56

    (46) for -> FOR . LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    LPAREN          shift and go to state 74


state 57

    (61) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (23) variable -> ID .
    (24) variable -> ID . LBRACK expression RBRACK
    (25) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (62) invocation_1 -> . empty
    (112) empty -> .

    ASSIGN          reduce using rule 23 (variable -> ID .)
    TIMES           reduce using rule 23 (variable -> ID .)
    DIVIDE          reduce using rule 23 (variable -> ID .)
    PLUS            reduce using rule 23 (variable -> ID .)
    MINUS           reduce using rule 23 (variable -> ID .)
    LESS            reduce using rule 23 (variable -> ID .)
    GREATER         reduce using rule 23 (variable -> ID .)
    EQUALS          reduce using rule 23 (variable -> ID .)
    NOTEQUAL        reduce using rule 23 (variable -> ID .)
    GREATERTHAN     reduce using rule 23 (variable -> ID .)
    LESSTHAN        reduce using rule 23 (variable -> ID .)
    AND             reduce using rule 23 (variable -> ID .)
    OR              reduce using rule 23 (variable -> ID .)
    SEMICOLON       reduce using rule 23 (variable -> ID .)
    LBRACK          shift and go to state 67
    LPAREN          reduce using rule 112 (empty -> .)

    invocation_1                   shift and go to state 75
    empty                          shift and go to state 76

state 58

    (45) do_while -> DO . breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (52) breadcrumb -> . empty
    (112) empty -> .

    LBRACE          reduce using rule 112 (empty -> .)

    breadcrumb                     shift and go to state 77
    empty                          shift and go to state 78

state 59

    (51) while -> WHILE . breadcrumb LPAREN expression RPAREN gotof block
    (52) breadcrumb -> . empty
    (112) empty -> .

    LPAREN          reduce using rule 112 (empty -> .)

    breadcrumb                     shift and go to state 79
    empty                          shift and go to state 78

state 60

    (54) if_else -> IF . LPAREN expression RPAREN gotof block ELSE goto block
    (53) if -> IF . LPAREN expression RPAREN gotof block

    LPAREN          shift and go to state 80


state 61

    (73) print -> PRINT . LPAREN print_arguments RPAREN SEMICOLON

    LPAREN          shift and go to state 81


state 62

    (7) function_signature -> simple_type ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    LPAREN          shift and go to state 82


state 63

    (12) function_1 -> empty .

    LPAREN          reduce using rule 12 (function_1 -> empty .)


state 64

    (8) function_signature -> VOID ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    LPAREN          shift and go to state 83


state 65

    (18) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON . close_var_declaration
    (20) close_var_declaration -> . empty
    (112) empty -> .

    VARIABLE        reduce using rule 112 (empty -> .)
    FUNCTION        reduce using rule 112 (empty -> .)
    MAIN            reduce using rule 112 (empty -> .)
    LBRACE          reduce using rule 112 (empty -> .)

    close_var_declaration          shift and go to state 84
    empty                          shift and go to state 85

state 66

    (22) variables -> variable COMMA . variables
    (21) variables -> . variable
    (22) variables -> . variable COMMA variables
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 38

    variable                       shift and go to state 37
    variables                      shift and go to state 86

state 67

    (24) variable -> ID LBRACK . expression RBRACK
    (25) variable -> ID LBRACK . expression RBRACK LBRACK expression RBRACK
    (71) expression -> . t_expression
    (72) expression -> . NOT t_expression
    (79) t_expression -> . g_expression
    (80) t_expression -> . t_expression boolean_operator g_expression
    (81) g_expression -> . m_expression
    (82) g_expression -> . g_expression comparison_operator m_expression
    (83) m_expression -> . term
    (84) m_expression -> . m_expression addition_operator term
    (85) term -> . factor
    (86) term -> . term multiplication_operator factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 90
    ID              shift and go to state 87
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    expression                     shift and go to state 88
    t_expression                   shift and go to state 89
    g_expression                   shift and go to state 91
    m_expression                   shift and go to state 92
    term                           shift and go to state 93
    factor                         shift and go to state 94
    variable                       shift and go to state 95
    cte                            shift and go to state 96
    invocation                     shift and go to state 97
    expression_parenthesis         shift and go to state 98

state 68

    (13) main -> MAIN LPAREN RPAREN main_scope . var_declarations block
    (15) var_declarations -> . var_declaration_list
    (16) var_declarations -> . empty
    (17) var_declaration_list -> . var_declaration var_declarations
    (112) empty -> .
    (18) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 112 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 104
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 69

    (14) main_scope -> empty .

    VARIABLE        reduce using rule 14 (main_scope -> empty .)
    LBRACE          reduce using rule 14 (main_scope -> empty .)


state 70

    (30) block -> LBRACE block2 RBRACE .

    MAIN            reduce using rule 30 (block -> LBRACE block2 RBRACE .)
    FUNCTION        reduce using rule 30 (block -> LBRACE block2 RBRACE .)
    WHILE           reduce using rule 30 (block -> LBRACE block2 RBRACE .)
    END             reduce using rule 30 (block -> LBRACE block2 RBRACE .)
    ELSE            reduce using rule 30 (block -> LBRACE block2 RBRACE .)
    READ            reduce using rule 30 (block -> LBRACE block2 RBRACE .)
    FOR             reduce using rule 30 (block -> LBRACE block2 RBRACE .)
    DO              reduce using rule 30 (block -> LBRACE block2 RBRACE .)
    IF              reduce using rule 30 (block -> LBRACE block2 RBRACE .)
    ID              reduce using rule 30 (block -> LBRACE block2 RBRACE .)
    PRINT           reduce using rule 30 (block -> LBRACE block2 RBRACE .)
    RBRACE          reduce using rule 30 (block -> LBRACE block2 RBRACE .)


state 71

    (33) block3 -> statement block2 .

    RBRACE          reduce using rule 33 (block3 -> statement block2 .)


state 72

    (58) read -> READ LPAREN . variable_list RPAREN SEMICOLON
    (59) variable_list -> . variable
    (60) variable_list -> . variable_list COMMA variable
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 38

    variable_list                  shift and go to state 105
    variable                       shift and go to state 106

state 73

    (44) assing_to_call -> variable ASSIGN . invocation
    (78) assingation -> variable ASSIGN . expression SEMICOLON
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (71) expression -> . t_expression
    (72) expression -> . NOT t_expression
    (79) t_expression -> . g_expression
    (80) t_expression -> . t_expression boolean_operator g_expression
    (81) g_expression -> . m_expression
    (82) g_expression -> . g_expression comparison_operator m_expression
    (83) m_expression -> . term
    (84) m_expression -> . m_expression addition_operator term
    (85) term -> . factor
    (86) term -> . term multiplication_operator factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 57
    NOT             shift and go to state 90
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    variable                       shift and go to state 95
    invocation                     shift and go to state 107
    expression                     shift and go to state 108
    t_expression                   shift and go to state 89
    g_expression                   shift and go to state 91
    m_expression                   shift and go to state 92
    term                           shift and go to state 93
    factor                         shift and go to state 94
    cte                            shift and go to state 96
    expression_parenthesis         shift and go to state 98

state 74

    (46) for -> FOR LPAREN . ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    ID              shift and go to state 109


state 75

    (61) invocation -> ID invocation_1 . LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    LPAREN          shift and go to state 110


state 76

    (62) invocation_1 -> empty .

    LPAREN          reduce using rule 62 (invocation_1 -> empty .)


state 77

    (45) do_while -> DO breadcrumb . block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (30) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 33

    block                          shift and go to state 111

state 78

    (52) breadcrumb -> empty .

    LBRACE          reduce using rule 52 (breadcrumb -> empty .)
    LPAREN          reduce using rule 52 (breadcrumb -> empty .)


state 79

    (51) while -> WHILE breadcrumb . LPAREN expression RPAREN gotof block

    LPAREN          shift and go to state 112


state 80

    (54) if_else -> IF LPAREN . expression RPAREN gotof block ELSE goto block
    (53) if -> IF LPAREN . expression RPAREN gotof block
    (71) expression -> . t_expression
    (72) expression -> . NOT t_expression
    (79) t_expression -> . g_expression
    (80) t_expression -> . t_expression boolean_operator g_expression
    (81) g_expression -> . m_expression
    (82) g_expression -> . g_expression comparison_operator m_expression
    (83) m_expression -> . term
    (84) m_expression -> . m_expression addition_operator term
    (85) term -> . factor
    (86) term -> . term multiplication_operator factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 90
    ID              shift and go to state 87
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    expression                     shift and go to state 113
    t_expression                   shift and go to state 89
    g_expression                   shift and go to state 91
    m_expression                   shift and go to state 92
    term                           shift and go to state 93
    factor                         shift and go to state 94
    variable                       shift and go to state 95
    cte                            shift and go to state 96
    invocation                     shift and go to state 97
    expression_parenthesis         shift and go to state 98

state 81

    (73) print -> PRINT LPAREN . print_arguments RPAREN SEMICOLON
    (74) print_arguments -> . print_argument
    (75) print_arguments -> . print_arguments COMMA print_argument
    (76) print_argument -> . CTES
    (77) print_argument -> . expression
    (71) expression -> . t_expression
    (72) expression -> . NOT t_expression
    (79) t_expression -> . g_expression
    (80) t_expression -> . t_expression boolean_operator g_expression
    (81) g_expression -> . m_expression
    (82) g_expression -> . g_expression comparison_operator m_expression
    (83) m_expression -> . term
    (84) m_expression -> . m_expression addition_operator term
    (85) term -> . factor
    (86) term -> . term multiplication_operator factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    CTES            shift and go to state 116
    NOT             shift and go to state 90
    ID              shift and go to state 87
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    print_arguments                shift and go to state 114
    print_argument                 shift and go to state 115
    expression                     shift and go to state 117
    t_expression                   shift and go to state 89
    g_expression                   shift and go to state 91
    m_expression                   shift and go to state 92
    term                           shift and go to state 93
    factor                         shift and go to state 94
    variable                       shift and go to state 95
    cte                            shift and go to state 96
    invocation                     shift and go to state 97
    expression_parenthesis         shift and go to state 98

state 82

    (7) function_signature -> simple_type ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (19) open_var_declaration -> . empty
    (112) empty -> .

    INT             reduce using rule 112 (empty -> .)
    FLOAT           reduce using rule 112 (empty -> .)
    CHAR            reduce using rule 112 (empty -> .)
    BOOLEAN         reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    RPAREN          reduce using rule 112 (empty -> .)

    open_var_declaration           shift and go to state 118
    empty                          shift and go to state 18

state 83

    (8) function_signature -> VOID ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (19) open_var_declaration -> . empty
    (112) empty -> .

    INT             reduce using rule 112 (empty -> .)
    FLOAT           reduce using rule 112 (empty -> .)
    CHAR            reduce using rule 112 (empty -> .)
    BOOLEAN         reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    RPAREN          reduce using rule 112 (empty -> .)

    open_var_declaration           shift and go to state 119
    empty                          shift and go to state 18

state 84

    (18) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .

    VARIABLE        reduce using rule 18 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    FUNCTION        reduce using rule 18 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    MAIN            reduce using rule 18 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    LBRACE          reduce using rule 18 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)


state 85

    (20) close_var_declaration -> empty .

    VARIABLE        reduce using rule 20 (close_var_declaration -> empty .)
    FUNCTION        reduce using rule 20 (close_var_declaration -> empty .)
    MAIN            reduce using rule 20 (close_var_declaration -> empty .)
    LBRACE          reduce using rule 20 (close_var_declaration -> empty .)
    RPAREN          reduce using rule 20 (close_var_declaration -> empty .)


state 86

    (22) variables -> variable COMMA variables .

    SEMICOLON       reduce using rule 22 (variables -> variable COMMA variables .)


state 87

    (23) variable -> ID .
    (24) variable -> ID . LBRACK expression RBRACK
    (25) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (61) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (62) invocation_1 -> . empty
    (112) empty -> .

    TIMES           reduce using rule 23 (variable -> ID .)
    DIVIDE          reduce using rule 23 (variable -> ID .)
    PLUS            reduce using rule 23 (variable -> ID .)
    MINUS           reduce using rule 23 (variable -> ID .)
    LESS            reduce using rule 23 (variable -> ID .)
    GREATER         reduce using rule 23 (variable -> ID .)
    EQUALS          reduce using rule 23 (variable -> ID .)
    NOTEQUAL        reduce using rule 23 (variable -> ID .)
    GREATERTHAN     reduce using rule 23 (variable -> ID .)
    LESSTHAN        reduce using rule 23 (variable -> ID .)
    AND             reduce using rule 23 (variable -> ID .)
    OR              reduce using rule 23 (variable -> ID .)
    RBRACK          reduce using rule 23 (variable -> ID .)
    RPAREN          reduce using rule 23 (variable -> ID .)
    COMMA           reduce using rule 23 (variable -> ID .)
    SEMICOLON       reduce using rule 23 (variable -> ID .)
    FROM            reduce using rule 23 (variable -> ID .)
    LBRACK          shift and go to state 67
    LPAREN          reduce using rule 112 (empty -> .)

    invocation_1                   shift and go to state 75
    empty                          shift and go to state 76

state 88

    (24) variable -> ID LBRACK expression . RBRACK
    (25) variable -> ID LBRACK expression . RBRACK LBRACK expression RBRACK

    RBRACK          shift and go to state 120


state 89

    (71) expression -> t_expression .
    (80) t_expression -> t_expression . boolean_operator g_expression
    (100) boolean_operator -> . AND
    (101) boolean_operator -> . OR

    RBRACK          reduce using rule 71 (expression -> t_expression .)
    SEMICOLON       reduce using rule 71 (expression -> t_expression .)
    RPAREN          reduce using rule 71 (expression -> t_expression .)
    COMMA           reduce using rule 71 (expression -> t_expression .)
    FROM            reduce using rule 71 (expression -> t_expression .)
    AND             shift and go to state 122
    OR              shift and go to state 123

    boolean_operator               shift and go to state 121

state 90

    (72) expression -> NOT . t_expression
    (79) t_expression -> . g_expression
    (80) t_expression -> . t_expression boolean_operator g_expression
    (81) g_expression -> . m_expression
    (82) g_expression -> . g_expression comparison_operator m_expression
    (83) m_expression -> . term
    (84) m_expression -> . m_expression addition_operator term
    (85) term -> . factor
    (86) term -> . term multiplication_operator factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 87
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    t_expression                   shift and go to state 124
    g_expression                   shift and go to state 91
    m_expression                   shift and go to state 92
    term                           shift and go to state 93
    factor                         shift and go to state 94
    variable                       shift and go to state 95
    cte                            shift and go to state 96
    invocation                     shift and go to state 97
    expression_parenthesis         shift and go to state 98

state 91

    (79) t_expression -> g_expression .
    (82) g_expression -> g_expression . comparison_operator m_expression
    (92) comparison_operator -> . LESS
    (93) comparison_operator -> . GREATER
    (94) comparison_operator -> . EQUALS
    (95) comparison_operator -> . NOTEQUAL
    (96) comparison_operator -> . GREATERTHAN
    (97) comparison_operator -> . LESSTHAN

    AND             reduce using rule 79 (t_expression -> g_expression .)
    OR              reduce using rule 79 (t_expression -> g_expression .)
    RBRACK          reduce using rule 79 (t_expression -> g_expression .)
    SEMICOLON       reduce using rule 79 (t_expression -> g_expression .)
    RPAREN          reduce using rule 79 (t_expression -> g_expression .)
    COMMA           reduce using rule 79 (t_expression -> g_expression .)
    FROM            reduce using rule 79 (t_expression -> g_expression .)
    LESS            shift and go to state 126
    GREATER         shift and go to state 127
    EQUALS          shift and go to state 128
    NOTEQUAL        shift and go to state 129
    GREATERTHAN     shift and go to state 130
    LESSTHAN        shift and go to state 131

    comparison_operator            shift and go to state 125

state 92

    (81) g_expression -> m_expression .
    (84) m_expression -> m_expression . addition_operator term
    (98) addition_operator -> . PLUS
    (99) addition_operator -> . MINUS

    LESS            reduce using rule 81 (g_expression -> m_expression .)
    GREATER         reduce using rule 81 (g_expression -> m_expression .)
    EQUALS          reduce using rule 81 (g_expression -> m_expression .)
    NOTEQUAL        reduce using rule 81 (g_expression -> m_expression .)
    GREATERTHAN     reduce using rule 81 (g_expression -> m_expression .)
    LESSTHAN        reduce using rule 81 (g_expression -> m_expression .)
    AND             reduce using rule 81 (g_expression -> m_expression .)
    OR              reduce using rule 81 (g_expression -> m_expression .)
    RBRACK          reduce using rule 81 (g_expression -> m_expression .)
    SEMICOLON       reduce using rule 81 (g_expression -> m_expression .)
    RPAREN          reduce using rule 81 (g_expression -> m_expression .)
    COMMA           reduce using rule 81 (g_expression -> m_expression .)
    FROM            reduce using rule 81 (g_expression -> m_expression .)
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134

    addition_operator              shift and go to state 132

state 93

    (83) m_expression -> term .
    (86) term -> term . multiplication_operator factor
    (102) multiplication_operator -> . TIMES
    (103) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 83 (m_expression -> term .)
    MINUS           reduce using rule 83 (m_expression -> term .)
    LESS            reduce using rule 83 (m_expression -> term .)
    GREATER         reduce using rule 83 (m_expression -> term .)
    EQUALS          reduce using rule 83 (m_expression -> term .)
    NOTEQUAL        reduce using rule 83 (m_expression -> term .)
    GREATERTHAN     reduce using rule 83 (m_expression -> term .)
    LESSTHAN        reduce using rule 83 (m_expression -> term .)
    AND             reduce using rule 83 (m_expression -> term .)
    OR              reduce using rule 83 (m_expression -> term .)
    RBRACK          reduce using rule 83 (m_expression -> term .)
    SEMICOLON       reduce using rule 83 (m_expression -> term .)
    RPAREN          reduce using rule 83 (m_expression -> term .)
    COMMA           reduce using rule 83 (m_expression -> term .)
    FROM            reduce using rule 83 (m_expression -> term .)
    TIMES           shift and go to state 136
    DIVIDE          shift and go to state 137

    multiplication_operator        shift and go to state 135

state 94

    (85) term -> factor .

    TIMES           reduce using rule 85 (term -> factor .)
    DIVIDE          reduce using rule 85 (term -> factor .)
    PLUS            reduce using rule 85 (term -> factor .)
    MINUS           reduce using rule 85 (term -> factor .)
    LESS            reduce using rule 85 (term -> factor .)
    GREATER         reduce using rule 85 (term -> factor .)
    EQUALS          reduce using rule 85 (term -> factor .)
    NOTEQUAL        reduce using rule 85 (term -> factor .)
    GREATERTHAN     reduce using rule 85 (term -> factor .)
    LESSTHAN        reduce using rule 85 (term -> factor .)
    AND             reduce using rule 85 (term -> factor .)
    OR              reduce using rule 85 (term -> factor .)
    RBRACK          reduce using rule 85 (term -> factor .)
    SEMICOLON       reduce using rule 85 (term -> factor .)
    RPAREN          reduce using rule 85 (term -> factor .)
    COMMA           reduce using rule 85 (term -> factor .)
    FROM            reduce using rule 85 (term -> factor .)


state 95

    (87) factor -> variable .

    TIMES           reduce using rule 87 (factor -> variable .)
    DIVIDE          reduce using rule 87 (factor -> variable .)
    PLUS            reduce using rule 87 (factor -> variable .)
    MINUS           reduce using rule 87 (factor -> variable .)
    LESS            reduce using rule 87 (factor -> variable .)
    GREATER         reduce using rule 87 (factor -> variable .)
    EQUALS          reduce using rule 87 (factor -> variable .)
    NOTEQUAL        reduce using rule 87 (factor -> variable .)
    GREATERTHAN     reduce using rule 87 (factor -> variable .)
    LESSTHAN        reduce using rule 87 (factor -> variable .)
    AND             reduce using rule 87 (factor -> variable .)
    OR              reduce using rule 87 (factor -> variable .)
    RBRACK          reduce using rule 87 (factor -> variable .)
    SEMICOLON       reduce using rule 87 (factor -> variable .)
    RPAREN          reduce using rule 87 (factor -> variable .)
    COMMA           reduce using rule 87 (factor -> variable .)
    FROM            reduce using rule 87 (factor -> variable .)


state 96

    (88) factor -> cte .

    TIMES           reduce using rule 88 (factor -> cte .)
    DIVIDE          reduce using rule 88 (factor -> cte .)
    PLUS            reduce using rule 88 (factor -> cte .)
    MINUS           reduce using rule 88 (factor -> cte .)
    LESS            reduce using rule 88 (factor -> cte .)
    GREATER         reduce using rule 88 (factor -> cte .)
    EQUALS          reduce using rule 88 (factor -> cte .)
    NOTEQUAL        reduce using rule 88 (factor -> cte .)
    GREATERTHAN     reduce using rule 88 (factor -> cte .)
    LESSTHAN        reduce using rule 88 (factor -> cte .)
    AND             reduce using rule 88 (factor -> cte .)
    OR              reduce using rule 88 (factor -> cte .)
    RBRACK          reduce using rule 88 (factor -> cte .)
    SEMICOLON       reduce using rule 88 (factor -> cte .)
    RPAREN          reduce using rule 88 (factor -> cte .)
    COMMA           reduce using rule 88 (factor -> cte .)
    FROM            reduce using rule 88 (factor -> cte .)


state 97

    (89) factor -> invocation .

    TIMES           reduce using rule 89 (factor -> invocation .)
    DIVIDE          reduce using rule 89 (factor -> invocation .)
    PLUS            reduce using rule 89 (factor -> invocation .)
    MINUS           reduce using rule 89 (factor -> invocation .)
    LESS            reduce using rule 89 (factor -> invocation .)
    GREATER         reduce using rule 89 (factor -> invocation .)
    EQUALS          reduce using rule 89 (factor -> invocation .)
    NOTEQUAL        reduce using rule 89 (factor -> invocation .)
    GREATERTHAN     reduce using rule 89 (factor -> invocation .)
    LESSTHAN        reduce using rule 89 (factor -> invocation .)
    AND             reduce using rule 89 (factor -> invocation .)
    OR              reduce using rule 89 (factor -> invocation .)
    RBRACK          reduce using rule 89 (factor -> invocation .)
    RPAREN          reduce using rule 89 (factor -> invocation .)
    COMMA           reduce using rule 89 (factor -> invocation .)
    SEMICOLON       reduce using rule 89 (factor -> invocation .)
    FROM            reduce using rule 89 (factor -> invocation .)


state 98

    (90) factor -> expression_parenthesis .

    TIMES           reduce using rule 90 (factor -> expression_parenthesis .)
    DIVIDE          reduce using rule 90 (factor -> expression_parenthesis .)
    PLUS            reduce using rule 90 (factor -> expression_parenthesis .)
    MINUS           reduce using rule 90 (factor -> expression_parenthesis .)
    LESS            reduce using rule 90 (factor -> expression_parenthesis .)
    GREATER         reduce using rule 90 (factor -> expression_parenthesis .)
    EQUALS          reduce using rule 90 (factor -> expression_parenthesis .)
    NOTEQUAL        reduce using rule 90 (factor -> expression_parenthesis .)
    GREATERTHAN     reduce using rule 90 (factor -> expression_parenthesis .)
    LESSTHAN        reduce using rule 90 (factor -> expression_parenthesis .)
    AND             reduce using rule 90 (factor -> expression_parenthesis .)
    OR              reduce using rule 90 (factor -> expression_parenthesis .)
    RBRACK          reduce using rule 90 (factor -> expression_parenthesis .)
    SEMICOLON       reduce using rule 90 (factor -> expression_parenthesis .)
    RPAREN          reduce using rule 90 (factor -> expression_parenthesis .)
    COMMA           reduce using rule 90 (factor -> expression_parenthesis .)
    FROM            reduce using rule 90 (factor -> expression_parenthesis .)


state 99

    (108) cte -> CTEI .

    TIMES           reduce using rule 108 (cte -> CTEI .)
    DIVIDE          reduce using rule 108 (cte -> CTEI .)
    PLUS            reduce using rule 108 (cte -> CTEI .)
    MINUS           reduce using rule 108 (cte -> CTEI .)
    LESS            reduce using rule 108 (cte -> CTEI .)
    GREATER         reduce using rule 108 (cte -> CTEI .)
    EQUALS          reduce using rule 108 (cte -> CTEI .)
    NOTEQUAL        reduce using rule 108 (cte -> CTEI .)
    GREATERTHAN     reduce using rule 108 (cte -> CTEI .)
    LESSTHAN        reduce using rule 108 (cte -> CTEI .)
    AND             reduce using rule 108 (cte -> CTEI .)
    OR              reduce using rule 108 (cte -> CTEI .)
    RBRACK          reduce using rule 108 (cte -> CTEI .)
    SEMICOLON       reduce using rule 108 (cte -> CTEI .)
    RPAREN          reduce using rule 108 (cte -> CTEI .)
    COMMA           reduce using rule 108 (cte -> CTEI .)
    FROM            reduce using rule 108 (cte -> CTEI .)


state 100

    (109) cte -> CTEF .

    TIMES           reduce using rule 109 (cte -> CTEF .)
    DIVIDE          reduce using rule 109 (cte -> CTEF .)
    PLUS            reduce using rule 109 (cte -> CTEF .)
    MINUS           reduce using rule 109 (cte -> CTEF .)
    LESS            reduce using rule 109 (cte -> CTEF .)
    GREATER         reduce using rule 109 (cte -> CTEF .)
    EQUALS          reduce using rule 109 (cte -> CTEF .)
    NOTEQUAL        reduce using rule 109 (cte -> CTEF .)
    GREATERTHAN     reduce using rule 109 (cte -> CTEF .)
    LESSTHAN        reduce using rule 109 (cte -> CTEF .)
    AND             reduce using rule 109 (cte -> CTEF .)
    OR              reduce using rule 109 (cte -> CTEF .)
    RBRACK          reduce using rule 109 (cte -> CTEF .)
    SEMICOLON       reduce using rule 109 (cte -> CTEF .)
    RPAREN          reduce using rule 109 (cte -> CTEF .)
    COMMA           reduce using rule 109 (cte -> CTEF .)
    FROM            reduce using rule 109 (cte -> CTEF .)


state 101

    (110) cte -> CTEC .

    TIMES           reduce using rule 110 (cte -> CTEC .)
    DIVIDE          reduce using rule 110 (cte -> CTEC .)
    PLUS            reduce using rule 110 (cte -> CTEC .)
    MINUS           reduce using rule 110 (cte -> CTEC .)
    LESS            reduce using rule 110 (cte -> CTEC .)
    GREATER         reduce using rule 110 (cte -> CTEC .)
    EQUALS          reduce using rule 110 (cte -> CTEC .)
    NOTEQUAL        reduce using rule 110 (cte -> CTEC .)
    GREATERTHAN     reduce using rule 110 (cte -> CTEC .)
    LESSTHAN        reduce using rule 110 (cte -> CTEC .)
    AND             reduce using rule 110 (cte -> CTEC .)
    OR              reduce using rule 110 (cte -> CTEC .)
    RBRACK          reduce using rule 110 (cte -> CTEC .)
    SEMICOLON       reduce using rule 110 (cte -> CTEC .)
    RPAREN          reduce using rule 110 (cte -> CTEC .)
    COMMA           reduce using rule 110 (cte -> CTEC .)
    FROM            reduce using rule 110 (cte -> CTEC .)


state 102

    (111) cte -> CTEB .

    TIMES           reduce using rule 111 (cte -> CTEB .)
    DIVIDE          reduce using rule 111 (cte -> CTEB .)
    PLUS            reduce using rule 111 (cte -> CTEB .)
    MINUS           reduce using rule 111 (cte -> CTEB .)
    LESS            reduce using rule 111 (cte -> CTEB .)
    GREATER         reduce using rule 111 (cte -> CTEB .)
    EQUALS          reduce using rule 111 (cte -> CTEB .)
    NOTEQUAL        reduce using rule 111 (cte -> CTEB .)
    GREATERTHAN     reduce using rule 111 (cte -> CTEB .)
    LESSTHAN        reduce using rule 111 (cte -> CTEB .)
    AND             reduce using rule 111 (cte -> CTEB .)
    OR              reduce using rule 111 (cte -> CTEB .)
    RBRACK          reduce using rule 111 (cte -> CTEB .)
    SEMICOLON       reduce using rule 111 (cte -> CTEB .)
    RPAREN          reduce using rule 111 (cte -> CTEB .)
    COMMA           reduce using rule 111 (cte -> CTEB .)
    FROM            reduce using rule 111 (cte -> CTEB .)


state 103

    (91) expression_parenthesis -> LPAREN . expression RPAREN
    (71) expression -> . t_expression
    (72) expression -> . NOT t_expression
    (79) t_expression -> . g_expression
    (80) t_expression -> . t_expression boolean_operator g_expression
    (81) g_expression -> . m_expression
    (82) g_expression -> . g_expression comparison_operator m_expression
    (83) m_expression -> . term
    (84) m_expression -> . m_expression addition_operator term
    (85) term -> . factor
    (86) term -> . term multiplication_operator factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 90
    ID              shift and go to state 87
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    expression                     shift and go to state 138
    t_expression                   shift and go to state 89
    g_expression                   shift and go to state 91
    m_expression                   shift and go to state 92
    term                           shift and go to state 93
    factor                         shift and go to state 94
    variable                       shift and go to state 95
    cte                            shift and go to state 96
    invocation                     shift and go to state 97
    expression_parenthesis         shift and go to state 98

state 104

    (13) main -> MAIN LPAREN RPAREN main_scope var_declarations . block
    (30) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 33

    block                          shift and go to state 139

state 105

    (58) read -> READ LPAREN variable_list . RPAREN SEMICOLON
    (60) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 140
    COMMA           shift and go to state 141


state 106

    (59) variable_list -> variable .

    RPAREN          reduce using rule 59 (variable_list -> variable .)
    COMMA           reduce using rule 59 (variable_list -> variable .)


state 107

    (44) assing_to_call -> variable ASSIGN invocation .
    (89) factor -> invocation .

    READ            reduce using rule 44 (assing_to_call -> variable ASSIGN invocation .)
    FOR             reduce using rule 44 (assing_to_call -> variable ASSIGN invocation .)
    DO              reduce using rule 44 (assing_to_call -> variable ASSIGN invocation .)
    WHILE           reduce using rule 44 (assing_to_call -> variable ASSIGN invocation .)
    IF              reduce using rule 44 (assing_to_call -> variable ASSIGN invocation .)
    ID              reduce using rule 44 (assing_to_call -> variable ASSIGN invocation .)
    PRINT           reduce using rule 44 (assing_to_call -> variable ASSIGN invocation .)
    RBRACE          reduce using rule 44 (assing_to_call -> variable ASSIGN invocation .)
    TIMES           reduce using rule 89 (factor -> invocation .)
    DIVIDE          reduce using rule 89 (factor -> invocation .)
    PLUS            reduce using rule 89 (factor -> invocation .)
    MINUS           reduce using rule 89 (factor -> invocation .)
    LESS            reduce using rule 89 (factor -> invocation .)
    GREATER         reduce using rule 89 (factor -> invocation .)
    EQUALS          reduce using rule 89 (factor -> invocation .)
    NOTEQUAL        reduce using rule 89 (factor -> invocation .)
    GREATERTHAN     reduce using rule 89 (factor -> invocation .)
    LESSTHAN        reduce using rule 89 (factor -> invocation .)
    AND             reduce using rule 89 (factor -> invocation .)
    OR              reduce using rule 89 (factor -> invocation .)
    SEMICOLON       reduce using rule 89 (factor -> invocation .)


state 108

    (78) assingation -> variable ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 142


state 109

    (46) for -> FOR LPAREN ID . for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (47) for_1 -> . empty
    (112) empty -> .

    ASSIGN          reduce using rule 112 (empty -> .)

    for_1                          shift and go to state 143
    empty                          shift and go to state 144

state 110

    (61) invocation -> ID invocation_1 LPAREN . invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (63) invocation_2 -> . empty
    (112) empty -> .

    NOT             reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTEI            reduce using rule 112 (empty -> .)
    CTEF            reduce using rule 112 (empty -> .)
    CTEC            reduce using rule 112 (empty -> .)
    CTEB            reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)
    RPAREN          reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)

    invocation_2                   shift and go to state 145
    empty                          shift and go to state 146

state 111

    (45) do_while -> DO breadcrumb block . WHILE LPAREN expression RPAREN gotot SEMICOLON

    WHILE           shift and go to state 147


state 112

    (51) while -> WHILE breadcrumb LPAREN . expression RPAREN gotof block
    (71) expression -> . t_expression
    (72) expression -> . NOT t_expression
    (79) t_expression -> . g_expression
    (80) t_expression -> . t_expression boolean_operator g_expression
    (81) g_expression -> . m_expression
    (82) g_expression -> . g_expression comparison_operator m_expression
    (83) m_expression -> . term
    (84) m_expression -> . m_expression addition_operator term
    (85) term -> . factor
    (86) term -> . term multiplication_operator factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 90
    ID              shift and go to state 87
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    expression                     shift and go to state 148
    t_expression                   shift and go to state 89
    g_expression                   shift and go to state 91
    m_expression                   shift and go to state 92
    term                           shift and go to state 93
    factor                         shift and go to state 94
    variable                       shift and go to state 95
    cte                            shift and go to state 96
    invocation                     shift and go to state 97
    expression_parenthesis         shift and go to state 98

state 113

    (54) if_else -> IF LPAREN expression . RPAREN gotof block ELSE goto block
    (53) if -> IF LPAREN expression . RPAREN gotof block

    RPAREN          shift and go to state 149


state 114

    (73) print -> PRINT LPAREN print_arguments . RPAREN SEMICOLON
    (75) print_arguments -> print_arguments . COMMA print_argument

    RPAREN          shift and go to state 150
    COMMA           shift and go to state 151


state 115

    (74) print_arguments -> print_argument .

    RPAREN          reduce using rule 74 (print_arguments -> print_argument .)
    COMMA           reduce using rule 74 (print_arguments -> print_argument .)


state 116

    (76) print_argument -> CTES .

    RPAREN          reduce using rule 76 (print_argument -> CTES .)
    COMMA           reduce using rule 76 (print_argument -> CTES .)


state 117

    (77) print_argument -> expression .

    RPAREN          reduce using rule 77 (print_argument -> expression .)
    COMMA           reduce using rule 77 (print_argument -> expression .)


state 118

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations
    (26) parameters -> . parameters COMMA parameter
    (27) parameters -> . parameter
    (28) parameters -> . empty
    (29) parameter -> . simple_type ID
    (112) empty -> .
    (104) simple_type -> . INT
    (105) simple_type -> . FLOAT
    (106) simple_type -> . CHAR
    (107) simple_type -> . BOOLEAN

    COMMA           reduce using rule 112 (empty -> .)
    RPAREN          reduce using rule 112 (empty -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28

    simple_type                    shift and go to state 152
    parameters                     shift and go to state 153
    parameter                      shift and go to state 154
    empty                          shift and go to state 155

state 119

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations
    (26) parameters -> . parameters COMMA parameter
    (27) parameters -> . parameter
    (28) parameters -> . empty
    (29) parameter -> . simple_type ID
    (112) empty -> .
    (104) simple_type -> . INT
    (105) simple_type -> . FLOAT
    (106) simple_type -> . CHAR
    (107) simple_type -> . BOOLEAN

    COMMA           reduce using rule 112 (empty -> .)
    RPAREN          reduce using rule 112 (empty -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28

    parameters                     shift and go to state 156
    parameter                      shift and go to state 154
    empty                          shift and go to state 155
    simple_type                    shift and go to state 152

state 120

    (24) variable -> ID LBRACK expression RBRACK .
    (25) variable -> ID LBRACK expression RBRACK . LBRACK expression RBRACK

    COMMA           reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    TIMES           reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    PLUS            reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    MINUS           reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    LESS            reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    GREATER         reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    EQUALS          reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    AND             reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    OR              reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    RBRACK          reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    RPAREN          reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    FROM            reduce using rule 24 (variable -> ID LBRACK expression RBRACK .)
    LBRACK          shift and go to state 157


state 121

    (80) t_expression -> t_expression boolean_operator . g_expression
    (81) g_expression -> . m_expression
    (82) g_expression -> . g_expression comparison_operator m_expression
    (83) m_expression -> . term
    (84) m_expression -> . m_expression addition_operator term
    (85) term -> . factor
    (86) term -> . term multiplication_operator factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 87
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    g_expression                   shift and go to state 158
    m_expression                   shift and go to state 92
    term                           shift and go to state 93
    factor                         shift and go to state 94
    variable                       shift and go to state 95
    cte                            shift and go to state 96
    invocation                     shift and go to state 97
    expression_parenthesis         shift and go to state 98

state 122

    (100) boolean_operator -> AND .

    ID              reduce using rule 100 (boolean_operator -> AND .)
    CTEI            reduce using rule 100 (boolean_operator -> AND .)
    CTEF            reduce using rule 100 (boolean_operator -> AND .)
    CTEC            reduce using rule 100 (boolean_operator -> AND .)
    CTEB            reduce using rule 100 (boolean_operator -> AND .)
    LPAREN          reduce using rule 100 (boolean_operator -> AND .)


state 123

    (101) boolean_operator -> OR .

    ID              reduce using rule 101 (boolean_operator -> OR .)
    CTEI            reduce using rule 101 (boolean_operator -> OR .)
    CTEF            reduce using rule 101 (boolean_operator -> OR .)
    CTEC            reduce using rule 101 (boolean_operator -> OR .)
    CTEB            reduce using rule 101 (boolean_operator -> OR .)
    LPAREN          reduce using rule 101 (boolean_operator -> OR .)


state 124

    (72) expression -> NOT t_expression .
    (80) t_expression -> t_expression . boolean_operator g_expression
    (100) boolean_operator -> . AND
    (101) boolean_operator -> . OR

    RBRACK          reduce using rule 72 (expression -> NOT t_expression .)
    SEMICOLON       reduce using rule 72 (expression -> NOT t_expression .)
    RPAREN          reduce using rule 72 (expression -> NOT t_expression .)
    COMMA           reduce using rule 72 (expression -> NOT t_expression .)
    FROM            reduce using rule 72 (expression -> NOT t_expression .)
    AND             shift and go to state 122
    OR              shift and go to state 123

    boolean_operator               shift and go to state 121

state 125

    (82) g_expression -> g_expression comparison_operator . m_expression
    (83) m_expression -> . term
    (84) m_expression -> . m_expression addition_operator term
    (85) term -> . factor
    (86) term -> . term multiplication_operator factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 87
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    m_expression                   shift and go to state 159
    term                           shift and go to state 93
    factor                         shift and go to state 94
    variable                       shift and go to state 95
    cte                            shift and go to state 96
    invocation                     shift and go to state 97
    expression_parenthesis         shift and go to state 98

state 126

    (92) comparison_operator -> LESS .

    ID              reduce using rule 92 (comparison_operator -> LESS .)
    CTEI            reduce using rule 92 (comparison_operator -> LESS .)
    CTEF            reduce using rule 92 (comparison_operator -> LESS .)
    CTEC            reduce using rule 92 (comparison_operator -> LESS .)
    CTEB            reduce using rule 92 (comparison_operator -> LESS .)
    LPAREN          reduce using rule 92 (comparison_operator -> LESS .)


state 127

    (93) comparison_operator -> GREATER .

    ID              reduce using rule 93 (comparison_operator -> GREATER .)
    CTEI            reduce using rule 93 (comparison_operator -> GREATER .)
    CTEF            reduce using rule 93 (comparison_operator -> GREATER .)
    CTEC            reduce using rule 93 (comparison_operator -> GREATER .)
    CTEB            reduce using rule 93 (comparison_operator -> GREATER .)
    LPAREN          reduce using rule 93 (comparison_operator -> GREATER .)


state 128

    (94) comparison_operator -> EQUALS .

    ID              reduce using rule 94 (comparison_operator -> EQUALS .)
    CTEI            reduce using rule 94 (comparison_operator -> EQUALS .)
    CTEF            reduce using rule 94 (comparison_operator -> EQUALS .)
    CTEC            reduce using rule 94 (comparison_operator -> EQUALS .)
    CTEB            reduce using rule 94 (comparison_operator -> EQUALS .)
    LPAREN          reduce using rule 94 (comparison_operator -> EQUALS .)


state 129

    (95) comparison_operator -> NOTEQUAL .

    ID              reduce using rule 95 (comparison_operator -> NOTEQUAL .)
    CTEI            reduce using rule 95 (comparison_operator -> NOTEQUAL .)
    CTEF            reduce using rule 95 (comparison_operator -> NOTEQUAL .)
    CTEC            reduce using rule 95 (comparison_operator -> NOTEQUAL .)
    CTEB            reduce using rule 95 (comparison_operator -> NOTEQUAL .)
    LPAREN          reduce using rule 95 (comparison_operator -> NOTEQUAL .)


state 130

    (96) comparison_operator -> GREATERTHAN .

    ID              reduce using rule 96 (comparison_operator -> GREATERTHAN .)
    CTEI            reduce using rule 96 (comparison_operator -> GREATERTHAN .)
    CTEF            reduce using rule 96 (comparison_operator -> GREATERTHAN .)
    CTEC            reduce using rule 96 (comparison_operator -> GREATERTHAN .)
    CTEB            reduce using rule 96 (comparison_operator -> GREATERTHAN .)
    LPAREN          reduce using rule 96 (comparison_operator -> GREATERTHAN .)


state 131

    (97) comparison_operator -> LESSTHAN .

    ID              reduce using rule 97 (comparison_operator -> LESSTHAN .)
    CTEI            reduce using rule 97 (comparison_operator -> LESSTHAN .)
    CTEF            reduce using rule 97 (comparison_operator -> LESSTHAN .)
    CTEC            reduce using rule 97 (comparison_operator -> LESSTHAN .)
    CTEB            reduce using rule 97 (comparison_operator -> LESSTHAN .)
    LPAREN          reduce using rule 97 (comparison_operator -> LESSTHAN .)


state 132

    (84) m_expression -> m_expression addition_operator . term
    (85) term -> . factor
    (86) term -> . term multiplication_operator factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 87
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    term                           shift and go to state 160
    factor                         shift and go to state 94
    variable                       shift and go to state 95
    cte                            shift and go to state 96
    invocation                     shift and go to state 97
    expression_parenthesis         shift and go to state 98

state 133

    (98) addition_operator -> PLUS .

    ID              reduce using rule 98 (addition_operator -> PLUS .)
    CTEI            reduce using rule 98 (addition_operator -> PLUS .)
    CTEF            reduce using rule 98 (addition_operator -> PLUS .)
    CTEC            reduce using rule 98 (addition_operator -> PLUS .)
    CTEB            reduce using rule 98 (addition_operator -> PLUS .)
    LPAREN          reduce using rule 98 (addition_operator -> PLUS .)


state 134

    (99) addition_operator -> MINUS .

    ID              reduce using rule 99 (addition_operator -> MINUS .)
    CTEI            reduce using rule 99 (addition_operator -> MINUS .)
    CTEF            reduce using rule 99 (addition_operator -> MINUS .)
    CTEC            reduce using rule 99 (addition_operator -> MINUS .)
    CTEB            reduce using rule 99 (addition_operator -> MINUS .)
    LPAREN          reduce using rule 99 (addition_operator -> MINUS .)


state 135

    (86) term -> term multiplication_operator . factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 87
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    factor                         shift and go to state 161
    variable                       shift and go to state 95
    cte                            shift and go to state 96
    invocation                     shift and go to state 97
    expression_parenthesis         shift and go to state 98

state 136

    (102) multiplication_operator -> TIMES .

    ID              reduce using rule 102 (multiplication_operator -> TIMES .)
    CTEI            reduce using rule 102 (multiplication_operator -> TIMES .)
    CTEF            reduce using rule 102 (multiplication_operator -> TIMES .)
    CTEC            reduce using rule 102 (multiplication_operator -> TIMES .)
    CTEB            reduce using rule 102 (multiplication_operator -> TIMES .)
    LPAREN          reduce using rule 102 (multiplication_operator -> TIMES .)


state 137

    (103) multiplication_operator -> DIVIDE .

    ID              reduce using rule 103 (multiplication_operator -> DIVIDE .)
    CTEI            reduce using rule 103 (multiplication_operator -> DIVIDE .)
    CTEF            reduce using rule 103 (multiplication_operator -> DIVIDE .)
    CTEC            reduce using rule 103 (multiplication_operator -> DIVIDE .)
    CTEB            reduce using rule 103 (multiplication_operator -> DIVIDE .)
    LPAREN          reduce using rule 103 (multiplication_operator -> DIVIDE .)


state 138

    (91) expression_parenthesis -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 162


state 139

    (13) main -> MAIN LPAREN RPAREN main_scope var_declarations block .

    END             reduce using rule 13 (main -> MAIN LPAREN RPAREN main_scope var_declarations block .)


state 140

    (58) read -> READ LPAREN variable_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 163


state 141

    (60) variable_list -> variable_list COMMA . variable
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 38

    variable                       shift and go to state 164

state 142

    (78) assingation -> variable ASSIGN expression SEMICOLON .

    READ            reduce using rule 78 (assingation -> variable ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 78 (assingation -> variable ASSIGN expression SEMICOLON .)
    DO              reduce using rule 78 (assingation -> variable ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 78 (assingation -> variable ASSIGN expression SEMICOLON .)
    IF              reduce using rule 78 (assingation -> variable ASSIGN expression SEMICOLON .)
    ID              reduce using rule 78 (assingation -> variable ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 78 (assingation -> variable ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 78 (assingation -> variable ASSIGN expression SEMICOLON .)


state 143

    (46) for -> FOR LPAREN ID for_1 . ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    ASSIGN          shift and go to state 165


state 144

    (47) for_1 -> empty .

    ASSIGN          reduce using rule 47 (for_1 -> empty .)


state 145

    (61) invocation -> ID invocation_1 LPAREN invocation_2 . expressions RPAREN invocation_5 SEMICOLON invocation_6
    (68) expressions -> . expressions COMMA invocation_4 expression invocation_3
    (69) expressions -> . expression invocation_3
    (70) expressions -> . empty
    (71) expression -> . t_expression
    (72) expression -> . NOT t_expression
    (112) empty -> .
    (79) t_expression -> . g_expression
    (80) t_expression -> . t_expression boolean_operator g_expression
    (81) g_expression -> . m_expression
    (82) g_expression -> . g_expression comparison_operator m_expression
    (83) m_expression -> . term
    (84) m_expression -> . m_expression addition_operator term
    (85) term -> . factor
    (86) term -> . term multiplication_operator factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 90
    RPAREN          reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    ID              shift and go to state 87
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    expressions                    shift and go to state 166
    expression                     shift and go to state 167
    empty                          shift and go to state 168
    t_expression                   shift and go to state 89
    g_expression                   shift and go to state 91
    m_expression                   shift and go to state 92
    term                           shift and go to state 93
    factor                         shift and go to state 94
    variable                       shift and go to state 95
    cte                            shift and go to state 96
    invocation                     shift and go to state 97
    expression_parenthesis         shift and go to state 98

state 146

    (63) invocation_2 -> empty .

    NOT             reduce using rule 63 (invocation_2 -> empty .)
    ID              reduce using rule 63 (invocation_2 -> empty .)
    CTEI            reduce using rule 63 (invocation_2 -> empty .)
    CTEF            reduce using rule 63 (invocation_2 -> empty .)
    CTEC            reduce using rule 63 (invocation_2 -> empty .)
    CTEB            reduce using rule 63 (invocation_2 -> empty .)
    LPAREN          reduce using rule 63 (invocation_2 -> empty .)
    RPAREN          reduce using rule 63 (invocation_2 -> empty .)
    COMMA           reduce using rule 63 (invocation_2 -> empty .)


state 147

    (45) do_while -> DO breadcrumb block WHILE . LPAREN expression RPAREN gotot SEMICOLON

    LPAREN          shift and go to state 169


state 148

    (51) while -> WHILE breadcrumb LPAREN expression . RPAREN gotof block

    RPAREN          shift and go to state 170


state 149

    (54) if_else -> IF LPAREN expression RPAREN . gotof block ELSE goto block
    (53) if -> IF LPAREN expression RPAREN . gotof block
    (57) gotof -> . empty
    (112) empty -> .

    LBRACE          reduce using rule 112 (empty -> .)

    gotof                          shift and go to state 171
    empty                          shift and go to state 172

state 150

    (73) print -> PRINT LPAREN print_arguments RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 173


state 151

    (75) print_arguments -> print_arguments COMMA . print_argument
    (76) print_argument -> . CTES
    (77) print_argument -> . expression
    (71) expression -> . t_expression
    (72) expression -> . NOT t_expression
    (79) t_expression -> . g_expression
    (80) t_expression -> . t_expression boolean_operator g_expression
    (81) g_expression -> . m_expression
    (82) g_expression -> . g_expression comparison_operator m_expression
    (83) m_expression -> . term
    (84) m_expression -> . m_expression addition_operator term
    (85) term -> . factor
    (86) term -> . term multiplication_operator factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    CTES            shift and go to state 116
    NOT             shift and go to state 90
    ID              shift and go to state 87
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    print_argument                 shift and go to state 174
    expression                     shift and go to state 117
    t_expression                   shift and go to state 89
    g_expression                   shift and go to state 91
    m_expression                   shift and go to state 92
    term                           shift and go to state 93
    factor                         shift and go to state 94
    variable                       shift and go to state 95
    cte                            shift and go to state 96
    invocation                     shift and go to state 97
    expression_parenthesis         shift and go to state 98

state 152

    (29) parameter -> simple_type . ID

    ID              shift and go to state 175


state 153

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations
    (26) parameters -> parameters . COMMA parameter
    (20) close_var_declaration -> . empty
    (112) empty -> .

    COMMA           shift and go to state 177
    RPAREN          reduce using rule 112 (empty -> .)

    close_var_declaration          shift and go to state 176
    empty                          shift and go to state 85

state 154

    (27) parameters -> parameter .

    COMMA           reduce using rule 27 (parameters -> parameter .)
    RPAREN          reduce using rule 27 (parameters -> parameter .)


state 155

    (28) parameters -> empty .

    COMMA           reduce using rule 28 (parameters -> empty .)
    RPAREN          reduce using rule 28 (parameters -> empty .)


state 156

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations
    (26) parameters -> parameters . COMMA parameter
    (20) close_var_declaration -> . empty
    (112) empty -> .

    COMMA           shift and go to state 177
    RPAREN          reduce using rule 112 (empty -> .)

    close_var_declaration          shift and go to state 178
    empty                          shift and go to state 85

state 157

    (25) variable -> ID LBRACK expression RBRACK LBRACK . expression RBRACK
    (71) expression -> . t_expression
    (72) expression -> . NOT t_expression
    (79) t_expression -> . g_expression
    (80) t_expression -> . t_expression boolean_operator g_expression
    (81) g_expression -> . m_expression
    (82) g_expression -> . g_expression comparison_operator m_expression
    (83) m_expression -> . term
    (84) m_expression -> . m_expression addition_operator term
    (85) term -> . factor
    (86) term -> . term multiplication_operator factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 90
    ID              shift and go to state 87
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    expression                     shift and go to state 179
    t_expression                   shift and go to state 89
    g_expression                   shift and go to state 91
    m_expression                   shift and go to state 92
    term                           shift and go to state 93
    factor                         shift and go to state 94
    variable                       shift and go to state 95
    cte                            shift and go to state 96
    invocation                     shift and go to state 97
    expression_parenthesis         shift and go to state 98

state 158

    (80) t_expression -> t_expression boolean_operator g_expression .
    (82) g_expression -> g_expression . comparison_operator m_expression
    (92) comparison_operator -> . LESS
    (93) comparison_operator -> . GREATER
    (94) comparison_operator -> . EQUALS
    (95) comparison_operator -> . NOTEQUAL
    (96) comparison_operator -> . GREATERTHAN
    (97) comparison_operator -> . LESSTHAN

    AND             reduce using rule 80 (t_expression -> t_expression boolean_operator g_expression .)
    OR              reduce using rule 80 (t_expression -> t_expression boolean_operator g_expression .)
    RBRACK          reduce using rule 80 (t_expression -> t_expression boolean_operator g_expression .)
    SEMICOLON       reduce using rule 80 (t_expression -> t_expression boolean_operator g_expression .)
    RPAREN          reduce using rule 80 (t_expression -> t_expression boolean_operator g_expression .)
    COMMA           reduce using rule 80 (t_expression -> t_expression boolean_operator g_expression .)
    FROM            reduce using rule 80 (t_expression -> t_expression boolean_operator g_expression .)
    LESS            shift and go to state 126
    GREATER         shift and go to state 127
    EQUALS          shift and go to state 128
    NOTEQUAL        shift and go to state 129
    GREATERTHAN     shift and go to state 130
    LESSTHAN        shift and go to state 131

    comparison_operator            shift and go to state 125

state 159

    (82) g_expression -> g_expression comparison_operator m_expression .
    (84) m_expression -> m_expression . addition_operator term
    (98) addition_operator -> . PLUS
    (99) addition_operator -> . MINUS

    LESS            reduce using rule 82 (g_expression -> g_expression comparison_operator m_expression .)
    GREATER         reduce using rule 82 (g_expression -> g_expression comparison_operator m_expression .)
    EQUALS          reduce using rule 82 (g_expression -> g_expression comparison_operator m_expression .)
    NOTEQUAL        reduce using rule 82 (g_expression -> g_expression comparison_operator m_expression .)
    GREATERTHAN     reduce using rule 82 (g_expression -> g_expression comparison_operator m_expression .)
    LESSTHAN        reduce using rule 82 (g_expression -> g_expression comparison_operator m_expression .)
    AND             reduce using rule 82 (g_expression -> g_expression comparison_operator m_expression .)
    OR              reduce using rule 82 (g_expression -> g_expression comparison_operator m_expression .)
    RBRACK          reduce using rule 82 (g_expression -> g_expression comparison_operator m_expression .)
    SEMICOLON       reduce using rule 82 (g_expression -> g_expression comparison_operator m_expression .)
    RPAREN          reduce using rule 82 (g_expression -> g_expression comparison_operator m_expression .)
    COMMA           reduce using rule 82 (g_expression -> g_expression comparison_operator m_expression .)
    FROM            reduce using rule 82 (g_expression -> g_expression comparison_operator m_expression .)
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134

    addition_operator              shift and go to state 132

state 160

    (84) m_expression -> m_expression addition_operator term .
    (86) term -> term . multiplication_operator factor
    (102) multiplication_operator -> . TIMES
    (103) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 84 (m_expression -> m_expression addition_operator term .)
    MINUS           reduce using rule 84 (m_expression -> m_expression addition_operator term .)
    LESS            reduce using rule 84 (m_expression -> m_expression addition_operator term .)
    GREATER         reduce using rule 84 (m_expression -> m_expression addition_operator term .)
    EQUALS          reduce using rule 84 (m_expression -> m_expression addition_operator term .)
    NOTEQUAL        reduce using rule 84 (m_expression -> m_expression addition_operator term .)
    GREATERTHAN     reduce using rule 84 (m_expression -> m_expression addition_operator term .)
    LESSTHAN        reduce using rule 84 (m_expression -> m_expression addition_operator term .)
    AND             reduce using rule 84 (m_expression -> m_expression addition_operator term .)
    OR              reduce using rule 84 (m_expression -> m_expression addition_operator term .)
    RBRACK          reduce using rule 84 (m_expression -> m_expression addition_operator term .)
    SEMICOLON       reduce using rule 84 (m_expression -> m_expression addition_operator term .)
    RPAREN          reduce using rule 84 (m_expression -> m_expression addition_operator term .)
    COMMA           reduce using rule 84 (m_expression -> m_expression addition_operator term .)
    FROM            reduce using rule 84 (m_expression -> m_expression addition_operator term .)
    TIMES           shift and go to state 136
    DIVIDE          shift and go to state 137

    multiplication_operator        shift and go to state 135

state 161

    (86) term -> term multiplication_operator factor .

    TIMES           reduce using rule 86 (term -> term multiplication_operator factor .)
    DIVIDE          reduce using rule 86 (term -> term multiplication_operator factor .)
    PLUS            reduce using rule 86 (term -> term multiplication_operator factor .)
    MINUS           reduce using rule 86 (term -> term multiplication_operator factor .)
    LESS            reduce using rule 86 (term -> term multiplication_operator factor .)
    GREATER         reduce using rule 86 (term -> term multiplication_operator factor .)
    EQUALS          reduce using rule 86 (term -> term multiplication_operator factor .)
    NOTEQUAL        reduce using rule 86 (term -> term multiplication_operator factor .)
    GREATERTHAN     reduce using rule 86 (term -> term multiplication_operator factor .)
    LESSTHAN        reduce using rule 86 (term -> term multiplication_operator factor .)
    AND             reduce using rule 86 (term -> term multiplication_operator factor .)
    OR              reduce using rule 86 (term -> term multiplication_operator factor .)
    RBRACK          reduce using rule 86 (term -> term multiplication_operator factor .)
    SEMICOLON       reduce using rule 86 (term -> term multiplication_operator factor .)
    RPAREN          reduce using rule 86 (term -> term multiplication_operator factor .)
    COMMA           reduce using rule 86 (term -> term multiplication_operator factor .)
    FROM            reduce using rule 86 (term -> term multiplication_operator factor .)


state 162

    (91) expression_parenthesis -> LPAREN expression RPAREN .

    TIMES           reduce using rule 91 (expression_parenthesis -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 91 (expression_parenthesis -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 91 (expression_parenthesis -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 91 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESS            reduce using rule 91 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 91 (expression_parenthesis -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 91 (expression_parenthesis -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 91 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 91 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 91 (expression_parenthesis -> LPAREN expression RPAREN .)
    AND             reduce using rule 91 (expression_parenthesis -> LPAREN expression RPAREN .)
    OR              reduce using rule 91 (expression_parenthesis -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 91 (expression_parenthesis -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 91 (expression_parenthesis -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 91 (expression_parenthesis -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 91 (expression_parenthesis -> LPAREN expression RPAREN .)
    FROM            reduce using rule 91 (expression_parenthesis -> LPAREN expression RPAREN .)


state 163

    (58) read -> READ LPAREN variable_list RPAREN SEMICOLON .

    READ            reduce using rule 58 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    FOR             reduce using rule 58 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    DO              reduce using rule 58 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    WHILE           reduce using rule 58 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    IF              reduce using rule 58 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    ID              reduce using rule 58 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    PRINT           reduce using rule 58 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    RBRACE          reduce using rule 58 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)


state 164

    (60) variable_list -> variable_list COMMA variable .

    RPAREN          reduce using rule 60 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 60 (variable_list -> variable_list COMMA variable .)


state 165

    (46) for -> FOR LPAREN ID for_1 ASSIGN . expression for_2 FROM expression RPAREN for_3 DO block for_4
    (71) expression -> . t_expression
    (72) expression -> . NOT t_expression
    (79) t_expression -> . g_expression
    (80) t_expression -> . t_expression boolean_operator g_expression
    (81) g_expression -> . m_expression
    (82) g_expression -> . g_expression comparison_operator m_expression
    (83) m_expression -> . term
    (84) m_expression -> . m_expression addition_operator term
    (85) term -> . factor
    (86) term -> . term multiplication_operator factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 90
    ID              shift and go to state 87
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    expression                     shift and go to state 180
    t_expression                   shift and go to state 89
    g_expression                   shift and go to state 91
    m_expression                   shift and go to state 92
    term                           shift and go to state 93
    factor                         shift and go to state 94
    variable                       shift and go to state 95
    cte                            shift and go to state 96
    invocation                     shift and go to state 97
    expression_parenthesis         shift and go to state 98

state 166

    (61) invocation -> ID invocation_1 LPAREN invocation_2 expressions . RPAREN invocation_5 SEMICOLON invocation_6
    (68) expressions -> expressions . COMMA invocation_4 expression invocation_3

    RPAREN          shift and go to state 181
    COMMA           shift and go to state 182


state 167

    (69) expressions -> expression . invocation_3
    (64) invocation_3 -> . empty
    (112) empty -> .

    RPAREN          reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)

    invocation_3                   shift and go to state 183
    empty                          shift and go to state 184

state 168

    (70) expressions -> empty .

    RPAREN          reduce using rule 70 (expressions -> empty .)
    COMMA           reduce using rule 70 (expressions -> empty .)


state 169

    (45) do_while -> DO breadcrumb block WHILE LPAREN . expression RPAREN gotot SEMICOLON
    (71) expression -> . t_expression
    (72) expression -> . NOT t_expression
    (79) t_expression -> . g_expression
    (80) t_expression -> . t_expression boolean_operator g_expression
    (81) g_expression -> . m_expression
    (82) g_expression -> . g_expression comparison_operator m_expression
    (83) m_expression -> . term
    (84) m_expression -> . m_expression addition_operator term
    (85) term -> . factor
    (86) term -> . term multiplication_operator factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 90
    ID              shift and go to state 87
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    expression                     shift and go to state 185
    t_expression                   shift and go to state 89
    g_expression                   shift and go to state 91
    m_expression                   shift and go to state 92
    term                           shift and go to state 93
    factor                         shift and go to state 94
    variable                       shift and go to state 95
    cte                            shift and go to state 96
    invocation                     shift and go to state 97
    expression_parenthesis         shift and go to state 98

state 170

    (51) while -> WHILE breadcrumb LPAREN expression RPAREN . gotof block
    (57) gotof -> . empty
    (112) empty -> .

    LBRACE          reduce using rule 112 (empty -> .)

    gotof                          shift and go to state 186
    empty                          shift and go to state 172

state 171

    (54) if_else -> IF LPAREN expression RPAREN gotof . block ELSE goto block
    (53) if -> IF LPAREN expression RPAREN gotof . block
    (30) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 33

    block                          shift and go to state 187

state 172

    (57) gotof -> empty .

    LBRACE          reduce using rule 57 (gotof -> empty .)


state 173

    (73) print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .

    READ            reduce using rule 73 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    FOR             reduce using rule 73 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    DO              reduce using rule 73 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    WHILE           reduce using rule 73 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    IF              reduce using rule 73 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ID              reduce using rule 73 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    PRINT           reduce using rule 73 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    RBRACE          reduce using rule 73 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)


state 174

    (75) print_arguments -> print_arguments COMMA print_argument .

    RPAREN          reduce using rule 75 (print_arguments -> print_arguments COMMA print_argument .)
    COMMA           reduce using rule 75 (print_arguments -> print_arguments COMMA print_argument .)


state 175

    (29) parameter -> simple_type ID .

    COMMA           reduce using rule 29 (parameter -> simple_type ID .)
    RPAREN          reduce using rule 29 (parameter -> simple_type ID .)


state 176

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations

    RPAREN          shift and go to state 188


state 177

    (26) parameters -> parameters COMMA . parameter
    (29) parameter -> . simple_type ID
    (104) simple_type -> . INT
    (105) simple_type -> . FLOAT
    (106) simple_type -> . CHAR
    (107) simple_type -> . BOOLEAN

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28

    parameter                      shift and go to state 189
    simple_type                    shift and go to state 152

state 178

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations

    RPAREN          shift and go to state 190


state 179

    (25) variable -> ID LBRACK expression RBRACK LBRACK expression . RBRACK

    RBRACK          shift and go to state 191


state 180

    (46) for -> FOR LPAREN ID for_1 ASSIGN expression . for_2 FROM expression RPAREN for_3 DO block for_4
    (48) for_2 -> . empty
    (112) empty -> .

    FROM            reduce using rule 112 (empty -> .)

    for_2                          shift and go to state 192
    empty                          shift and go to state 193

state 181

    (61) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN . invocation_5 SEMICOLON invocation_6
    (66) invocation_5 -> . empty
    (112) empty -> .

    SEMICOLON       reduce using rule 112 (empty -> .)

    invocation_5                   shift and go to state 194
    empty                          shift and go to state 195

state 182

    (68) expressions -> expressions COMMA . invocation_4 expression invocation_3
    (65) invocation_4 -> . empty
    (112) empty -> .

    NOT             reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    CTEI            reduce using rule 112 (empty -> .)
    CTEF            reduce using rule 112 (empty -> .)
    CTEC            reduce using rule 112 (empty -> .)
    CTEB            reduce using rule 112 (empty -> .)
    LPAREN          reduce using rule 112 (empty -> .)

    invocation_4                   shift and go to state 196
    empty                          shift and go to state 197

state 183

    (69) expressions -> expression invocation_3 .

    RPAREN          reduce using rule 69 (expressions -> expression invocation_3 .)
    COMMA           reduce using rule 69 (expressions -> expression invocation_3 .)


state 184

    (64) invocation_3 -> empty .

    RPAREN          reduce using rule 64 (invocation_3 -> empty .)
    COMMA           reduce using rule 64 (invocation_3 -> empty .)


state 185

    (45) do_while -> DO breadcrumb block WHILE LPAREN expression . RPAREN gotot SEMICOLON

    RPAREN          shift and go to state 198


state 186

    (51) while -> WHILE breadcrumb LPAREN expression RPAREN gotof . block
    (30) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 33

    block                          shift and go to state 199

state 187

    (54) if_else -> IF LPAREN expression RPAREN gotof block . ELSE goto block
    (53) if -> IF LPAREN expression RPAREN gotof block .

    ELSE            shift and go to state 200
    READ            reduce using rule 53 (if -> IF LPAREN expression RPAREN gotof block .)
    FOR             reduce using rule 53 (if -> IF LPAREN expression RPAREN gotof block .)
    DO              reduce using rule 53 (if -> IF LPAREN expression RPAREN gotof block .)
    WHILE           reduce using rule 53 (if -> IF LPAREN expression RPAREN gotof block .)
    IF              reduce using rule 53 (if -> IF LPAREN expression RPAREN gotof block .)
    ID              reduce using rule 53 (if -> IF LPAREN expression RPAREN gotof block .)
    PRINT           reduce using rule 53 (if -> IF LPAREN expression RPAREN gotof block .)
    RBRACE          reduce using rule 53 (if -> IF LPAREN expression RPAREN gotof block .)


state 188

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations
    (15) var_declarations -> . var_declaration_list
    (16) var_declarations -> . empty
    (17) var_declaration_list -> . var_declaration var_declarations
    (112) empty -> .
    (18) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 112 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 201
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 189

    (26) parameters -> parameters COMMA parameter .

    COMMA           reduce using rule 26 (parameters -> parameters COMMA parameter .)
    RPAREN          reduce using rule 26 (parameters -> parameters COMMA parameter .)


state 190

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations
    (15) var_declarations -> . var_declaration_list
    (16) var_declarations -> . empty
    (17) var_declaration_list -> . var_declaration var_declarations
    (112) empty -> .
    (18) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 112 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 202
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 191

    (25) variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .

    COMMA           reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    TIMES           reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    PLUS            reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    MINUS           reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESS            reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATER         reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    EQUALS          reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    AND             reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    OR              reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RBRACK          reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RPAREN          reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    FROM            reduce using rule 25 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)


state 192

    (46) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 . FROM expression RPAREN for_3 DO block for_4

    FROM            shift and go to state 203


state 193

    (48) for_2 -> empty .

    FROM            reduce using rule 48 (for_2 -> empty .)


state 194

    (61) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 . SEMICOLON invocation_6

    SEMICOLON       shift and go to state 204


state 195

    (66) invocation_5 -> empty .

    SEMICOLON       reduce using rule 66 (invocation_5 -> empty .)


state 196

    (68) expressions -> expressions COMMA invocation_4 . expression invocation_3
    (71) expression -> . t_expression
    (72) expression -> . NOT t_expression
    (79) t_expression -> . g_expression
    (80) t_expression -> . t_expression boolean_operator g_expression
    (81) g_expression -> . m_expression
    (82) g_expression -> . g_expression comparison_operator m_expression
    (83) m_expression -> . term
    (84) m_expression -> . m_expression addition_operator term
    (85) term -> . factor
    (86) term -> . term multiplication_operator factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 90
    ID              shift and go to state 87
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    expression                     shift and go to state 205
    t_expression                   shift and go to state 89
    g_expression                   shift and go to state 91
    m_expression                   shift and go to state 92
    term                           shift and go to state 93
    factor                         shift and go to state 94
    variable                       shift and go to state 95
    cte                            shift and go to state 96
    invocation                     shift and go to state 97
    expression_parenthesis         shift and go to state 98

state 197

    (65) invocation_4 -> empty .

    NOT             reduce using rule 65 (invocation_4 -> empty .)
    ID              reduce using rule 65 (invocation_4 -> empty .)
    CTEI            reduce using rule 65 (invocation_4 -> empty .)
    CTEF            reduce using rule 65 (invocation_4 -> empty .)
    CTEC            reduce using rule 65 (invocation_4 -> empty .)
    CTEB            reduce using rule 65 (invocation_4 -> empty .)
    LPAREN          reduce using rule 65 (invocation_4 -> empty .)


state 198

    (45) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN . gotot SEMICOLON
    (55) gotot -> . empty
    (112) empty -> .

    SEMICOLON       reduce using rule 112 (empty -> .)

    gotot                          shift and go to state 206
    empty                          shift and go to state 207

state 199

    (51) while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .

    READ            reduce using rule 51 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    FOR             reduce using rule 51 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    DO              reduce using rule 51 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    WHILE           reduce using rule 51 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    IF              reduce using rule 51 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    ID              reduce using rule 51 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    PRINT           reduce using rule 51 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    RBRACE          reduce using rule 51 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)


state 200

    (54) if_else -> IF LPAREN expression RPAREN gotof block ELSE . goto block
    (56) goto -> . empty
    (112) empty -> .

    LBRACE          reduce using rule 112 (empty -> .)

    goto                           shift and go to state 208
    empty                          shift and go to state 209

state 201

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .

    LBRACE          reduce using rule 7 (function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .)


state 202

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .

    LBRACE          reduce using rule 8 (function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .)


state 203

    (46) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM . expression RPAREN for_3 DO block for_4
    (71) expression -> . t_expression
    (72) expression -> . NOT t_expression
    (79) t_expression -> . g_expression
    (80) t_expression -> . t_expression boolean_operator g_expression
    (81) g_expression -> . m_expression
    (82) g_expression -> . g_expression comparison_operator m_expression
    (83) m_expression -> . term
    (84) m_expression -> . m_expression addition_operator term
    (85) term -> . factor
    (86) term -> . term multiplication_operator factor
    (87) factor -> . variable
    (88) factor -> . cte
    (89) factor -> . invocation
    (90) factor -> . expression_parenthesis
    (23) variable -> . ID
    (24) variable -> . ID LBRACK expression RBRACK
    (25) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (108) cte -> . CTEI
    (109) cte -> . CTEF
    (110) cte -> . CTEC
    (111) cte -> . CTEB
    (61) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (91) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 90
    ID              shift and go to state 87
    CTEI            shift and go to state 99
    CTEF            shift and go to state 100
    CTEC            shift and go to state 101
    CTEB            shift and go to state 102
    LPAREN          shift and go to state 103

    expression                     shift and go to state 210
    t_expression                   shift and go to state 89
    g_expression                   shift and go to state 91
    m_expression                   shift and go to state 92
    term                           shift and go to state 93
    factor                         shift and go to state 94
    variable                       shift and go to state 95
    cte                            shift and go to state 96
    invocation                     shift and go to state 97
    expression_parenthesis         shift and go to state 98

state 204

    (61) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON . invocation_6
    (67) invocation_6 -> . empty
    (112) empty -> .

    READ            reduce using rule 112 (empty -> .)
    FOR             reduce using rule 112 (empty -> .)
    DO              reduce using rule 112 (empty -> .)
    WHILE           reduce using rule 112 (empty -> .)
    IF              reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    PRINT           reduce using rule 112 (empty -> .)
    RBRACE          reduce using rule 112 (empty -> .)
    TIMES           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)
    PLUS            reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GREATER         reduce using rule 112 (empty -> .)
    EQUALS          reduce using rule 112 (empty -> .)
    NOTEQUAL        reduce using rule 112 (empty -> .)
    GREATERTHAN     reduce using rule 112 (empty -> .)
    LESSTHAN        reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    RBRACK          reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)
    RPAREN          reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    FROM            reduce using rule 112 (empty -> .)

    invocation_6                   shift and go to state 211
    empty                          shift and go to state 212

state 205

    (68) expressions -> expressions COMMA invocation_4 expression . invocation_3
    (64) invocation_3 -> . empty
    (112) empty -> .

    RPAREN          reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)

    invocation_3                   shift and go to state 213
    empty                          shift and go to state 184

state 206

    (45) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot . SEMICOLON

    SEMICOLON       shift and go to state 214


state 207

    (55) gotot -> empty .

    SEMICOLON       reduce using rule 55 (gotot -> empty .)


state 208

    (54) if_else -> IF LPAREN expression RPAREN gotof block ELSE goto . block
    (30) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 33

    block                          shift and go to state 215

state 209

    (56) goto -> empty .

    LBRACE          reduce using rule 56 (goto -> empty .)


state 210

    (46) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression . RPAREN for_3 DO block for_4

    RPAREN          shift and go to state 216


state 211

    (61) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .

    READ            reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    FOR             reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DO              reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    WHILE           reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    IF              reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ID              reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PRINT           reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACE          reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    TIMES           reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DIVIDE          reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PLUS            reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    MINUS           reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESS            reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATER         reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    EQUALS          reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    NOTEQUAL        reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATERTHAN     reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESSTHAN        reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    AND             reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    OR              reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACK          reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    SEMICOLON       reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RPAREN          reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    COMMA           reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    FROM            reduce using rule 61 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)


state 212

    (67) invocation_6 -> empty .

    READ            reduce using rule 67 (invocation_6 -> empty .)
    FOR             reduce using rule 67 (invocation_6 -> empty .)
    DO              reduce using rule 67 (invocation_6 -> empty .)
    WHILE           reduce using rule 67 (invocation_6 -> empty .)
    IF              reduce using rule 67 (invocation_6 -> empty .)
    ID              reduce using rule 67 (invocation_6 -> empty .)
    PRINT           reduce using rule 67 (invocation_6 -> empty .)
    RBRACE          reduce using rule 67 (invocation_6 -> empty .)
    TIMES           reduce using rule 67 (invocation_6 -> empty .)
    DIVIDE          reduce using rule 67 (invocation_6 -> empty .)
    PLUS            reduce using rule 67 (invocation_6 -> empty .)
    MINUS           reduce using rule 67 (invocation_6 -> empty .)
    LESS            reduce using rule 67 (invocation_6 -> empty .)
    GREATER         reduce using rule 67 (invocation_6 -> empty .)
    EQUALS          reduce using rule 67 (invocation_6 -> empty .)
    NOTEQUAL        reduce using rule 67 (invocation_6 -> empty .)
    GREATERTHAN     reduce using rule 67 (invocation_6 -> empty .)
    LESSTHAN        reduce using rule 67 (invocation_6 -> empty .)
    AND             reduce using rule 67 (invocation_6 -> empty .)
    OR              reduce using rule 67 (invocation_6 -> empty .)
    RBRACK          reduce using rule 67 (invocation_6 -> empty .)
    SEMICOLON       reduce using rule 67 (invocation_6 -> empty .)
    RPAREN          reduce using rule 67 (invocation_6 -> empty .)
    COMMA           reduce using rule 67 (invocation_6 -> empty .)
    FROM            reduce using rule 67 (invocation_6 -> empty .)


state 213

    (68) expressions -> expressions COMMA invocation_4 expression invocation_3 .

    RPAREN          reduce using rule 68 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)
    COMMA           reduce using rule 68 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)


state 214

    (45) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .

    READ            reduce using rule 45 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    FOR             reduce using rule 45 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    DO              reduce using rule 45 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    WHILE           reduce using rule 45 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    IF              reduce using rule 45 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ID              reduce using rule 45 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    PRINT           reduce using rule 45 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    RBRACE          reduce using rule 45 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)


state 215

    (54) if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .

    READ            reduce using rule 54 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    FOR             reduce using rule 54 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    DO              reduce using rule 54 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    WHILE           reduce using rule 54 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    IF              reduce using rule 54 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    ID              reduce using rule 54 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    PRINT           reduce using rule 54 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    RBRACE          reduce using rule 54 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)


state 216

    (46) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN . for_3 DO block for_4
    (49) for_3 -> . empty
    (112) empty -> .

    DO              reduce using rule 112 (empty -> .)

    for_3                          shift and go to state 217
    empty                          shift and go to state 218

state 217

    (46) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 . DO block for_4

    DO              shift and go to state 219


state 218

    (49) for_3 -> empty .

    DO              reduce using rule 49 (for_3 -> empty .)


state 219

    (46) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO . block for_4
    (30) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 33

    block                          shift and go to state 220

state 220

    (46) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block . for_4
    (50) for_4 -> . empty
    (112) empty -> .

    READ            reduce using rule 112 (empty -> .)
    FOR             reduce using rule 112 (empty -> .)
    DO              reduce using rule 112 (empty -> .)
    WHILE           reduce using rule 112 (empty -> .)
    IF              reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    PRINT           reduce using rule 112 (empty -> .)
    RBRACE          reduce using rule 112 (empty -> .)

    for_4                          shift and go to state 221
    empty                          shift and go to state 222

state 221

    (46) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .

    READ            reduce using rule 46 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    FOR             reduce using rule 46 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    DO              reduce using rule 46 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    WHILE           reduce using rule 46 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    IF              reduce using rule 46 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    ID              reduce using rule 46 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    PRINT           reduce using rule 46 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    RBRACE          reduce using rule 46 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)


state 222

    (50) for_4 -> empty .

    READ            reduce using rule 50 (for_4 -> empty .)
    FOR             reduce using rule 50 (for_4 -> empty .)
    DO              reduce using rule 50 (for_4 -> empty .)
    WHILE           reduce using rule 50 (for_4 -> empty .)
    IF              reduce using rule 50 (for_4 -> empty .)
    ID              reduce using rule 50 (for_4 -> empty .)
    PRINT           reduce using rule 50 (for_4 -> empty .)
    RBRACE          reduce using rule 50 (for_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 7 resolved as shift
