Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMENT
    THEN

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END
Rule 2     global_scope -> empty
Rule 3     functions -> functions function
Rule 4     functions -> function
Rule 5     functions -> empty
Rule 6     function -> FUNCTION function_signature block
Rule 7     function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
Rule 8     function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
Rule 9     return -> RETURN expression SEMICOLON
Rule 10    function_1 -> empty
Rule 11    main -> MAIN LPAREN RPAREN main_scope var_declarations block
Rule 12    main_scope -> empty
Rule 13    var_declarations -> var_declaration_list
Rule 14    var_declarations -> empty
Rule 15    var_declaration_list -> var_declaration var_declarations
Rule 16    var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration
Rule 17    open_var_declaration -> empty
Rule 18    close_var_declaration -> empty
Rule 19    variables -> variable
Rule 20    variables -> variable COMMA variables
Rule 21    variable -> ID
Rule 22    variable -> ID array_true array_dim
Rule 23    variable -> ID array_true array_dim array_dim
Rule 24    variable -> ID array_true array_dim array_dim array_dim
Rule 25    array_true -> empty
Rule 26    array_dim -> LBRACK expression RBRACK
Rule 27    parameters -> parameters COMMA parameter
Rule 28    parameters -> parameter
Rule 29    parameters -> empty
Rule 30    parameter -> simple_type ID
Rule 31    block -> LBRACE block2 RBRACE
Rule 32    block2 -> block3
Rule 33    block2 -> empty
Rule 34    block3 -> statement block2
Rule 35    statement -> special_func
Rule 36    statement -> assingation
Rule 37    statement -> for
Rule 38    statement -> do_while
Rule 39    statement -> while
Rule 40    statement -> if_else
Rule 41    statement -> invocation
Rule 42    statement -> if
Rule 43    statement -> print
Rule 44    statement -> read
Rule 45    statement -> return
Rule 46    special_func -> gen_key
Rule 47    special_func -> encrypt
Rule 48    special_func -> decrypt
Rule 49    special_func -> sha_256
Rule 50    special_func -> random_salt
Rule 51    special_func -> hmac
Rule 52    special_func -> ecdsa
Rule 53    special_func -> ecdsa_key
Rule 54    ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON
Rule 55    ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
Rule 56    hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
Rule 57    random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON
Rule 58    sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON
Rule 59    gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON
Rule 60    encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
Rule 61    decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
Rule 62    read -> READ LPAREN ID RPAREN SEMICOLON
Rule 63    assing_to_call -> variable ASSIGN invocation
Rule 64    do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
Rule 65    for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
Rule 66    for_1 -> empty
Rule 67    for_2 -> empty
Rule 68    for_3 -> empty
Rule 69    for_4 -> empty
Rule 70    while -> WHILE breadcrumb LPAREN expression RPAREN gotof block
Rule 71    breadcrumb -> empty
Rule 72    if -> IF LPAREN expression RPAREN gotof block
Rule 73    if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block
Rule 74    gotot -> empty
Rule 75    goto -> empty
Rule 76    gotof -> empty
Rule 77    variable_list -> variable
Rule 78    variable_list -> variable_list COMMA variable
Rule 79    invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
Rule 80    invocation_1 -> empty
Rule 81    invocation_2 -> empty
Rule 82    invocation_3 -> empty
Rule 83    invocation_4 -> empty
Rule 84    invocation_5 -> empty
Rule 85    invocation_6 -> empty
Rule 86    expressions -> expressions COMMA invocation_4 expression invocation_3
Rule 87    expressions -> expression invocation_3
Rule 88    expressions -> empty
Rule 89    print -> PRINT LPAREN print_arguments RPAREN SEMICOLON
Rule 90    print_arguments -> print_argument
Rule 91    print_arguments -> print_arguments COMMA print_argument
Rule 92    print_argument -> CTES
Rule 93    print_argument -> expression
Rule 94    assingation -> variable ASSIGN expression SEMICOLON
Rule 95    expression -> t_expression
Rule 96    expression -> NOT t_expression
Rule 97    t_expression -> g_expression
Rule 98    t_expression -> t_expression boolean_operator g_expression
Rule 99    g_expression -> m_expression
Rule 100   g_expression -> g_expression comparison_operator m_expression
Rule 101   m_expression -> term
Rule 102   m_expression -> m_expression addition_operator term
Rule 103   term -> factor
Rule 104   term -> term multiplication_operator factor
Rule 105   factor -> variable
Rule 106   factor -> cte
Rule 107   factor -> invocation
Rule 108   factor -> expression_parenthesis
Rule 109   expression_parenthesis -> LPAREN expression RPAREN
Rule 110   comparison_operator -> LESS
Rule 111   comparison_operator -> GREATER
Rule 112   comparison_operator -> EQUALS
Rule 113   comparison_operator -> NOTEQUAL
Rule 114   comparison_operator -> GREATERTHAN
Rule 115   comparison_operator -> LESSTHAN
Rule 116   addition_operator -> PLUS
Rule 117   addition_operator -> MINUS
Rule 118   boolean_operator -> AND
Rule 119   boolean_operator -> OR
Rule 120   multiplication_operator -> TIMES
Rule 121   multiplication_operator -> DIVIDE
Rule 122   simple_type -> INT
Rule 123   simple_type -> FLOAT
Rule 124   simple_type -> CHAR
Rule 125   simple_type -> BOOLEAN
Rule 126   simple_type -> STRING
Rule 127   cte -> CTEI
Rule 128   cte -> CTEF
Rule 129   cte -> CTEC
Rule 130   cte -> CTEB
Rule 131   cte -> CTES
Rule 132   empty -> <empty>

Terminals, with rules where they appear

AND                  : 118
ASSIGN               : 63 65 94
BOOLEAN              : 125
CHAR                 : 124
COLON                : 
COMMA                : 20 27 55 56 60 61 78 86 91
COMMENT              : 
CTEB                 : 130
CTEC                 : 129
CTEF                 : 128
CTEI                 : 57 127
CTES                 : 92 131
DECRYPT              : 61
DIVIDE               : 121
DO                   : 64 65
ECDSA                : 55
ECDSAKEY             : 54
ELSE                 : 73
ENCRYPT              : 60
END                  : 1
EQUALS               : 112
FLOAT                : 123
FOR                  : 65
FROM                 : 65
FUNCTION             : 6
GENKEY               : 59
GREATER              : 111
GREATERTHAN          : 114
HMAC                 : 56
ID                   : 1 7 8 21 22 23 24 30 54 55 55 55 56 56 56 57 58 58 59 60 60 60 61 61 61 62 65 79
IF                   : 72 73
INT                  : 122
LBRACE               : 31
LBRACK               : 26
LESS                 : 110
LESSTHAN             : 115
LPAREN               : 7 8 11 54 55 56 57 58 59 60 61 62 64 65 70 72 73 79 89 109
MAIN                 : 11
MINUS                : 117
NOT                  : 96
NOTEQUAL             : 113
OR                   : 119
PLUS                 : 116
PRINT                : 89
PROGRAM              : 1
RANDOM_SALT          : 57
RBRACE               : 31
RBRACK               : 26
READ                 : 62
RETURN               : 9
RPAREN               : 7 8 11 54 55 56 57 58 59 60 61 62 64 65 70 72 73 79 89 109
SEMICOLON            : 1 9 16 54 55 56 57 58 59 60 61 62 64 79 89 94
SHA_256              : 58
SPECIAL              : 54 55 56 57 58 59 60 61
STRING               : 126
THEN                 : 
TIMES                : 120
VARIABLE             : 16
VOID                 : 8
WHILE                : 64 70
error                : 

Nonterminals, with rules where they appear

addition_operator    : 102
array_dim            : 22 23 23 24 24 24
array_true           : 22 23 24
assing_to_call       : 
assingation          : 36
block                : 6 11 64 65 70 72 73 73
block2               : 31 34
block3               : 32
boolean_operator     : 98
breadcrumb           : 64 70
close_var_declaration : 7 8 16
comparison_operator  : 100
cte                  : 106
decrypt              : 48
do_while             : 38
ecdsa                : 52
ecdsa_key            : 53
empty                : 2 5 10 12 14 17 18 25 29 33 66 67 68 69 71 74 75 76 80 81 82 83 84 85 88
encrypt              : 47
expression           : 9 26 64 65 65 70 72 73 86 87 93 94 109
expression_parenthesis : 108
expressions          : 79 86
factor               : 103 104
for                  : 37
for_1                : 65
for_2                : 65
for_3                : 65
for_4                : 65
function             : 3 4
function_1           : 7 8
function_signature   : 6
functions            : 1 3
g_expression         : 97 98 100
gen_key              : 46
global_scope         : 1
goto                 : 73
gotof                : 70 72 73
gotot                : 64
hmac                 : 51
if                   : 42
if_else              : 40
invocation           : 41 63 107
invocation_1         : 79
invocation_2         : 79
invocation_3         : 86 87
invocation_4         : 86
invocation_5         : 79
invocation_6         : 79
m_expression         : 99 100 102
main                 : 1
main_scope           : 11
multiplication_operator : 104
open_var_declaration : 7 8 16
parameter            : 27 28
parameters           : 7 8 27
print                : 43
print_argument       : 90 91
print_arguments      : 89 91
program              : 0
random_salt          : 50
read                 : 44
return               : 45
sha_256              : 49
simple_type          : 7 16 30
special_func         : 35
statement            : 34
t_expression         : 95 96 98
term                 : 101 102 104
var_declaration      : 15
var_declaration_list : 13
var_declarations     : 1 7 8 11 15
variable             : 19 20 63 77 78 94 105
variable_list        : 78
variables            : 16 20
while                : 39

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON global_scope var_declarations functions main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON global_scope var_declarations functions main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON global_scope var_declarations functions main END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . global_scope var_declarations functions main END
    (2) global_scope -> . empty
    (132) empty -> .

    VARIABLE        reduce using rule 132 (empty -> .)
    FUNCTION        reduce using rule 132 (empty -> .)
    MAIN            reduce using rule 132 (empty -> .)

    global_scope                   shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON global_scope . var_declarations functions main END
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (132) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 132 (empty -> .)
    MAIN            reduce using rule 132 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 7
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 6

    (2) global_scope -> empty .

    VARIABLE        reduce using rule 2 (global_scope -> empty .)
    FUNCTION        reduce using rule 2 (global_scope -> empty .)
    MAIN            reduce using rule 2 (global_scope -> empty .)


state 7

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations . functions main END
    (3) functions -> . functions function
    (4) functions -> . function
    (5) functions -> . empty
    (6) function -> . FUNCTION function_signature block
    (132) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 132 (empty -> .)

  ! FUNCTION        [ reduce using rule 132 (empty -> .) ]

    functions                      shift and go to state 12
    function                       shift and go to state 13
    empty                          shift and go to state 14

state 8

    (13) var_declarations -> var_declaration_list .

    FUNCTION        reduce using rule 13 (var_declarations -> var_declaration_list .)
    MAIN            reduce using rule 13 (var_declarations -> var_declaration_list .)
    LBRACE          reduce using rule 13 (var_declarations -> var_declaration_list .)


state 9

    (14) var_declarations -> empty .

    FUNCTION        reduce using rule 14 (var_declarations -> empty .)
    MAIN            reduce using rule 14 (var_declarations -> empty .)
    LBRACE          reduce using rule 14 (var_declarations -> empty .)


state 10

    (15) var_declaration_list -> var_declaration . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (132) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 132 (empty -> .)
    MAIN            reduce using rule 132 (empty -> .)
    LBRACE          reduce using rule 132 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declaration                shift and go to state 10
    var_declarations               shift and go to state 16
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9

state 11

    (16) var_declaration -> VARIABLE . open_var_declaration simple_type variables SEMICOLON close_var_declaration
    (17) open_var_declaration -> . empty
    (132) empty -> .

    INT             reduce using rule 132 (empty -> .)
    FLOAT           reduce using rule 132 (empty -> .)
    CHAR            reduce using rule 132 (empty -> .)
    BOOLEAN         reduce using rule 132 (empty -> .)
    STRING          reduce using rule 132 (empty -> .)

    open_var_declaration           shift and go to state 17
    empty                          shift and go to state 18

state 12

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions . main END
    (3) functions -> functions . function
    (11) main -> . MAIN LPAREN RPAREN main_scope var_declarations block
    (6) function -> . FUNCTION function_signature block

    MAIN            shift and go to state 21
    FUNCTION        shift and go to state 15

    main                           shift and go to state 19
    function                       shift and go to state 20

state 13

    (4) functions -> function .

    MAIN            reduce using rule 4 (functions -> function .)
    FUNCTION        reduce using rule 4 (functions -> function .)


state 14

    (5) functions -> empty .

    MAIN            reduce using rule 5 (functions -> empty .)
    FUNCTION        reduce using rule 5 (functions -> empty .)


state 15

    (6) function -> FUNCTION . function_signature block
    (7) function_signature -> . simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (8) function_signature -> . VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (122) simple_type -> . INT
    (123) simple_type -> . FLOAT
    (124) simple_type -> . CHAR
    (125) simple_type -> . BOOLEAN
    (126) simple_type -> . STRING

    VOID            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    function_signature             shift and go to state 22
    simple_type                    shift and go to state 23

state 16

    (15) var_declaration_list -> var_declaration var_declarations .

    FUNCTION        reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)
    MAIN            reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)
    LBRACE          reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)


state 17

    (16) var_declaration -> VARIABLE open_var_declaration . simple_type variables SEMICOLON close_var_declaration
    (122) simple_type -> . INT
    (123) simple_type -> . FLOAT
    (124) simple_type -> . CHAR
    (125) simple_type -> . BOOLEAN
    (126) simple_type -> . STRING

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    simple_type                    shift and go to state 30

state 18

    (17) open_var_declaration -> empty .

    INT             reduce using rule 17 (open_var_declaration -> empty .)
    FLOAT           reduce using rule 17 (open_var_declaration -> empty .)
    CHAR            reduce using rule 17 (open_var_declaration -> empty .)
    BOOLEAN         reduce using rule 17 (open_var_declaration -> empty .)
    STRING          reduce using rule 17 (open_var_declaration -> empty .)
    COMMA           reduce using rule 17 (open_var_declaration -> empty .)
    RPAREN          reduce using rule 17 (open_var_declaration -> empty .)


state 19

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main . END

    END             shift and go to state 31


state 20

    (3) functions -> functions function .

    MAIN            reduce using rule 3 (functions -> functions function .)
    FUNCTION        reduce using rule 3 (functions -> functions function .)


state 21

    (11) main -> MAIN . LPAREN RPAREN main_scope var_declarations block

    LPAREN          shift and go to state 32


state 22

    (6) function -> FUNCTION function_signature . block
    (31) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 33

state 23

    (7) function_signature -> simple_type . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    ID              shift and go to state 35


state 24

    (8) function_signature -> VOID . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    ID              shift and go to state 36


state 25

    (122) simple_type -> INT .

    ID              reduce using rule 122 (simple_type -> INT .)


state 26

    (123) simple_type -> FLOAT .

    ID              reduce using rule 123 (simple_type -> FLOAT .)


state 27

    (124) simple_type -> CHAR .

    ID              reduce using rule 124 (simple_type -> CHAR .)


state 28

    (125) simple_type -> BOOLEAN .

    ID              reduce using rule 125 (simple_type -> BOOLEAN .)


state 29

    (126) simple_type -> STRING .

    ID              reduce using rule 126 (simple_type -> STRING .)


state 30

    (16) var_declaration -> VARIABLE open_var_declaration simple_type . variables SEMICOLON close_var_declaration
    (19) variables -> . variable
    (20) variables -> . variable COMMA variables
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim

    ID              shift and go to state 39

    variables                      shift and go to state 37
    variable                       shift and go to state 38

state 31

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .)


state 32

    (11) main -> MAIN LPAREN . RPAREN main_scope var_declarations block

    RPAREN          shift and go to state 40


state 33

    (6) function -> FUNCTION function_signature block .

    MAIN            reduce using rule 6 (function -> FUNCTION function_signature block .)
    FUNCTION        reduce using rule 6 (function -> FUNCTION function_signature block .)


state 34

    (31) block -> LBRACE . block2 RBRACE
    (32) block2 -> . block3
    (33) block2 -> . empty
    (34) block3 -> . statement block2
    (132) empty -> .
    (35) statement -> . special_func
    (36) statement -> . assingation
    (37) statement -> . for
    (38) statement -> . do_while
    (39) statement -> . while
    (40) statement -> . if_else
    (41) statement -> . invocation
    (42) statement -> . if
    (43) statement -> . print
    (44) statement -> . read
    (45) statement -> . return
    (46) special_func -> . gen_key
    (47) special_func -> . encrypt
    (48) special_func -> . decrypt
    (49) special_func -> . sha_256
    (50) special_func -> . random_salt
    (51) special_func -> . hmac
    (52) special_func -> . ecdsa
    (53) special_func -> . ecdsa_key
    (94) assingation -> . variable ASSIGN expression SEMICOLON
    (65) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (64) do_while -> . DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (70) while -> . WHILE breadcrumb LPAREN expression RPAREN gotof block
    (73) if_else -> . IF LPAREN expression RPAREN gotof block ELSE goto block
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (72) if -> . IF LPAREN expression RPAREN gotof block
    (89) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (62) read -> . READ LPAREN ID RPAREN SEMICOLON
    (9) return -> . RETURN expression SEMICOLON
    (59) gen_key -> . GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON
    (60) encrypt -> . ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (61) decrypt -> . DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (58) sha_256 -> . SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON
    (57) random_salt -> . RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON
    (56) hmac -> . HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (55) ecdsa -> . ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (54) ecdsa_key -> . ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim

    RBRACE          reduce using rule 132 (empty -> .)
    FOR             shift and go to state 65
    DO              shift and go to state 67
    WHILE           shift and go to state 68
    IF              shift and go to state 69
    ID              shift and go to state 66
    PRINT           shift and go to state 70
    READ            shift and go to state 71
    RETURN          shift and go to state 72
    GENKEY          shift and go to state 73
    ENCRYPT         shift and go to state 74
    DECRYPT         shift and go to state 75
    SHA_256         shift and go to state 76
    RANDOM_SALT     shift and go to state 77
    HMAC            shift and go to state 78
    ECDSA           shift and go to state 79
    ECDSAKEY        shift and go to state 80

    block2                         shift and go to state 41
    block3                         shift and go to state 42
    empty                          shift and go to state 43
    statement                      shift and go to state 44
    special_func                   shift and go to state 45
    assingation                    shift and go to state 46
    for                            shift and go to state 47
    do_while                       shift and go to state 48
    while                          shift and go to state 49
    if_else                        shift and go to state 50
    invocation                     shift and go to state 51
    if                             shift and go to state 52
    print                          shift and go to state 53
    read                           shift and go to state 54
    return                         shift and go to state 55
    gen_key                        shift and go to state 56
    encrypt                        shift and go to state 57
    decrypt                        shift and go to state 58
    sha_256                        shift and go to state 59
    random_salt                    shift and go to state 60
    hmac                           shift and go to state 61
    ecdsa                          shift and go to state 62
    ecdsa_key                      shift and go to state 63
    variable                       shift and go to state 64

state 35

    (7) function_signature -> simple_type ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (10) function_1 -> . empty
    (132) empty -> .

    LPAREN          reduce using rule 132 (empty -> .)

    function_1                     shift and go to state 81
    empty                          shift and go to state 82

state 36

    (8) function_signature -> VOID ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (10) function_1 -> . empty
    (132) empty -> .

    LPAREN          reduce using rule 132 (empty -> .)

    function_1                     shift and go to state 83
    empty                          shift and go to state 82

state 37

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables . SEMICOLON close_var_declaration

    SEMICOLON       shift and go to state 84


state 38

    (19) variables -> variable .
    (20) variables -> variable . COMMA variables

    SEMICOLON       reduce using rule 19 (variables -> variable .)
    COMMA           shift and go to state 85


state 39

    (21) variable -> ID .
    (22) variable -> ID . array_true array_dim
    (23) variable -> ID . array_true array_dim array_dim
    (24) variable -> ID . array_true array_dim array_dim array_dim
    (25) array_true -> . empty
    (132) empty -> .

    COMMA           reduce using rule 21 (variable -> ID .)
    SEMICOLON       reduce using rule 21 (variable -> ID .)
    LBRACK          reduce using rule 132 (empty -> .)

    array_true                     shift and go to state 86
    empty                          shift and go to state 87

state 40

    (11) main -> MAIN LPAREN RPAREN . main_scope var_declarations block
    (12) main_scope -> . empty
    (132) empty -> .

    VARIABLE        reduce using rule 132 (empty -> .)
    LBRACE          reduce using rule 132 (empty -> .)

    main_scope                     shift and go to state 88
    empty                          shift and go to state 89

state 41

    (31) block -> LBRACE block2 . RBRACE

    RBRACE          shift and go to state 90


state 42

    (32) block2 -> block3 .

    RBRACE          reduce using rule 32 (block2 -> block3 .)


state 43

    (33) block2 -> empty .

    RBRACE          reduce using rule 33 (block2 -> empty .)


state 44

    (34) block3 -> statement . block2
    (32) block2 -> . block3
    (33) block2 -> . empty
    (34) block3 -> . statement block2
    (132) empty -> .
    (35) statement -> . special_func
    (36) statement -> . assingation
    (37) statement -> . for
    (38) statement -> . do_while
    (39) statement -> . while
    (40) statement -> . if_else
    (41) statement -> . invocation
    (42) statement -> . if
    (43) statement -> . print
    (44) statement -> . read
    (45) statement -> . return
    (46) special_func -> . gen_key
    (47) special_func -> . encrypt
    (48) special_func -> . decrypt
    (49) special_func -> . sha_256
    (50) special_func -> . random_salt
    (51) special_func -> . hmac
    (52) special_func -> . ecdsa
    (53) special_func -> . ecdsa_key
    (94) assingation -> . variable ASSIGN expression SEMICOLON
    (65) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (64) do_while -> . DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (70) while -> . WHILE breadcrumb LPAREN expression RPAREN gotof block
    (73) if_else -> . IF LPAREN expression RPAREN gotof block ELSE goto block
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (72) if -> . IF LPAREN expression RPAREN gotof block
    (89) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (62) read -> . READ LPAREN ID RPAREN SEMICOLON
    (9) return -> . RETURN expression SEMICOLON
    (59) gen_key -> . GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON
    (60) encrypt -> . ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (61) decrypt -> . DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (58) sha_256 -> . SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON
    (57) random_salt -> . RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON
    (56) hmac -> . HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (55) ecdsa -> . ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (54) ecdsa_key -> . ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim

    RBRACE          reduce using rule 132 (empty -> .)
    FOR             shift and go to state 65
    DO              shift and go to state 67
    WHILE           shift and go to state 68
    IF              shift and go to state 69
    ID              shift and go to state 66
    PRINT           shift and go to state 70
    READ            shift and go to state 71
    RETURN          shift and go to state 72
    GENKEY          shift and go to state 73
    ENCRYPT         shift and go to state 74
    DECRYPT         shift and go to state 75
    SHA_256         shift and go to state 76
    RANDOM_SALT     shift and go to state 77
    HMAC            shift and go to state 78
    ECDSA           shift and go to state 79
    ECDSAKEY        shift and go to state 80

    statement                      shift and go to state 44
    block2                         shift and go to state 91
    block3                         shift and go to state 42
    empty                          shift and go to state 43
    special_func                   shift and go to state 45
    assingation                    shift and go to state 46
    for                            shift and go to state 47
    do_while                       shift and go to state 48
    while                          shift and go to state 49
    if_else                        shift and go to state 50
    invocation                     shift and go to state 51
    if                             shift and go to state 52
    print                          shift and go to state 53
    read                           shift and go to state 54
    return                         shift and go to state 55
    gen_key                        shift and go to state 56
    encrypt                        shift and go to state 57
    decrypt                        shift and go to state 58
    sha_256                        shift and go to state 59
    random_salt                    shift and go to state 60
    hmac                           shift and go to state 61
    ecdsa                          shift and go to state 62
    ecdsa_key                      shift and go to state 63
    variable                       shift and go to state 64

state 45

    (35) statement -> special_func .

    FOR             reduce using rule 35 (statement -> special_func .)
    DO              reduce using rule 35 (statement -> special_func .)
    WHILE           reduce using rule 35 (statement -> special_func .)
    IF              reduce using rule 35 (statement -> special_func .)
    ID              reduce using rule 35 (statement -> special_func .)
    PRINT           reduce using rule 35 (statement -> special_func .)
    READ            reduce using rule 35 (statement -> special_func .)
    RETURN          reduce using rule 35 (statement -> special_func .)
    GENKEY          reduce using rule 35 (statement -> special_func .)
    ENCRYPT         reduce using rule 35 (statement -> special_func .)
    DECRYPT         reduce using rule 35 (statement -> special_func .)
    SHA_256         reduce using rule 35 (statement -> special_func .)
    RANDOM_SALT     reduce using rule 35 (statement -> special_func .)
    HMAC            reduce using rule 35 (statement -> special_func .)
    ECDSA           reduce using rule 35 (statement -> special_func .)
    ECDSAKEY        reduce using rule 35 (statement -> special_func .)
    RBRACE          reduce using rule 35 (statement -> special_func .)


state 46

    (36) statement -> assingation .

    FOR             reduce using rule 36 (statement -> assingation .)
    DO              reduce using rule 36 (statement -> assingation .)
    WHILE           reduce using rule 36 (statement -> assingation .)
    IF              reduce using rule 36 (statement -> assingation .)
    ID              reduce using rule 36 (statement -> assingation .)
    PRINT           reduce using rule 36 (statement -> assingation .)
    READ            reduce using rule 36 (statement -> assingation .)
    RETURN          reduce using rule 36 (statement -> assingation .)
    GENKEY          reduce using rule 36 (statement -> assingation .)
    ENCRYPT         reduce using rule 36 (statement -> assingation .)
    DECRYPT         reduce using rule 36 (statement -> assingation .)
    SHA_256         reduce using rule 36 (statement -> assingation .)
    RANDOM_SALT     reduce using rule 36 (statement -> assingation .)
    HMAC            reduce using rule 36 (statement -> assingation .)
    ECDSA           reduce using rule 36 (statement -> assingation .)
    ECDSAKEY        reduce using rule 36 (statement -> assingation .)
    RBRACE          reduce using rule 36 (statement -> assingation .)


state 47

    (37) statement -> for .

    FOR             reduce using rule 37 (statement -> for .)
    DO              reduce using rule 37 (statement -> for .)
    WHILE           reduce using rule 37 (statement -> for .)
    IF              reduce using rule 37 (statement -> for .)
    ID              reduce using rule 37 (statement -> for .)
    PRINT           reduce using rule 37 (statement -> for .)
    READ            reduce using rule 37 (statement -> for .)
    RETURN          reduce using rule 37 (statement -> for .)
    GENKEY          reduce using rule 37 (statement -> for .)
    ENCRYPT         reduce using rule 37 (statement -> for .)
    DECRYPT         reduce using rule 37 (statement -> for .)
    SHA_256         reduce using rule 37 (statement -> for .)
    RANDOM_SALT     reduce using rule 37 (statement -> for .)
    HMAC            reduce using rule 37 (statement -> for .)
    ECDSA           reduce using rule 37 (statement -> for .)
    ECDSAKEY        reduce using rule 37 (statement -> for .)
    RBRACE          reduce using rule 37 (statement -> for .)


state 48

    (38) statement -> do_while .

    FOR             reduce using rule 38 (statement -> do_while .)
    DO              reduce using rule 38 (statement -> do_while .)
    WHILE           reduce using rule 38 (statement -> do_while .)
    IF              reduce using rule 38 (statement -> do_while .)
    ID              reduce using rule 38 (statement -> do_while .)
    PRINT           reduce using rule 38 (statement -> do_while .)
    READ            reduce using rule 38 (statement -> do_while .)
    RETURN          reduce using rule 38 (statement -> do_while .)
    GENKEY          reduce using rule 38 (statement -> do_while .)
    ENCRYPT         reduce using rule 38 (statement -> do_while .)
    DECRYPT         reduce using rule 38 (statement -> do_while .)
    SHA_256         reduce using rule 38 (statement -> do_while .)
    RANDOM_SALT     reduce using rule 38 (statement -> do_while .)
    HMAC            reduce using rule 38 (statement -> do_while .)
    ECDSA           reduce using rule 38 (statement -> do_while .)
    ECDSAKEY        reduce using rule 38 (statement -> do_while .)
    RBRACE          reduce using rule 38 (statement -> do_while .)


state 49

    (39) statement -> while .

    FOR             reduce using rule 39 (statement -> while .)
    DO              reduce using rule 39 (statement -> while .)
    WHILE           reduce using rule 39 (statement -> while .)
    IF              reduce using rule 39 (statement -> while .)
    ID              reduce using rule 39 (statement -> while .)
    PRINT           reduce using rule 39 (statement -> while .)
    READ            reduce using rule 39 (statement -> while .)
    RETURN          reduce using rule 39 (statement -> while .)
    GENKEY          reduce using rule 39 (statement -> while .)
    ENCRYPT         reduce using rule 39 (statement -> while .)
    DECRYPT         reduce using rule 39 (statement -> while .)
    SHA_256         reduce using rule 39 (statement -> while .)
    RANDOM_SALT     reduce using rule 39 (statement -> while .)
    HMAC            reduce using rule 39 (statement -> while .)
    ECDSA           reduce using rule 39 (statement -> while .)
    ECDSAKEY        reduce using rule 39 (statement -> while .)
    RBRACE          reduce using rule 39 (statement -> while .)


state 50

    (40) statement -> if_else .

    FOR             reduce using rule 40 (statement -> if_else .)
    DO              reduce using rule 40 (statement -> if_else .)
    WHILE           reduce using rule 40 (statement -> if_else .)
    IF              reduce using rule 40 (statement -> if_else .)
    ID              reduce using rule 40 (statement -> if_else .)
    PRINT           reduce using rule 40 (statement -> if_else .)
    READ            reduce using rule 40 (statement -> if_else .)
    RETURN          reduce using rule 40 (statement -> if_else .)
    GENKEY          reduce using rule 40 (statement -> if_else .)
    ENCRYPT         reduce using rule 40 (statement -> if_else .)
    DECRYPT         reduce using rule 40 (statement -> if_else .)
    SHA_256         reduce using rule 40 (statement -> if_else .)
    RANDOM_SALT     reduce using rule 40 (statement -> if_else .)
    HMAC            reduce using rule 40 (statement -> if_else .)
    ECDSA           reduce using rule 40 (statement -> if_else .)
    ECDSAKEY        reduce using rule 40 (statement -> if_else .)
    RBRACE          reduce using rule 40 (statement -> if_else .)


state 51

    (41) statement -> invocation .

    FOR             reduce using rule 41 (statement -> invocation .)
    DO              reduce using rule 41 (statement -> invocation .)
    WHILE           reduce using rule 41 (statement -> invocation .)
    IF              reduce using rule 41 (statement -> invocation .)
    ID              reduce using rule 41 (statement -> invocation .)
    PRINT           reduce using rule 41 (statement -> invocation .)
    READ            reduce using rule 41 (statement -> invocation .)
    RETURN          reduce using rule 41 (statement -> invocation .)
    GENKEY          reduce using rule 41 (statement -> invocation .)
    ENCRYPT         reduce using rule 41 (statement -> invocation .)
    DECRYPT         reduce using rule 41 (statement -> invocation .)
    SHA_256         reduce using rule 41 (statement -> invocation .)
    RANDOM_SALT     reduce using rule 41 (statement -> invocation .)
    HMAC            reduce using rule 41 (statement -> invocation .)
    ECDSA           reduce using rule 41 (statement -> invocation .)
    ECDSAKEY        reduce using rule 41 (statement -> invocation .)
    RBRACE          reduce using rule 41 (statement -> invocation .)


state 52

    (42) statement -> if .

    FOR             reduce using rule 42 (statement -> if .)
    DO              reduce using rule 42 (statement -> if .)
    WHILE           reduce using rule 42 (statement -> if .)
    IF              reduce using rule 42 (statement -> if .)
    ID              reduce using rule 42 (statement -> if .)
    PRINT           reduce using rule 42 (statement -> if .)
    READ            reduce using rule 42 (statement -> if .)
    RETURN          reduce using rule 42 (statement -> if .)
    GENKEY          reduce using rule 42 (statement -> if .)
    ENCRYPT         reduce using rule 42 (statement -> if .)
    DECRYPT         reduce using rule 42 (statement -> if .)
    SHA_256         reduce using rule 42 (statement -> if .)
    RANDOM_SALT     reduce using rule 42 (statement -> if .)
    HMAC            reduce using rule 42 (statement -> if .)
    ECDSA           reduce using rule 42 (statement -> if .)
    ECDSAKEY        reduce using rule 42 (statement -> if .)
    RBRACE          reduce using rule 42 (statement -> if .)


state 53

    (43) statement -> print .

    FOR             reduce using rule 43 (statement -> print .)
    DO              reduce using rule 43 (statement -> print .)
    WHILE           reduce using rule 43 (statement -> print .)
    IF              reduce using rule 43 (statement -> print .)
    ID              reduce using rule 43 (statement -> print .)
    PRINT           reduce using rule 43 (statement -> print .)
    READ            reduce using rule 43 (statement -> print .)
    RETURN          reduce using rule 43 (statement -> print .)
    GENKEY          reduce using rule 43 (statement -> print .)
    ENCRYPT         reduce using rule 43 (statement -> print .)
    DECRYPT         reduce using rule 43 (statement -> print .)
    SHA_256         reduce using rule 43 (statement -> print .)
    RANDOM_SALT     reduce using rule 43 (statement -> print .)
    HMAC            reduce using rule 43 (statement -> print .)
    ECDSA           reduce using rule 43 (statement -> print .)
    ECDSAKEY        reduce using rule 43 (statement -> print .)
    RBRACE          reduce using rule 43 (statement -> print .)


state 54

    (44) statement -> read .

    FOR             reduce using rule 44 (statement -> read .)
    DO              reduce using rule 44 (statement -> read .)
    WHILE           reduce using rule 44 (statement -> read .)
    IF              reduce using rule 44 (statement -> read .)
    ID              reduce using rule 44 (statement -> read .)
    PRINT           reduce using rule 44 (statement -> read .)
    READ            reduce using rule 44 (statement -> read .)
    RETURN          reduce using rule 44 (statement -> read .)
    GENKEY          reduce using rule 44 (statement -> read .)
    ENCRYPT         reduce using rule 44 (statement -> read .)
    DECRYPT         reduce using rule 44 (statement -> read .)
    SHA_256         reduce using rule 44 (statement -> read .)
    RANDOM_SALT     reduce using rule 44 (statement -> read .)
    HMAC            reduce using rule 44 (statement -> read .)
    ECDSA           reduce using rule 44 (statement -> read .)
    ECDSAKEY        reduce using rule 44 (statement -> read .)
    RBRACE          reduce using rule 44 (statement -> read .)


state 55

    (45) statement -> return .

    FOR             reduce using rule 45 (statement -> return .)
    DO              reduce using rule 45 (statement -> return .)
    WHILE           reduce using rule 45 (statement -> return .)
    IF              reduce using rule 45 (statement -> return .)
    ID              reduce using rule 45 (statement -> return .)
    PRINT           reduce using rule 45 (statement -> return .)
    READ            reduce using rule 45 (statement -> return .)
    RETURN          reduce using rule 45 (statement -> return .)
    GENKEY          reduce using rule 45 (statement -> return .)
    ENCRYPT         reduce using rule 45 (statement -> return .)
    DECRYPT         reduce using rule 45 (statement -> return .)
    SHA_256         reduce using rule 45 (statement -> return .)
    RANDOM_SALT     reduce using rule 45 (statement -> return .)
    HMAC            reduce using rule 45 (statement -> return .)
    ECDSA           reduce using rule 45 (statement -> return .)
    ECDSAKEY        reduce using rule 45 (statement -> return .)
    RBRACE          reduce using rule 45 (statement -> return .)


state 56

    (46) special_func -> gen_key .

    FOR             reduce using rule 46 (special_func -> gen_key .)
    DO              reduce using rule 46 (special_func -> gen_key .)
    WHILE           reduce using rule 46 (special_func -> gen_key .)
    IF              reduce using rule 46 (special_func -> gen_key .)
    ID              reduce using rule 46 (special_func -> gen_key .)
    PRINT           reduce using rule 46 (special_func -> gen_key .)
    READ            reduce using rule 46 (special_func -> gen_key .)
    RETURN          reduce using rule 46 (special_func -> gen_key .)
    GENKEY          reduce using rule 46 (special_func -> gen_key .)
    ENCRYPT         reduce using rule 46 (special_func -> gen_key .)
    DECRYPT         reduce using rule 46 (special_func -> gen_key .)
    SHA_256         reduce using rule 46 (special_func -> gen_key .)
    RANDOM_SALT     reduce using rule 46 (special_func -> gen_key .)
    HMAC            reduce using rule 46 (special_func -> gen_key .)
    ECDSA           reduce using rule 46 (special_func -> gen_key .)
    ECDSAKEY        reduce using rule 46 (special_func -> gen_key .)
    RBRACE          reduce using rule 46 (special_func -> gen_key .)


state 57

    (47) special_func -> encrypt .

    FOR             reduce using rule 47 (special_func -> encrypt .)
    DO              reduce using rule 47 (special_func -> encrypt .)
    WHILE           reduce using rule 47 (special_func -> encrypt .)
    IF              reduce using rule 47 (special_func -> encrypt .)
    ID              reduce using rule 47 (special_func -> encrypt .)
    PRINT           reduce using rule 47 (special_func -> encrypt .)
    READ            reduce using rule 47 (special_func -> encrypt .)
    RETURN          reduce using rule 47 (special_func -> encrypt .)
    GENKEY          reduce using rule 47 (special_func -> encrypt .)
    ENCRYPT         reduce using rule 47 (special_func -> encrypt .)
    DECRYPT         reduce using rule 47 (special_func -> encrypt .)
    SHA_256         reduce using rule 47 (special_func -> encrypt .)
    RANDOM_SALT     reduce using rule 47 (special_func -> encrypt .)
    HMAC            reduce using rule 47 (special_func -> encrypt .)
    ECDSA           reduce using rule 47 (special_func -> encrypt .)
    ECDSAKEY        reduce using rule 47 (special_func -> encrypt .)
    RBRACE          reduce using rule 47 (special_func -> encrypt .)


state 58

    (48) special_func -> decrypt .

    FOR             reduce using rule 48 (special_func -> decrypt .)
    DO              reduce using rule 48 (special_func -> decrypt .)
    WHILE           reduce using rule 48 (special_func -> decrypt .)
    IF              reduce using rule 48 (special_func -> decrypt .)
    ID              reduce using rule 48 (special_func -> decrypt .)
    PRINT           reduce using rule 48 (special_func -> decrypt .)
    READ            reduce using rule 48 (special_func -> decrypt .)
    RETURN          reduce using rule 48 (special_func -> decrypt .)
    GENKEY          reduce using rule 48 (special_func -> decrypt .)
    ENCRYPT         reduce using rule 48 (special_func -> decrypt .)
    DECRYPT         reduce using rule 48 (special_func -> decrypt .)
    SHA_256         reduce using rule 48 (special_func -> decrypt .)
    RANDOM_SALT     reduce using rule 48 (special_func -> decrypt .)
    HMAC            reduce using rule 48 (special_func -> decrypt .)
    ECDSA           reduce using rule 48 (special_func -> decrypt .)
    ECDSAKEY        reduce using rule 48 (special_func -> decrypt .)
    RBRACE          reduce using rule 48 (special_func -> decrypt .)


state 59

    (49) special_func -> sha_256 .

    FOR             reduce using rule 49 (special_func -> sha_256 .)
    DO              reduce using rule 49 (special_func -> sha_256 .)
    WHILE           reduce using rule 49 (special_func -> sha_256 .)
    IF              reduce using rule 49 (special_func -> sha_256 .)
    ID              reduce using rule 49 (special_func -> sha_256 .)
    PRINT           reduce using rule 49 (special_func -> sha_256 .)
    READ            reduce using rule 49 (special_func -> sha_256 .)
    RETURN          reduce using rule 49 (special_func -> sha_256 .)
    GENKEY          reduce using rule 49 (special_func -> sha_256 .)
    ENCRYPT         reduce using rule 49 (special_func -> sha_256 .)
    DECRYPT         reduce using rule 49 (special_func -> sha_256 .)
    SHA_256         reduce using rule 49 (special_func -> sha_256 .)
    RANDOM_SALT     reduce using rule 49 (special_func -> sha_256 .)
    HMAC            reduce using rule 49 (special_func -> sha_256 .)
    ECDSA           reduce using rule 49 (special_func -> sha_256 .)
    ECDSAKEY        reduce using rule 49 (special_func -> sha_256 .)
    RBRACE          reduce using rule 49 (special_func -> sha_256 .)


state 60

    (50) special_func -> random_salt .

    FOR             reduce using rule 50 (special_func -> random_salt .)
    DO              reduce using rule 50 (special_func -> random_salt .)
    WHILE           reduce using rule 50 (special_func -> random_salt .)
    IF              reduce using rule 50 (special_func -> random_salt .)
    ID              reduce using rule 50 (special_func -> random_salt .)
    PRINT           reduce using rule 50 (special_func -> random_salt .)
    READ            reduce using rule 50 (special_func -> random_salt .)
    RETURN          reduce using rule 50 (special_func -> random_salt .)
    GENKEY          reduce using rule 50 (special_func -> random_salt .)
    ENCRYPT         reduce using rule 50 (special_func -> random_salt .)
    DECRYPT         reduce using rule 50 (special_func -> random_salt .)
    SHA_256         reduce using rule 50 (special_func -> random_salt .)
    RANDOM_SALT     reduce using rule 50 (special_func -> random_salt .)
    HMAC            reduce using rule 50 (special_func -> random_salt .)
    ECDSA           reduce using rule 50 (special_func -> random_salt .)
    ECDSAKEY        reduce using rule 50 (special_func -> random_salt .)
    RBRACE          reduce using rule 50 (special_func -> random_salt .)


state 61

    (51) special_func -> hmac .

    FOR             reduce using rule 51 (special_func -> hmac .)
    DO              reduce using rule 51 (special_func -> hmac .)
    WHILE           reduce using rule 51 (special_func -> hmac .)
    IF              reduce using rule 51 (special_func -> hmac .)
    ID              reduce using rule 51 (special_func -> hmac .)
    PRINT           reduce using rule 51 (special_func -> hmac .)
    READ            reduce using rule 51 (special_func -> hmac .)
    RETURN          reduce using rule 51 (special_func -> hmac .)
    GENKEY          reduce using rule 51 (special_func -> hmac .)
    ENCRYPT         reduce using rule 51 (special_func -> hmac .)
    DECRYPT         reduce using rule 51 (special_func -> hmac .)
    SHA_256         reduce using rule 51 (special_func -> hmac .)
    RANDOM_SALT     reduce using rule 51 (special_func -> hmac .)
    HMAC            reduce using rule 51 (special_func -> hmac .)
    ECDSA           reduce using rule 51 (special_func -> hmac .)
    ECDSAKEY        reduce using rule 51 (special_func -> hmac .)
    RBRACE          reduce using rule 51 (special_func -> hmac .)


state 62

    (52) special_func -> ecdsa .

    FOR             reduce using rule 52 (special_func -> ecdsa .)
    DO              reduce using rule 52 (special_func -> ecdsa .)
    WHILE           reduce using rule 52 (special_func -> ecdsa .)
    IF              reduce using rule 52 (special_func -> ecdsa .)
    ID              reduce using rule 52 (special_func -> ecdsa .)
    PRINT           reduce using rule 52 (special_func -> ecdsa .)
    READ            reduce using rule 52 (special_func -> ecdsa .)
    RETURN          reduce using rule 52 (special_func -> ecdsa .)
    GENKEY          reduce using rule 52 (special_func -> ecdsa .)
    ENCRYPT         reduce using rule 52 (special_func -> ecdsa .)
    DECRYPT         reduce using rule 52 (special_func -> ecdsa .)
    SHA_256         reduce using rule 52 (special_func -> ecdsa .)
    RANDOM_SALT     reduce using rule 52 (special_func -> ecdsa .)
    HMAC            reduce using rule 52 (special_func -> ecdsa .)
    ECDSA           reduce using rule 52 (special_func -> ecdsa .)
    ECDSAKEY        reduce using rule 52 (special_func -> ecdsa .)
    RBRACE          reduce using rule 52 (special_func -> ecdsa .)


state 63

    (53) special_func -> ecdsa_key .

    FOR             reduce using rule 53 (special_func -> ecdsa_key .)
    DO              reduce using rule 53 (special_func -> ecdsa_key .)
    WHILE           reduce using rule 53 (special_func -> ecdsa_key .)
    IF              reduce using rule 53 (special_func -> ecdsa_key .)
    ID              reduce using rule 53 (special_func -> ecdsa_key .)
    PRINT           reduce using rule 53 (special_func -> ecdsa_key .)
    READ            reduce using rule 53 (special_func -> ecdsa_key .)
    RETURN          reduce using rule 53 (special_func -> ecdsa_key .)
    GENKEY          reduce using rule 53 (special_func -> ecdsa_key .)
    ENCRYPT         reduce using rule 53 (special_func -> ecdsa_key .)
    DECRYPT         reduce using rule 53 (special_func -> ecdsa_key .)
    SHA_256         reduce using rule 53 (special_func -> ecdsa_key .)
    RANDOM_SALT     reduce using rule 53 (special_func -> ecdsa_key .)
    HMAC            reduce using rule 53 (special_func -> ecdsa_key .)
    ECDSA           reduce using rule 53 (special_func -> ecdsa_key .)
    ECDSAKEY        reduce using rule 53 (special_func -> ecdsa_key .)
    RBRACE          reduce using rule 53 (special_func -> ecdsa_key .)


state 64

    (94) assingation -> variable . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 92


state 65

    (65) for -> FOR . LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    LPAREN          shift and go to state 93


state 66

    (79) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (21) variable -> ID .
    (22) variable -> ID . array_true array_dim
    (23) variable -> ID . array_true array_dim array_dim
    (24) variable -> ID . array_true array_dim array_dim array_dim
    (80) invocation_1 -> . empty
    (25) array_true -> . empty
    (132) empty -> .

    ASSIGN          reduce using rule 21 (variable -> ID .)
    LPAREN          reduce using rule 132 (empty -> .)
    LBRACK          reduce using rule 132 (empty -> .)

    invocation_1                   shift and go to state 94
    array_true                     shift and go to state 86
    empty                          shift and go to state 95

state 67

    (64) do_while -> DO . breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (71) breadcrumb -> . empty
    (132) empty -> .

    LBRACE          reduce using rule 132 (empty -> .)

    breadcrumb                     shift and go to state 96
    empty                          shift and go to state 97

state 68

    (70) while -> WHILE . breadcrumb LPAREN expression RPAREN gotof block
    (71) breadcrumb -> . empty
    (132) empty -> .

    LPAREN          reduce using rule 132 (empty -> .)

    breadcrumb                     shift and go to state 98
    empty                          shift and go to state 97

state 69

    (73) if_else -> IF . LPAREN expression RPAREN gotof block ELSE goto block
    (72) if -> IF . LPAREN expression RPAREN gotof block

    LPAREN          shift and go to state 99


state 70

    (89) print -> PRINT . LPAREN print_arguments RPAREN SEMICOLON

    LPAREN          shift and go to state 100


state 71

    (62) read -> READ . LPAREN ID RPAREN SEMICOLON

    LPAREN          shift and go to state 101


state 72

    (9) return -> RETURN . expression SEMICOLON
    (95) expression -> . t_expression
    (96) expression -> . NOT t_expression
    (97) t_expression -> . g_expression
    (98) t_expression -> . t_expression boolean_operator g_expression
    (99) g_expression -> . m_expression
    (100) g_expression -> . g_expression comparison_operator m_expression
    (101) m_expression -> . term
    (102) m_expression -> . m_expression addition_operator term
    (103) term -> . factor
    (104) term -> . term multiplication_operator factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 104
    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    CTES            shift and go to state 118
    LPAREN          shift and go to state 119

    expression                     shift and go to state 102
    t_expression                   shift and go to state 103
    g_expression                   shift and go to state 105
    m_expression                   shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    variable                       shift and go to state 109
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 73

    (59) gen_key -> GENKEY . LPAREN RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 120


state 74

    (60) encrypt -> ENCRYPT . LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 121


state 75

    (61) decrypt -> DECRYPT . LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 122


state 76

    (58) sha_256 -> SHA_256 . LPAREN ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 123


state 77

    (57) random_salt -> RANDOM_SALT . LPAREN CTEI RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 124


state 78

    (56) hmac -> HMAC . LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 125


state 79

    (55) ecdsa -> ECDSA . LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 126


state 80

    (54) ecdsa_key -> ECDSAKEY . LPAREN RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 127


state 81

    (7) function_signature -> simple_type ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    LPAREN          shift and go to state 128


state 82

    (10) function_1 -> empty .

    LPAREN          reduce using rule 10 (function_1 -> empty .)


state 83

    (8) function_signature -> VOID ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    LPAREN          shift and go to state 129


state 84

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON . close_var_declaration
    (18) close_var_declaration -> . empty
    (132) empty -> .

    VARIABLE        reduce using rule 132 (empty -> .)
    FUNCTION        reduce using rule 132 (empty -> .)
    MAIN            reduce using rule 132 (empty -> .)
    LBRACE          reduce using rule 132 (empty -> .)

    close_var_declaration          shift and go to state 130
    empty                          shift and go to state 131

state 85

    (20) variables -> variable COMMA . variables
    (19) variables -> . variable
    (20) variables -> . variable COMMA variables
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim

    ID              shift and go to state 39

    variable                       shift and go to state 38
    variables                      shift and go to state 132

state 86

    (22) variable -> ID array_true . array_dim
    (23) variable -> ID array_true . array_dim array_dim
    (24) variable -> ID array_true . array_dim array_dim array_dim
    (26) array_dim -> . LBRACK expression RBRACK

    LBRACK          shift and go to state 134

    array_dim                      shift and go to state 133

state 87

    (25) array_true -> empty .

    LBRACK          reduce using rule 25 (array_true -> empty .)


state 88

    (11) main -> MAIN LPAREN RPAREN main_scope . var_declarations block
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (132) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 132 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 135
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 89

    (12) main_scope -> empty .

    VARIABLE        reduce using rule 12 (main_scope -> empty .)
    LBRACE          reduce using rule 12 (main_scope -> empty .)


state 90

    (31) block -> LBRACE block2 RBRACE .

    MAIN            reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    FUNCTION        reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    WHILE           reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    END             reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    ELSE            reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    FOR             reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    DO              reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    IF              reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    ID              reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    PRINT           reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    READ            reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    RETURN          reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    GENKEY          reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    ENCRYPT         reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    DECRYPT         reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    SHA_256         reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    RANDOM_SALT     reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    HMAC            reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    ECDSA           reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    ECDSAKEY        reduce using rule 31 (block -> LBRACE block2 RBRACE .)
    RBRACE          reduce using rule 31 (block -> LBRACE block2 RBRACE .)


state 91

    (34) block3 -> statement block2 .

    RBRACE          reduce using rule 34 (block3 -> statement block2 .)


state 92

    (94) assingation -> variable ASSIGN . expression SEMICOLON
    (95) expression -> . t_expression
    (96) expression -> . NOT t_expression
    (97) t_expression -> . g_expression
    (98) t_expression -> . t_expression boolean_operator g_expression
    (99) g_expression -> . m_expression
    (100) g_expression -> . g_expression comparison_operator m_expression
    (101) m_expression -> . term
    (102) m_expression -> . m_expression addition_operator term
    (103) term -> . factor
    (104) term -> . term multiplication_operator factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 104
    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    CTES            shift and go to state 118
    LPAREN          shift and go to state 119

    variable                       shift and go to state 109
    expression                     shift and go to state 136
    t_expression                   shift and go to state 103
    g_expression                   shift and go to state 105
    m_expression                   shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 93

    (65) for -> FOR LPAREN . ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    ID              shift and go to state 137


state 94

    (79) invocation -> ID invocation_1 . LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    LPAREN          shift and go to state 138


state 95

    (80) invocation_1 -> empty .
    (25) array_true -> empty .

    LPAREN          reduce using rule 80 (invocation_1 -> empty .)
    LBRACK          reduce using rule 25 (array_true -> empty .)


state 96

    (64) do_while -> DO breadcrumb . block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (31) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 139

state 97

    (71) breadcrumb -> empty .

    LBRACE          reduce using rule 71 (breadcrumb -> empty .)
    LPAREN          reduce using rule 71 (breadcrumb -> empty .)


state 98

    (70) while -> WHILE breadcrumb . LPAREN expression RPAREN gotof block

    LPAREN          shift and go to state 140


state 99

    (73) if_else -> IF LPAREN . expression RPAREN gotof block ELSE goto block
    (72) if -> IF LPAREN . expression RPAREN gotof block
    (95) expression -> . t_expression
    (96) expression -> . NOT t_expression
    (97) t_expression -> . g_expression
    (98) t_expression -> . t_expression boolean_operator g_expression
    (99) g_expression -> . m_expression
    (100) g_expression -> . g_expression comparison_operator m_expression
    (101) m_expression -> . term
    (102) m_expression -> . m_expression addition_operator term
    (103) term -> . factor
    (104) term -> . term multiplication_operator factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 104
    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    CTES            shift and go to state 118
    LPAREN          shift and go to state 119

    expression                     shift and go to state 141
    t_expression                   shift and go to state 103
    g_expression                   shift and go to state 105
    m_expression                   shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    variable                       shift and go to state 109
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 100

    (89) print -> PRINT LPAREN . print_arguments RPAREN SEMICOLON
    (90) print_arguments -> . print_argument
    (91) print_arguments -> . print_arguments COMMA print_argument
    (92) print_argument -> . CTES
    (93) print_argument -> . expression
    (95) expression -> . t_expression
    (96) expression -> . NOT t_expression
    (97) t_expression -> . g_expression
    (98) t_expression -> . t_expression boolean_operator g_expression
    (99) g_expression -> . m_expression
    (100) g_expression -> . g_expression comparison_operator m_expression
    (101) m_expression -> . term
    (102) m_expression -> . m_expression addition_operator term
    (103) term -> . factor
    (104) term -> . term multiplication_operator factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    CTES            shift and go to state 144
    NOT             shift and go to state 104
    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    LPAREN          shift and go to state 119

    print_arguments                shift and go to state 142
    print_argument                 shift and go to state 143
    expression                     shift and go to state 145
    t_expression                   shift and go to state 103
    g_expression                   shift and go to state 105
    m_expression                   shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    variable                       shift and go to state 109
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 101

    (62) read -> READ LPAREN . ID RPAREN SEMICOLON

    ID              shift and go to state 146


state 102

    (9) return -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 147


state 103

    (95) expression -> t_expression .
    (98) t_expression -> t_expression . boolean_operator g_expression
    (118) boolean_operator -> . AND
    (119) boolean_operator -> . OR

    SEMICOLON       reduce using rule 95 (expression -> t_expression .)
    RPAREN          reduce using rule 95 (expression -> t_expression .)
    COMMA           reduce using rule 95 (expression -> t_expression .)
    RBRACK          reduce using rule 95 (expression -> t_expression .)
    FROM            reduce using rule 95 (expression -> t_expression .)
    AND             shift and go to state 149
    OR              shift and go to state 150

    boolean_operator               shift and go to state 148

state 104

    (96) expression -> NOT . t_expression
    (97) t_expression -> . g_expression
    (98) t_expression -> . t_expression boolean_operator g_expression
    (99) g_expression -> . m_expression
    (100) g_expression -> . g_expression comparison_operator m_expression
    (101) m_expression -> . term
    (102) m_expression -> . m_expression addition_operator term
    (103) term -> . factor
    (104) term -> . term multiplication_operator factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    CTES            shift and go to state 118
    LPAREN          shift and go to state 119

    t_expression                   shift and go to state 151
    g_expression                   shift and go to state 105
    m_expression                   shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    variable                       shift and go to state 109
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 105

    (97) t_expression -> g_expression .
    (100) g_expression -> g_expression . comparison_operator m_expression
    (110) comparison_operator -> . LESS
    (111) comparison_operator -> . GREATER
    (112) comparison_operator -> . EQUALS
    (113) comparison_operator -> . NOTEQUAL
    (114) comparison_operator -> . GREATERTHAN
    (115) comparison_operator -> . LESSTHAN

    AND             reduce using rule 97 (t_expression -> g_expression .)
    OR              reduce using rule 97 (t_expression -> g_expression .)
    SEMICOLON       reduce using rule 97 (t_expression -> g_expression .)
    RPAREN          reduce using rule 97 (t_expression -> g_expression .)
    COMMA           reduce using rule 97 (t_expression -> g_expression .)
    RBRACK          reduce using rule 97 (t_expression -> g_expression .)
    FROM            reduce using rule 97 (t_expression -> g_expression .)
    LESS            shift and go to state 153
    GREATER         shift and go to state 154
    EQUALS          shift and go to state 155
    NOTEQUAL        shift and go to state 156
    GREATERTHAN     shift and go to state 157
    LESSTHAN        shift and go to state 158

    comparison_operator            shift and go to state 152

state 106

    (99) g_expression -> m_expression .
    (102) m_expression -> m_expression . addition_operator term
    (116) addition_operator -> . PLUS
    (117) addition_operator -> . MINUS

    LESS            reduce using rule 99 (g_expression -> m_expression .)
    GREATER         reduce using rule 99 (g_expression -> m_expression .)
    EQUALS          reduce using rule 99 (g_expression -> m_expression .)
    NOTEQUAL        reduce using rule 99 (g_expression -> m_expression .)
    GREATERTHAN     reduce using rule 99 (g_expression -> m_expression .)
    LESSTHAN        reduce using rule 99 (g_expression -> m_expression .)
    AND             reduce using rule 99 (g_expression -> m_expression .)
    OR              reduce using rule 99 (g_expression -> m_expression .)
    SEMICOLON       reduce using rule 99 (g_expression -> m_expression .)
    RPAREN          reduce using rule 99 (g_expression -> m_expression .)
    COMMA           reduce using rule 99 (g_expression -> m_expression .)
    RBRACK          reduce using rule 99 (g_expression -> m_expression .)
    FROM            reduce using rule 99 (g_expression -> m_expression .)
    PLUS            shift and go to state 160
    MINUS           shift and go to state 161

    addition_operator              shift and go to state 159

state 107

    (101) m_expression -> term .
    (104) term -> term . multiplication_operator factor
    (120) multiplication_operator -> . TIMES
    (121) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 101 (m_expression -> term .)
    MINUS           reduce using rule 101 (m_expression -> term .)
    LESS            reduce using rule 101 (m_expression -> term .)
    GREATER         reduce using rule 101 (m_expression -> term .)
    EQUALS          reduce using rule 101 (m_expression -> term .)
    NOTEQUAL        reduce using rule 101 (m_expression -> term .)
    GREATERTHAN     reduce using rule 101 (m_expression -> term .)
    LESSTHAN        reduce using rule 101 (m_expression -> term .)
    AND             reduce using rule 101 (m_expression -> term .)
    OR              reduce using rule 101 (m_expression -> term .)
    SEMICOLON       reduce using rule 101 (m_expression -> term .)
    RPAREN          reduce using rule 101 (m_expression -> term .)
    COMMA           reduce using rule 101 (m_expression -> term .)
    RBRACK          reduce using rule 101 (m_expression -> term .)
    FROM            reduce using rule 101 (m_expression -> term .)
    TIMES           shift and go to state 163
    DIVIDE          shift and go to state 164

    multiplication_operator        shift and go to state 162

state 108

    (103) term -> factor .

    TIMES           reduce using rule 103 (term -> factor .)
    DIVIDE          reduce using rule 103 (term -> factor .)
    PLUS            reduce using rule 103 (term -> factor .)
    MINUS           reduce using rule 103 (term -> factor .)
    LESS            reduce using rule 103 (term -> factor .)
    GREATER         reduce using rule 103 (term -> factor .)
    EQUALS          reduce using rule 103 (term -> factor .)
    NOTEQUAL        reduce using rule 103 (term -> factor .)
    GREATERTHAN     reduce using rule 103 (term -> factor .)
    LESSTHAN        reduce using rule 103 (term -> factor .)
    AND             reduce using rule 103 (term -> factor .)
    OR              reduce using rule 103 (term -> factor .)
    SEMICOLON       reduce using rule 103 (term -> factor .)
    RPAREN          reduce using rule 103 (term -> factor .)
    COMMA           reduce using rule 103 (term -> factor .)
    RBRACK          reduce using rule 103 (term -> factor .)
    FROM            reduce using rule 103 (term -> factor .)


state 109

    (105) factor -> variable .

    TIMES           reduce using rule 105 (factor -> variable .)
    DIVIDE          reduce using rule 105 (factor -> variable .)
    PLUS            reduce using rule 105 (factor -> variable .)
    MINUS           reduce using rule 105 (factor -> variable .)
    LESS            reduce using rule 105 (factor -> variable .)
    GREATER         reduce using rule 105 (factor -> variable .)
    EQUALS          reduce using rule 105 (factor -> variable .)
    NOTEQUAL        reduce using rule 105 (factor -> variable .)
    GREATERTHAN     reduce using rule 105 (factor -> variable .)
    LESSTHAN        reduce using rule 105 (factor -> variable .)
    AND             reduce using rule 105 (factor -> variable .)
    OR              reduce using rule 105 (factor -> variable .)
    SEMICOLON       reduce using rule 105 (factor -> variable .)
    RPAREN          reduce using rule 105 (factor -> variable .)
    COMMA           reduce using rule 105 (factor -> variable .)
    RBRACK          reduce using rule 105 (factor -> variable .)
    FROM            reduce using rule 105 (factor -> variable .)


state 110

    (106) factor -> cte .

    TIMES           reduce using rule 106 (factor -> cte .)
    DIVIDE          reduce using rule 106 (factor -> cte .)
    PLUS            reduce using rule 106 (factor -> cte .)
    MINUS           reduce using rule 106 (factor -> cte .)
    LESS            reduce using rule 106 (factor -> cte .)
    GREATER         reduce using rule 106 (factor -> cte .)
    EQUALS          reduce using rule 106 (factor -> cte .)
    NOTEQUAL        reduce using rule 106 (factor -> cte .)
    GREATERTHAN     reduce using rule 106 (factor -> cte .)
    LESSTHAN        reduce using rule 106 (factor -> cte .)
    AND             reduce using rule 106 (factor -> cte .)
    OR              reduce using rule 106 (factor -> cte .)
    SEMICOLON       reduce using rule 106 (factor -> cte .)
    RPAREN          reduce using rule 106 (factor -> cte .)
    COMMA           reduce using rule 106 (factor -> cte .)
    RBRACK          reduce using rule 106 (factor -> cte .)
    FROM            reduce using rule 106 (factor -> cte .)


state 111

    (107) factor -> invocation .

    TIMES           reduce using rule 107 (factor -> invocation .)
    DIVIDE          reduce using rule 107 (factor -> invocation .)
    PLUS            reduce using rule 107 (factor -> invocation .)
    MINUS           reduce using rule 107 (factor -> invocation .)
    LESS            reduce using rule 107 (factor -> invocation .)
    GREATER         reduce using rule 107 (factor -> invocation .)
    EQUALS          reduce using rule 107 (factor -> invocation .)
    NOTEQUAL        reduce using rule 107 (factor -> invocation .)
    GREATERTHAN     reduce using rule 107 (factor -> invocation .)
    LESSTHAN        reduce using rule 107 (factor -> invocation .)
    AND             reduce using rule 107 (factor -> invocation .)
    OR              reduce using rule 107 (factor -> invocation .)
    SEMICOLON       reduce using rule 107 (factor -> invocation .)
    RPAREN          reduce using rule 107 (factor -> invocation .)
    COMMA           reduce using rule 107 (factor -> invocation .)
    RBRACK          reduce using rule 107 (factor -> invocation .)
    FROM            reduce using rule 107 (factor -> invocation .)


state 112

    (108) factor -> expression_parenthesis .

    TIMES           reduce using rule 108 (factor -> expression_parenthesis .)
    DIVIDE          reduce using rule 108 (factor -> expression_parenthesis .)
    PLUS            reduce using rule 108 (factor -> expression_parenthesis .)
    MINUS           reduce using rule 108 (factor -> expression_parenthesis .)
    LESS            reduce using rule 108 (factor -> expression_parenthesis .)
    GREATER         reduce using rule 108 (factor -> expression_parenthesis .)
    EQUALS          reduce using rule 108 (factor -> expression_parenthesis .)
    NOTEQUAL        reduce using rule 108 (factor -> expression_parenthesis .)
    GREATERTHAN     reduce using rule 108 (factor -> expression_parenthesis .)
    LESSTHAN        reduce using rule 108 (factor -> expression_parenthesis .)
    AND             reduce using rule 108 (factor -> expression_parenthesis .)
    OR              reduce using rule 108 (factor -> expression_parenthesis .)
    SEMICOLON       reduce using rule 108 (factor -> expression_parenthesis .)
    RPAREN          reduce using rule 108 (factor -> expression_parenthesis .)
    COMMA           reduce using rule 108 (factor -> expression_parenthesis .)
    RBRACK          reduce using rule 108 (factor -> expression_parenthesis .)
    FROM            reduce using rule 108 (factor -> expression_parenthesis .)


state 113

    (21) variable -> ID .
    (22) variable -> ID . array_true array_dim
    (23) variable -> ID . array_true array_dim array_dim
    (24) variable -> ID . array_true array_dim array_dim array_dim
    (79) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (25) array_true -> . empty
    (80) invocation_1 -> . empty
    (132) empty -> .

    TIMES           reduce using rule 21 (variable -> ID .)
    DIVIDE          reduce using rule 21 (variable -> ID .)
    PLUS            reduce using rule 21 (variable -> ID .)
    MINUS           reduce using rule 21 (variable -> ID .)
    LESS            reduce using rule 21 (variable -> ID .)
    GREATER         reduce using rule 21 (variable -> ID .)
    EQUALS          reduce using rule 21 (variable -> ID .)
    NOTEQUAL        reduce using rule 21 (variable -> ID .)
    GREATERTHAN     reduce using rule 21 (variable -> ID .)
    LESSTHAN        reduce using rule 21 (variable -> ID .)
    AND             reduce using rule 21 (variable -> ID .)
    OR              reduce using rule 21 (variable -> ID .)
    SEMICOLON       reduce using rule 21 (variable -> ID .)
    RPAREN          reduce using rule 21 (variable -> ID .)
    COMMA           reduce using rule 21 (variable -> ID .)
    RBRACK          reduce using rule 21 (variable -> ID .)
    FROM            reduce using rule 21 (variable -> ID .)
    LBRACK          reduce using rule 132 (empty -> .)
    LPAREN          reduce using rule 132 (empty -> .)

    array_true                     shift and go to state 86
    invocation_1                   shift and go to state 94
    empty                          shift and go to state 165

state 114

    (127) cte -> CTEI .

    TIMES           reduce using rule 127 (cte -> CTEI .)
    DIVIDE          reduce using rule 127 (cte -> CTEI .)
    PLUS            reduce using rule 127 (cte -> CTEI .)
    MINUS           reduce using rule 127 (cte -> CTEI .)
    LESS            reduce using rule 127 (cte -> CTEI .)
    GREATER         reduce using rule 127 (cte -> CTEI .)
    EQUALS          reduce using rule 127 (cte -> CTEI .)
    NOTEQUAL        reduce using rule 127 (cte -> CTEI .)
    GREATERTHAN     reduce using rule 127 (cte -> CTEI .)
    LESSTHAN        reduce using rule 127 (cte -> CTEI .)
    AND             reduce using rule 127 (cte -> CTEI .)
    OR              reduce using rule 127 (cte -> CTEI .)
    SEMICOLON       reduce using rule 127 (cte -> CTEI .)
    RPAREN          reduce using rule 127 (cte -> CTEI .)
    COMMA           reduce using rule 127 (cte -> CTEI .)
    RBRACK          reduce using rule 127 (cte -> CTEI .)
    FROM            reduce using rule 127 (cte -> CTEI .)


state 115

    (128) cte -> CTEF .

    TIMES           reduce using rule 128 (cte -> CTEF .)
    DIVIDE          reduce using rule 128 (cte -> CTEF .)
    PLUS            reduce using rule 128 (cte -> CTEF .)
    MINUS           reduce using rule 128 (cte -> CTEF .)
    LESS            reduce using rule 128 (cte -> CTEF .)
    GREATER         reduce using rule 128 (cte -> CTEF .)
    EQUALS          reduce using rule 128 (cte -> CTEF .)
    NOTEQUAL        reduce using rule 128 (cte -> CTEF .)
    GREATERTHAN     reduce using rule 128 (cte -> CTEF .)
    LESSTHAN        reduce using rule 128 (cte -> CTEF .)
    AND             reduce using rule 128 (cte -> CTEF .)
    OR              reduce using rule 128 (cte -> CTEF .)
    SEMICOLON       reduce using rule 128 (cte -> CTEF .)
    RPAREN          reduce using rule 128 (cte -> CTEF .)
    COMMA           reduce using rule 128 (cte -> CTEF .)
    RBRACK          reduce using rule 128 (cte -> CTEF .)
    FROM            reduce using rule 128 (cte -> CTEF .)


state 116

    (129) cte -> CTEC .

    TIMES           reduce using rule 129 (cte -> CTEC .)
    DIVIDE          reduce using rule 129 (cte -> CTEC .)
    PLUS            reduce using rule 129 (cte -> CTEC .)
    MINUS           reduce using rule 129 (cte -> CTEC .)
    LESS            reduce using rule 129 (cte -> CTEC .)
    GREATER         reduce using rule 129 (cte -> CTEC .)
    EQUALS          reduce using rule 129 (cte -> CTEC .)
    NOTEQUAL        reduce using rule 129 (cte -> CTEC .)
    GREATERTHAN     reduce using rule 129 (cte -> CTEC .)
    LESSTHAN        reduce using rule 129 (cte -> CTEC .)
    AND             reduce using rule 129 (cte -> CTEC .)
    OR              reduce using rule 129 (cte -> CTEC .)
    SEMICOLON       reduce using rule 129 (cte -> CTEC .)
    RPAREN          reduce using rule 129 (cte -> CTEC .)
    COMMA           reduce using rule 129 (cte -> CTEC .)
    RBRACK          reduce using rule 129 (cte -> CTEC .)
    FROM            reduce using rule 129 (cte -> CTEC .)


state 117

    (130) cte -> CTEB .

    TIMES           reduce using rule 130 (cte -> CTEB .)
    DIVIDE          reduce using rule 130 (cte -> CTEB .)
    PLUS            reduce using rule 130 (cte -> CTEB .)
    MINUS           reduce using rule 130 (cte -> CTEB .)
    LESS            reduce using rule 130 (cte -> CTEB .)
    GREATER         reduce using rule 130 (cte -> CTEB .)
    EQUALS          reduce using rule 130 (cte -> CTEB .)
    NOTEQUAL        reduce using rule 130 (cte -> CTEB .)
    GREATERTHAN     reduce using rule 130 (cte -> CTEB .)
    LESSTHAN        reduce using rule 130 (cte -> CTEB .)
    AND             reduce using rule 130 (cte -> CTEB .)
    OR              reduce using rule 130 (cte -> CTEB .)
    SEMICOLON       reduce using rule 130 (cte -> CTEB .)
    RPAREN          reduce using rule 130 (cte -> CTEB .)
    COMMA           reduce using rule 130 (cte -> CTEB .)
    RBRACK          reduce using rule 130 (cte -> CTEB .)
    FROM            reduce using rule 130 (cte -> CTEB .)


state 118

    (131) cte -> CTES .

    TIMES           reduce using rule 131 (cte -> CTES .)
    DIVIDE          reduce using rule 131 (cte -> CTES .)
    PLUS            reduce using rule 131 (cte -> CTES .)
    MINUS           reduce using rule 131 (cte -> CTES .)
    LESS            reduce using rule 131 (cte -> CTES .)
    GREATER         reduce using rule 131 (cte -> CTES .)
    EQUALS          reduce using rule 131 (cte -> CTES .)
    NOTEQUAL        reduce using rule 131 (cte -> CTES .)
    GREATERTHAN     reduce using rule 131 (cte -> CTES .)
    LESSTHAN        reduce using rule 131 (cte -> CTES .)
    AND             reduce using rule 131 (cte -> CTES .)
    OR              reduce using rule 131 (cte -> CTES .)
    SEMICOLON       reduce using rule 131 (cte -> CTES .)
    RPAREN          reduce using rule 131 (cte -> CTES .)
    COMMA           reduce using rule 131 (cte -> CTES .)
    RBRACK          reduce using rule 131 (cte -> CTES .)
    FROM            reduce using rule 131 (cte -> CTES .)


state 119

    (109) expression_parenthesis -> LPAREN . expression RPAREN
    (95) expression -> . t_expression
    (96) expression -> . NOT t_expression
    (97) t_expression -> . g_expression
    (98) t_expression -> . t_expression boolean_operator g_expression
    (99) g_expression -> . m_expression
    (100) g_expression -> . g_expression comparison_operator m_expression
    (101) m_expression -> . term
    (102) m_expression -> . m_expression addition_operator term
    (103) term -> . factor
    (104) term -> . term multiplication_operator factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 104
    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    CTES            shift and go to state 118
    LPAREN          shift and go to state 119

    expression                     shift and go to state 166
    t_expression                   shift and go to state 103
    g_expression                   shift and go to state 105
    m_expression                   shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    variable                       shift and go to state 109
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 120

    (59) gen_key -> GENKEY LPAREN . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 167


state 121

    (60) encrypt -> ENCRYPT LPAREN . ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 168


state 122

    (61) decrypt -> DECRYPT LPAREN . ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 169


state 123

    (58) sha_256 -> SHA_256 LPAREN . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 170


state 124

    (57) random_salt -> RANDOM_SALT LPAREN . CTEI RPAREN SPECIAL ID SEMICOLON

    CTEI            shift and go to state 171


state 125

    (56) hmac -> HMAC LPAREN . ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 172


state 126

    (55) ecdsa -> ECDSA LPAREN . ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 173


state 127

    (54) ecdsa_key -> ECDSAKEY LPAREN . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 174


state 128

    (7) function_signature -> simple_type ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (17) open_var_declaration -> . empty
    (132) empty -> .

    INT             reduce using rule 132 (empty -> .)
    FLOAT           reduce using rule 132 (empty -> .)
    CHAR            reduce using rule 132 (empty -> .)
    BOOLEAN         reduce using rule 132 (empty -> .)
    STRING          reduce using rule 132 (empty -> .)
    COMMA           reduce using rule 132 (empty -> .)
    RPAREN          reduce using rule 132 (empty -> .)

    open_var_declaration           shift and go to state 175
    empty                          shift and go to state 18

state 129

    (8) function_signature -> VOID ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (17) open_var_declaration -> . empty
    (132) empty -> .

    INT             reduce using rule 132 (empty -> .)
    FLOAT           reduce using rule 132 (empty -> .)
    CHAR            reduce using rule 132 (empty -> .)
    BOOLEAN         reduce using rule 132 (empty -> .)
    STRING          reduce using rule 132 (empty -> .)
    COMMA           reduce using rule 132 (empty -> .)
    RPAREN          reduce using rule 132 (empty -> .)

    open_var_declaration           shift and go to state 176
    empty                          shift and go to state 18

state 130

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .

    VARIABLE        reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    FUNCTION        reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    MAIN            reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    LBRACE          reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)


state 131

    (18) close_var_declaration -> empty .

    VARIABLE        reduce using rule 18 (close_var_declaration -> empty .)
    FUNCTION        reduce using rule 18 (close_var_declaration -> empty .)
    MAIN            reduce using rule 18 (close_var_declaration -> empty .)
    LBRACE          reduce using rule 18 (close_var_declaration -> empty .)
    RPAREN          reduce using rule 18 (close_var_declaration -> empty .)


state 132

    (20) variables -> variable COMMA variables .

    SEMICOLON       reduce using rule 20 (variables -> variable COMMA variables .)


state 133

    (22) variable -> ID array_true array_dim .
    (23) variable -> ID array_true array_dim . array_dim
    (24) variable -> ID array_true array_dim . array_dim array_dim
    (26) array_dim -> . LBRACK expression RBRACK

    COMMA           reduce using rule 22 (variable -> ID array_true array_dim .)
    SEMICOLON       reduce using rule 22 (variable -> ID array_true array_dim .)
    ASSIGN          reduce using rule 22 (variable -> ID array_true array_dim .)
    TIMES           reduce using rule 22 (variable -> ID array_true array_dim .)
    DIVIDE          reduce using rule 22 (variable -> ID array_true array_dim .)
    PLUS            reduce using rule 22 (variable -> ID array_true array_dim .)
    MINUS           reduce using rule 22 (variable -> ID array_true array_dim .)
    LESS            reduce using rule 22 (variable -> ID array_true array_dim .)
    GREATER         reduce using rule 22 (variable -> ID array_true array_dim .)
    EQUALS          reduce using rule 22 (variable -> ID array_true array_dim .)
    NOTEQUAL        reduce using rule 22 (variable -> ID array_true array_dim .)
    GREATERTHAN     reduce using rule 22 (variable -> ID array_true array_dim .)
    LESSTHAN        reduce using rule 22 (variable -> ID array_true array_dim .)
    AND             reduce using rule 22 (variable -> ID array_true array_dim .)
    OR              reduce using rule 22 (variable -> ID array_true array_dim .)
    RPAREN          reduce using rule 22 (variable -> ID array_true array_dim .)
    RBRACK          reduce using rule 22 (variable -> ID array_true array_dim .)
    FROM            reduce using rule 22 (variable -> ID array_true array_dim .)
    LBRACK          shift and go to state 134

    array_dim                      shift and go to state 177

state 134

    (26) array_dim -> LBRACK . expression RBRACK
    (95) expression -> . t_expression
    (96) expression -> . NOT t_expression
    (97) t_expression -> . g_expression
    (98) t_expression -> . t_expression boolean_operator g_expression
    (99) g_expression -> . m_expression
    (100) g_expression -> . g_expression comparison_operator m_expression
    (101) m_expression -> . term
    (102) m_expression -> . m_expression addition_operator term
    (103) term -> . factor
    (104) term -> . term multiplication_operator factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 104
    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    CTES            shift and go to state 118
    LPAREN          shift and go to state 119

    expression                     shift and go to state 178
    t_expression                   shift and go to state 103
    g_expression                   shift and go to state 105
    m_expression                   shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    variable                       shift and go to state 109
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 135

    (11) main -> MAIN LPAREN RPAREN main_scope var_declarations . block
    (31) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 179

state 136

    (94) assingation -> variable ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 180


state 137

    (65) for -> FOR LPAREN ID . for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (66) for_1 -> . empty
    (132) empty -> .

    ASSIGN          reduce using rule 132 (empty -> .)

    for_1                          shift and go to state 181
    empty                          shift and go to state 182

state 138

    (79) invocation -> ID invocation_1 LPAREN . invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (81) invocation_2 -> . empty
    (132) empty -> .

    NOT             reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)
    CTEI            reduce using rule 132 (empty -> .)
    CTEF            reduce using rule 132 (empty -> .)
    CTEC            reduce using rule 132 (empty -> .)
    CTEB            reduce using rule 132 (empty -> .)
    CTES            reduce using rule 132 (empty -> .)
    LPAREN          reduce using rule 132 (empty -> .)
    RPAREN          reduce using rule 132 (empty -> .)
    COMMA           reduce using rule 132 (empty -> .)

    invocation_2                   shift and go to state 183
    empty                          shift and go to state 184

state 139

    (64) do_while -> DO breadcrumb block . WHILE LPAREN expression RPAREN gotot SEMICOLON

    WHILE           shift and go to state 185


state 140

    (70) while -> WHILE breadcrumb LPAREN . expression RPAREN gotof block
    (95) expression -> . t_expression
    (96) expression -> . NOT t_expression
    (97) t_expression -> . g_expression
    (98) t_expression -> . t_expression boolean_operator g_expression
    (99) g_expression -> . m_expression
    (100) g_expression -> . g_expression comparison_operator m_expression
    (101) m_expression -> . term
    (102) m_expression -> . m_expression addition_operator term
    (103) term -> . factor
    (104) term -> . term multiplication_operator factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 104
    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    CTES            shift and go to state 118
    LPAREN          shift and go to state 119

    expression                     shift and go to state 186
    t_expression                   shift and go to state 103
    g_expression                   shift and go to state 105
    m_expression                   shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    variable                       shift and go to state 109
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 141

    (73) if_else -> IF LPAREN expression . RPAREN gotof block ELSE goto block
    (72) if -> IF LPAREN expression . RPAREN gotof block

    RPAREN          shift and go to state 187


state 142

    (89) print -> PRINT LPAREN print_arguments . RPAREN SEMICOLON
    (91) print_arguments -> print_arguments . COMMA print_argument

    RPAREN          shift and go to state 188
    COMMA           shift and go to state 189


state 143

    (90) print_arguments -> print_argument .

    RPAREN          reduce using rule 90 (print_arguments -> print_argument .)
    COMMA           reduce using rule 90 (print_arguments -> print_argument .)


state 144

    (92) print_argument -> CTES .
    (131) cte -> CTES .

  ! reduce/reduce conflict for RPAREN resolved using rule 92 (print_argument -> CTES .)
  ! reduce/reduce conflict for COMMA resolved using rule 92 (print_argument -> CTES .)
    RPAREN          reduce using rule 92 (print_argument -> CTES .)
    COMMA           reduce using rule 92 (print_argument -> CTES .)
    TIMES           reduce using rule 131 (cte -> CTES .)
    DIVIDE          reduce using rule 131 (cte -> CTES .)
    PLUS            reduce using rule 131 (cte -> CTES .)
    MINUS           reduce using rule 131 (cte -> CTES .)
    LESS            reduce using rule 131 (cte -> CTES .)
    GREATER         reduce using rule 131 (cte -> CTES .)
    EQUALS          reduce using rule 131 (cte -> CTES .)
    NOTEQUAL        reduce using rule 131 (cte -> CTES .)
    GREATERTHAN     reduce using rule 131 (cte -> CTES .)
    LESSTHAN        reduce using rule 131 (cte -> CTES .)
    AND             reduce using rule 131 (cte -> CTES .)
    OR              reduce using rule 131 (cte -> CTES .)

  ! RPAREN          [ reduce using rule 131 (cte -> CTES .) ]
  ! COMMA           [ reduce using rule 131 (cte -> CTES .) ]


state 145

    (93) print_argument -> expression .

    RPAREN          reduce using rule 93 (print_argument -> expression .)
    COMMA           reduce using rule 93 (print_argument -> expression .)


state 146

    (62) read -> READ LPAREN ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 190


state 147

    (9) return -> RETURN expression SEMICOLON .

    FOR             reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    DO              reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    IF              reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    ID              reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    READ            reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    GENKEY          reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    ENCRYPT         reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    DECRYPT         reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    SHA_256         reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    RANDOM_SALT     reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    HMAC            reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    ECDSA           reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    ECDSAKEY        reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 9 (return -> RETURN expression SEMICOLON .)


state 148

    (98) t_expression -> t_expression boolean_operator . g_expression
    (99) g_expression -> . m_expression
    (100) g_expression -> . g_expression comparison_operator m_expression
    (101) m_expression -> . term
    (102) m_expression -> . m_expression addition_operator term
    (103) term -> . factor
    (104) term -> . term multiplication_operator factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    CTES            shift and go to state 118
    LPAREN          shift and go to state 119

    g_expression                   shift and go to state 191
    m_expression                   shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    variable                       shift and go to state 109
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 149

    (118) boolean_operator -> AND .

    ID              reduce using rule 118 (boolean_operator -> AND .)
    CTEI            reduce using rule 118 (boolean_operator -> AND .)
    CTEF            reduce using rule 118 (boolean_operator -> AND .)
    CTEC            reduce using rule 118 (boolean_operator -> AND .)
    CTEB            reduce using rule 118 (boolean_operator -> AND .)
    CTES            reduce using rule 118 (boolean_operator -> AND .)
    LPAREN          reduce using rule 118 (boolean_operator -> AND .)


state 150

    (119) boolean_operator -> OR .

    ID              reduce using rule 119 (boolean_operator -> OR .)
    CTEI            reduce using rule 119 (boolean_operator -> OR .)
    CTEF            reduce using rule 119 (boolean_operator -> OR .)
    CTEC            reduce using rule 119 (boolean_operator -> OR .)
    CTEB            reduce using rule 119 (boolean_operator -> OR .)
    CTES            reduce using rule 119 (boolean_operator -> OR .)
    LPAREN          reduce using rule 119 (boolean_operator -> OR .)


state 151

    (96) expression -> NOT t_expression .
    (98) t_expression -> t_expression . boolean_operator g_expression
    (118) boolean_operator -> . AND
    (119) boolean_operator -> . OR

    SEMICOLON       reduce using rule 96 (expression -> NOT t_expression .)
    RPAREN          reduce using rule 96 (expression -> NOT t_expression .)
    COMMA           reduce using rule 96 (expression -> NOT t_expression .)
    RBRACK          reduce using rule 96 (expression -> NOT t_expression .)
    FROM            reduce using rule 96 (expression -> NOT t_expression .)
    AND             shift and go to state 149
    OR              shift and go to state 150

    boolean_operator               shift and go to state 148

state 152

    (100) g_expression -> g_expression comparison_operator . m_expression
    (101) m_expression -> . term
    (102) m_expression -> . m_expression addition_operator term
    (103) term -> . factor
    (104) term -> . term multiplication_operator factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    CTES            shift and go to state 118
    LPAREN          shift and go to state 119

    m_expression                   shift and go to state 192
    term                           shift and go to state 107
    factor                         shift and go to state 108
    variable                       shift and go to state 109
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 153

    (110) comparison_operator -> LESS .

    ID              reduce using rule 110 (comparison_operator -> LESS .)
    CTEI            reduce using rule 110 (comparison_operator -> LESS .)
    CTEF            reduce using rule 110 (comparison_operator -> LESS .)
    CTEC            reduce using rule 110 (comparison_operator -> LESS .)
    CTEB            reduce using rule 110 (comparison_operator -> LESS .)
    CTES            reduce using rule 110 (comparison_operator -> LESS .)
    LPAREN          reduce using rule 110 (comparison_operator -> LESS .)


state 154

    (111) comparison_operator -> GREATER .

    ID              reduce using rule 111 (comparison_operator -> GREATER .)
    CTEI            reduce using rule 111 (comparison_operator -> GREATER .)
    CTEF            reduce using rule 111 (comparison_operator -> GREATER .)
    CTEC            reduce using rule 111 (comparison_operator -> GREATER .)
    CTEB            reduce using rule 111 (comparison_operator -> GREATER .)
    CTES            reduce using rule 111 (comparison_operator -> GREATER .)
    LPAREN          reduce using rule 111 (comparison_operator -> GREATER .)


state 155

    (112) comparison_operator -> EQUALS .

    ID              reduce using rule 112 (comparison_operator -> EQUALS .)
    CTEI            reduce using rule 112 (comparison_operator -> EQUALS .)
    CTEF            reduce using rule 112 (comparison_operator -> EQUALS .)
    CTEC            reduce using rule 112 (comparison_operator -> EQUALS .)
    CTEB            reduce using rule 112 (comparison_operator -> EQUALS .)
    CTES            reduce using rule 112 (comparison_operator -> EQUALS .)
    LPAREN          reduce using rule 112 (comparison_operator -> EQUALS .)


state 156

    (113) comparison_operator -> NOTEQUAL .

    ID              reduce using rule 113 (comparison_operator -> NOTEQUAL .)
    CTEI            reduce using rule 113 (comparison_operator -> NOTEQUAL .)
    CTEF            reduce using rule 113 (comparison_operator -> NOTEQUAL .)
    CTEC            reduce using rule 113 (comparison_operator -> NOTEQUAL .)
    CTEB            reduce using rule 113 (comparison_operator -> NOTEQUAL .)
    CTES            reduce using rule 113 (comparison_operator -> NOTEQUAL .)
    LPAREN          reduce using rule 113 (comparison_operator -> NOTEQUAL .)


state 157

    (114) comparison_operator -> GREATERTHAN .

    ID              reduce using rule 114 (comparison_operator -> GREATERTHAN .)
    CTEI            reduce using rule 114 (comparison_operator -> GREATERTHAN .)
    CTEF            reduce using rule 114 (comparison_operator -> GREATERTHAN .)
    CTEC            reduce using rule 114 (comparison_operator -> GREATERTHAN .)
    CTEB            reduce using rule 114 (comparison_operator -> GREATERTHAN .)
    CTES            reduce using rule 114 (comparison_operator -> GREATERTHAN .)
    LPAREN          reduce using rule 114 (comparison_operator -> GREATERTHAN .)


state 158

    (115) comparison_operator -> LESSTHAN .

    ID              reduce using rule 115 (comparison_operator -> LESSTHAN .)
    CTEI            reduce using rule 115 (comparison_operator -> LESSTHAN .)
    CTEF            reduce using rule 115 (comparison_operator -> LESSTHAN .)
    CTEC            reduce using rule 115 (comparison_operator -> LESSTHAN .)
    CTEB            reduce using rule 115 (comparison_operator -> LESSTHAN .)
    CTES            reduce using rule 115 (comparison_operator -> LESSTHAN .)
    LPAREN          reduce using rule 115 (comparison_operator -> LESSTHAN .)


state 159

    (102) m_expression -> m_expression addition_operator . term
    (103) term -> . factor
    (104) term -> . term multiplication_operator factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    CTES            shift and go to state 118
    LPAREN          shift and go to state 119

    term                           shift and go to state 193
    factor                         shift and go to state 108
    variable                       shift and go to state 109
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 160

    (116) addition_operator -> PLUS .

    ID              reduce using rule 116 (addition_operator -> PLUS .)
    CTEI            reduce using rule 116 (addition_operator -> PLUS .)
    CTEF            reduce using rule 116 (addition_operator -> PLUS .)
    CTEC            reduce using rule 116 (addition_operator -> PLUS .)
    CTEB            reduce using rule 116 (addition_operator -> PLUS .)
    CTES            reduce using rule 116 (addition_operator -> PLUS .)
    LPAREN          reduce using rule 116 (addition_operator -> PLUS .)


state 161

    (117) addition_operator -> MINUS .

    ID              reduce using rule 117 (addition_operator -> MINUS .)
    CTEI            reduce using rule 117 (addition_operator -> MINUS .)
    CTEF            reduce using rule 117 (addition_operator -> MINUS .)
    CTEC            reduce using rule 117 (addition_operator -> MINUS .)
    CTEB            reduce using rule 117 (addition_operator -> MINUS .)
    CTES            reduce using rule 117 (addition_operator -> MINUS .)
    LPAREN          reduce using rule 117 (addition_operator -> MINUS .)


state 162

    (104) term -> term multiplication_operator . factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    CTES            shift and go to state 118
    LPAREN          shift and go to state 119

    factor                         shift and go to state 194
    variable                       shift and go to state 109
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 163

    (120) multiplication_operator -> TIMES .

    ID              reduce using rule 120 (multiplication_operator -> TIMES .)
    CTEI            reduce using rule 120 (multiplication_operator -> TIMES .)
    CTEF            reduce using rule 120 (multiplication_operator -> TIMES .)
    CTEC            reduce using rule 120 (multiplication_operator -> TIMES .)
    CTEB            reduce using rule 120 (multiplication_operator -> TIMES .)
    CTES            reduce using rule 120 (multiplication_operator -> TIMES .)
    LPAREN          reduce using rule 120 (multiplication_operator -> TIMES .)


state 164

    (121) multiplication_operator -> DIVIDE .

    ID              reduce using rule 121 (multiplication_operator -> DIVIDE .)
    CTEI            reduce using rule 121 (multiplication_operator -> DIVIDE .)
    CTEF            reduce using rule 121 (multiplication_operator -> DIVIDE .)
    CTEC            reduce using rule 121 (multiplication_operator -> DIVIDE .)
    CTEB            reduce using rule 121 (multiplication_operator -> DIVIDE .)
    CTES            reduce using rule 121 (multiplication_operator -> DIVIDE .)
    LPAREN          reduce using rule 121 (multiplication_operator -> DIVIDE .)


state 165

    (25) array_true -> empty .
    (80) invocation_1 -> empty .

    LBRACK          reduce using rule 25 (array_true -> empty .)
    LPAREN          reduce using rule 80 (invocation_1 -> empty .)


state 166

    (109) expression_parenthesis -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 195


state 167

    (59) gen_key -> GENKEY LPAREN RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 196


state 168

    (60) encrypt -> ENCRYPT LPAREN ID . COMMA ID RPAREN SPECIAL ID SEMICOLON

    COMMA           shift and go to state 197


state 169

    (61) decrypt -> DECRYPT LPAREN ID . COMMA ID RPAREN SPECIAL ID SEMICOLON

    COMMA           shift and go to state 198


state 170

    (58) sha_256 -> SHA_256 LPAREN ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 199


state 171

    (57) random_salt -> RANDOM_SALT LPAREN CTEI . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 200


state 172

    (56) hmac -> HMAC LPAREN ID . COMMA ID RPAREN SPECIAL ID SEMICOLON

    COMMA           shift and go to state 201


state 173

    (55) ecdsa -> ECDSA LPAREN ID . COMMA ID RPAREN SPECIAL ID SEMICOLON

    COMMA           shift and go to state 202


state 174

    (54) ecdsa_key -> ECDSAKEY LPAREN RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 203


state 175

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations
    (27) parameters -> . parameters COMMA parameter
    (28) parameters -> . parameter
    (29) parameters -> . empty
    (30) parameter -> . simple_type ID
    (132) empty -> .
    (122) simple_type -> . INT
    (123) simple_type -> . FLOAT
    (124) simple_type -> . CHAR
    (125) simple_type -> . BOOLEAN
    (126) simple_type -> . STRING

    COMMA           reduce using rule 132 (empty -> .)
    RPAREN          reduce using rule 132 (empty -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    simple_type                    shift and go to state 204
    parameters                     shift and go to state 205
    parameter                      shift and go to state 206
    empty                          shift and go to state 207

state 176

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations
    (27) parameters -> . parameters COMMA parameter
    (28) parameters -> . parameter
    (29) parameters -> . empty
    (30) parameter -> . simple_type ID
    (132) empty -> .
    (122) simple_type -> . INT
    (123) simple_type -> . FLOAT
    (124) simple_type -> . CHAR
    (125) simple_type -> . BOOLEAN
    (126) simple_type -> . STRING

    COMMA           reduce using rule 132 (empty -> .)
    RPAREN          reduce using rule 132 (empty -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    parameters                     shift and go to state 208
    parameter                      shift and go to state 206
    empty                          shift and go to state 207
    simple_type                    shift and go to state 204

state 177

    (23) variable -> ID array_true array_dim array_dim .
    (24) variable -> ID array_true array_dim array_dim . array_dim
    (26) array_dim -> . LBRACK expression RBRACK

    COMMA           reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    SEMICOLON       reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    ASSIGN          reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    TIMES           reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    DIVIDE          reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    PLUS            reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    MINUS           reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    LESS            reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    GREATER         reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    EQUALS          reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    NOTEQUAL        reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    GREATERTHAN     reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    LESSTHAN        reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    AND             reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    OR              reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    RPAREN          reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    RBRACK          reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    FROM            reduce using rule 23 (variable -> ID array_true array_dim array_dim .)
    LBRACK          shift and go to state 134

    array_dim                      shift and go to state 209

state 178

    (26) array_dim -> LBRACK expression . RBRACK

    RBRACK          shift and go to state 210


state 179

    (11) main -> MAIN LPAREN RPAREN main_scope var_declarations block .

    END             reduce using rule 11 (main -> MAIN LPAREN RPAREN main_scope var_declarations block .)


state 180

    (94) assingation -> variable ASSIGN expression SEMICOLON .

    FOR             reduce using rule 94 (assingation -> variable ASSIGN expression SEMICOLON .)
    DO              reduce using rule 94 (assingation -> variable ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 94 (assingation -> variable ASSIGN expression SEMICOLON .)
    IF              reduce using rule 94 (assingation -> variable ASSIGN expression SEMICOLON .)
    ID              reduce using rule 94 (assingation -> variable ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 94 (assingation -> variable ASSIGN expression SEMICOLON .)
    READ            reduce using rule 94 (assingation -> variable ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 94 (assingation -> variable ASSIGN expression SEMICOLON .)
    GENKEY          reduce using rule 94 (assingation -> variable ASSIGN expression SEMICOLON .)
    ENCRYPT         reduce using rule 94 (assingation -> variable ASSIGN expression SEMICOLON .)
    DECRYPT         reduce using rule 94 (assingation -> variable ASSIGN expression SEMICOLON .)
    SHA_256         reduce using rule 94 (assingation -> variable ASSIGN expression SEMICOLON .)
    RANDOM_SALT     reduce using rule 94 (assingation -> variable ASSIGN expression SEMICOLON .)
    HMAC            reduce using rule 94 (assingation -> variable ASSIGN expression SEMICOLON .)
    ECDSA           reduce using rule 94 (assingation -> variable ASSIGN expression SEMICOLON .)
    ECDSAKEY        reduce using rule 94 (assingation -> variable ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 94 (assingation -> variable ASSIGN expression SEMICOLON .)


state 181

    (65) for -> FOR LPAREN ID for_1 . ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    ASSIGN          shift and go to state 211


state 182

    (66) for_1 -> empty .

    ASSIGN          reduce using rule 66 (for_1 -> empty .)


state 183

    (79) invocation -> ID invocation_1 LPAREN invocation_2 . expressions RPAREN invocation_5 SEMICOLON invocation_6
    (86) expressions -> . expressions COMMA invocation_4 expression invocation_3
    (87) expressions -> . expression invocation_3
    (88) expressions -> . empty
    (95) expression -> . t_expression
    (96) expression -> . NOT t_expression
    (132) empty -> .
    (97) t_expression -> . g_expression
    (98) t_expression -> . t_expression boolean_operator g_expression
    (99) g_expression -> . m_expression
    (100) g_expression -> . g_expression comparison_operator m_expression
    (101) m_expression -> . term
    (102) m_expression -> . m_expression addition_operator term
    (103) term -> . factor
    (104) term -> . term multiplication_operator factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 104
    RPAREN          reduce using rule 132 (empty -> .)
    COMMA           reduce using rule 132 (empty -> .)
    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    CTES            shift and go to state 118
    LPAREN          shift and go to state 119

    expressions                    shift and go to state 212
    expression                     shift and go to state 213
    empty                          shift and go to state 214
    t_expression                   shift and go to state 103
    g_expression                   shift and go to state 105
    m_expression                   shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    variable                       shift and go to state 109
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 184

    (81) invocation_2 -> empty .

    NOT             reduce using rule 81 (invocation_2 -> empty .)
    ID              reduce using rule 81 (invocation_2 -> empty .)
    CTEI            reduce using rule 81 (invocation_2 -> empty .)
    CTEF            reduce using rule 81 (invocation_2 -> empty .)
    CTEC            reduce using rule 81 (invocation_2 -> empty .)
    CTEB            reduce using rule 81 (invocation_2 -> empty .)
    CTES            reduce using rule 81 (invocation_2 -> empty .)
    LPAREN          reduce using rule 81 (invocation_2 -> empty .)
    RPAREN          reduce using rule 81 (invocation_2 -> empty .)
    COMMA           reduce using rule 81 (invocation_2 -> empty .)


state 185

    (64) do_while -> DO breadcrumb block WHILE . LPAREN expression RPAREN gotot SEMICOLON

    LPAREN          shift and go to state 215


state 186

    (70) while -> WHILE breadcrumb LPAREN expression . RPAREN gotof block

    RPAREN          shift and go to state 216


state 187

    (73) if_else -> IF LPAREN expression RPAREN . gotof block ELSE goto block
    (72) if -> IF LPAREN expression RPAREN . gotof block
    (76) gotof -> . empty
    (132) empty -> .

    LBRACE          reduce using rule 132 (empty -> .)

    gotof                          shift and go to state 217
    empty                          shift and go to state 218

state 188

    (89) print -> PRINT LPAREN print_arguments RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 219


state 189

    (91) print_arguments -> print_arguments COMMA . print_argument
    (92) print_argument -> . CTES
    (93) print_argument -> . expression
    (95) expression -> . t_expression
    (96) expression -> . NOT t_expression
    (97) t_expression -> . g_expression
    (98) t_expression -> . t_expression boolean_operator g_expression
    (99) g_expression -> . m_expression
    (100) g_expression -> . g_expression comparison_operator m_expression
    (101) m_expression -> . term
    (102) m_expression -> . m_expression addition_operator term
    (103) term -> . factor
    (104) term -> . term multiplication_operator factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    CTES            shift and go to state 144
    NOT             shift and go to state 104
    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    LPAREN          shift and go to state 119

    print_argument                 shift and go to state 220
    expression                     shift and go to state 145
    t_expression                   shift and go to state 103
    g_expression                   shift and go to state 105
    m_expression                   shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    variable                       shift and go to state 109
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 190

    (62) read -> READ LPAREN ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 221


state 191

    (98) t_expression -> t_expression boolean_operator g_expression .
    (100) g_expression -> g_expression . comparison_operator m_expression
    (110) comparison_operator -> . LESS
    (111) comparison_operator -> . GREATER
    (112) comparison_operator -> . EQUALS
    (113) comparison_operator -> . NOTEQUAL
    (114) comparison_operator -> . GREATERTHAN
    (115) comparison_operator -> . LESSTHAN

    AND             reduce using rule 98 (t_expression -> t_expression boolean_operator g_expression .)
    OR              reduce using rule 98 (t_expression -> t_expression boolean_operator g_expression .)
    SEMICOLON       reduce using rule 98 (t_expression -> t_expression boolean_operator g_expression .)
    RPAREN          reduce using rule 98 (t_expression -> t_expression boolean_operator g_expression .)
    COMMA           reduce using rule 98 (t_expression -> t_expression boolean_operator g_expression .)
    RBRACK          reduce using rule 98 (t_expression -> t_expression boolean_operator g_expression .)
    FROM            reduce using rule 98 (t_expression -> t_expression boolean_operator g_expression .)
    LESS            shift and go to state 153
    GREATER         shift and go to state 154
    EQUALS          shift and go to state 155
    NOTEQUAL        shift and go to state 156
    GREATERTHAN     shift and go to state 157
    LESSTHAN        shift and go to state 158

    comparison_operator            shift and go to state 152

state 192

    (100) g_expression -> g_expression comparison_operator m_expression .
    (102) m_expression -> m_expression . addition_operator term
    (116) addition_operator -> . PLUS
    (117) addition_operator -> . MINUS

    LESS            reduce using rule 100 (g_expression -> g_expression comparison_operator m_expression .)
    GREATER         reduce using rule 100 (g_expression -> g_expression comparison_operator m_expression .)
    EQUALS          reduce using rule 100 (g_expression -> g_expression comparison_operator m_expression .)
    NOTEQUAL        reduce using rule 100 (g_expression -> g_expression comparison_operator m_expression .)
    GREATERTHAN     reduce using rule 100 (g_expression -> g_expression comparison_operator m_expression .)
    LESSTHAN        reduce using rule 100 (g_expression -> g_expression comparison_operator m_expression .)
    AND             reduce using rule 100 (g_expression -> g_expression comparison_operator m_expression .)
    OR              reduce using rule 100 (g_expression -> g_expression comparison_operator m_expression .)
    SEMICOLON       reduce using rule 100 (g_expression -> g_expression comparison_operator m_expression .)
    RPAREN          reduce using rule 100 (g_expression -> g_expression comparison_operator m_expression .)
    COMMA           reduce using rule 100 (g_expression -> g_expression comparison_operator m_expression .)
    RBRACK          reduce using rule 100 (g_expression -> g_expression comparison_operator m_expression .)
    FROM            reduce using rule 100 (g_expression -> g_expression comparison_operator m_expression .)
    PLUS            shift and go to state 160
    MINUS           shift and go to state 161

    addition_operator              shift and go to state 159

state 193

    (102) m_expression -> m_expression addition_operator term .
    (104) term -> term . multiplication_operator factor
    (120) multiplication_operator -> . TIMES
    (121) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 102 (m_expression -> m_expression addition_operator term .)
    MINUS           reduce using rule 102 (m_expression -> m_expression addition_operator term .)
    LESS            reduce using rule 102 (m_expression -> m_expression addition_operator term .)
    GREATER         reduce using rule 102 (m_expression -> m_expression addition_operator term .)
    EQUALS          reduce using rule 102 (m_expression -> m_expression addition_operator term .)
    NOTEQUAL        reduce using rule 102 (m_expression -> m_expression addition_operator term .)
    GREATERTHAN     reduce using rule 102 (m_expression -> m_expression addition_operator term .)
    LESSTHAN        reduce using rule 102 (m_expression -> m_expression addition_operator term .)
    AND             reduce using rule 102 (m_expression -> m_expression addition_operator term .)
    OR              reduce using rule 102 (m_expression -> m_expression addition_operator term .)
    SEMICOLON       reduce using rule 102 (m_expression -> m_expression addition_operator term .)
    RPAREN          reduce using rule 102 (m_expression -> m_expression addition_operator term .)
    COMMA           reduce using rule 102 (m_expression -> m_expression addition_operator term .)
    RBRACK          reduce using rule 102 (m_expression -> m_expression addition_operator term .)
    FROM            reduce using rule 102 (m_expression -> m_expression addition_operator term .)
    TIMES           shift and go to state 163
    DIVIDE          shift and go to state 164

    multiplication_operator        shift and go to state 162

state 194

    (104) term -> term multiplication_operator factor .

    TIMES           reduce using rule 104 (term -> term multiplication_operator factor .)
    DIVIDE          reduce using rule 104 (term -> term multiplication_operator factor .)
    PLUS            reduce using rule 104 (term -> term multiplication_operator factor .)
    MINUS           reduce using rule 104 (term -> term multiplication_operator factor .)
    LESS            reduce using rule 104 (term -> term multiplication_operator factor .)
    GREATER         reduce using rule 104 (term -> term multiplication_operator factor .)
    EQUALS          reduce using rule 104 (term -> term multiplication_operator factor .)
    NOTEQUAL        reduce using rule 104 (term -> term multiplication_operator factor .)
    GREATERTHAN     reduce using rule 104 (term -> term multiplication_operator factor .)
    LESSTHAN        reduce using rule 104 (term -> term multiplication_operator factor .)
    AND             reduce using rule 104 (term -> term multiplication_operator factor .)
    OR              reduce using rule 104 (term -> term multiplication_operator factor .)
    SEMICOLON       reduce using rule 104 (term -> term multiplication_operator factor .)
    RPAREN          reduce using rule 104 (term -> term multiplication_operator factor .)
    COMMA           reduce using rule 104 (term -> term multiplication_operator factor .)
    RBRACK          reduce using rule 104 (term -> term multiplication_operator factor .)
    FROM            reduce using rule 104 (term -> term multiplication_operator factor .)


state 195

    (109) expression_parenthesis -> LPAREN expression RPAREN .

    TIMES           reduce using rule 109 (expression_parenthesis -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 109 (expression_parenthesis -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 109 (expression_parenthesis -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 109 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESS            reduce using rule 109 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 109 (expression_parenthesis -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 109 (expression_parenthesis -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 109 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 109 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 109 (expression_parenthesis -> LPAREN expression RPAREN .)
    AND             reduce using rule 109 (expression_parenthesis -> LPAREN expression RPAREN .)
    OR              reduce using rule 109 (expression_parenthesis -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 109 (expression_parenthesis -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 109 (expression_parenthesis -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 109 (expression_parenthesis -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 109 (expression_parenthesis -> LPAREN expression RPAREN .)
    FROM            reduce using rule 109 (expression_parenthesis -> LPAREN expression RPAREN .)


state 196

    (59) gen_key -> GENKEY LPAREN RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 222


state 197

    (60) encrypt -> ENCRYPT LPAREN ID COMMA . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 223


state 198

    (61) decrypt -> DECRYPT LPAREN ID COMMA . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 224


state 199

    (58) sha_256 -> SHA_256 LPAREN ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 225


state 200

    (57) random_salt -> RANDOM_SALT LPAREN CTEI RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 226


state 201

    (56) hmac -> HMAC LPAREN ID COMMA . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 227


state 202

    (55) ecdsa -> ECDSA LPAREN ID COMMA . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 228


state 203

    (54) ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 229


state 204

    (30) parameter -> simple_type . ID

    ID              shift and go to state 230


state 205

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations
    (27) parameters -> parameters . COMMA parameter
    (18) close_var_declaration -> . empty
    (132) empty -> .

    COMMA           shift and go to state 232
    RPAREN          reduce using rule 132 (empty -> .)

    close_var_declaration          shift and go to state 231
    empty                          shift and go to state 131

state 206

    (28) parameters -> parameter .

    COMMA           reduce using rule 28 (parameters -> parameter .)
    RPAREN          reduce using rule 28 (parameters -> parameter .)


state 207

    (29) parameters -> empty .

    COMMA           reduce using rule 29 (parameters -> empty .)
    RPAREN          reduce using rule 29 (parameters -> empty .)


state 208

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations
    (27) parameters -> parameters . COMMA parameter
    (18) close_var_declaration -> . empty
    (132) empty -> .

    COMMA           shift and go to state 232
    RPAREN          reduce using rule 132 (empty -> .)

    close_var_declaration          shift and go to state 233
    empty                          shift and go to state 131

state 209

    (24) variable -> ID array_true array_dim array_dim array_dim .

    COMMA           reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)
    SEMICOLON       reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)
    ASSIGN          reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)
    TIMES           reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)
    DIVIDE          reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)
    PLUS            reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)
    MINUS           reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)
    LESS            reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)
    GREATER         reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)
    EQUALS          reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)
    NOTEQUAL        reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)
    GREATERTHAN     reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)
    LESSTHAN        reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)
    AND             reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)
    OR              reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)
    RPAREN          reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)
    RBRACK          reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)
    FROM            reduce using rule 24 (variable -> ID array_true array_dim array_dim array_dim .)


state 210

    (26) array_dim -> LBRACK expression RBRACK .

    LBRACK          reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    COMMA           reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    TIMES           reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    PLUS            reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    MINUS           reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    LESS            reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    GREATER         reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    EQUALS          reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    AND             reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    OR              reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    RPAREN          reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    RBRACK          reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)
    FROM            reduce using rule 26 (array_dim -> LBRACK expression RBRACK .)


state 211

    (65) for -> FOR LPAREN ID for_1 ASSIGN . expression for_2 FROM expression RPAREN for_3 DO block for_4
    (95) expression -> . t_expression
    (96) expression -> . NOT t_expression
    (97) t_expression -> . g_expression
    (98) t_expression -> . t_expression boolean_operator g_expression
    (99) g_expression -> . m_expression
    (100) g_expression -> . g_expression comparison_operator m_expression
    (101) m_expression -> . term
    (102) m_expression -> . m_expression addition_operator term
    (103) term -> . factor
    (104) term -> . term multiplication_operator factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 104
    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    CTES            shift and go to state 118
    LPAREN          shift and go to state 119

    expression                     shift and go to state 234
    t_expression                   shift and go to state 103
    g_expression                   shift and go to state 105
    m_expression                   shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    variable                       shift and go to state 109
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 212

    (79) invocation -> ID invocation_1 LPAREN invocation_2 expressions . RPAREN invocation_5 SEMICOLON invocation_6
    (86) expressions -> expressions . COMMA invocation_4 expression invocation_3

    RPAREN          shift and go to state 235
    COMMA           shift and go to state 236


state 213

    (87) expressions -> expression . invocation_3
    (82) invocation_3 -> . empty
    (132) empty -> .

    RPAREN          reduce using rule 132 (empty -> .)
    COMMA           reduce using rule 132 (empty -> .)

    invocation_3                   shift and go to state 237
    empty                          shift and go to state 238

state 214

    (88) expressions -> empty .

    RPAREN          reduce using rule 88 (expressions -> empty .)
    COMMA           reduce using rule 88 (expressions -> empty .)


state 215

    (64) do_while -> DO breadcrumb block WHILE LPAREN . expression RPAREN gotot SEMICOLON
    (95) expression -> . t_expression
    (96) expression -> . NOT t_expression
    (97) t_expression -> . g_expression
    (98) t_expression -> . t_expression boolean_operator g_expression
    (99) g_expression -> . m_expression
    (100) g_expression -> . g_expression comparison_operator m_expression
    (101) m_expression -> . term
    (102) m_expression -> . m_expression addition_operator term
    (103) term -> . factor
    (104) term -> . term multiplication_operator factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 104
    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    CTES            shift and go to state 118
    LPAREN          shift and go to state 119

    expression                     shift and go to state 239
    t_expression                   shift and go to state 103
    g_expression                   shift and go to state 105
    m_expression                   shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    variable                       shift and go to state 109
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 216

    (70) while -> WHILE breadcrumb LPAREN expression RPAREN . gotof block
    (76) gotof -> . empty
    (132) empty -> .

    LBRACE          reduce using rule 132 (empty -> .)

    gotof                          shift and go to state 240
    empty                          shift and go to state 218

state 217

    (73) if_else -> IF LPAREN expression RPAREN gotof . block ELSE goto block
    (72) if -> IF LPAREN expression RPAREN gotof . block
    (31) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 241

state 218

    (76) gotof -> empty .

    LBRACE          reduce using rule 76 (gotof -> empty .)


state 219

    (89) print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .

    FOR             reduce using rule 89 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    DO              reduce using rule 89 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    WHILE           reduce using rule 89 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    IF              reduce using rule 89 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ID              reduce using rule 89 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    PRINT           reduce using rule 89 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    READ            reduce using rule 89 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    RETURN          reduce using rule 89 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    GENKEY          reduce using rule 89 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ENCRYPT         reduce using rule 89 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    DECRYPT         reduce using rule 89 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    SHA_256         reduce using rule 89 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    RANDOM_SALT     reduce using rule 89 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    HMAC            reduce using rule 89 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ECDSA           reduce using rule 89 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ECDSAKEY        reduce using rule 89 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    RBRACE          reduce using rule 89 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)


state 220

    (91) print_arguments -> print_arguments COMMA print_argument .

    RPAREN          reduce using rule 91 (print_arguments -> print_arguments COMMA print_argument .)
    COMMA           reduce using rule 91 (print_arguments -> print_arguments COMMA print_argument .)


state 221

    (62) read -> READ LPAREN ID RPAREN SEMICOLON .

    FOR             reduce using rule 62 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    DO              reduce using rule 62 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 62 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    IF              reduce using rule 62 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    ID              reduce using rule 62 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    PRINT           reduce using rule 62 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    READ            reduce using rule 62 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    RETURN          reduce using rule 62 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    GENKEY          reduce using rule 62 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    ENCRYPT         reduce using rule 62 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    DECRYPT         reduce using rule 62 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    SHA_256         reduce using rule 62 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    RANDOM_SALT     reduce using rule 62 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    HMAC            reduce using rule 62 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    ECDSA           reduce using rule 62 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    ECDSAKEY        reduce using rule 62 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    RBRACE          reduce using rule 62 (read -> READ LPAREN ID RPAREN SEMICOLON .)


state 222

    (59) gen_key -> GENKEY LPAREN RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 242


state 223

    (60) encrypt -> ENCRYPT LPAREN ID COMMA ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 243


state 224

    (61) decrypt -> DECRYPT LPAREN ID COMMA ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 244


state 225

    (58) sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 245


state 226

    (57) random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 246


state 227

    (56) hmac -> HMAC LPAREN ID COMMA ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 247


state 228

    (55) ecdsa -> ECDSA LPAREN ID COMMA ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 248


state 229

    (54) ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 249


state 230

    (30) parameter -> simple_type ID .

    COMMA           reduce using rule 30 (parameter -> simple_type ID .)
    RPAREN          reduce using rule 30 (parameter -> simple_type ID .)


state 231

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations

    RPAREN          shift and go to state 250


state 232

    (27) parameters -> parameters COMMA . parameter
    (30) parameter -> . simple_type ID
    (122) simple_type -> . INT
    (123) simple_type -> . FLOAT
    (124) simple_type -> . CHAR
    (125) simple_type -> . BOOLEAN
    (126) simple_type -> . STRING

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    parameter                      shift and go to state 251
    simple_type                    shift and go to state 204

state 233

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations

    RPAREN          shift and go to state 252


state 234

    (65) for -> FOR LPAREN ID for_1 ASSIGN expression . for_2 FROM expression RPAREN for_3 DO block for_4
    (67) for_2 -> . empty
    (132) empty -> .

    FROM            reduce using rule 132 (empty -> .)

    for_2                          shift and go to state 253
    empty                          shift and go to state 254

state 235

    (79) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN . invocation_5 SEMICOLON invocation_6
    (84) invocation_5 -> . empty
    (132) empty -> .

    SEMICOLON       reduce using rule 132 (empty -> .)

    invocation_5                   shift and go to state 255
    empty                          shift and go to state 256

state 236

    (86) expressions -> expressions COMMA . invocation_4 expression invocation_3
    (83) invocation_4 -> . empty
    (132) empty -> .

    NOT             reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)
    CTEI            reduce using rule 132 (empty -> .)
    CTEF            reduce using rule 132 (empty -> .)
    CTEC            reduce using rule 132 (empty -> .)
    CTEB            reduce using rule 132 (empty -> .)
    CTES            reduce using rule 132 (empty -> .)
    LPAREN          reduce using rule 132 (empty -> .)

    invocation_4                   shift and go to state 257
    empty                          shift and go to state 258

state 237

    (87) expressions -> expression invocation_3 .

    RPAREN          reduce using rule 87 (expressions -> expression invocation_3 .)
    COMMA           reduce using rule 87 (expressions -> expression invocation_3 .)


state 238

    (82) invocation_3 -> empty .

    RPAREN          reduce using rule 82 (invocation_3 -> empty .)
    COMMA           reduce using rule 82 (invocation_3 -> empty .)


state 239

    (64) do_while -> DO breadcrumb block WHILE LPAREN expression . RPAREN gotot SEMICOLON

    RPAREN          shift and go to state 259


state 240

    (70) while -> WHILE breadcrumb LPAREN expression RPAREN gotof . block
    (31) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 260

state 241

    (73) if_else -> IF LPAREN expression RPAREN gotof block . ELSE goto block
    (72) if -> IF LPAREN expression RPAREN gotof block .

    ELSE            shift and go to state 261
    FOR             reduce using rule 72 (if -> IF LPAREN expression RPAREN gotof block .)
    DO              reduce using rule 72 (if -> IF LPAREN expression RPAREN gotof block .)
    WHILE           reduce using rule 72 (if -> IF LPAREN expression RPAREN gotof block .)
    IF              reduce using rule 72 (if -> IF LPAREN expression RPAREN gotof block .)
    ID              reduce using rule 72 (if -> IF LPAREN expression RPAREN gotof block .)
    PRINT           reduce using rule 72 (if -> IF LPAREN expression RPAREN gotof block .)
    READ            reduce using rule 72 (if -> IF LPAREN expression RPAREN gotof block .)
    RETURN          reduce using rule 72 (if -> IF LPAREN expression RPAREN gotof block .)
    GENKEY          reduce using rule 72 (if -> IF LPAREN expression RPAREN gotof block .)
    ENCRYPT         reduce using rule 72 (if -> IF LPAREN expression RPAREN gotof block .)
    DECRYPT         reduce using rule 72 (if -> IF LPAREN expression RPAREN gotof block .)
    SHA_256         reduce using rule 72 (if -> IF LPAREN expression RPAREN gotof block .)
    RANDOM_SALT     reduce using rule 72 (if -> IF LPAREN expression RPAREN gotof block .)
    HMAC            reduce using rule 72 (if -> IF LPAREN expression RPAREN gotof block .)
    ECDSA           reduce using rule 72 (if -> IF LPAREN expression RPAREN gotof block .)
    ECDSAKEY        reduce using rule 72 (if -> IF LPAREN expression RPAREN gotof block .)
    RBRACE          reduce using rule 72 (if -> IF LPAREN expression RPAREN gotof block .)


state 242

    (59) gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 59 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 59 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 59 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 59 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 59 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 59 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 59 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    RETURN          reduce using rule 59 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 59 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 59 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 59 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 59 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 59 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 59 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ECDSA           reduce using rule 59 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ECDSAKEY        reduce using rule 59 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 59 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)


state 243

    (60) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 262


state 244

    (61) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 263


state 245

    (58) sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 264


state 246

    (57) random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 265


state 247

    (56) hmac -> HMAC LPAREN ID COMMA ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 266


state 248

    (55) ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 267


state 249

    (54) ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 54 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 54 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 54 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 54 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 54 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 54 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 54 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    RETURN          reduce using rule 54 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 54 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 54 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 54 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 54 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 54 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 54 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ECDSA           reduce using rule 54 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ECDSAKEY        reduce using rule 54 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 54 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)


state 250

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (132) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 132 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 268
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 251

    (27) parameters -> parameters COMMA parameter .

    COMMA           reduce using rule 27 (parameters -> parameters COMMA parameter .)
    RPAREN          reduce using rule 27 (parameters -> parameters COMMA parameter .)


state 252

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (132) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 132 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 269
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 253

    (65) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 . FROM expression RPAREN for_3 DO block for_4

    FROM            shift and go to state 270


state 254

    (67) for_2 -> empty .

    FROM            reduce using rule 67 (for_2 -> empty .)


state 255

    (79) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 . SEMICOLON invocation_6

    SEMICOLON       shift and go to state 271


state 256

    (84) invocation_5 -> empty .

    SEMICOLON       reduce using rule 84 (invocation_5 -> empty .)


state 257

    (86) expressions -> expressions COMMA invocation_4 . expression invocation_3
    (95) expression -> . t_expression
    (96) expression -> . NOT t_expression
    (97) t_expression -> . g_expression
    (98) t_expression -> . t_expression boolean_operator g_expression
    (99) g_expression -> . m_expression
    (100) g_expression -> . g_expression comparison_operator m_expression
    (101) m_expression -> . term
    (102) m_expression -> . m_expression addition_operator term
    (103) term -> . factor
    (104) term -> . term multiplication_operator factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 104
    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    CTES            shift and go to state 118
    LPAREN          shift and go to state 119

    expression                     shift and go to state 272
    t_expression                   shift and go to state 103
    g_expression                   shift and go to state 105
    m_expression                   shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    variable                       shift and go to state 109
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 258

    (83) invocation_4 -> empty .

    NOT             reduce using rule 83 (invocation_4 -> empty .)
    ID              reduce using rule 83 (invocation_4 -> empty .)
    CTEI            reduce using rule 83 (invocation_4 -> empty .)
    CTEF            reduce using rule 83 (invocation_4 -> empty .)
    CTEC            reduce using rule 83 (invocation_4 -> empty .)
    CTEB            reduce using rule 83 (invocation_4 -> empty .)
    CTES            reduce using rule 83 (invocation_4 -> empty .)
    LPAREN          reduce using rule 83 (invocation_4 -> empty .)


state 259

    (64) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN . gotot SEMICOLON
    (74) gotot -> . empty
    (132) empty -> .

    SEMICOLON       reduce using rule 132 (empty -> .)

    gotot                          shift and go to state 273
    empty                          shift and go to state 274

state 260

    (70) while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .

    FOR             reduce using rule 70 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    DO              reduce using rule 70 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    WHILE           reduce using rule 70 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    IF              reduce using rule 70 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    ID              reduce using rule 70 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    PRINT           reduce using rule 70 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    READ            reduce using rule 70 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    RETURN          reduce using rule 70 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    GENKEY          reduce using rule 70 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    ENCRYPT         reduce using rule 70 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    DECRYPT         reduce using rule 70 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    SHA_256         reduce using rule 70 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    RANDOM_SALT     reduce using rule 70 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    HMAC            reduce using rule 70 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    ECDSA           reduce using rule 70 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    ECDSAKEY        reduce using rule 70 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    RBRACE          reduce using rule 70 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)


state 261

    (73) if_else -> IF LPAREN expression RPAREN gotof block ELSE . goto block
    (75) goto -> . empty
    (132) empty -> .

    LBRACE          reduce using rule 132 (empty -> .)

    goto                           shift and go to state 275
    empty                          shift and go to state 276

state 262

    (60) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 277


state 263

    (61) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 278


state 264

    (58) sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 58 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 58 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 58 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 58 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 58 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 58 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 58 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    RETURN          reduce using rule 58 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 58 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 58 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 58 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 58 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 58 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 58 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSA           reduce using rule 58 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSAKEY        reduce using rule 58 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 58 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)


state 265

    (57) random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 57 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 57 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 57 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 57 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 57 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 57 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 57 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    RETURN          reduce using rule 57 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 57 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 57 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 57 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 57 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 57 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 57 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    ECDSA           reduce using rule 57 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    ECDSAKEY        reduce using rule 57 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 57 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)


state 266

    (56) hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 279


state 267

    (55) ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 280


state 268

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .

    LBRACE          reduce using rule 7 (function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .)


state 269

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .

    LBRACE          reduce using rule 8 (function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .)


state 270

    (65) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM . expression RPAREN for_3 DO block for_4
    (95) expression -> . t_expression
    (96) expression -> . NOT t_expression
    (97) t_expression -> . g_expression
    (98) t_expression -> . t_expression boolean_operator g_expression
    (99) g_expression -> . m_expression
    (100) g_expression -> . g_expression comparison_operator m_expression
    (101) m_expression -> . term
    (102) m_expression -> . m_expression addition_operator term
    (103) term -> . factor
    (104) term -> . term multiplication_operator factor
    (105) factor -> . variable
    (106) factor -> . cte
    (107) factor -> . invocation
    (108) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID array_true array_dim
    (23) variable -> . ID array_true array_dim array_dim
    (24) variable -> . ID array_true array_dim array_dim array_dim
    (127) cte -> . CTEI
    (128) cte -> . CTEF
    (129) cte -> . CTEC
    (130) cte -> . CTEB
    (131) cte -> . CTES
    (79) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (109) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 104
    ID              shift and go to state 113
    CTEI            shift and go to state 114
    CTEF            shift and go to state 115
    CTEC            shift and go to state 116
    CTEB            shift and go to state 117
    CTES            shift and go to state 118
    LPAREN          shift and go to state 119

    expression                     shift and go to state 281
    t_expression                   shift and go to state 103
    g_expression                   shift and go to state 105
    m_expression                   shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 108
    variable                       shift and go to state 109
    cte                            shift and go to state 110
    invocation                     shift and go to state 111
    expression_parenthesis         shift and go to state 112

state 271

    (79) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON . invocation_6
    (85) invocation_6 -> . empty
    (132) empty -> .

    FOR             reduce using rule 132 (empty -> .)
    DO              reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)
    PRINT           reduce using rule 132 (empty -> .)
    READ            reduce using rule 132 (empty -> .)
    RETURN          reduce using rule 132 (empty -> .)
    GENKEY          reduce using rule 132 (empty -> .)
    ENCRYPT         reduce using rule 132 (empty -> .)
    DECRYPT         reduce using rule 132 (empty -> .)
    SHA_256         reduce using rule 132 (empty -> .)
    RANDOM_SALT     reduce using rule 132 (empty -> .)
    HMAC            reduce using rule 132 (empty -> .)
    ECDSA           reduce using rule 132 (empty -> .)
    ECDSAKEY        reduce using rule 132 (empty -> .)
    RBRACE          reduce using rule 132 (empty -> .)
    TIMES           reduce using rule 132 (empty -> .)
    DIVIDE          reduce using rule 132 (empty -> .)
    PLUS            reduce using rule 132 (empty -> .)
    MINUS           reduce using rule 132 (empty -> .)
    LESS            reduce using rule 132 (empty -> .)
    GREATER         reduce using rule 132 (empty -> .)
    EQUALS          reduce using rule 132 (empty -> .)
    NOTEQUAL        reduce using rule 132 (empty -> .)
    GREATERTHAN     reduce using rule 132 (empty -> .)
    LESSTHAN        reduce using rule 132 (empty -> .)
    AND             reduce using rule 132 (empty -> .)
    OR              reduce using rule 132 (empty -> .)
    SEMICOLON       reduce using rule 132 (empty -> .)
    RPAREN          reduce using rule 132 (empty -> .)
    COMMA           reduce using rule 132 (empty -> .)
    RBRACK          reduce using rule 132 (empty -> .)
    FROM            reduce using rule 132 (empty -> .)

    invocation_6                   shift and go to state 282
    empty                          shift and go to state 283

state 272

    (86) expressions -> expressions COMMA invocation_4 expression . invocation_3
    (82) invocation_3 -> . empty
    (132) empty -> .

    RPAREN          reduce using rule 132 (empty -> .)
    COMMA           reduce using rule 132 (empty -> .)

    invocation_3                   shift and go to state 284
    empty                          shift and go to state 238

state 273

    (64) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot . SEMICOLON

    SEMICOLON       shift and go to state 285


state 274

    (74) gotot -> empty .

    SEMICOLON       reduce using rule 74 (gotot -> empty .)


state 275

    (73) if_else -> IF LPAREN expression RPAREN gotof block ELSE goto . block
    (31) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 286

state 276

    (75) goto -> empty .

    LBRACE          reduce using rule 75 (goto -> empty .)


state 277

    (60) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 287


state 278

    (61) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 288


state 279

    (56) hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 289


state 280

    (55) ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 290


state 281

    (65) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression . RPAREN for_3 DO block for_4

    RPAREN          shift and go to state 291


state 282

    (79) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .

    FOR             reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DO              reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    WHILE           reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    IF              reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ID              reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PRINT           reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    READ            reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RETURN          reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GENKEY          reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ENCRYPT         reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DECRYPT         reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    SHA_256         reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RANDOM_SALT     reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    HMAC            reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ECDSA           reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ECDSAKEY        reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACE          reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    TIMES           reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DIVIDE          reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PLUS            reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    MINUS           reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESS            reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATER         reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    EQUALS          reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    NOTEQUAL        reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATERTHAN     reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESSTHAN        reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    AND             reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    OR              reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    SEMICOLON       reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RPAREN          reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    COMMA           reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACK          reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    FROM            reduce using rule 79 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)


state 283

    (85) invocation_6 -> empty .

    FOR             reduce using rule 85 (invocation_6 -> empty .)
    DO              reduce using rule 85 (invocation_6 -> empty .)
    WHILE           reduce using rule 85 (invocation_6 -> empty .)
    IF              reduce using rule 85 (invocation_6 -> empty .)
    ID              reduce using rule 85 (invocation_6 -> empty .)
    PRINT           reduce using rule 85 (invocation_6 -> empty .)
    READ            reduce using rule 85 (invocation_6 -> empty .)
    RETURN          reduce using rule 85 (invocation_6 -> empty .)
    GENKEY          reduce using rule 85 (invocation_6 -> empty .)
    ENCRYPT         reduce using rule 85 (invocation_6 -> empty .)
    DECRYPT         reduce using rule 85 (invocation_6 -> empty .)
    SHA_256         reduce using rule 85 (invocation_6 -> empty .)
    RANDOM_SALT     reduce using rule 85 (invocation_6 -> empty .)
    HMAC            reduce using rule 85 (invocation_6 -> empty .)
    ECDSA           reduce using rule 85 (invocation_6 -> empty .)
    ECDSAKEY        reduce using rule 85 (invocation_6 -> empty .)
    RBRACE          reduce using rule 85 (invocation_6 -> empty .)
    TIMES           reduce using rule 85 (invocation_6 -> empty .)
    DIVIDE          reduce using rule 85 (invocation_6 -> empty .)
    PLUS            reduce using rule 85 (invocation_6 -> empty .)
    MINUS           reduce using rule 85 (invocation_6 -> empty .)
    LESS            reduce using rule 85 (invocation_6 -> empty .)
    GREATER         reduce using rule 85 (invocation_6 -> empty .)
    EQUALS          reduce using rule 85 (invocation_6 -> empty .)
    NOTEQUAL        reduce using rule 85 (invocation_6 -> empty .)
    GREATERTHAN     reduce using rule 85 (invocation_6 -> empty .)
    LESSTHAN        reduce using rule 85 (invocation_6 -> empty .)
    AND             reduce using rule 85 (invocation_6 -> empty .)
    OR              reduce using rule 85 (invocation_6 -> empty .)
    SEMICOLON       reduce using rule 85 (invocation_6 -> empty .)
    RPAREN          reduce using rule 85 (invocation_6 -> empty .)
    COMMA           reduce using rule 85 (invocation_6 -> empty .)
    RBRACK          reduce using rule 85 (invocation_6 -> empty .)
    FROM            reduce using rule 85 (invocation_6 -> empty .)


state 284

    (86) expressions -> expressions COMMA invocation_4 expression invocation_3 .

    RPAREN          reduce using rule 86 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)
    COMMA           reduce using rule 86 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)


state 285

    (64) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .

    FOR             reduce using rule 64 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    DO              reduce using rule 64 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    WHILE           reduce using rule 64 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    IF              reduce using rule 64 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ID              reduce using rule 64 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    PRINT           reduce using rule 64 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    READ            reduce using rule 64 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    RETURN          reduce using rule 64 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    GENKEY          reduce using rule 64 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ENCRYPT         reduce using rule 64 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    DECRYPT         reduce using rule 64 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    SHA_256         reduce using rule 64 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    RANDOM_SALT     reduce using rule 64 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    HMAC            reduce using rule 64 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ECDSA           reduce using rule 64 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ECDSAKEY        reduce using rule 64 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    RBRACE          reduce using rule 64 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)


state 286

    (73) if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .

    FOR             reduce using rule 73 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    DO              reduce using rule 73 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    WHILE           reduce using rule 73 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    IF              reduce using rule 73 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    ID              reduce using rule 73 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    PRINT           reduce using rule 73 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    READ            reduce using rule 73 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    RETURN          reduce using rule 73 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    GENKEY          reduce using rule 73 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    ENCRYPT         reduce using rule 73 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    DECRYPT         reduce using rule 73 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    SHA_256         reduce using rule 73 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    RANDOM_SALT     reduce using rule 73 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    HMAC            reduce using rule 73 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    ECDSA           reduce using rule 73 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    ECDSAKEY        reduce using rule 73 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    RBRACE          reduce using rule 73 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)


state 287

    (60) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 60 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 60 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 60 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 60 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 60 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 60 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 60 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RETURN          reduce using rule 60 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 60 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 60 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 60 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 60 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 60 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 60 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSA           reduce using rule 60 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSAKEY        reduce using rule 60 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 60 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)


state 288

    (61) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 61 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 61 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 61 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 61 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 61 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 61 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 61 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RETURN          reduce using rule 61 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 61 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 61 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 61 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 61 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 61 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 61 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSA           reduce using rule 61 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSAKEY        reduce using rule 61 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 61 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)


state 289

    (56) hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 56 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 56 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 56 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 56 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 56 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 56 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 56 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RETURN          reduce using rule 56 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 56 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 56 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 56 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 56 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 56 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 56 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSA           reduce using rule 56 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSAKEY        reduce using rule 56 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 56 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)


state 290

    (55) ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 55 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 55 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 55 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 55 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 55 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 55 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 55 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RETURN          reduce using rule 55 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 55 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 55 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 55 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 55 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 55 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 55 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSA           reduce using rule 55 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSAKEY        reduce using rule 55 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 55 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)


state 291

    (65) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN . for_3 DO block for_4
    (68) for_3 -> . empty
    (132) empty -> .

    DO              reduce using rule 132 (empty -> .)

    for_3                          shift and go to state 292
    empty                          shift and go to state 293

state 292

    (65) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 . DO block for_4

    DO              shift and go to state 294


state 293

    (68) for_3 -> empty .

    DO              reduce using rule 68 (for_3 -> empty .)


state 294

    (65) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO . block for_4
    (31) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 295

state 295

    (65) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block . for_4
    (69) for_4 -> . empty
    (132) empty -> .

    FOR             reduce using rule 132 (empty -> .)
    DO              reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)
    PRINT           reduce using rule 132 (empty -> .)
    READ            reduce using rule 132 (empty -> .)
    RETURN          reduce using rule 132 (empty -> .)
    GENKEY          reduce using rule 132 (empty -> .)
    ENCRYPT         reduce using rule 132 (empty -> .)
    DECRYPT         reduce using rule 132 (empty -> .)
    SHA_256         reduce using rule 132 (empty -> .)
    RANDOM_SALT     reduce using rule 132 (empty -> .)
    HMAC            reduce using rule 132 (empty -> .)
    ECDSA           reduce using rule 132 (empty -> .)
    ECDSAKEY        reduce using rule 132 (empty -> .)
    RBRACE          reduce using rule 132 (empty -> .)

    for_4                          shift and go to state 296
    empty                          shift and go to state 297

state 296

    (65) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .

    FOR             reduce using rule 65 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    DO              reduce using rule 65 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    WHILE           reduce using rule 65 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    IF              reduce using rule 65 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    ID              reduce using rule 65 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    PRINT           reduce using rule 65 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    READ            reduce using rule 65 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    RETURN          reduce using rule 65 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    GENKEY          reduce using rule 65 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    ENCRYPT         reduce using rule 65 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    DECRYPT         reduce using rule 65 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    SHA_256         reduce using rule 65 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    RANDOM_SALT     reduce using rule 65 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    HMAC            reduce using rule 65 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    ECDSA           reduce using rule 65 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    ECDSAKEY        reduce using rule 65 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    RBRACE          reduce using rule 65 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)


state 297

    (69) for_4 -> empty .

    FOR             reduce using rule 69 (for_4 -> empty .)
    DO              reduce using rule 69 (for_4 -> empty .)
    WHILE           reduce using rule 69 (for_4 -> empty .)
    IF              reduce using rule 69 (for_4 -> empty .)
    ID              reduce using rule 69 (for_4 -> empty .)
    PRINT           reduce using rule 69 (for_4 -> empty .)
    READ            reduce using rule 69 (for_4 -> empty .)
    RETURN          reduce using rule 69 (for_4 -> empty .)
    GENKEY          reduce using rule 69 (for_4 -> empty .)
    ENCRYPT         reduce using rule 69 (for_4 -> empty .)
    DECRYPT         reduce using rule 69 (for_4 -> empty .)
    SHA_256         reduce using rule 69 (for_4 -> empty .)
    RANDOM_SALT     reduce using rule 69 (for_4 -> empty .)
    HMAC            reduce using rule 69 (for_4 -> empty .)
    ECDSA           reduce using rule 69 (for_4 -> empty .)
    ECDSAKEY        reduce using rule 69 (for_4 -> empty .)
    RBRACE          reduce using rule 69 (for_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 7 resolved as shift
WARNING: reduce/reduce conflict in state 144 resolved using rule (print_argument -> CTES)
WARNING: rejected rule (cte -> CTES) in state 144
