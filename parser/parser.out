Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMENT
    FALSE
    STRING
    THEN
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END
Rule 2     global_scope -> empty
Rule 3     functions -> functions function
Rule 4     functions -> function
Rule 5     functions -> empty
Rule 6     function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations RBRACE statements return_me RBRACE
Rule 7     function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
Rule 8     return_me -> empty
Rule 9     function_1 -> empty
Rule 10    main -> MAIN LPAREN RPAREN main_scope var_declarations LBRACE statements RBRACE
Rule 11    main_scope -> empty
Rule 12    var_declarations -> var_declaration_list
Rule 13    var_declarations -> empty
Rule 14    var_declaration_list -> var_declaration var_declarations
Rule 15    var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration
Rule 16    open_var_declaration -> empty
Rule 17    close_var_declaration -> empty
Rule 18    variables -> variable
Rule 19    variables -> variable COMMA variables
Rule 20    variable -> ID
Rule 21    variable -> ID LBRACK expression RBRACK
Rule 22    variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK
Rule 23    parameters -> parameters COMMA parameter
Rule 24    parameters -> parameter
Rule 25    parameters -> empty
Rule 26    parameter -> simple_type ID
Rule 27    statements -> statements statement
Rule 28    statements -> statement
Rule 29    statements -> empty
Rule 30    statement -> read
Rule 31    statement -> for
Rule 32    statement -> do_while
Rule 33    statement -> while
Rule 34    statement -> if_else
Rule 35    statement -> invocation
Rule 36    statement -> if
Rule 37    statement -> assingation
Rule 38    statement -> return
Rule 39    statement -> print
Rule 40    do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
Rule 41    for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
Rule 42    for_1 -> empty
Rule 43    for_2 -> empty
Rule 44    for_3 -> empty
Rule 45    for_4 -> empty
Rule 46    while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
Rule 47    breadcrumb -> empty
Rule 48    if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
Rule 49    open_temporal_boolean -> empty
Rule 50    close_temporal_boolean -> empty
Rule 51    if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
Rule 52    gotot -> empty
Rule 53    goto -> empty
Rule 54    gotof -> empty
Rule 55    return -> RETURN expression SEMICOLON
Rule 56    read -> READ LPAREN variable_list RPAREN SEMICOLON
Rule 57    variable_list -> variable
Rule 58    variable_list -> variable_list COMMA variable
Rule 59    invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
Rule 60    invocation_1 -> empty
Rule 61    invocation_2 -> empty
Rule 62    invocation_3 -> empty
Rule 63    invocation_4 -> empty
Rule 64    invocation_5 -> empty
Rule 65    invocation_6 -> empty
Rule 66    expressions -> expressions COMMA invocation_4 expression invocation_3
Rule 67    expressions -> expression invocation_3
Rule 68    expressions -> empty
Rule 69    print -> PRINT LPAREN print_arguments RPAREN SEMICOLON
Rule 70    print_arguments -> print_argument
Rule 71    print_arguments -> print_arguments COMMA print_argument
Rule 72    print_argument -> CTES
Rule 73    print_argument -> expression
Rule 74    assingation -> variable ASSIGN expression SEMICOLON
Rule 75    expression -> t_expression
Rule 76    expression -> NOT t_expression
Rule 77    t_expression -> g_expression
Rule 78    t_expression -> t_expression boolean_operator g_expression
Rule 79    g_expression -> m_expression
Rule 80    g_expression -> g_expression comparison_operator m_expression
Rule 81    m_expression -> term
Rule 82    m_expression -> m_expression addition_operator term
Rule 83    term -> factor
Rule 84    term -> term multiplication_operator factor
Rule 85    factor -> variable
Rule 86    factor -> cte
Rule 87    factor -> expression_parenthesis
Rule 88    factor -> invocation
Rule 89    expression_parenthesis -> LPAREN expression RPAREN
Rule 90    comparison_operator -> LESS
Rule 91    comparison_operator -> GREATER
Rule 92    comparison_operator -> EQUALS
Rule 93    comparison_operator -> NOTEQUAL
Rule 94    comparison_operator -> GREATERTHAN
Rule 95    comparison_operator -> LESSTHAN
Rule 96    addition_operator -> PLUS
Rule 97    addition_operator -> MINUS
Rule 98    boolean_operator -> AND
Rule 99    boolean_operator -> OR
Rule 100   multiplication_operator -> TIMES
Rule 101   multiplication_operator -> DIVIDE
Rule 102   simple_type -> INT
Rule 103   simple_type -> FLOAT
Rule 104   simple_type -> CHAR
Rule 105   simple_type -> BOOLEAN
Rule 106   cte -> CTEI
Rule 107   cte -> CTEF
Rule 108   cte -> CTEC
Rule 109   cte -> CTEB
Rule 110   empty -> <empty>

Terminals, with rules where they appear

AND                  : 98
ASSIGN               : 41 74
BOOLEAN              : 105
CHAR                 : 104
COLON                : 
COMMA                : 19 23 58 66 71
COMMENT              : 
CTEB                 : 109
CTEC                 : 108
CTEF                 : 107
CTEI                 : 106
CTES                 : 72
DIVIDE               : 101
DO                   : 40 41
ELSE                 : 51
END                  : 1
EQUALS               : 92
FALSE                : 
FLOAT                : 103
FOR                  : 41
FROM                 : 41
FUNCTION             : 6 7
GREATER              : 91
GREATERTHAN          : 94
ID                   : 1 6 7 20 21 22 26 41 59
IF                   : 48 51
INT                  : 102
LBRACE               : 7 10 40 41 46 48 51 51
LBRACK               : 21 22 22
LESS                 : 90
LESSTHAN             : 95
LPAREN               : 6 7 10 40 41 46 48 51 56 59 69 89
MAIN                 : 10
MINUS                : 97
NOT                  : 76
NOTEQUAL             : 93
OR                   : 99
PLUS                 : 96
PRINT                : 69
PROGRAM              : 1
RBRACE               : 6 6 7 10 40 41 46 48 51 51
RBRACK               : 21 22 22
READ                 : 56
RETURN               : 55
RPAREN               : 6 7 10 40 41 46 48 51 56 59 69 89
SEMICOLON            : 1 15 40 55 56 59 69 74
STRING               : 
THEN                 : 
TIMES                : 100
TRUE                 : 
VARIABLE             : 15
VOID                 : 7
WHILE                : 40 46
error                : 

Nonterminals, with rules where they appear

addition_operator    : 82
assingation          : 37
boolean_operator     : 78
breadcrumb           : 40 46
close_temporal_boolean : 46 48 51
close_var_declaration : 6 7 15
comparison_operator  : 80
cte                  : 86
do_while             : 32
empty                : 2 5 8 9 11 13 16 17 25 29 42 43 44 45 47 49 50 52 53 54 60 61 62 63 64 65 68
expression           : 21 22 22 40 41 41 46 48 51 55 66 67 73 74 89
expression_parenthesis : 87
expressions          : 59 66
factor               : 83 84
for                  : 31
for_1                : 41
for_2                : 41
for_3                : 41
for_4                : 41
function             : 3 4
function_1           : 6 7
functions            : 1 3
g_expression         : 77 78 80
global_scope         : 1
goto                 : 51
gotof                : 46 48 51
gotot                : 40
if                   : 36
if_else              : 34
invocation           : 35 88
invocation_1         : 59
invocation_2         : 59
invocation_3         : 66 67
invocation_4         : 66
invocation_5         : 59
invocation_6         : 59
m_expression         : 79 80 82
main                 : 1
main_scope           : 10
multiplication_operator : 84
open_temporal_boolean : 46 48 51
open_var_declaration : 6 7 15
parameter            : 23 24
parameters           : 6 7 23
print                : 39
print_argument       : 70 71
print_arguments      : 69 71
program              : 0
read                 : 30
return               : 38
return_me            : 6
simple_type          : 6 15 26
statement            : 27 28
statements           : 6 7 10 27 40 41 46 48 51 51
t_expression         : 75 76 78
term                 : 81 82 84
var_declaration      : 14
var_declaration_list : 12
var_declarations     : 1 6 7 10 14
variable             : 18 19 57 58 74 85
variable_list        : 56 58
variables            : 15 19
while                : 33

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON global_scope var_declarations functions main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON global_scope var_declarations functions main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON global_scope var_declarations functions main END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . global_scope var_declarations functions main END
    (2) global_scope -> . empty
    (110) empty -> .

    VARIABLE        reduce using rule 110 (empty -> .)
    FUNCTION        reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)

    global_scope                   shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON global_scope . var_declarations functions main END
    (12) var_declarations -> . var_declaration_list
    (13) var_declarations -> . empty
    (14) var_declaration_list -> . var_declaration var_declarations
    (110) empty -> .
    (15) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 7
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 6

    (2) global_scope -> empty .

    VARIABLE        reduce using rule 2 (global_scope -> empty .)
    FUNCTION        reduce using rule 2 (global_scope -> empty .)
    MAIN            reduce using rule 2 (global_scope -> empty .)


state 7

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations . functions main END
    (3) functions -> . functions function
    (4) functions -> . function
    (5) functions -> . empty
    (6) function -> . FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations RBRACE statements return_me RBRACE
    (7) function -> . FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (110) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 110 (empty -> .)

  ! FUNCTION        [ reduce using rule 110 (empty -> .) ]

    functions                      shift and go to state 12
    function                       shift and go to state 13
    empty                          shift and go to state 14

state 8

    (12) var_declarations -> var_declaration_list .

    FUNCTION        reduce using rule 12 (var_declarations -> var_declaration_list .)
    MAIN            reduce using rule 12 (var_declarations -> var_declaration_list .)
    LBRACE          reduce using rule 12 (var_declarations -> var_declaration_list .)
    RBRACE          reduce using rule 12 (var_declarations -> var_declaration_list .)


state 9

    (13) var_declarations -> empty .

    FUNCTION        reduce using rule 13 (var_declarations -> empty .)
    MAIN            reduce using rule 13 (var_declarations -> empty .)
    LBRACE          reduce using rule 13 (var_declarations -> empty .)
    RBRACE          reduce using rule 13 (var_declarations -> empty .)


state 10

    (14) var_declaration_list -> var_declaration . var_declarations
    (12) var_declarations -> . var_declaration_list
    (13) var_declarations -> . empty
    (14) var_declaration_list -> . var_declaration var_declarations
    (110) empty -> .
    (15) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)
    LBRACE          reduce using rule 110 (empty -> .)
    RBRACE          reduce using rule 110 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declaration                shift and go to state 10
    var_declarations               shift and go to state 16
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9

state 11

    (15) var_declaration -> VARIABLE . open_var_declaration simple_type variables SEMICOLON close_var_declaration
    (16) open_var_declaration -> . empty
    (110) empty -> .

    INT             reduce using rule 110 (empty -> .)
    FLOAT           reduce using rule 110 (empty -> .)
    CHAR            reduce using rule 110 (empty -> .)
    BOOLEAN         reduce using rule 110 (empty -> .)

    open_var_declaration           shift and go to state 17
    empty                          shift and go to state 18

state 12

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions . main END
    (3) functions -> functions . function
    (10) main -> . MAIN LPAREN RPAREN main_scope var_declarations LBRACE statements RBRACE
    (6) function -> . FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations RBRACE statements return_me RBRACE
    (7) function -> . FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE

    MAIN            shift and go to state 21
    FUNCTION        shift and go to state 15

    main                           shift and go to state 19
    function                       shift and go to state 20

state 13

    (4) functions -> function .

    MAIN            reduce using rule 4 (functions -> function .)
    FUNCTION        reduce using rule 4 (functions -> function .)


state 14

    (5) functions -> empty .

    MAIN            reduce using rule 5 (functions -> empty .)
    FUNCTION        reduce using rule 5 (functions -> empty .)


state 15

    (6) function -> FUNCTION . simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations RBRACE statements return_me RBRACE
    (7) function -> FUNCTION . VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (102) simple_type -> . INT
    (103) simple_type -> . FLOAT
    (104) simple_type -> . CHAR
    (105) simple_type -> . BOOLEAN

    VOID            shift and go to state 23
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26
    BOOLEAN         shift and go to state 27

    simple_type                    shift and go to state 22

state 16

    (14) var_declaration_list -> var_declaration var_declarations .

    FUNCTION        reduce using rule 14 (var_declaration_list -> var_declaration var_declarations .)
    MAIN            reduce using rule 14 (var_declaration_list -> var_declaration var_declarations .)
    LBRACE          reduce using rule 14 (var_declaration_list -> var_declaration var_declarations .)
    RBRACE          reduce using rule 14 (var_declaration_list -> var_declaration var_declarations .)


state 17

    (15) var_declaration -> VARIABLE open_var_declaration . simple_type variables SEMICOLON close_var_declaration
    (102) simple_type -> . INT
    (103) simple_type -> . FLOAT
    (104) simple_type -> . CHAR
    (105) simple_type -> . BOOLEAN

    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26
    BOOLEAN         shift and go to state 27

    simple_type                    shift and go to state 28

state 18

    (16) open_var_declaration -> empty .

    INT             reduce using rule 16 (open_var_declaration -> empty .)
    FLOAT           reduce using rule 16 (open_var_declaration -> empty .)
    CHAR            reduce using rule 16 (open_var_declaration -> empty .)
    BOOLEAN         reduce using rule 16 (open_var_declaration -> empty .)
    COMMA           reduce using rule 16 (open_var_declaration -> empty .)
    RPAREN          reduce using rule 16 (open_var_declaration -> empty .)


state 19

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main . END

    END             shift and go to state 29


state 20

    (3) functions -> functions function .

    MAIN            reduce using rule 3 (functions -> functions function .)
    FUNCTION        reduce using rule 3 (functions -> functions function .)


state 21

    (10) main -> MAIN . LPAREN RPAREN main_scope var_declarations LBRACE statements RBRACE

    LPAREN          shift and go to state 30


state 22

    (6) function -> FUNCTION simple_type . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations RBRACE statements return_me RBRACE

    ID              shift and go to state 31


state 23

    (7) function -> FUNCTION VOID . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE

    ID              shift and go to state 32


state 24

    (102) simple_type -> INT .

    ID              reduce using rule 102 (simple_type -> INT .)


state 25

    (103) simple_type -> FLOAT .

    ID              reduce using rule 103 (simple_type -> FLOAT .)


state 26

    (104) simple_type -> CHAR .

    ID              reduce using rule 104 (simple_type -> CHAR .)


state 27

    (105) simple_type -> BOOLEAN .

    ID              reduce using rule 105 (simple_type -> BOOLEAN .)


state 28

    (15) var_declaration -> VARIABLE open_var_declaration simple_type . variables SEMICOLON close_var_declaration
    (18) variables -> . variable
    (19) variables -> . variable COMMA variables
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 35

    variables                      shift and go to state 33
    variable                       shift and go to state 34

state 29

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .)


state 30

    (10) main -> MAIN LPAREN . RPAREN main_scope var_declarations LBRACE statements RBRACE

    RPAREN          shift and go to state 36


state 31

    (6) function -> FUNCTION simple_type ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations RBRACE statements return_me RBRACE
    (9) function_1 -> . empty
    (110) empty -> .

    LPAREN          reduce using rule 110 (empty -> .)

    function_1                     shift and go to state 37
    empty                          shift and go to state 38

state 32

    (7) function -> FUNCTION VOID ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (9) function_1 -> . empty
    (110) empty -> .

    LPAREN          reduce using rule 110 (empty -> .)

    function_1                     shift and go to state 39
    empty                          shift and go to state 38

state 33

    (15) var_declaration -> VARIABLE open_var_declaration simple_type variables . SEMICOLON close_var_declaration

    SEMICOLON       shift and go to state 40


state 34

    (18) variables -> variable .
    (19) variables -> variable . COMMA variables

    SEMICOLON       reduce using rule 18 (variables -> variable .)
    COMMA           shift and go to state 41


state 35

    (20) variable -> ID .
    (21) variable -> ID . LBRACK expression RBRACK
    (22) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK

    COMMA           reduce using rule 20 (variable -> ID .)
    SEMICOLON       reduce using rule 20 (variable -> ID .)
    RPAREN          reduce using rule 20 (variable -> ID .)
    LBRACK          shift and go to state 42


state 36

    (10) main -> MAIN LPAREN RPAREN . main_scope var_declarations LBRACE statements RBRACE
    (11) main_scope -> . empty
    (110) empty -> .

    VARIABLE        reduce using rule 110 (empty -> .)
    LBRACE          reduce using rule 110 (empty -> .)

    main_scope                     shift and go to state 43
    empty                          shift and go to state 44

state 37

    (6) function -> FUNCTION simple_type ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations RBRACE statements return_me RBRACE

    LPAREN          shift and go to state 45


state 38

    (9) function_1 -> empty .

    LPAREN          reduce using rule 9 (function_1 -> empty .)


state 39

    (7) function -> FUNCTION VOID ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE

    LPAREN          shift and go to state 46


state 40

    (15) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON . close_var_declaration
    (17) close_var_declaration -> . empty
    (110) empty -> .

    VARIABLE        reduce using rule 110 (empty -> .)
    FUNCTION        reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)
    LBRACE          reduce using rule 110 (empty -> .)
    RBRACE          reduce using rule 110 (empty -> .)

    close_var_declaration          shift and go to state 47
    empty                          shift and go to state 48

state 41

    (19) variables -> variable COMMA . variables
    (18) variables -> . variable
    (19) variables -> . variable COMMA variables
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 35

    variable                       shift and go to state 34
    variables                      shift and go to state 49

state 42

    (21) variable -> ID LBRACK . expression RBRACK
    (22) variable -> ID LBRACK . expression RBRACK LBRACK expression RBRACK
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (77) t_expression -> . g_expression
    (78) t_expression -> . t_expression boolean_operator g_expression
    (79) g_expression -> . m_expression
    (80) g_expression -> . g_expression comparison_operator m_expression
    (81) m_expression -> . term
    (82) m_expression -> . m_expression addition_operator term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 53
    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    expression                     shift and go to state 51
    t_expression                   shift and go to state 52
    g_expression                   shift and go to state 54
    m_expression                   shift and go to state 55
    term                           shift and go to state 56
    factor                         shift and go to state 57
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 43

    (10) main -> MAIN LPAREN RPAREN main_scope . var_declarations LBRACE statements RBRACE
    (12) var_declarations -> . var_declaration_list
    (13) var_declarations -> . empty
    (14) var_declaration_list -> . var_declaration var_declarations
    (110) empty -> .
    (15) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 110 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 67
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 44

    (11) main_scope -> empty .

    VARIABLE        reduce using rule 11 (main_scope -> empty .)
    LBRACE          reduce using rule 11 (main_scope -> empty .)


state 45

    (6) function -> FUNCTION simple_type ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations RBRACE statements return_me RBRACE
    (16) open_var_declaration -> . empty
    (110) empty -> .

    INT             reduce using rule 110 (empty -> .)
    FLOAT           reduce using rule 110 (empty -> .)
    CHAR            reduce using rule 110 (empty -> .)
    BOOLEAN         reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)

    open_var_declaration           shift and go to state 68
    empty                          shift and go to state 18

state 46

    (7) function -> FUNCTION VOID ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (16) open_var_declaration -> . empty
    (110) empty -> .

    INT             reduce using rule 110 (empty -> .)
    FLOAT           reduce using rule 110 (empty -> .)
    CHAR            reduce using rule 110 (empty -> .)
    BOOLEAN         reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)

    open_var_declaration           shift and go to state 69
    empty                          shift and go to state 18

state 47

    (15) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .

    VARIABLE        reduce using rule 15 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    FUNCTION        reduce using rule 15 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    MAIN            reduce using rule 15 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    LBRACE          reduce using rule 15 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    RBRACE          reduce using rule 15 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)


state 48

    (17) close_var_declaration -> empty .

    VARIABLE        reduce using rule 17 (close_var_declaration -> empty .)
    FUNCTION        reduce using rule 17 (close_var_declaration -> empty .)
    MAIN            reduce using rule 17 (close_var_declaration -> empty .)
    LBRACE          reduce using rule 17 (close_var_declaration -> empty .)
    RBRACE          reduce using rule 17 (close_var_declaration -> empty .)
    RPAREN          reduce using rule 17 (close_var_declaration -> empty .)


state 49

    (19) variables -> variable COMMA variables .

    SEMICOLON       reduce using rule 19 (variables -> variable COMMA variables .)


state 50

    (20) variable -> ID .
    (21) variable -> ID . LBRACK expression RBRACK
    (22) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (59) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (60) invocation_1 -> . empty
    (110) empty -> .

    TIMES           reduce using rule 20 (variable -> ID .)
    DIVIDE          reduce using rule 20 (variable -> ID .)
    PLUS            reduce using rule 20 (variable -> ID .)
    MINUS           reduce using rule 20 (variable -> ID .)
    LESS            reduce using rule 20 (variable -> ID .)
    GREATER         reduce using rule 20 (variable -> ID .)
    EQUALS          reduce using rule 20 (variable -> ID .)
    NOTEQUAL        reduce using rule 20 (variable -> ID .)
    GREATERTHAN     reduce using rule 20 (variable -> ID .)
    LESSTHAN        reduce using rule 20 (variable -> ID .)
    AND             reduce using rule 20 (variable -> ID .)
    OR              reduce using rule 20 (variable -> ID .)
    RBRACK          reduce using rule 20 (variable -> ID .)
    RPAREN          reduce using rule 20 (variable -> ID .)
    SEMICOLON       reduce using rule 20 (variable -> ID .)
    COMMA           reduce using rule 20 (variable -> ID .)
    FROM            reduce using rule 20 (variable -> ID .)
    LBRACK          shift and go to state 42
    LPAREN          reduce using rule 110 (empty -> .)

    invocation_1                   shift and go to state 70
    empty                          shift and go to state 71

state 51

    (21) variable -> ID LBRACK expression . RBRACK
    (22) variable -> ID LBRACK expression . RBRACK LBRACK expression RBRACK

    RBRACK          shift and go to state 72


state 52

    (75) expression -> t_expression .
    (78) t_expression -> t_expression . boolean_operator g_expression
    (98) boolean_operator -> . AND
    (99) boolean_operator -> . OR

    RBRACK          reduce using rule 75 (expression -> t_expression .)
    RPAREN          reduce using rule 75 (expression -> t_expression .)
    SEMICOLON       reduce using rule 75 (expression -> t_expression .)
    COMMA           reduce using rule 75 (expression -> t_expression .)
    FROM            reduce using rule 75 (expression -> t_expression .)
    AND             shift and go to state 74
    OR              shift and go to state 75

    boolean_operator               shift and go to state 73

state 53

    (76) expression -> NOT . t_expression
    (77) t_expression -> . g_expression
    (78) t_expression -> . t_expression boolean_operator g_expression
    (79) g_expression -> . m_expression
    (80) g_expression -> . g_expression comparison_operator m_expression
    (81) m_expression -> . term
    (82) m_expression -> . m_expression addition_operator term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    t_expression                   shift and go to state 76
    g_expression                   shift and go to state 54
    m_expression                   shift and go to state 55
    term                           shift and go to state 56
    factor                         shift and go to state 57
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 54

    (77) t_expression -> g_expression .
    (80) g_expression -> g_expression . comparison_operator m_expression
    (90) comparison_operator -> . LESS
    (91) comparison_operator -> . GREATER
    (92) comparison_operator -> . EQUALS
    (93) comparison_operator -> . NOTEQUAL
    (94) comparison_operator -> . GREATERTHAN
    (95) comparison_operator -> . LESSTHAN

    AND             reduce using rule 77 (t_expression -> g_expression .)
    OR              reduce using rule 77 (t_expression -> g_expression .)
    RBRACK          reduce using rule 77 (t_expression -> g_expression .)
    RPAREN          reduce using rule 77 (t_expression -> g_expression .)
    SEMICOLON       reduce using rule 77 (t_expression -> g_expression .)
    COMMA           reduce using rule 77 (t_expression -> g_expression .)
    FROM            reduce using rule 77 (t_expression -> g_expression .)
    LESS            shift and go to state 78
    GREATER         shift and go to state 79
    EQUALS          shift and go to state 80
    NOTEQUAL        shift and go to state 81
    GREATERTHAN     shift and go to state 82
    LESSTHAN        shift and go to state 83

    comparison_operator            shift and go to state 77

state 55

    (79) g_expression -> m_expression .
    (82) m_expression -> m_expression . addition_operator term
    (96) addition_operator -> . PLUS
    (97) addition_operator -> . MINUS

    LESS            reduce using rule 79 (g_expression -> m_expression .)
    GREATER         reduce using rule 79 (g_expression -> m_expression .)
    EQUALS          reduce using rule 79 (g_expression -> m_expression .)
    NOTEQUAL        reduce using rule 79 (g_expression -> m_expression .)
    GREATERTHAN     reduce using rule 79 (g_expression -> m_expression .)
    LESSTHAN        reduce using rule 79 (g_expression -> m_expression .)
    AND             reduce using rule 79 (g_expression -> m_expression .)
    OR              reduce using rule 79 (g_expression -> m_expression .)
    RBRACK          reduce using rule 79 (g_expression -> m_expression .)
    RPAREN          reduce using rule 79 (g_expression -> m_expression .)
    SEMICOLON       reduce using rule 79 (g_expression -> m_expression .)
    COMMA           reduce using rule 79 (g_expression -> m_expression .)
    FROM            reduce using rule 79 (g_expression -> m_expression .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    addition_operator              shift and go to state 84

state 56

    (81) m_expression -> term .
    (84) term -> term . multiplication_operator factor
    (100) multiplication_operator -> . TIMES
    (101) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 81 (m_expression -> term .)
    MINUS           reduce using rule 81 (m_expression -> term .)
    LESS            reduce using rule 81 (m_expression -> term .)
    GREATER         reduce using rule 81 (m_expression -> term .)
    EQUALS          reduce using rule 81 (m_expression -> term .)
    NOTEQUAL        reduce using rule 81 (m_expression -> term .)
    GREATERTHAN     reduce using rule 81 (m_expression -> term .)
    LESSTHAN        reduce using rule 81 (m_expression -> term .)
    AND             reduce using rule 81 (m_expression -> term .)
    OR              reduce using rule 81 (m_expression -> term .)
    RBRACK          reduce using rule 81 (m_expression -> term .)
    RPAREN          reduce using rule 81 (m_expression -> term .)
    SEMICOLON       reduce using rule 81 (m_expression -> term .)
    COMMA           reduce using rule 81 (m_expression -> term .)
    FROM            reduce using rule 81 (m_expression -> term .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89

    multiplication_operator        shift and go to state 87

state 57

    (83) term -> factor .

    TIMES           reduce using rule 83 (term -> factor .)
    DIVIDE          reduce using rule 83 (term -> factor .)
    PLUS            reduce using rule 83 (term -> factor .)
    MINUS           reduce using rule 83 (term -> factor .)
    LESS            reduce using rule 83 (term -> factor .)
    GREATER         reduce using rule 83 (term -> factor .)
    EQUALS          reduce using rule 83 (term -> factor .)
    NOTEQUAL        reduce using rule 83 (term -> factor .)
    GREATERTHAN     reduce using rule 83 (term -> factor .)
    LESSTHAN        reduce using rule 83 (term -> factor .)
    AND             reduce using rule 83 (term -> factor .)
    OR              reduce using rule 83 (term -> factor .)
    RBRACK          reduce using rule 83 (term -> factor .)
    RPAREN          reduce using rule 83 (term -> factor .)
    SEMICOLON       reduce using rule 83 (term -> factor .)
    COMMA           reduce using rule 83 (term -> factor .)
    FROM            reduce using rule 83 (term -> factor .)


state 58

    (85) factor -> variable .

    TIMES           reduce using rule 85 (factor -> variable .)
    DIVIDE          reduce using rule 85 (factor -> variable .)
    PLUS            reduce using rule 85 (factor -> variable .)
    MINUS           reduce using rule 85 (factor -> variable .)
    LESS            reduce using rule 85 (factor -> variable .)
    GREATER         reduce using rule 85 (factor -> variable .)
    EQUALS          reduce using rule 85 (factor -> variable .)
    NOTEQUAL        reduce using rule 85 (factor -> variable .)
    GREATERTHAN     reduce using rule 85 (factor -> variable .)
    LESSTHAN        reduce using rule 85 (factor -> variable .)
    AND             reduce using rule 85 (factor -> variable .)
    OR              reduce using rule 85 (factor -> variable .)
    RBRACK          reduce using rule 85 (factor -> variable .)
    RPAREN          reduce using rule 85 (factor -> variable .)
    SEMICOLON       reduce using rule 85 (factor -> variable .)
    COMMA           reduce using rule 85 (factor -> variable .)
    FROM            reduce using rule 85 (factor -> variable .)


state 59

    (86) factor -> cte .

    TIMES           reduce using rule 86 (factor -> cte .)
    DIVIDE          reduce using rule 86 (factor -> cte .)
    PLUS            reduce using rule 86 (factor -> cte .)
    MINUS           reduce using rule 86 (factor -> cte .)
    LESS            reduce using rule 86 (factor -> cte .)
    GREATER         reduce using rule 86 (factor -> cte .)
    EQUALS          reduce using rule 86 (factor -> cte .)
    NOTEQUAL        reduce using rule 86 (factor -> cte .)
    GREATERTHAN     reduce using rule 86 (factor -> cte .)
    LESSTHAN        reduce using rule 86 (factor -> cte .)
    AND             reduce using rule 86 (factor -> cte .)
    OR              reduce using rule 86 (factor -> cte .)
    RBRACK          reduce using rule 86 (factor -> cte .)
    RPAREN          reduce using rule 86 (factor -> cte .)
    SEMICOLON       reduce using rule 86 (factor -> cte .)
    COMMA           reduce using rule 86 (factor -> cte .)
    FROM            reduce using rule 86 (factor -> cte .)


state 60

    (87) factor -> expression_parenthesis .

    TIMES           reduce using rule 87 (factor -> expression_parenthesis .)
    DIVIDE          reduce using rule 87 (factor -> expression_parenthesis .)
    PLUS            reduce using rule 87 (factor -> expression_parenthesis .)
    MINUS           reduce using rule 87 (factor -> expression_parenthesis .)
    LESS            reduce using rule 87 (factor -> expression_parenthesis .)
    GREATER         reduce using rule 87 (factor -> expression_parenthesis .)
    EQUALS          reduce using rule 87 (factor -> expression_parenthesis .)
    NOTEQUAL        reduce using rule 87 (factor -> expression_parenthesis .)
    GREATERTHAN     reduce using rule 87 (factor -> expression_parenthesis .)
    LESSTHAN        reduce using rule 87 (factor -> expression_parenthesis .)
    AND             reduce using rule 87 (factor -> expression_parenthesis .)
    OR              reduce using rule 87 (factor -> expression_parenthesis .)
    RBRACK          reduce using rule 87 (factor -> expression_parenthesis .)
    RPAREN          reduce using rule 87 (factor -> expression_parenthesis .)
    SEMICOLON       reduce using rule 87 (factor -> expression_parenthesis .)
    COMMA           reduce using rule 87 (factor -> expression_parenthesis .)
    FROM            reduce using rule 87 (factor -> expression_parenthesis .)


state 61

    (88) factor -> invocation .

    TIMES           reduce using rule 88 (factor -> invocation .)
    DIVIDE          reduce using rule 88 (factor -> invocation .)
    PLUS            reduce using rule 88 (factor -> invocation .)
    MINUS           reduce using rule 88 (factor -> invocation .)
    LESS            reduce using rule 88 (factor -> invocation .)
    GREATER         reduce using rule 88 (factor -> invocation .)
    EQUALS          reduce using rule 88 (factor -> invocation .)
    NOTEQUAL        reduce using rule 88 (factor -> invocation .)
    GREATERTHAN     reduce using rule 88 (factor -> invocation .)
    LESSTHAN        reduce using rule 88 (factor -> invocation .)
    AND             reduce using rule 88 (factor -> invocation .)
    OR              reduce using rule 88 (factor -> invocation .)
    RBRACK          reduce using rule 88 (factor -> invocation .)
    RPAREN          reduce using rule 88 (factor -> invocation .)
    SEMICOLON       reduce using rule 88 (factor -> invocation .)
    COMMA           reduce using rule 88 (factor -> invocation .)
    FROM            reduce using rule 88 (factor -> invocation .)


state 62

    (106) cte -> CTEI .

    TIMES           reduce using rule 106 (cte -> CTEI .)
    DIVIDE          reduce using rule 106 (cte -> CTEI .)
    PLUS            reduce using rule 106 (cte -> CTEI .)
    MINUS           reduce using rule 106 (cte -> CTEI .)
    LESS            reduce using rule 106 (cte -> CTEI .)
    GREATER         reduce using rule 106 (cte -> CTEI .)
    EQUALS          reduce using rule 106 (cte -> CTEI .)
    NOTEQUAL        reduce using rule 106 (cte -> CTEI .)
    GREATERTHAN     reduce using rule 106 (cte -> CTEI .)
    LESSTHAN        reduce using rule 106 (cte -> CTEI .)
    AND             reduce using rule 106 (cte -> CTEI .)
    OR              reduce using rule 106 (cte -> CTEI .)
    RBRACK          reduce using rule 106 (cte -> CTEI .)
    RPAREN          reduce using rule 106 (cte -> CTEI .)
    SEMICOLON       reduce using rule 106 (cte -> CTEI .)
    COMMA           reduce using rule 106 (cte -> CTEI .)
    FROM            reduce using rule 106 (cte -> CTEI .)


state 63

    (107) cte -> CTEF .

    TIMES           reduce using rule 107 (cte -> CTEF .)
    DIVIDE          reduce using rule 107 (cte -> CTEF .)
    PLUS            reduce using rule 107 (cte -> CTEF .)
    MINUS           reduce using rule 107 (cte -> CTEF .)
    LESS            reduce using rule 107 (cte -> CTEF .)
    GREATER         reduce using rule 107 (cte -> CTEF .)
    EQUALS          reduce using rule 107 (cte -> CTEF .)
    NOTEQUAL        reduce using rule 107 (cte -> CTEF .)
    GREATERTHAN     reduce using rule 107 (cte -> CTEF .)
    LESSTHAN        reduce using rule 107 (cte -> CTEF .)
    AND             reduce using rule 107 (cte -> CTEF .)
    OR              reduce using rule 107 (cte -> CTEF .)
    RBRACK          reduce using rule 107 (cte -> CTEF .)
    RPAREN          reduce using rule 107 (cte -> CTEF .)
    SEMICOLON       reduce using rule 107 (cte -> CTEF .)
    COMMA           reduce using rule 107 (cte -> CTEF .)
    FROM            reduce using rule 107 (cte -> CTEF .)


state 64

    (108) cte -> CTEC .

    TIMES           reduce using rule 108 (cte -> CTEC .)
    DIVIDE          reduce using rule 108 (cte -> CTEC .)
    PLUS            reduce using rule 108 (cte -> CTEC .)
    MINUS           reduce using rule 108 (cte -> CTEC .)
    LESS            reduce using rule 108 (cte -> CTEC .)
    GREATER         reduce using rule 108 (cte -> CTEC .)
    EQUALS          reduce using rule 108 (cte -> CTEC .)
    NOTEQUAL        reduce using rule 108 (cte -> CTEC .)
    GREATERTHAN     reduce using rule 108 (cte -> CTEC .)
    LESSTHAN        reduce using rule 108 (cte -> CTEC .)
    AND             reduce using rule 108 (cte -> CTEC .)
    OR              reduce using rule 108 (cte -> CTEC .)
    RBRACK          reduce using rule 108 (cte -> CTEC .)
    RPAREN          reduce using rule 108 (cte -> CTEC .)
    SEMICOLON       reduce using rule 108 (cte -> CTEC .)
    COMMA           reduce using rule 108 (cte -> CTEC .)
    FROM            reduce using rule 108 (cte -> CTEC .)


state 65

    (109) cte -> CTEB .

    TIMES           reduce using rule 109 (cte -> CTEB .)
    DIVIDE          reduce using rule 109 (cte -> CTEB .)
    PLUS            reduce using rule 109 (cte -> CTEB .)
    MINUS           reduce using rule 109 (cte -> CTEB .)
    LESS            reduce using rule 109 (cte -> CTEB .)
    GREATER         reduce using rule 109 (cte -> CTEB .)
    EQUALS          reduce using rule 109 (cte -> CTEB .)
    NOTEQUAL        reduce using rule 109 (cte -> CTEB .)
    GREATERTHAN     reduce using rule 109 (cte -> CTEB .)
    LESSTHAN        reduce using rule 109 (cte -> CTEB .)
    AND             reduce using rule 109 (cte -> CTEB .)
    OR              reduce using rule 109 (cte -> CTEB .)
    RBRACK          reduce using rule 109 (cte -> CTEB .)
    RPAREN          reduce using rule 109 (cte -> CTEB .)
    SEMICOLON       reduce using rule 109 (cte -> CTEB .)
    COMMA           reduce using rule 109 (cte -> CTEB .)
    FROM            reduce using rule 109 (cte -> CTEB .)


state 66

    (89) expression_parenthesis -> LPAREN . expression RPAREN
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (77) t_expression -> . g_expression
    (78) t_expression -> . t_expression boolean_operator g_expression
    (79) g_expression -> . m_expression
    (80) g_expression -> . g_expression comparison_operator m_expression
    (81) m_expression -> . term
    (82) m_expression -> . m_expression addition_operator term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 53
    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    expression                     shift and go to state 90
    t_expression                   shift and go to state 52
    g_expression                   shift and go to state 54
    m_expression                   shift and go to state 55
    term                           shift and go to state 56
    factor                         shift and go to state 57
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 67

    (10) main -> MAIN LPAREN RPAREN main_scope var_declarations . LBRACE statements RBRACE

    LBRACE          shift and go to state 91


state 68

    (6) function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations RBRACE statements return_me RBRACE
    (23) parameters -> . parameters COMMA parameter
    (24) parameters -> . parameter
    (25) parameters -> . empty
    (26) parameter -> . simple_type ID
    (110) empty -> .
    (102) simple_type -> . INT
    (103) simple_type -> . FLOAT
    (104) simple_type -> . CHAR
    (105) simple_type -> . BOOLEAN

    COMMA           reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26
    BOOLEAN         shift and go to state 27

    simple_type                    shift and go to state 92
    parameters                     shift and go to state 93
    parameter                      shift and go to state 94
    empty                          shift and go to state 95

state 69

    (7) function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (23) parameters -> . parameters COMMA parameter
    (24) parameters -> . parameter
    (25) parameters -> . empty
    (26) parameter -> . simple_type ID
    (110) empty -> .
    (102) simple_type -> . INT
    (103) simple_type -> . FLOAT
    (104) simple_type -> . CHAR
    (105) simple_type -> . BOOLEAN

    COMMA           reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26
    BOOLEAN         shift and go to state 27

    parameters                     shift and go to state 96
    parameter                      shift and go to state 94
    empty                          shift and go to state 95
    simple_type                    shift and go to state 92

state 70

    (59) invocation -> ID invocation_1 . LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    LPAREN          shift and go to state 97


state 71

    (60) invocation_1 -> empty .

    LPAREN          reduce using rule 60 (invocation_1 -> empty .)


state 72

    (21) variable -> ID LBRACK expression RBRACK .
    (22) variable -> ID LBRACK expression RBRACK . LBRACK expression RBRACK

    COMMA           reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    TIMES           reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    PLUS            reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    MINUS           reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    LESS            reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    GREATER         reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    EQUALS          reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    AND             reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    OR              reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    RBRACK          reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    RPAREN          reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    FROM            reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 21 (variable -> ID LBRACK expression RBRACK .)
    LBRACK          shift and go to state 98


state 73

    (78) t_expression -> t_expression boolean_operator . g_expression
    (79) g_expression -> . m_expression
    (80) g_expression -> . g_expression comparison_operator m_expression
    (81) m_expression -> . term
    (82) m_expression -> . m_expression addition_operator term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    g_expression                   shift and go to state 99
    m_expression                   shift and go to state 55
    term                           shift and go to state 56
    factor                         shift and go to state 57
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 74

    (98) boolean_operator -> AND .

    ID              reduce using rule 98 (boolean_operator -> AND .)
    CTEI            reduce using rule 98 (boolean_operator -> AND .)
    CTEF            reduce using rule 98 (boolean_operator -> AND .)
    CTEC            reduce using rule 98 (boolean_operator -> AND .)
    CTEB            reduce using rule 98 (boolean_operator -> AND .)
    LPAREN          reduce using rule 98 (boolean_operator -> AND .)


state 75

    (99) boolean_operator -> OR .

    ID              reduce using rule 99 (boolean_operator -> OR .)
    CTEI            reduce using rule 99 (boolean_operator -> OR .)
    CTEF            reduce using rule 99 (boolean_operator -> OR .)
    CTEC            reduce using rule 99 (boolean_operator -> OR .)
    CTEB            reduce using rule 99 (boolean_operator -> OR .)
    LPAREN          reduce using rule 99 (boolean_operator -> OR .)


state 76

    (76) expression -> NOT t_expression .
    (78) t_expression -> t_expression . boolean_operator g_expression
    (98) boolean_operator -> . AND
    (99) boolean_operator -> . OR

    RBRACK          reduce using rule 76 (expression -> NOT t_expression .)
    RPAREN          reduce using rule 76 (expression -> NOT t_expression .)
    SEMICOLON       reduce using rule 76 (expression -> NOT t_expression .)
    COMMA           reduce using rule 76 (expression -> NOT t_expression .)
    FROM            reduce using rule 76 (expression -> NOT t_expression .)
    AND             shift and go to state 74
    OR              shift and go to state 75

    boolean_operator               shift and go to state 73

state 77

    (80) g_expression -> g_expression comparison_operator . m_expression
    (81) m_expression -> . term
    (82) m_expression -> . m_expression addition_operator term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    m_expression                   shift and go to state 100
    term                           shift and go to state 56
    factor                         shift and go to state 57
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 78

    (90) comparison_operator -> LESS .

    ID              reduce using rule 90 (comparison_operator -> LESS .)
    CTEI            reduce using rule 90 (comparison_operator -> LESS .)
    CTEF            reduce using rule 90 (comparison_operator -> LESS .)
    CTEC            reduce using rule 90 (comparison_operator -> LESS .)
    CTEB            reduce using rule 90 (comparison_operator -> LESS .)
    LPAREN          reduce using rule 90 (comparison_operator -> LESS .)


state 79

    (91) comparison_operator -> GREATER .

    ID              reduce using rule 91 (comparison_operator -> GREATER .)
    CTEI            reduce using rule 91 (comparison_operator -> GREATER .)
    CTEF            reduce using rule 91 (comparison_operator -> GREATER .)
    CTEC            reduce using rule 91 (comparison_operator -> GREATER .)
    CTEB            reduce using rule 91 (comparison_operator -> GREATER .)
    LPAREN          reduce using rule 91 (comparison_operator -> GREATER .)


state 80

    (92) comparison_operator -> EQUALS .

    ID              reduce using rule 92 (comparison_operator -> EQUALS .)
    CTEI            reduce using rule 92 (comparison_operator -> EQUALS .)
    CTEF            reduce using rule 92 (comparison_operator -> EQUALS .)
    CTEC            reduce using rule 92 (comparison_operator -> EQUALS .)
    CTEB            reduce using rule 92 (comparison_operator -> EQUALS .)
    LPAREN          reduce using rule 92 (comparison_operator -> EQUALS .)


state 81

    (93) comparison_operator -> NOTEQUAL .

    ID              reduce using rule 93 (comparison_operator -> NOTEQUAL .)
    CTEI            reduce using rule 93 (comparison_operator -> NOTEQUAL .)
    CTEF            reduce using rule 93 (comparison_operator -> NOTEQUAL .)
    CTEC            reduce using rule 93 (comparison_operator -> NOTEQUAL .)
    CTEB            reduce using rule 93 (comparison_operator -> NOTEQUAL .)
    LPAREN          reduce using rule 93 (comparison_operator -> NOTEQUAL .)


state 82

    (94) comparison_operator -> GREATERTHAN .

    ID              reduce using rule 94 (comparison_operator -> GREATERTHAN .)
    CTEI            reduce using rule 94 (comparison_operator -> GREATERTHAN .)
    CTEF            reduce using rule 94 (comparison_operator -> GREATERTHAN .)
    CTEC            reduce using rule 94 (comparison_operator -> GREATERTHAN .)
    CTEB            reduce using rule 94 (comparison_operator -> GREATERTHAN .)
    LPAREN          reduce using rule 94 (comparison_operator -> GREATERTHAN .)


state 83

    (95) comparison_operator -> LESSTHAN .

    ID              reduce using rule 95 (comparison_operator -> LESSTHAN .)
    CTEI            reduce using rule 95 (comparison_operator -> LESSTHAN .)
    CTEF            reduce using rule 95 (comparison_operator -> LESSTHAN .)
    CTEC            reduce using rule 95 (comparison_operator -> LESSTHAN .)
    CTEB            reduce using rule 95 (comparison_operator -> LESSTHAN .)
    LPAREN          reduce using rule 95 (comparison_operator -> LESSTHAN .)


state 84

    (82) m_expression -> m_expression addition_operator . term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    term                           shift and go to state 101
    factor                         shift and go to state 57
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 85

    (96) addition_operator -> PLUS .

    ID              reduce using rule 96 (addition_operator -> PLUS .)
    CTEI            reduce using rule 96 (addition_operator -> PLUS .)
    CTEF            reduce using rule 96 (addition_operator -> PLUS .)
    CTEC            reduce using rule 96 (addition_operator -> PLUS .)
    CTEB            reduce using rule 96 (addition_operator -> PLUS .)
    LPAREN          reduce using rule 96 (addition_operator -> PLUS .)


state 86

    (97) addition_operator -> MINUS .

    ID              reduce using rule 97 (addition_operator -> MINUS .)
    CTEI            reduce using rule 97 (addition_operator -> MINUS .)
    CTEF            reduce using rule 97 (addition_operator -> MINUS .)
    CTEC            reduce using rule 97 (addition_operator -> MINUS .)
    CTEB            reduce using rule 97 (addition_operator -> MINUS .)
    LPAREN          reduce using rule 97 (addition_operator -> MINUS .)


state 87

    (84) term -> term multiplication_operator . factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    factor                         shift and go to state 102
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 88

    (100) multiplication_operator -> TIMES .

    ID              reduce using rule 100 (multiplication_operator -> TIMES .)
    CTEI            reduce using rule 100 (multiplication_operator -> TIMES .)
    CTEF            reduce using rule 100 (multiplication_operator -> TIMES .)
    CTEC            reduce using rule 100 (multiplication_operator -> TIMES .)
    CTEB            reduce using rule 100 (multiplication_operator -> TIMES .)
    LPAREN          reduce using rule 100 (multiplication_operator -> TIMES .)


state 89

    (101) multiplication_operator -> DIVIDE .

    ID              reduce using rule 101 (multiplication_operator -> DIVIDE .)
    CTEI            reduce using rule 101 (multiplication_operator -> DIVIDE .)
    CTEF            reduce using rule 101 (multiplication_operator -> DIVIDE .)
    CTEC            reduce using rule 101 (multiplication_operator -> DIVIDE .)
    CTEB            reduce using rule 101 (multiplication_operator -> DIVIDE .)
    LPAREN          reduce using rule 101 (multiplication_operator -> DIVIDE .)


state 90

    (89) expression_parenthesis -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 103


state 91

    (10) main -> MAIN LPAREN RPAREN main_scope var_declarations LBRACE . statements RBRACE
    (27) statements -> . statements statement
    (28) statements -> . statement
    (29) statements -> . empty
    (30) statement -> . read
    (31) statement -> . for
    (32) statement -> . do_while
    (33) statement -> . while
    (34) statement -> . if_else
    (35) statement -> . invocation
    (36) statement -> . if
    (37) statement -> . assingation
    (38) statement -> . return
    (39) statement -> . print
    (110) empty -> .
    (56) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (41) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (40) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (46) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (51) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (48) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) assingation -> . variable ASSIGN expression SEMICOLON
    (55) return -> . RETURN expression SEMICOLON
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    READ            shift and go to state 117
    FOR             shift and go to state 118
    DO              shift and go to state 120
    WHILE           shift and go to state 121
    IF              shift and go to state 122
    ID              shift and go to state 119
    RETURN          shift and go to state 124
    PRINT           shift and go to state 125

  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! DO              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]

    statements                     shift and go to state 104
    statement                      shift and go to state 105
    empty                          shift and go to state 106
    read                           shift and go to state 107
    for                            shift and go to state 108
    do_while                       shift and go to state 109
    while                          shift and go to state 110
    if_else                        shift and go to state 111
    invocation                     shift and go to state 112
    if                             shift and go to state 113
    assingation                    shift and go to state 114
    return                         shift and go to state 115
    print                          shift and go to state 116
    variable                       shift and go to state 123

state 92

    (26) parameter -> simple_type . ID

    ID              shift and go to state 126


state 93

    (6) function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations RBRACE statements return_me RBRACE
    (23) parameters -> parameters . COMMA parameter
    (17) close_var_declaration -> . empty
    (110) empty -> .

    COMMA           shift and go to state 128
    RPAREN          reduce using rule 110 (empty -> .)

    close_var_declaration          shift and go to state 127
    empty                          shift and go to state 48

state 94

    (24) parameters -> parameter .

    COMMA           reduce using rule 24 (parameters -> parameter .)
    RPAREN          reduce using rule 24 (parameters -> parameter .)


state 95

    (25) parameters -> empty .

    COMMA           reduce using rule 25 (parameters -> empty .)
    RPAREN          reduce using rule 25 (parameters -> empty .)


state 96

    (7) function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (23) parameters -> parameters . COMMA parameter
    (17) close_var_declaration -> . empty
    (110) empty -> .

    COMMA           shift and go to state 128
    RPAREN          reduce using rule 110 (empty -> .)

    close_var_declaration          shift and go to state 129
    empty                          shift and go to state 48

state 97

    (59) invocation -> ID invocation_1 LPAREN . invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (61) invocation_2 -> . empty
    (110) empty -> .

    NOT             reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)
    CTEC            reduce using rule 110 (empty -> .)
    CTEB            reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)

    invocation_2                   shift and go to state 130
    empty                          shift and go to state 131

state 98

    (22) variable -> ID LBRACK expression RBRACK LBRACK . expression RBRACK
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (77) t_expression -> . g_expression
    (78) t_expression -> . t_expression boolean_operator g_expression
    (79) g_expression -> . m_expression
    (80) g_expression -> . g_expression comparison_operator m_expression
    (81) m_expression -> . term
    (82) m_expression -> . m_expression addition_operator term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 53
    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    expression                     shift and go to state 132
    t_expression                   shift and go to state 52
    g_expression                   shift and go to state 54
    m_expression                   shift and go to state 55
    term                           shift and go to state 56
    factor                         shift and go to state 57
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 99

    (78) t_expression -> t_expression boolean_operator g_expression .
    (80) g_expression -> g_expression . comparison_operator m_expression
    (90) comparison_operator -> . LESS
    (91) comparison_operator -> . GREATER
    (92) comparison_operator -> . EQUALS
    (93) comparison_operator -> . NOTEQUAL
    (94) comparison_operator -> . GREATERTHAN
    (95) comparison_operator -> . LESSTHAN

    AND             reduce using rule 78 (t_expression -> t_expression boolean_operator g_expression .)
    OR              reduce using rule 78 (t_expression -> t_expression boolean_operator g_expression .)
    RBRACK          reduce using rule 78 (t_expression -> t_expression boolean_operator g_expression .)
    RPAREN          reduce using rule 78 (t_expression -> t_expression boolean_operator g_expression .)
    SEMICOLON       reduce using rule 78 (t_expression -> t_expression boolean_operator g_expression .)
    COMMA           reduce using rule 78 (t_expression -> t_expression boolean_operator g_expression .)
    FROM            reduce using rule 78 (t_expression -> t_expression boolean_operator g_expression .)
    LESS            shift and go to state 78
    GREATER         shift and go to state 79
    EQUALS          shift and go to state 80
    NOTEQUAL        shift and go to state 81
    GREATERTHAN     shift and go to state 82
    LESSTHAN        shift and go to state 83

    comparison_operator            shift and go to state 77

state 100

    (80) g_expression -> g_expression comparison_operator m_expression .
    (82) m_expression -> m_expression . addition_operator term
    (96) addition_operator -> . PLUS
    (97) addition_operator -> . MINUS

    LESS            reduce using rule 80 (g_expression -> g_expression comparison_operator m_expression .)
    GREATER         reduce using rule 80 (g_expression -> g_expression comparison_operator m_expression .)
    EQUALS          reduce using rule 80 (g_expression -> g_expression comparison_operator m_expression .)
    NOTEQUAL        reduce using rule 80 (g_expression -> g_expression comparison_operator m_expression .)
    GREATERTHAN     reduce using rule 80 (g_expression -> g_expression comparison_operator m_expression .)
    LESSTHAN        reduce using rule 80 (g_expression -> g_expression comparison_operator m_expression .)
    AND             reduce using rule 80 (g_expression -> g_expression comparison_operator m_expression .)
    OR              reduce using rule 80 (g_expression -> g_expression comparison_operator m_expression .)
    RBRACK          reduce using rule 80 (g_expression -> g_expression comparison_operator m_expression .)
    RPAREN          reduce using rule 80 (g_expression -> g_expression comparison_operator m_expression .)
    SEMICOLON       reduce using rule 80 (g_expression -> g_expression comparison_operator m_expression .)
    COMMA           reduce using rule 80 (g_expression -> g_expression comparison_operator m_expression .)
    FROM            reduce using rule 80 (g_expression -> g_expression comparison_operator m_expression .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    addition_operator              shift and go to state 84

state 101

    (82) m_expression -> m_expression addition_operator term .
    (84) term -> term . multiplication_operator factor
    (100) multiplication_operator -> . TIMES
    (101) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 82 (m_expression -> m_expression addition_operator term .)
    MINUS           reduce using rule 82 (m_expression -> m_expression addition_operator term .)
    LESS            reduce using rule 82 (m_expression -> m_expression addition_operator term .)
    GREATER         reduce using rule 82 (m_expression -> m_expression addition_operator term .)
    EQUALS          reduce using rule 82 (m_expression -> m_expression addition_operator term .)
    NOTEQUAL        reduce using rule 82 (m_expression -> m_expression addition_operator term .)
    GREATERTHAN     reduce using rule 82 (m_expression -> m_expression addition_operator term .)
    LESSTHAN        reduce using rule 82 (m_expression -> m_expression addition_operator term .)
    AND             reduce using rule 82 (m_expression -> m_expression addition_operator term .)
    OR              reduce using rule 82 (m_expression -> m_expression addition_operator term .)
    RBRACK          reduce using rule 82 (m_expression -> m_expression addition_operator term .)
    RPAREN          reduce using rule 82 (m_expression -> m_expression addition_operator term .)
    SEMICOLON       reduce using rule 82 (m_expression -> m_expression addition_operator term .)
    COMMA           reduce using rule 82 (m_expression -> m_expression addition_operator term .)
    FROM            reduce using rule 82 (m_expression -> m_expression addition_operator term .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89

    multiplication_operator        shift and go to state 87

state 102

    (84) term -> term multiplication_operator factor .

    TIMES           reduce using rule 84 (term -> term multiplication_operator factor .)
    DIVIDE          reduce using rule 84 (term -> term multiplication_operator factor .)
    PLUS            reduce using rule 84 (term -> term multiplication_operator factor .)
    MINUS           reduce using rule 84 (term -> term multiplication_operator factor .)
    LESS            reduce using rule 84 (term -> term multiplication_operator factor .)
    GREATER         reduce using rule 84 (term -> term multiplication_operator factor .)
    EQUALS          reduce using rule 84 (term -> term multiplication_operator factor .)
    NOTEQUAL        reduce using rule 84 (term -> term multiplication_operator factor .)
    GREATERTHAN     reduce using rule 84 (term -> term multiplication_operator factor .)
    LESSTHAN        reduce using rule 84 (term -> term multiplication_operator factor .)
    AND             reduce using rule 84 (term -> term multiplication_operator factor .)
    OR              reduce using rule 84 (term -> term multiplication_operator factor .)
    RBRACK          reduce using rule 84 (term -> term multiplication_operator factor .)
    RPAREN          reduce using rule 84 (term -> term multiplication_operator factor .)
    SEMICOLON       reduce using rule 84 (term -> term multiplication_operator factor .)
    COMMA           reduce using rule 84 (term -> term multiplication_operator factor .)
    FROM            reduce using rule 84 (term -> term multiplication_operator factor .)


state 103

    (89) expression_parenthesis -> LPAREN expression RPAREN .

    TIMES           reduce using rule 89 (expression_parenthesis -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 89 (expression_parenthesis -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 89 (expression_parenthesis -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 89 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESS            reduce using rule 89 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 89 (expression_parenthesis -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 89 (expression_parenthesis -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 89 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 89 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 89 (expression_parenthesis -> LPAREN expression RPAREN .)
    AND             reduce using rule 89 (expression_parenthesis -> LPAREN expression RPAREN .)
    OR              reduce using rule 89 (expression_parenthesis -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 89 (expression_parenthesis -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 89 (expression_parenthesis -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 89 (expression_parenthesis -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 89 (expression_parenthesis -> LPAREN expression RPAREN .)
    FROM            reduce using rule 89 (expression_parenthesis -> LPAREN expression RPAREN .)


state 104

    (10) main -> MAIN LPAREN RPAREN main_scope var_declarations LBRACE statements . RBRACE
    (27) statements -> statements . statement
    (30) statement -> . read
    (31) statement -> . for
    (32) statement -> . do_while
    (33) statement -> . while
    (34) statement -> . if_else
    (35) statement -> . invocation
    (36) statement -> . if
    (37) statement -> . assingation
    (38) statement -> . return
    (39) statement -> . print
    (56) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (41) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (40) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (46) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (51) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (48) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) assingation -> . variable ASSIGN expression SEMICOLON
    (55) return -> . RETURN expression SEMICOLON
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 133
    READ            shift and go to state 117
    FOR             shift and go to state 118
    DO              shift and go to state 120
    WHILE           shift and go to state 121
    IF              shift and go to state 122
    ID              shift and go to state 119
    RETURN          shift and go to state 124
    PRINT           shift and go to state 125

    statement                      shift and go to state 134
    read                           shift and go to state 107
    for                            shift and go to state 108
    do_while                       shift and go to state 109
    while                          shift and go to state 110
    if_else                        shift and go to state 111
    invocation                     shift and go to state 112
    if                             shift and go to state 113
    assingation                    shift and go to state 114
    return                         shift and go to state 115
    print                          shift and go to state 116
    variable                       shift and go to state 123

state 105

    (28) statements -> statement .

    RBRACE          reduce using rule 28 (statements -> statement .)
    READ            reduce using rule 28 (statements -> statement .)
    FOR             reduce using rule 28 (statements -> statement .)
    DO              reduce using rule 28 (statements -> statement .)
    WHILE           reduce using rule 28 (statements -> statement .)
    IF              reduce using rule 28 (statements -> statement .)
    ID              reduce using rule 28 (statements -> statement .)
    RETURN          reduce using rule 28 (statements -> statement .)
    PRINT           reduce using rule 28 (statements -> statement .)


state 106

    (29) statements -> empty .

    RBRACE          reduce using rule 29 (statements -> empty .)
    READ            reduce using rule 29 (statements -> empty .)
    FOR             reduce using rule 29 (statements -> empty .)
    DO              reduce using rule 29 (statements -> empty .)
    WHILE           reduce using rule 29 (statements -> empty .)
    IF              reduce using rule 29 (statements -> empty .)
    ID              reduce using rule 29 (statements -> empty .)
    RETURN          reduce using rule 29 (statements -> empty .)
    PRINT           reduce using rule 29 (statements -> empty .)


state 107

    (30) statement -> read .

    RBRACE          reduce using rule 30 (statement -> read .)
    READ            reduce using rule 30 (statement -> read .)
    FOR             reduce using rule 30 (statement -> read .)
    DO              reduce using rule 30 (statement -> read .)
    WHILE           reduce using rule 30 (statement -> read .)
    IF              reduce using rule 30 (statement -> read .)
    ID              reduce using rule 30 (statement -> read .)
    RETURN          reduce using rule 30 (statement -> read .)
    PRINT           reduce using rule 30 (statement -> read .)


state 108

    (31) statement -> for .

    RBRACE          reduce using rule 31 (statement -> for .)
    READ            reduce using rule 31 (statement -> for .)
    FOR             reduce using rule 31 (statement -> for .)
    DO              reduce using rule 31 (statement -> for .)
    WHILE           reduce using rule 31 (statement -> for .)
    IF              reduce using rule 31 (statement -> for .)
    ID              reduce using rule 31 (statement -> for .)
    RETURN          reduce using rule 31 (statement -> for .)
    PRINT           reduce using rule 31 (statement -> for .)


state 109

    (32) statement -> do_while .

    RBRACE          reduce using rule 32 (statement -> do_while .)
    READ            reduce using rule 32 (statement -> do_while .)
    FOR             reduce using rule 32 (statement -> do_while .)
    DO              reduce using rule 32 (statement -> do_while .)
    WHILE           reduce using rule 32 (statement -> do_while .)
    IF              reduce using rule 32 (statement -> do_while .)
    ID              reduce using rule 32 (statement -> do_while .)
    RETURN          reduce using rule 32 (statement -> do_while .)
    PRINT           reduce using rule 32 (statement -> do_while .)


state 110

    (33) statement -> while .

    RBRACE          reduce using rule 33 (statement -> while .)
    READ            reduce using rule 33 (statement -> while .)
    FOR             reduce using rule 33 (statement -> while .)
    DO              reduce using rule 33 (statement -> while .)
    WHILE           reduce using rule 33 (statement -> while .)
    IF              reduce using rule 33 (statement -> while .)
    ID              reduce using rule 33 (statement -> while .)
    RETURN          reduce using rule 33 (statement -> while .)
    PRINT           reduce using rule 33 (statement -> while .)


state 111

    (34) statement -> if_else .

    RBRACE          reduce using rule 34 (statement -> if_else .)
    READ            reduce using rule 34 (statement -> if_else .)
    FOR             reduce using rule 34 (statement -> if_else .)
    DO              reduce using rule 34 (statement -> if_else .)
    WHILE           reduce using rule 34 (statement -> if_else .)
    IF              reduce using rule 34 (statement -> if_else .)
    ID              reduce using rule 34 (statement -> if_else .)
    RETURN          reduce using rule 34 (statement -> if_else .)
    PRINT           reduce using rule 34 (statement -> if_else .)


state 112

    (35) statement -> invocation .

    RBRACE          reduce using rule 35 (statement -> invocation .)
    READ            reduce using rule 35 (statement -> invocation .)
    FOR             reduce using rule 35 (statement -> invocation .)
    DO              reduce using rule 35 (statement -> invocation .)
    WHILE           reduce using rule 35 (statement -> invocation .)
    IF              reduce using rule 35 (statement -> invocation .)
    ID              reduce using rule 35 (statement -> invocation .)
    RETURN          reduce using rule 35 (statement -> invocation .)
    PRINT           reduce using rule 35 (statement -> invocation .)


state 113

    (36) statement -> if .

    RBRACE          reduce using rule 36 (statement -> if .)
    READ            reduce using rule 36 (statement -> if .)
    FOR             reduce using rule 36 (statement -> if .)
    DO              reduce using rule 36 (statement -> if .)
    WHILE           reduce using rule 36 (statement -> if .)
    IF              reduce using rule 36 (statement -> if .)
    ID              reduce using rule 36 (statement -> if .)
    RETURN          reduce using rule 36 (statement -> if .)
    PRINT           reduce using rule 36 (statement -> if .)


state 114

    (37) statement -> assingation .

    RBRACE          reduce using rule 37 (statement -> assingation .)
    READ            reduce using rule 37 (statement -> assingation .)
    FOR             reduce using rule 37 (statement -> assingation .)
    DO              reduce using rule 37 (statement -> assingation .)
    WHILE           reduce using rule 37 (statement -> assingation .)
    IF              reduce using rule 37 (statement -> assingation .)
    ID              reduce using rule 37 (statement -> assingation .)
    RETURN          reduce using rule 37 (statement -> assingation .)
    PRINT           reduce using rule 37 (statement -> assingation .)


state 115

    (38) statement -> return .

    RBRACE          reduce using rule 38 (statement -> return .)
    READ            reduce using rule 38 (statement -> return .)
    FOR             reduce using rule 38 (statement -> return .)
    DO              reduce using rule 38 (statement -> return .)
    WHILE           reduce using rule 38 (statement -> return .)
    IF              reduce using rule 38 (statement -> return .)
    ID              reduce using rule 38 (statement -> return .)
    RETURN          reduce using rule 38 (statement -> return .)
    PRINT           reduce using rule 38 (statement -> return .)


state 116

    (39) statement -> print .

    RBRACE          reduce using rule 39 (statement -> print .)
    READ            reduce using rule 39 (statement -> print .)
    FOR             reduce using rule 39 (statement -> print .)
    DO              reduce using rule 39 (statement -> print .)
    WHILE           reduce using rule 39 (statement -> print .)
    IF              reduce using rule 39 (statement -> print .)
    ID              reduce using rule 39 (statement -> print .)
    RETURN          reduce using rule 39 (statement -> print .)
    PRINT           reduce using rule 39 (statement -> print .)


state 117

    (56) read -> READ . LPAREN variable_list RPAREN SEMICOLON

    LPAREN          shift and go to state 135


state 118

    (41) for -> FOR . LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4

    LPAREN          shift and go to state 136


state 119

    (59) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (20) variable -> ID .
    (21) variable -> ID . LBRACK expression RBRACK
    (22) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (60) invocation_1 -> . empty
    (110) empty -> .

    ASSIGN          reduce using rule 20 (variable -> ID .)
    LBRACK          shift and go to state 42
    LPAREN          reduce using rule 110 (empty -> .)

    invocation_1                   shift and go to state 70
    empty                          shift and go to state 71

state 120

    (40) do_while -> DO . breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (47) breadcrumb -> . empty
    (110) empty -> .

    LBRACE          reduce using rule 110 (empty -> .)

    breadcrumb                     shift and go to state 137
    empty                          shift and go to state 138

state 121

    (46) while -> WHILE . breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (47) breadcrumb -> . empty
    (110) empty -> .

    LPAREN          reduce using rule 110 (empty -> .)

    breadcrumb                     shift and go to state 139
    empty                          shift and go to state 138

state 122

    (51) if_else -> IF . LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (48) if -> IF . LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE

    LPAREN          shift and go to state 140


state 123

    (74) assingation -> variable . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 141


state 124

    (55) return -> RETURN . expression SEMICOLON
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (77) t_expression -> . g_expression
    (78) t_expression -> . t_expression boolean_operator g_expression
    (79) g_expression -> . m_expression
    (80) g_expression -> . g_expression comparison_operator m_expression
    (81) m_expression -> . term
    (82) m_expression -> . m_expression addition_operator term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 53
    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    expression                     shift and go to state 142
    t_expression                   shift and go to state 52
    g_expression                   shift and go to state 54
    m_expression                   shift and go to state 55
    term                           shift and go to state 56
    factor                         shift and go to state 57
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 125

    (69) print -> PRINT . LPAREN print_arguments RPAREN SEMICOLON

    LPAREN          shift and go to state 143


state 126

    (26) parameter -> simple_type ID .

    COMMA           reduce using rule 26 (parameter -> simple_type ID .)
    RPAREN          reduce using rule 26 (parameter -> simple_type ID .)


state 127

    (6) function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations RBRACE statements return_me RBRACE

    RPAREN          shift and go to state 144


state 128

    (23) parameters -> parameters COMMA . parameter
    (26) parameter -> . simple_type ID
    (102) simple_type -> . INT
    (103) simple_type -> . FLOAT
    (104) simple_type -> . CHAR
    (105) simple_type -> . BOOLEAN

    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26
    BOOLEAN         shift and go to state 27

    parameter                      shift and go to state 145
    simple_type                    shift and go to state 92

state 129

    (7) function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations LBRACE statements RBRACE

    RPAREN          shift and go to state 146


state 130

    (59) invocation -> ID invocation_1 LPAREN invocation_2 . expressions RPAREN invocation_5 SEMICOLON invocation_6
    (66) expressions -> . expressions COMMA invocation_4 expression invocation_3
    (67) expressions -> . expression invocation_3
    (68) expressions -> . empty
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (110) empty -> .
    (77) t_expression -> . g_expression
    (78) t_expression -> . t_expression boolean_operator g_expression
    (79) g_expression -> . m_expression
    (80) g_expression -> . g_expression comparison_operator m_expression
    (81) m_expression -> . term
    (82) m_expression -> . m_expression addition_operator term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 53
    RPAREN          reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    expressions                    shift and go to state 147
    expression                     shift and go to state 148
    empty                          shift and go to state 149
    t_expression                   shift and go to state 52
    g_expression                   shift and go to state 54
    m_expression                   shift and go to state 55
    term                           shift and go to state 56
    factor                         shift and go to state 57
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 131

    (61) invocation_2 -> empty .

    NOT             reduce using rule 61 (invocation_2 -> empty .)
    ID              reduce using rule 61 (invocation_2 -> empty .)
    CTEI            reduce using rule 61 (invocation_2 -> empty .)
    CTEF            reduce using rule 61 (invocation_2 -> empty .)
    CTEC            reduce using rule 61 (invocation_2 -> empty .)
    CTEB            reduce using rule 61 (invocation_2 -> empty .)
    LPAREN          reduce using rule 61 (invocation_2 -> empty .)
    RPAREN          reduce using rule 61 (invocation_2 -> empty .)
    COMMA           reduce using rule 61 (invocation_2 -> empty .)


state 132

    (22) variable -> ID LBRACK expression RBRACK LBRACK expression . RBRACK

    RBRACK          shift and go to state 150


state 133

    (10) main -> MAIN LPAREN RPAREN main_scope var_declarations LBRACE statements RBRACE .

    END             reduce using rule 10 (main -> MAIN LPAREN RPAREN main_scope var_declarations LBRACE statements RBRACE .)


state 134

    (27) statements -> statements statement .

    RBRACE          reduce using rule 27 (statements -> statements statement .)
    READ            reduce using rule 27 (statements -> statements statement .)
    FOR             reduce using rule 27 (statements -> statements statement .)
    DO              reduce using rule 27 (statements -> statements statement .)
    WHILE           reduce using rule 27 (statements -> statements statement .)
    IF              reduce using rule 27 (statements -> statements statement .)
    ID              reduce using rule 27 (statements -> statements statement .)
    RETURN          reduce using rule 27 (statements -> statements statement .)
    PRINT           reduce using rule 27 (statements -> statements statement .)


state 135

    (56) read -> READ LPAREN . variable_list RPAREN SEMICOLON
    (57) variable_list -> . variable
    (58) variable_list -> . variable_list COMMA variable
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 35

    variable_list                  shift and go to state 151
    variable                       shift and go to state 152

state 136

    (41) for -> FOR LPAREN . ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4

    ID              shift and go to state 153


state 137

    (40) do_while -> DO breadcrumb . LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON

    LBRACE          shift and go to state 154


state 138

    (47) breadcrumb -> empty .

    LBRACE          reduce using rule 47 (breadcrumb -> empty .)
    LPAREN          reduce using rule 47 (breadcrumb -> empty .)


state 139

    (46) while -> WHILE breadcrumb . LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE

    LPAREN          shift and go to state 155


state 140

    (51) if_else -> IF LPAREN . open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (48) if -> IF LPAREN . open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (49) open_temporal_boolean -> . empty
    (110) empty -> .

    NOT             reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)
    CTEC            reduce using rule 110 (empty -> .)
    CTEB            reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)

    open_temporal_boolean          shift and go to state 156
    empty                          shift and go to state 157

state 141

    (74) assingation -> variable ASSIGN . expression SEMICOLON
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (77) t_expression -> . g_expression
    (78) t_expression -> . t_expression boolean_operator g_expression
    (79) g_expression -> . m_expression
    (80) g_expression -> . g_expression comparison_operator m_expression
    (81) m_expression -> . term
    (82) m_expression -> . m_expression addition_operator term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 53
    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    variable                       shift and go to state 58
    expression                     shift and go to state 158
    t_expression                   shift and go to state 52
    g_expression                   shift and go to state 54
    m_expression                   shift and go to state 55
    term                           shift and go to state 56
    factor                         shift and go to state 57
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 142

    (55) return -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 159


state 143

    (69) print -> PRINT LPAREN . print_arguments RPAREN SEMICOLON
    (70) print_arguments -> . print_argument
    (71) print_arguments -> . print_arguments COMMA print_argument
    (72) print_argument -> . CTES
    (73) print_argument -> . expression
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (77) t_expression -> . g_expression
    (78) t_expression -> . t_expression boolean_operator g_expression
    (79) g_expression -> . m_expression
    (80) g_expression -> . g_expression comparison_operator m_expression
    (81) m_expression -> . term
    (82) m_expression -> . m_expression addition_operator term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    CTES            shift and go to state 162
    NOT             shift and go to state 53
    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    print_arguments                shift and go to state 160
    print_argument                 shift and go to state 161
    expression                     shift and go to state 163
    t_expression                   shift and go to state 52
    g_expression                   shift and go to state 54
    m_expression                   shift and go to state 55
    term                           shift and go to state 56
    factor                         shift and go to state 57
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 144

    (6) function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations RBRACE statements return_me RBRACE
    (12) var_declarations -> . var_declaration_list
    (13) var_declarations -> . empty
    (14) var_declaration_list -> . var_declaration var_declarations
    (110) empty -> .
    (15) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    RBRACE          reduce using rule 110 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 164
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 145

    (23) parameters -> parameters COMMA parameter .

    COMMA           reduce using rule 23 (parameters -> parameters COMMA parameter .)
    RPAREN          reduce using rule 23 (parameters -> parameters COMMA parameter .)


state 146

    (7) function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations LBRACE statements RBRACE
    (12) var_declarations -> . var_declaration_list
    (13) var_declarations -> . empty
    (14) var_declaration_list -> . var_declaration var_declarations
    (110) empty -> .
    (15) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 110 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 165
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 147

    (59) invocation -> ID invocation_1 LPAREN invocation_2 expressions . RPAREN invocation_5 SEMICOLON invocation_6
    (66) expressions -> expressions . COMMA invocation_4 expression invocation_3

    RPAREN          shift and go to state 166
    COMMA           shift and go to state 167


state 148

    (67) expressions -> expression . invocation_3
    (62) invocation_3 -> . empty
    (110) empty -> .

    RPAREN          reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)

    invocation_3                   shift and go to state 168
    empty                          shift and go to state 169

state 149

    (68) expressions -> empty .

    RPAREN          reduce using rule 68 (expressions -> empty .)
    COMMA           reduce using rule 68 (expressions -> empty .)


state 150

    (22) variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .

    COMMA           reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    TIMES           reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    PLUS            reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    MINUS           reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESS            reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATER         reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    EQUALS          reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    AND             reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    OR              reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RBRACK          reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RPAREN          reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    FROM            reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 22 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)


state 151

    (56) read -> READ LPAREN variable_list . RPAREN SEMICOLON
    (58) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 170
    COMMA           shift and go to state 171


state 152

    (57) variable_list -> variable .

    RPAREN          reduce using rule 57 (variable_list -> variable .)
    COMMA           reduce using rule 57 (variable_list -> variable .)


state 153

    (41) for -> FOR LPAREN ID . for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (42) for_1 -> . empty
    (110) empty -> .

    ASSIGN          reduce using rule 110 (empty -> .)

    for_1                          shift and go to state 172
    empty                          shift and go to state 173

state 154

    (40) do_while -> DO breadcrumb LBRACE . statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (27) statements -> . statements statement
    (28) statements -> . statement
    (29) statements -> . empty
    (30) statement -> . read
    (31) statement -> . for
    (32) statement -> . do_while
    (33) statement -> . while
    (34) statement -> . if_else
    (35) statement -> . invocation
    (36) statement -> . if
    (37) statement -> . assingation
    (38) statement -> . return
    (39) statement -> . print
    (110) empty -> .
    (56) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (41) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (40) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (46) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (51) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (48) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) assingation -> . variable ASSIGN expression SEMICOLON
    (55) return -> . RETURN expression SEMICOLON
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    READ            shift and go to state 117
    FOR             shift and go to state 118
    DO              shift and go to state 120
    WHILE           shift and go to state 121
    IF              shift and go to state 122
    ID              shift and go to state 119
    RETURN          shift and go to state 124
    PRINT           shift and go to state 125

  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! DO              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]

    statements                     shift and go to state 174
    statement                      shift and go to state 105
    empty                          shift and go to state 106
    read                           shift and go to state 107
    for                            shift and go to state 108
    do_while                       shift and go to state 109
    while                          shift and go to state 110
    if_else                        shift and go to state 111
    invocation                     shift and go to state 112
    if                             shift and go to state 113
    assingation                    shift and go to state 114
    return                         shift and go to state 115
    print                          shift and go to state 116
    variable                       shift and go to state 123

state 155

    (46) while -> WHILE breadcrumb LPAREN . open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (49) open_temporal_boolean -> . empty
    (110) empty -> .

    NOT             reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)
    CTEC            reduce using rule 110 (empty -> .)
    CTEB            reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)

    open_temporal_boolean          shift and go to state 175
    empty                          shift and go to state 157

state 156

    (51) if_else -> IF LPAREN open_temporal_boolean . expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (48) if -> IF LPAREN open_temporal_boolean . expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (77) t_expression -> . g_expression
    (78) t_expression -> . t_expression boolean_operator g_expression
    (79) g_expression -> . m_expression
    (80) g_expression -> . g_expression comparison_operator m_expression
    (81) m_expression -> . term
    (82) m_expression -> . m_expression addition_operator term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 53
    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    expression                     shift and go to state 176
    t_expression                   shift and go to state 52
    g_expression                   shift and go to state 54
    m_expression                   shift and go to state 55
    term                           shift and go to state 56
    factor                         shift and go to state 57
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 157

    (49) open_temporal_boolean -> empty .

    NOT             reduce using rule 49 (open_temporal_boolean -> empty .)
    ID              reduce using rule 49 (open_temporal_boolean -> empty .)
    CTEI            reduce using rule 49 (open_temporal_boolean -> empty .)
    CTEF            reduce using rule 49 (open_temporal_boolean -> empty .)
    CTEC            reduce using rule 49 (open_temporal_boolean -> empty .)
    CTEB            reduce using rule 49 (open_temporal_boolean -> empty .)
    LPAREN          reduce using rule 49 (open_temporal_boolean -> empty .)


state 158

    (74) assingation -> variable ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 177


state 159

    (55) return -> RETURN expression SEMICOLON .

    RBRACE          reduce using rule 55 (return -> RETURN expression SEMICOLON .)
    READ            reduce using rule 55 (return -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 55 (return -> RETURN expression SEMICOLON .)
    DO              reduce using rule 55 (return -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 55 (return -> RETURN expression SEMICOLON .)
    IF              reduce using rule 55 (return -> RETURN expression SEMICOLON .)
    ID              reduce using rule 55 (return -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 55 (return -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 55 (return -> RETURN expression SEMICOLON .)


state 160

    (69) print -> PRINT LPAREN print_arguments . RPAREN SEMICOLON
    (71) print_arguments -> print_arguments . COMMA print_argument

    RPAREN          shift and go to state 178
    COMMA           shift and go to state 179


state 161

    (70) print_arguments -> print_argument .

    RPAREN          reduce using rule 70 (print_arguments -> print_argument .)
    COMMA           reduce using rule 70 (print_arguments -> print_argument .)


state 162

    (72) print_argument -> CTES .

    RPAREN          reduce using rule 72 (print_argument -> CTES .)
    COMMA           reduce using rule 72 (print_argument -> CTES .)


state 163

    (73) print_argument -> expression .

    RPAREN          reduce using rule 73 (print_argument -> expression .)
    COMMA           reduce using rule 73 (print_argument -> expression .)


state 164

    (6) function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations . RBRACE statements return_me RBRACE

    RBRACE          shift and go to state 180


state 165

    (7) function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations . LBRACE statements RBRACE

    LBRACE          shift and go to state 181


state 166

    (59) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN . invocation_5 SEMICOLON invocation_6
    (64) invocation_5 -> . empty
    (110) empty -> .

    SEMICOLON       reduce using rule 110 (empty -> .)

    invocation_5                   shift and go to state 182
    empty                          shift and go to state 183

state 167

    (66) expressions -> expressions COMMA . invocation_4 expression invocation_3
    (63) invocation_4 -> . empty
    (110) empty -> .

    NOT             reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    CTEI            reduce using rule 110 (empty -> .)
    CTEF            reduce using rule 110 (empty -> .)
    CTEC            reduce using rule 110 (empty -> .)
    CTEB            reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)

    invocation_4                   shift and go to state 184
    empty                          shift and go to state 185

state 168

    (67) expressions -> expression invocation_3 .

    RPAREN          reduce using rule 67 (expressions -> expression invocation_3 .)
    COMMA           reduce using rule 67 (expressions -> expression invocation_3 .)


state 169

    (62) invocation_3 -> empty .

    RPAREN          reduce using rule 62 (invocation_3 -> empty .)
    COMMA           reduce using rule 62 (invocation_3 -> empty .)


state 170

    (56) read -> READ LPAREN variable_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 186


state 171

    (58) variable_list -> variable_list COMMA . variable
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 35

    variable                       shift and go to state 187

state 172

    (41) for -> FOR LPAREN ID for_1 . ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4

    ASSIGN          shift and go to state 188


state 173

    (42) for_1 -> empty .

    ASSIGN          reduce using rule 42 (for_1 -> empty .)


state 174

    (40) do_while -> DO breadcrumb LBRACE statements . RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (27) statements -> statements . statement
    (30) statement -> . read
    (31) statement -> . for
    (32) statement -> . do_while
    (33) statement -> . while
    (34) statement -> . if_else
    (35) statement -> . invocation
    (36) statement -> . if
    (37) statement -> . assingation
    (38) statement -> . return
    (39) statement -> . print
    (56) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (41) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (40) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (46) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (51) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (48) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) assingation -> . variable ASSIGN expression SEMICOLON
    (55) return -> . RETURN expression SEMICOLON
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 189
    READ            shift and go to state 117
    FOR             shift and go to state 118
    DO              shift and go to state 120
    WHILE           shift and go to state 121
    IF              shift and go to state 122
    ID              shift and go to state 119
    RETURN          shift and go to state 124
    PRINT           shift and go to state 125

    statement                      shift and go to state 134
    read                           shift and go to state 107
    for                            shift and go to state 108
    do_while                       shift and go to state 109
    while                          shift and go to state 110
    if_else                        shift and go to state 111
    invocation                     shift and go to state 112
    if                             shift and go to state 113
    assingation                    shift and go to state 114
    return                         shift and go to state 115
    print                          shift and go to state 116
    variable                       shift and go to state 123

state 175

    (46) while -> WHILE breadcrumb LPAREN open_temporal_boolean . expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (77) t_expression -> . g_expression
    (78) t_expression -> . t_expression boolean_operator g_expression
    (79) g_expression -> . m_expression
    (80) g_expression -> . g_expression comparison_operator m_expression
    (81) m_expression -> . term
    (82) m_expression -> . m_expression addition_operator term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 53
    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    expression                     shift and go to state 190
    t_expression                   shift and go to state 52
    g_expression                   shift and go to state 54
    m_expression                   shift and go to state 55
    term                           shift and go to state 56
    factor                         shift and go to state 57
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 176

    (51) if_else -> IF LPAREN open_temporal_boolean expression . close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (48) if -> IF LPAREN open_temporal_boolean expression . close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) close_temporal_boolean -> . empty
    (110) empty -> .

    RPAREN          reduce using rule 110 (empty -> .)

    close_temporal_boolean         shift and go to state 191
    empty                          shift and go to state 192

state 177

    (74) assingation -> variable ASSIGN expression SEMICOLON .

    RBRACE          reduce using rule 74 (assingation -> variable ASSIGN expression SEMICOLON .)
    READ            reduce using rule 74 (assingation -> variable ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 74 (assingation -> variable ASSIGN expression SEMICOLON .)
    DO              reduce using rule 74 (assingation -> variable ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 74 (assingation -> variable ASSIGN expression SEMICOLON .)
    IF              reduce using rule 74 (assingation -> variable ASSIGN expression SEMICOLON .)
    ID              reduce using rule 74 (assingation -> variable ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 74 (assingation -> variable ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 74 (assingation -> variable ASSIGN expression SEMICOLON .)


state 178

    (69) print -> PRINT LPAREN print_arguments RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 193


state 179

    (71) print_arguments -> print_arguments COMMA . print_argument
    (72) print_argument -> . CTES
    (73) print_argument -> . expression
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (77) t_expression -> . g_expression
    (78) t_expression -> . t_expression boolean_operator g_expression
    (79) g_expression -> . m_expression
    (80) g_expression -> . g_expression comparison_operator m_expression
    (81) m_expression -> . term
    (82) m_expression -> . m_expression addition_operator term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    CTES            shift and go to state 162
    NOT             shift and go to state 53
    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    print_argument                 shift and go to state 194
    expression                     shift and go to state 163
    t_expression                   shift and go to state 52
    g_expression                   shift and go to state 54
    m_expression                   shift and go to state 55
    term                           shift and go to state 56
    factor                         shift and go to state 57
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 180

    (6) function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations RBRACE . statements return_me RBRACE
    (27) statements -> . statements statement
    (28) statements -> . statement
    (29) statements -> . empty
    (30) statement -> . read
    (31) statement -> . for
    (32) statement -> . do_while
    (33) statement -> . while
    (34) statement -> . if_else
    (35) statement -> . invocation
    (36) statement -> . if
    (37) statement -> . assingation
    (38) statement -> . return
    (39) statement -> . print
    (110) empty -> .
    (56) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (41) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (40) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (46) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (51) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (48) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) assingation -> . variable ASSIGN expression SEMICOLON
    (55) return -> . RETURN expression SEMICOLON
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    READ            shift and go to state 117
    FOR             shift and go to state 118
    DO              shift and go to state 120
    WHILE           shift and go to state 121
    IF              shift and go to state 122
    ID              shift and go to state 119
    RETURN          shift and go to state 124
    PRINT           shift and go to state 125

  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! DO              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]

    statements                     shift and go to state 195
    statement                      shift and go to state 105
    empty                          shift and go to state 106
    read                           shift and go to state 107
    for                            shift and go to state 108
    do_while                       shift and go to state 109
    while                          shift and go to state 110
    if_else                        shift and go to state 111
    invocation                     shift and go to state 112
    if                             shift and go to state 113
    assingation                    shift and go to state 114
    return                         shift and go to state 115
    print                          shift and go to state 116
    variable                       shift and go to state 123

state 181

    (7) function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE . statements RBRACE
    (27) statements -> . statements statement
    (28) statements -> . statement
    (29) statements -> . empty
    (30) statement -> . read
    (31) statement -> . for
    (32) statement -> . do_while
    (33) statement -> . while
    (34) statement -> . if_else
    (35) statement -> . invocation
    (36) statement -> . if
    (37) statement -> . assingation
    (38) statement -> . return
    (39) statement -> . print
    (110) empty -> .
    (56) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (41) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (40) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (46) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (51) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (48) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) assingation -> . variable ASSIGN expression SEMICOLON
    (55) return -> . RETURN expression SEMICOLON
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    READ            shift and go to state 117
    FOR             shift and go to state 118
    DO              shift and go to state 120
    WHILE           shift and go to state 121
    IF              shift and go to state 122
    ID              shift and go to state 119
    RETURN          shift and go to state 124
    PRINT           shift and go to state 125

  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! DO              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]

    statements                     shift and go to state 196
    statement                      shift and go to state 105
    empty                          shift and go to state 106
    read                           shift and go to state 107
    for                            shift and go to state 108
    do_while                       shift and go to state 109
    while                          shift and go to state 110
    if_else                        shift and go to state 111
    invocation                     shift and go to state 112
    if                             shift and go to state 113
    assingation                    shift and go to state 114
    return                         shift and go to state 115
    print                          shift and go to state 116
    variable                       shift and go to state 123

state 182

    (59) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 . SEMICOLON invocation_6

    SEMICOLON       shift and go to state 197


state 183

    (64) invocation_5 -> empty .

    SEMICOLON       reduce using rule 64 (invocation_5 -> empty .)


state 184

    (66) expressions -> expressions COMMA invocation_4 . expression invocation_3
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (77) t_expression -> . g_expression
    (78) t_expression -> . t_expression boolean_operator g_expression
    (79) g_expression -> . m_expression
    (80) g_expression -> . g_expression comparison_operator m_expression
    (81) m_expression -> . term
    (82) m_expression -> . m_expression addition_operator term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 53
    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    expression                     shift and go to state 198
    t_expression                   shift and go to state 52
    g_expression                   shift and go to state 54
    m_expression                   shift and go to state 55
    term                           shift and go to state 56
    factor                         shift and go to state 57
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 185

    (63) invocation_4 -> empty .

    NOT             reduce using rule 63 (invocation_4 -> empty .)
    ID              reduce using rule 63 (invocation_4 -> empty .)
    CTEI            reduce using rule 63 (invocation_4 -> empty .)
    CTEF            reduce using rule 63 (invocation_4 -> empty .)
    CTEC            reduce using rule 63 (invocation_4 -> empty .)
    CTEB            reduce using rule 63 (invocation_4 -> empty .)
    LPAREN          reduce using rule 63 (invocation_4 -> empty .)


state 186

    (56) read -> READ LPAREN variable_list RPAREN SEMICOLON .

    RBRACE          reduce using rule 56 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    READ            reduce using rule 56 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    FOR             reduce using rule 56 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    DO              reduce using rule 56 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    WHILE           reduce using rule 56 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    IF              reduce using rule 56 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    ID              reduce using rule 56 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    RETURN          reduce using rule 56 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    PRINT           reduce using rule 56 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)


state 187

    (58) variable_list -> variable_list COMMA variable .

    RPAREN          reduce using rule 58 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 58 (variable_list -> variable_list COMMA variable .)


state 188

    (41) for -> FOR LPAREN ID for_1 ASSIGN . expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (77) t_expression -> . g_expression
    (78) t_expression -> . t_expression boolean_operator g_expression
    (79) g_expression -> . m_expression
    (80) g_expression -> . g_expression comparison_operator m_expression
    (81) m_expression -> . term
    (82) m_expression -> . m_expression addition_operator term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 53
    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    expression                     shift and go to state 199
    t_expression                   shift and go to state 52
    g_expression                   shift and go to state 54
    m_expression                   shift and go to state 55
    term                           shift and go to state 56
    factor                         shift and go to state 57
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 189

    (40) do_while -> DO breadcrumb LBRACE statements RBRACE . WHILE LPAREN expression RPAREN gotot SEMICOLON

    WHILE           shift and go to state 200


state 190

    (46) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression . close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) close_temporal_boolean -> . empty
    (110) empty -> .

    RPAREN          reduce using rule 110 (empty -> .)

    close_temporal_boolean         shift and go to state 201
    empty                          shift and go to state 192

state 191

    (51) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean . RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (48) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean . RPAREN gotof LBRACE statements RBRACE

    RPAREN          shift and go to state 202


state 192

    (50) close_temporal_boolean -> empty .

    RPAREN          reduce using rule 50 (close_temporal_boolean -> empty .)


state 193

    (69) print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .

    RBRACE          reduce using rule 69 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    READ            reduce using rule 69 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    FOR             reduce using rule 69 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    DO              reduce using rule 69 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    WHILE           reduce using rule 69 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    IF              reduce using rule 69 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ID              reduce using rule 69 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    RETURN          reduce using rule 69 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    PRINT           reduce using rule 69 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)


state 194

    (71) print_arguments -> print_arguments COMMA print_argument .

    RPAREN          reduce using rule 71 (print_arguments -> print_arguments COMMA print_argument .)
    COMMA           reduce using rule 71 (print_arguments -> print_arguments COMMA print_argument .)


state 195

    (6) function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations RBRACE statements . return_me RBRACE
    (27) statements -> statements . statement
    (8) return_me -> . empty
    (30) statement -> . read
    (31) statement -> . for
    (32) statement -> . do_while
    (33) statement -> . while
    (34) statement -> . if_else
    (35) statement -> . invocation
    (36) statement -> . if
    (37) statement -> . assingation
    (38) statement -> . return
    (39) statement -> . print
    (110) empty -> .
    (56) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (41) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (40) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (46) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (51) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (48) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) assingation -> . variable ASSIGN expression SEMICOLON
    (55) return -> . RETURN expression SEMICOLON
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          reduce using rule 110 (empty -> .)
    READ            shift and go to state 117
    FOR             shift and go to state 118
    DO              shift and go to state 120
    WHILE           shift and go to state 121
    IF              shift and go to state 122
    ID              shift and go to state 119
    RETURN          shift and go to state 124
    PRINT           shift and go to state 125

    return_me                      shift and go to state 203
    statement                      shift and go to state 134
    empty                          shift and go to state 204
    read                           shift and go to state 107
    for                            shift and go to state 108
    do_while                       shift and go to state 109
    while                          shift and go to state 110
    if_else                        shift and go to state 111
    invocation                     shift and go to state 112
    if                             shift and go to state 113
    assingation                    shift and go to state 114
    return                         shift and go to state 115
    print                          shift and go to state 116
    variable                       shift and go to state 123

state 196

    (7) function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements . RBRACE
    (27) statements -> statements . statement
    (30) statement -> . read
    (31) statement -> . for
    (32) statement -> . do_while
    (33) statement -> . while
    (34) statement -> . if_else
    (35) statement -> . invocation
    (36) statement -> . if
    (37) statement -> . assingation
    (38) statement -> . return
    (39) statement -> . print
    (56) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (41) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (40) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (46) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (51) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (48) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) assingation -> . variable ASSIGN expression SEMICOLON
    (55) return -> . RETURN expression SEMICOLON
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 205
    READ            shift and go to state 117
    FOR             shift and go to state 118
    DO              shift and go to state 120
    WHILE           shift and go to state 121
    IF              shift and go to state 122
    ID              shift and go to state 119
    RETURN          shift and go to state 124
    PRINT           shift and go to state 125

    statement                      shift and go to state 134
    read                           shift and go to state 107
    for                            shift and go to state 108
    do_while                       shift and go to state 109
    while                          shift and go to state 110
    if_else                        shift and go to state 111
    invocation                     shift and go to state 112
    if                             shift and go to state 113
    assingation                    shift and go to state 114
    return                         shift and go to state 115
    print                          shift and go to state 116
    variable                       shift and go to state 123

state 197

    (59) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON . invocation_6
    (65) invocation_6 -> . empty
    (110) empty -> .

    TIMES           reduce using rule 110 (empty -> .)
    DIVIDE          reduce using rule 110 (empty -> .)
    PLUS            reduce using rule 110 (empty -> .)
    MINUS           reduce using rule 110 (empty -> .)
    LESS            reduce using rule 110 (empty -> .)
    GREATER         reduce using rule 110 (empty -> .)
    EQUALS          reduce using rule 110 (empty -> .)
    NOTEQUAL        reduce using rule 110 (empty -> .)
    GREATERTHAN     reduce using rule 110 (empty -> .)
    LESSTHAN        reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    RBRACK          reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)
    SEMICOLON       reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    FROM            reduce using rule 110 (empty -> .)
    RBRACE          reduce using rule 110 (empty -> .)
    READ            reduce using rule 110 (empty -> .)
    FOR             reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    PRINT           reduce using rule 110 (empty -> .)

    invocation_6                   shift and go to state 206
    empty                          shift and go to state 207

state 198

    (66) expressions -> expressions COMMA invocation_4 expression . invocation_3
    (62) invocation_3 -> . empty
    (110) empty -> .

    RPAREN          reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)

    invocation_3                   shift and go to state 208
    empty                          shift and go to state 169

state 199

    (41) for -> FOR LPAREN ID for_1 ASSIGN expression . for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (43) for_2 -> . empty
    (110) empty -> .

    FROM            reduce using rule 110 (empty -> .)

    for_2                          shift and go to state 209
    empty                          shift and go to state 210

state 200

    (40) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE . LPAREN expression RPAREN gotot SEMICOLON

    LPAREN          shift and go to state 211


state 201

    (46) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean . RPAREN gotof LBRACE statements RBRACE

    RPAREN          shift and go to state 212


state 202

    (51) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN . gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (48) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN . gotof LBRACE statements RBRACE
    (54) gotof -> . empty
    (110) empty -> .

    LBRACE          reduce using rule 110 (empty -> .)

    gotof                          shift and go to state 213
    empty                          shift and go to state 214

state 203

    (6) function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations RBRACE statements return_me . RBRACE

    RBRACE          shift and go to state 215


state 204

    (8) return_me -> empty .

    RBRACE          reduce using rule 8 (return_me -> empty .)


state 205

    (7) function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE .

    MAIN            reduce using rule 7 (function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 7 (function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE .)


state 206

    (59) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .

    TIMES           reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DIVIDE          reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PLUS            reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    MINUS           reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESS            reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATER         reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    EQUALS          reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    NOTEQUAL        reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATERTHAN     reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESSTHAN        reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    AND             reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    OR              reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACK          reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RPAREN          reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    SEMICOLON       reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    COMMA           reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    FROM            reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACE          reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    READ            reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    FOR             reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DO              reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    WHILE           reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    IF              reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ID              reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RETURN          reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PRINT           reduce using rule 59 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)


state 207

    (65) invocation_6 -> empty .

    TIMES           reduce using rule 65 (invocation_6 -> empty .)
    DIVIDE          reduce using rule 65 (invocation_6 -> empty .)
    PLUS            reduce using rule 65 (invocation_6 -> empty .)
    MINUS           reduce using rule 65 (invocation_6 -> empty .)
    LESS            reduce using rule 65 (invocation_6 -> empty .)
    GREATER         reduce using rule 65 (invocation_6 -> empty .)
    EQUALS          reduce using rule 65 (invocation_6 -> empty .)
    NOTEQUAL        reduce using rule 65 (invocation_6 -> empty .)
    GREATERTHAN     reduce using rule 65 (invocation_6 -> empty .)
    LESSTHAN        reduce using rule 65 (invocation_6 -> empty .)
    AND             reduce using rule 65 (invocation_6 -> empty .)
    OR              reduce using rule 65 (invocation_6 -> empty .)
    RBRACK          reduce using rule 65 (invocation_6 -> empty .)
    RPAREN          reduce using rule 65 (invocation_6 -> empty .)
    SEMICOLON       reduce using rule 65 (invocation_6 -> empty .)
    COMMA           reduce using rule 65 (invocation_6 -> empty .)
    FROM            reduce using rule 65 (invocation_6 -> empty .)
    RBRACE          reduce using rule 65 (invocation_6 -> empty .)
    READ            reduce using rule 65 (invocation_6 -> empty .)
    FOR             reduce using rule 65 (invocation_6 -> empty .)
    DO              reduce using rule 65 (invocation_6 -> empty .)
    WHILE           reduce using rule 65 (invocation_6 -> empty .)
    IF              reduce using rule 65 (invocation_6 -> empty .)
    ID              reduce using rule 65 (invocation_6 -> empty .)
    RETURN          reduce using rule 65 (invocation_6 -> empty .)
    PRINT           reduce using rule 65 (invocation_6 -> empty .)


state 208

    (66) expressions -> expressions COMMA invocation_4 expression invocation_3 .

    RPAREN          reduce using rule 66 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)
    COMMA           reduce using rule 66 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)


state 209

    (41) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 . FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4

    FROM            shift and go to state 216


state 210

    (43) for_2 -> empty .

    FROM            reduce using rule 43 (for_2 -> empty .)


state 211

    (40) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN . expression RPAREN gotot SEMICOLON
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (77) t_expression -> . g_expression
    (78) t_expression -> . t_expression boolean_operator g_expression
    (79) g_expression -> . m_expression
    (80) g_expression -> . g_expression comparison_operator m_expression
    (81) m_expression -> . term
    (82) m_expression -> . m_expression addition_operator term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 53
    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    expression                     shift and go to state 217
    t_expression                   shift and go to state 52
    g_expression                   shift and go to state 54
    m_expression                   shift and go to state 55
    term                           shift and go to state 56
    factor                         shift and go to state 57
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 212

    (46) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN . gotof LBRACE statements RBRACE
    (54) gotof -> . empty
    (110) empty -> .

    LBRACE          reduce using rule 110 (empty -> .)

    gotof                          shift and go to state 218
    empty                          shift and go to state 214

state 213

    (51) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof . LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (48) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof . LBRACE statements RBRACE

    LBRACE          shift and go to state 219


state 214

    (54) gotof -> empty .

    LBRACE          reduce using rule 54 (gotof -> empty .)


state 215

    (6) function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations RBRACE statements return_me RBRACE .

    MAIN            reduce using rule 6 (function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations RBRACE statements return_me RBRACE .)
    FUNCTION        reduce using rule 6 (function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations RBRACE statements return_me RBRACE .)


state 216

    (41) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM . expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (75) expression -> . t_expression
    (76) expression -> . NOT t_expression
    (77) t_expression -> . g_expression
    (78) t_expression -> . t_expression boolean_operator g_expression
    (79) g_expression -> . m_expression
    (80) g_expression -> . g_expression comparison_operator m_expression
    (81) m_expression -> . term
    (82) m_expression -> . m_expression addition_operator term
    (83) term -> . factor
    (84) term -> . term multiplication_operator factor
    (85) factor -> . variable
    (86) factor -> . cte
    (87) factor -> . expression_parenthesis
    (88) factor -> . invocation
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (106) cte -> . CTEI
    (107) cte -> . CTEF
    (108) cte -> . CTEC
    (109) cte -> . CTEB
    (89) expression_parenthesis -> . LPAREN expression RPAREN
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 53
    ID              shift and go to state 50
    CTEI            shift and go to state 62
    CTEF            shift and go to state 63
    CTEC            shift and go to state 64
    CTEB            shift and go to state 65
    LPAREN          shift and go to state 66

    expression                     shift and go to state 220
    t_expression                   shift and go to state 52
    g_expression                   shift and go to state 54
    m_expression                   shift and go to state 55
    term                           shift and go to state 56
    factor                         shift and go to state 57
    variable                       shift and go to state 58
    cte                            shift and go to state 59
    expression_parenthesis         shift and go to state 60
    invocation                     shift and go to state 61

state 217

    (40) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression . RPAREN gotot SEMICOLON

    RPAREN          shift and go to state 221


state 218

    (46) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof . LBRACE statements RBRACE

    LBRACE          shift and go to state 222


state 219

    (51) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE . statements RBRACE ELSE goto LBRACE statements RBRACE
    (48) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE . statements RBRACE
    (27) statements -> . statements statement
    (28) statements -> . statement
    (29) statements -> . empty
    (30) statement -> . read
    (31) statement -> . for
    (32) statement -> . do_while
    (33) statement -> . while
    (34) statement -> . if_else
    (35) statement -> . invocation
    (36) statement -> . if
    (37) statement -> . assingation
    (38) statement -> . return
    (39) statement -> . print
    (110) empty -> .
    (56) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (41) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (40) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (46) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (51) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (48) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) assingation -> . variable ASSIGN expression SEMICOLON
    (55) return -> . RETURN expression SEMICOLON
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    READ            shift and go to state 117
    FOR             shift and go to state 118
    DO              shift and go to state 120
    WHILE           shift and go to state 121
    IF              shift and go to state 122
    ID              shift and go to state 119
    RETURN          shift and go to state 124
    PRINT           shift and go to state 125

  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! DO              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]

    statements                     shift and go to state 223
    statement                      shift and go to state 105
    empty                          shift and go to state 106
    read                           shift and go to state 107
    for                            shift and go to state 108
    do_while                       shift and go to state 109
    while                          shift and go to state 110
    if_else                        shift and go to state 111
    invocation                     shift and go to state 112
    if                             shift and go to state 113
    assingation                    shift and go to state 114
    return                         shift and go to state 115
    print                          shift and go to state 116
    variable                       shift and go to state 123

state 220

    (41) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression . RPAREN for_3 DO LBRACE statements RBRACE for_4

    RPAREN          shift and go to state 224


state 221

    (40) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN . gotot SEMICOLON
    (52) gotot -> . empty
    (110) empty -> .

    SEMICOLON       reduce using rule 110 (empty -> .)

    gotot                          shift and go to state 225
    empty                          shift and go to state 226

state 222

    (46) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE . statements RBRACE
    (27) statements -> . statements statement
    (28) statements -> . statement
    (29) statements -> . empty
    (30) statement -> . read
    (31) statement -> . for
    (32) statement -> . do_while
    (33) statement -> . while
    (34) statement -> . if_else
    (35) statement -> . invocation
    (36) statement -> . if
    (37) statement -> . assingation
    (38) statement -> . return
    (39) statement -> . print
    (110) empty -> .
    (56) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (41) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (40) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (46) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (51) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (48) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) assingation -> . variable ASSIGN expression SEMICOLON
    (55) return -> . RETURN expression SEMICOLON
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    READ            shift and go to state 117
    FOR             shift and go to state 118
    DO              shift and go to state 120
    WHILE           shift and go to state 121
    IF              shift and go to state 122
    ID              shift and go to state 119
    RETURN          shift and go to state 124
    PRINT           shift and go to state 125

  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! DO              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]

    statements                     shift and go to state 227
    statement                      shift and go to state 105
    empty                          shift and go to state 106
    read                           shift and go to state 107
    for                            shift and go to state 108
    do_while                       shift and go to state 109
    while                          shift and go to state 110
    if_else                        shift and go to state 111
    invocation                     shift and go to state 112
    if                             shift and go to state 113
    assingation                    shift and go to state 114
    return                         shift and go to state 115
    print                          shift and go to state 116
    variable                       shift and go to state 123

state 223

    (51) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements . RBRACE ELSE goto LBRACE statements RBRACE
    (48) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements . RBRACE
    (27) statements -> statements . statement
    (30) statement -> . read
    (31) statement -> . for
    (32) statement -> . do_while
    (33) statement -> . while
    (34) statement -> . if_else
    (35) statement -> . invocation
    (36) statement -> . if
    (37) statement -> . assingation
    (38) statement -> . return
    (39) statement -> . print
    (56) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (41) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (40) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (46) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (51) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (48) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) assingation -> . variable ASSIGN expression SEMICOLON
    (55) return -> . RETURN expression SEMICOLON
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 228
    READ            shift and go to state 117
    FOR             shift and go to state 118
    DO              shift and go to state 120
    WHILE           shift and go to state 121
    IF              shift and go to state 122
    ID              shift and go to state 119
    RETURN          shift and go to state 124
    PRINT           shift and go to state 125

    statement                      shift and go to state 134
    read                           shift and go to state 107
    for                            shift and go to state 108
    do_while                       shift and go to state 109
    while                          shift and go to state 110
    if_else                        shift and go to state 111
    invocation                     shift and go to state 112
    if                             shift and go to state 113
    assingation                    shift and go to state 114
    return                         shift and go to state 115
    print                          shift and go to state 116
    variable                       shift and go to state 123

state 224

    (41) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN . for_3 DO LBRACE statements RBRACE for_4
    (44) for_3 -> . empty
    (110) empty -> .

    DO              reduce using rule 110 (empty -> .)

    for_3                          shift and go to state 229
    empty                          shift and go to state 230

state 225

    (40) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot . SEMICOLON

    SEMICOLON       shift and go to state 231


state 226

    (52) gotot -> empty .

    SEMICOLON       reduce using rule 52 (gotot -> empty .)


state 227

    (46) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements . RBRACE
    (27) statements -> statements . statement
    (30) statement -> . read
    (31) statement -> . for
    (32) statement -> . do_while
    (33) statement -> . while
    (34) statement -> . if_else
    (35) statement -> . invocation
    (36) statement -> . if
    (37) statement -> . assingation
    (38) statement -> . return
    (39) statement -> . print
    (56) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (41) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (40) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (46) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (51) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (48) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) assingation -> . variable ASSIGN expression SEMICOLON
    (55) return -> . RETURN expression SEMICOLON
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 232
    READ            shift and go to state 117
    FOR             shift and go to state 118
    DO              shift and go to state 120
    WHILE           shift and go to state 121
    IF              shift and go to state 122
    ID              shift and go to state 119
    RETURN          shift and go to state 124
    PRINT           shift and go to state 125

    statement                      shift and go to state 134
    read                           shift and go to state 107
    for                            shift and go to state 108
    do_while                       shift and go to state 109
    while                          shift and go to state 110
    if_else                        shift and go to state 111
    invocation                     shift and go to state 112
    if                             shift and go to state 113
    assingation                    shift and go to state 114
    return                         shift and go to state 115
    print                          shift and go to state 116
    variable                       shift and go to state 123

state 228

    (51) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE . ELSE goto LBRACE statements RBRACE
    (48) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .

    ELSE            shift and go to state 233
    RBRACE          reduce using rule 48 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    READ            reduce using rule 48 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    FOR             reduce using rule 48 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    DO              reduce using rule 48 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    WHILE           reduce using rule 48 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    IF              reduce using rule 48 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    ID              reduce using rule 48 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    RETURN          reduce using rule 48 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    PRINT           reduce using rule 48 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)


state 229

    (41) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 . DO LBRACE statements RBRACE for_4

    DO              shift and go to state 234


state 230

    (44) for_3 -> empty .

    DO              reduce using rule 44 (for_3 -> empty .)


state 231

    (40) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .

    RBRACE          reduce using rule 40 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    READ            reduce using rule 40 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    FOR             reduce using rule 40 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    DO              reduce using rule 40 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    WHILE           reduce using rule 40 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    IF              reduce using rule 40 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ID              reduce using rule 40 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    RETURN          reduce using rule 40 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    PRINT           reduce using rule 40 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)


state 232

    (46) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .

    RBRACE          reduce using rule 46 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    READ            reduce using rule 46 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    FOR             reduce using rule 46 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    DO              reduce using rule 46 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    WHILE           reduce using rule 46 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    IF              reduce using rule 46 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    ID              reduce using rule 46 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    RETURN          reduce using rule 46 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    PRINT           reduce using rule 46 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)


state 233

    (51) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE . goto LBRACE statements RBRACE
    (53) goto -> . empty
    (110) empty -> .

    LBRACE          reduce using rule 110 (empty -> .)

    goto                           shift and go to state 235
    empty                          shift and go to state 236

state 234

    (41) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO . LBRACE statements RBRACE for_4

    LBRACE          shift and go to state 237


state 235

    (51) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto . LBRACE statements RBRACE

    LBRACE          shift and go to state 238


state 236

    (53) goto -> empty .

    LBRACE          reduce using rule 53 (goto -> empty .)


state 237

    (41) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE . statements RBRACE for_4
    (27) statements -> . statements statement
    (28) statements -> . statement
    (29) statements -> . empty
    (30) statement -> . read
    (31) statement -> . for
    (32) statement -> . do_while
    (33) statement -> . while
    (34) statement -> . if_else
    (35) statement -> . invocation
    (36) statement -> . if
    (37) statement -> . assingation
    (38) statement -> . return
    (39) statement -> . print
    (110) empty -> .
    (56) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (41) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (40) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (46) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (51) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (48) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) assingation -> . variable ASSIGN expression SEMICOLON
    (55) return -> . RETURN expression SEMICOLON
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    READ            shift and go to state 117
    FOR             shift and go to state 118
    DO              shift and go to state 120
    WHILE           shift and go to state 121
    IF              shift and go to state 122
    ID              shift and go to state 119
    RETURN          shift and go to state 124
    PRINT           shift and go to state 125

  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! DO              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]

    statements                     shift and go to state 239
    statement                      shift and go to state 105
    empty                          shift and go to state 106
    read                           shift and go to state 107
    for                            shift and go to state 108
    do_while                       shift and go to state 109
    while                          shift and go to state 110
    if_else                        shift and go to state 111
    invocation                     shift and go to state 112
    if                             shift and go to state 113
    assingation                    shift and go to state 114
    return                         shift and go to state 115
    print                          shift and go to state 116
    variable                       shift and go to state 123

state 238

    (51) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE . statements RBRACE
    (27) statements -> . statements statement
    (28) statements -> . statement
    (29) statements -> . empty
    (30) statement -> . read
    (31) statement -> . for
    (32) statement -> . do_while
    (33) statement -> . while
    (34) statement -> . if_else
    (35) statement -> . invocation
    (36) statement -> . if
    (37) statement -> . assingation
    (38) statement -> . return
    (39) statement -> . print
    (110) empty -> .
    (56) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (41) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (40) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (46) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (51) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (48) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) assingation -> . variable ASSIGN expression SEMICOLON
    (55) return -> . RETURN expression SEMICOLON
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    READ            shift and go to state 117
    FOR             shift and go to state 118
    DO              shift and go to state 120
    WHILE           shift and go to state 121
    IF              shift and go to state 122
    ID              shift and go to state 119
    RETURN          shift and go to state 124
    PRINT           shift and go to state 125

  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! DO              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]

    statements                     shift and go to state 240
    statement                      shift and go to state 105
    empty                          shift and go to state 106
    read                           shift and go to state 107
    for                            shift and go to state 108
    do_while                       shift and go to state 109
    while                          shift and go to state 110
    if_else                        shift and go to state 111
    invocation                     shift and go to state 112
    if                             shift and go to state 113
    assingation                    shift and go to state 114
    return                         shift and go to state 115
    print                          shift and go to state 116
    variable                       shift and go to state 123

state 239

    (41) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements . RBRACE for_4
    (27) statements -> statements . statement
    (30) statement -> . read
    (31) statement -> . for
    (32) statement -> . do_while
    (33) statement -> . while
    (34) statement -> . if_else
    (35) statement -> . invocation
    (36) statement -> . if
    (37) statement -> . assingation
    (38) statement -> . return
    (39) statement -> . print
    (56) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (41) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (40) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (46) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (51) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (48) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) assingation -> . variable ASSIGN expression SEMICOLON
    (55) return -> . RETURN expression SEMICOLON
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 241
    READ            shift and go to state 117
    FOR             shift and go to state 118
    DO              shift and go to state 120
    WHILE           shift and go to state 121
    IF              shift and go to state 122
    ID              shift and go to state 119
    RETURN          shift and go to state 124
    PRINT           shift and go to state 125

    statement                      shift and go to state 134
    read                           shift and go to state 107
    for                            shift and go to state 108
    do_while                       shift and go to state 109
    while                          shift and go to state 110
    if_else                        shift and go to state 111
    invocation                     shift and go to state 112
    if                             shift and go to state 113
    assingation                    shift and go to state 114
    return                         shift and go to state 115
    print                          shift and go to state 116
    variable                       shift and go to state 123

state 240

    (51) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements . RBRACE
    (27) statements -> statements . statement
    (30) statement -> . read
    (31) statement -> . for
    (32) statement -> . do_while
    (33) statement -> . while
    (34) statement -> . if_else
    (35) statement -> . invocation
    (36) statement -> . if
    (37) statement -> . assingation
    (38) statement -> . return
    (39) statement -> . print
    (56) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (41) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (40) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (46) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (51) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (59) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (48) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) assingation -> . variable ASSIGN expression SEMICOLON
    (55) return -> . RETURN expression SEMICOLON
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (20) variable -> . ID
    (21) variable -> . ID LBRACK expression RBRACK
    (22) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 242
    READ            shift and go to state 117
    FOR             shift and go to state 118
    DO              shift and go to state 120
    WHILE           shift and go to state 121
    IF              shift and go to state 122
    ID              shift and go to state 119
    RETURN          shift and go to state 124
    PRINT           shift and go to state 125

    statement                      shift and go to state 134
    read                           shift and go to state 107
    for                            shift and go to state 108
    do_while                       shift and go to state 109
    while                          shift and go to state 110
    if_else                        shift and go to state 111
    invocation                     shift and go to state 112
    if                             shift and go to state 113
    assingation                    shift and go to state 114
    return                         shift and go to state 115
    print                          shift and go to state 116
    variable                       shift and go to state 123

state 241

    (41) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE . for_4
    (45) for_4 -> . empty
    (110) empty -> .

    RBRACE          reduce using rule 110 (empty -> .)
    READ            reduce using rule 110 (empty -> .)
    FOR             reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    PRINT           reduce using rule 110 (empty -> .)

    for_4                          shift and go to state 243
    empty                          shift and go to state 244

state 242

    (51) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .

    RBRACE          reduce using rule 51 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    READ            reduce using rule 51 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    FOR             reduce using rule 51 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    DO              reduce using rule 51 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    WHILE           reduce using rule 51 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    IF              reduce using rule 51 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    ID              reduce using rule 51 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    RETURN          reduce using rule 51 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    PRINT           reduce using rule 51 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)


state 243

    (41) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .

    RBRACE          reduce using rule 41 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    READ            reduce using rule 41 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    FOR             reduce using rule 41 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    DO              reduce using rule 41 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    WHILE           reduce using rule 41 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    IF              reduce using rule 41 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    ID              reduce using rule 41 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    RETURN          reduce using rule 41 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    PRINT           reduce using rule 41 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)


state 244

    (45) for_4 -> empty .

    RBRACE          reduce using rule 45 (for_4 -> empty .)
    READ            reduce using rule 45 (for_4 -> empty .)
    FOR             reduce using rule 45 (for_4 -> empty .)
    DO              reduce using rule 45 (for_4 -> empty .)
    WHILE           reduce using rule 45 (for_4 -> empty .)
    IF              reduce using rule 45 (for_4 -> empty .)
    ID              reduce using rule 45 (for_4 -> empty .)
    RETURN          reduce using rule 45 (for_4 -> empty .)
    PRINT           reduce using rule 45 (for_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 7 resolved as shift
WARNING: shift/reduce conflict for READ in state 91 resolved as shift
WARNING: shift/reduce conflict for FOR in state 91 resolved as shift
WARNING: shift/reduce conflict for DO in state 91 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 91 resolved as shift
WARNING: shift/reduce conflict for IF in state 91 resolved as shift
WARNING: shift/reduce conflict for ID in state 91 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 91 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 91 resolved as shift
WARNING: shift/reduce conflict for READ in state 154 resolved as shift
WARNING: shift/reduce conflict for FOR in state 154 resolved as shift
WARNING: shift/reduce conflict for DO in state 154 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 154 resolved as shift
WARNING: shift/reduce conflict for IF in state 154 resolved as shift
WARNING: shift/reduce conflict for ID in state 154 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 154 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 154 resolved as shift
WARNING: shift/reduce conflict for READ in state 180 resolved as shift
WARNING: shift/reduce conflict for FOR in state 180 resolved as shift
WARNING: shift/reduce conflict for DO in state 180 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 180 resolved as shift
WARNING: shift/reduce conflict for IF in state 180 resolved as shift
WARNING: shift/reduce conflict for ID in state 180 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 180 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 180 resolved as shift
WARNING: shift/reduce conflict for READ in state 181 resolved as shift
WARNING: shift/reduce conflict for FOR in state 181 resolved as shift
WARNING: shift/reduce conflict for DO in state 181 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 181 resolved as shift
WARNING: shift/reduce conflict for IF in state 181 resolved as shift
WARNING: shift/reduce conflict for ID in state 181 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 181 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 181 resolved as shift
WARNING: shift/reduce conflict for READ in state 219 resolved as shift
WARNING: shift/reduce conflict for FOR in state 219 resolved as shift
WARNING: shift/reduce conflict for DO in state 219 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 219 resolved as shift
WARNING: shift/reduce conflict for IF in state 219 resolved as shift
WARNING: shift/reduce conflict for ID in state 219 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 219 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 219 resolved as shift
WARNING: shift/reduce conflict for READ in state 222 resolved as shift
WARNING: shift/reduce conflict for FOR in state 222 resolved as shift
WARNING: shift/reduce conflict for DO in state 222 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 222 resolved as shift
WARNING: shift/reduce conflict for IF in state 222 resolved as shift
WARNING: shift/reduce conflict for ID in state 222 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 222 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 222 resolved as shift
WARNING: shift/reduce conflict for READ in state 237 resolved as shift
WARNING: shift/reduce conflict for FOR in state 237 resolved as shift
WARNING: shift/reduce conflict for DO in state 237 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 237 resolved as shift
WARNING: shift/reduce conflict for IF in state 237 resolved as shift
WARNING: shift/reduce conflict for ID in state 237 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 237 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 237 resolved as shift
WARNING: shift/reduce conflict for READ in state 238 resolved as shift
WARNING: shift/reduce conflict for FOR in state 238 resolved as shift
WARNING: shift/reduce conflict for DO in state 238 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 238 resolved as shift
WARNING: shift/reduce conflict for IF in state 238 resolved as shift
WARNING: shift/reduce conflict for ID in state 238 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 238 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 238 resolved as shift
