Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMENT
    THEN

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END
Rule 2     global_scope -> empty
Rule 3     functions -> functions function
Rule 4     functions -> function
Rule 5     functions -> empty
Rule 6     function -> FUNCTION function_signature block
Rule 7     function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
Rule 8     function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
Rule 9     return -> RETURN expressions SEMICOLON
Rule 10    function_1 -> empty
Rule 11    main -> MAIN LPAREN RPAREN main_scope var_declarations block
Rule 12    main_scope -> empty
Rule 13    var_declarations -> var_declaration_list
Rule 14    var_declarations -> empty
Rule 15    var_declaration_list -> var_declaration var_declarations
Rule 16    var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration
Rule 17    open_var_declaration -> empty
Rule 18    close_var_declaration -> empty
Rule 19    variables -> variable
Rule 20    variables -> variable COMMA variables
Rule 21    variable -> ID
Rule 22    variable -> ID LBRACK expression RBRACK
Rule 23    variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK
Rule 24    parameters -> parameters COMMA parameter
Rule 25    parameters -> parameter
Rule 26    parameters -> empty
Rule 27    parameter -> simple_type ID
Rule 28    block -> LBRACE block2 RBRACE
Rule 29    block2 -> block3
Rule 30    block2 -> empty
Rule 31    block3 -> statement block2
Rule 32    statement -> special_func
Rule 33    statement -> assingation
Rule 34    statement -> for
Rule 35    statement -> do_while
Rule 36    statement -> while
Rule 37    statement -> if_else
Rule 38    statement -> invocation
Rule 39    statement -> if
Rule 40    statement -> print
Rule 41    statement -> read
Rule 42    special_func -> gen_key
Rule 43    special_func -> encrypt
Rule 44    special_func -> decrypt
Rule 45    special_func -> sha_256
Rule 46    special_func -> random_salt
Rule 47    special_func -> hmac
Rule 48    hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
Rule 49    random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON
Rule 50    sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON
Rule 51    gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON
Rule 52    encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
Rule 53    decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
Rule 54    read -> READ LPAREN ID RPAREN SEMICOLON
Rule 55    assing_to_call -> variable ASSIGN invocation
Rule 56    do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
Rule 57    for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
Rule 58    for_1 -> empty
Rule 59    for_2 -> empty
Rule 60    for_3 -> empty
Rule 61    for_4 -> empty
Rule 62    while -> WHILE breadcrumb LPAREN expression RPAREN gotof block
Rule 63    breadcrumb -> empty
Rule 64    if -> IF LPAREN expression RPAREN gotof block
Rule 65    if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block
Rule 66    gotot -> empty
Rule 67    goto -> empty
Rule 68    gotof -> empty
Rule 69    variable_list -> variable
Rule 70    variable_list -> variable_list COMMA variable
Rule 71    invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
Rule 72    invocation_1 -> empty
Rule 73    invocation_2 -> empty
Rule 74    invocation_3 -> empty
Rule 75    invocation_4 -> empty
Rule 76    invocation_5 -> empty
Rule 77    invocation_6 -> empty
Rule 78    expressions -> expressions COMMA invocation_4 expression invocation_3
Rule 79    expressions -> expression invocation_3
Rule 80    expressions -> empty
Rule 81    expression -> t_expression
Rule 82    expression -> NOT t_expression
Rule 83    print -> PRINT LPAREN print_arguments RPAREN SEMICOLON
Rule 84    print_arguments -> print_argument
Rule 85    print_arguments -> print_arguments COMMA print_argument
Rule 86    print_argument -> CTES
Rule 87    print_argument -> expression
Rule 88    assingation -> variable ASSIGN expression SEMICOLON
Rule 89    t_expression -> g_expression
Rule 90    t_expression -> t_expression boolean_operator g_expression
Rule 91    g_expression -> m_expression
Rule 92    g_expression -> g_expression comparison_operator m_expression
Rule 93    m_expression -> term
Rule 94    m_expression -> m_expression addition_operator term
Rule 95    term -> factor
Rule 96    term -> term multiplication_operator factor
Rule 97    factor -> variable
Rule 98    factor -> cte
Rule 99    factor -> invocation
Rule 100   factor -> expression_parenthesis
Rule 101   expression_parenthesis -> LPAREN expression RPAREN
Rule 102   comparison_operator -> LESS
Rule 103   comparison_operator -> GREATER
Rule 104   comparison_operator -> EQUALS
Rule 105   comparison_operator -> NOTEQUAL
Rule 106   comparison_operator -> GREATERTHAN
Rule 107   comparison_operator -> LESSTHAN
Rule 108   addition_operator -> PLUS
Rule 109   addition_operator -> MINUS
Rule 110   boolean_operator -> AND
Rule 111   boolean_operator -> OR
Rule 112   multiplication_operator -> TIMES
Rule 113   multiplication_operator -> DIVIDE
Rule 114   simple_type -> INT
Rule 115   simple_type -> FLOAT
Rule 116   simple_type -> CHAR
Rule 117   simple_type -> BOOLEAN
Rule 118   simple_type -> STRING
Rule 119   cte -> CTEI
Rule 120   cte -> CTEF
Rule 121   cte -> CTEC
Rule 122   cte -> CTEB
Rule 123   cte -> CTES
Rule 124   empty -> <empty>

Terminals, with rules where they appear

AND                  : 110
ASSIGN               : 55 57 88
BOOLEAN              : 117
CHAR                 : 116
COLON                : 
COMMA                : 20 24 48 52 53 70 78 85
COMMENT              : 
CTEB                 : 122
CTEC                 : 121
CTEF                 : 120
CTEI                 : 49 119
CTES                 : 86 123
DECRYPT              : 53
DIVIDE               : 113
DO                   : 56 57
ELSE                 : 65
ENCRYPT              : 52
END                  : 1
EQUALS               : 104
FLOAT                : 115
FOR                  : 57
FROM                 : 57
FUNCTION             : 6
GENKEY               : 51
GREATER              : 103
GREATERTHAN          : 106
HMAC                 : 48
ID                   : 1 7 8 21 22 23 27 48 48 48 49 50 50 51 52 52 52 53 53 53 54 57 71
IF                   : 64 65
INT                  : 114
LBRACE               : 28
LBRACK               : 22 23 23
LESS                 : 102
LESSTHAN             : 107
LPAREN               : 7 8 11 48 49 50 51 52 53 54 56 57 62 64 65 71 83 101
MAIN                 : 11
MINUS                : 109
NOT                  : 82
NOTEQUAL             : 105
OR                   : 111
PLUS                 : 108
PRINT                : 83
PROGRAM              : 1
RANDOM_SALT          : 49
RBRACE               : 28
RBRACK               : 22 23 23
READ                 : 54
RETURN               : 9
RPAREN               : 7 8 11 48 49 50 51 52 53 54 56 57 62 64 65 71 83 101
SEMICOLON            : 1 9 16 48 49 50 51 52 53 54 56 71 83 88
SHA_256              : 50
SPECIAL              : 48 49 50 51 52 53
STRING               : 118
THEN                 : 
TIMES                : 112
VARIABLE             : 16
VOID                 : 8
WHILE                : 56 62
error                : 

Nonterminals, with rules where they appear

addition_operator    : 94
assing_to_call       : 
assingation          : 33
block                : 6 11 56 57 62 64 65 65
block2               : 28 31
block3               : 29
boolean_operator     : 90
breadcrumb           : 56 62
close_var_declaration : 7 8 16
comparison_operator  : 92
cte                  : 98
decrypt              : 44
do_while             : 35
empty                : 2 5 10 12 14 17 18 26 30 58 59 60 61 63 66 67 68 72 73 74 75 76 77 80
encrypt              : 43
expression           : 22 23 23 56 57 57 62 64 65 78 79 87 88 101
expression_parenthesis : 100
expressions          : 9 71 78
factor               : 95 96
for                  : 34
for_1                : 57
for_2                : 57
for_3                : 57
for_4                : 57
function             : 3 4
function_1           : 7 8
function_signature   : 6
functions            : 1 3
g_expression         : 89 90 92
gen_key              : 42
global_scope         : 1
goto                 : 65
gotof                : 62 64 65
gotot                : 56
hmac                 : 47
if                   : 39
if_else              : 37
invocation           : 38 55 99
invocation_1         : 71
invocation_2         : 71
invocation_3         : 78 79
invocation_4         : 78
invocation_5         : 71
invocation_6         : 71
m_expression         : 91 92 94
main                 : 1
main_scope           : 11
multiplication_operator : 96
open_var_declaration : 7 8 16
parameter            : 24 25
parameters           : 7 8 24
print                : 40
print_argument       : 84 85
print_arguments      : 83 85
program              : 0
random_salt          : 46
read                 : 41
return               : 
sha_256              : 45
simple_type          : 7 16 27
special_func         : 32
statement            : 31
t_expression         : 81 82 90
term                 : 93 94 96
var_declaration      : 15
var_declaration_list : 13
var_declarations     : 1 7 8 11 15
variable             : 19 20 55 69 70 88 97
variable_list        : 70
variables            : 16 20
while                : 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON global_scope var_declarations functions main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON global_scope var_declarations functions main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON global_scope var_declarations functions main END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . global_scope var_declarations functions main END
    (2) global_scope -> . empty
    (124) empty -> .

    VARIABLE        reduce using rule 124 (empty -> .)
    FUNCTION        reduce using rule 124 (empty -> .)
    MAIN            reduce using rule 124 (empty -> .)

    global_scope                   shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON global_scope . var_declarations functions main END
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (124) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 124 (empty -> .)
    MAIN            reduce using rule 124 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 7
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 6

    (2) global_scope -> empty .

    VARIABLE        reduce using rule 2 (global_scope -> empty .)
    FUNCTION        reduce using rule 2 (global_scope -> empty .)
    MAIN            reduce using rule 2 (global_scope -> empty .)


state 7

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations . functions main END
    (3) functions -> . functions function
    (4) functions -> . function
    (5) functions -> . empty
    (6) function -> . FUNCTION function_signature block
    (124) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 124 (empty -> .)

  ! FUNCTION        [ reduce using rule 124 (empty -> .) ]

    functions                      shift and go to state 12
    function                       shift and go to state 13
    empty                          shift and go to state 14

state 8

    (13) var_declarations -> var_declaration_list .

    FUNCTION        reduce using rule 13 (var_declarations -> var_declaration_list .)
    MAIN            reduce using rule 13 (var_declarations -> var_declaration_list .)
    LBRACE          reduce using rule 13 (var_declarations -> var_declaration_list .)


state 9

    (14) var_declarations -> empty .

    FUNCTION        reduce using rule 14 (var_declarations -> empty .)
    MAIN            reduce using rule 14 (var_declarations -> empty .)
    LBRACE          reduce using rule 14 (var_declarations -> empty .)


state 10

    (15) var_declaration_list -> var_declaration . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (124) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 124 (empty -> .)
    MAIN            reduce using rule 124 (empty -> .)
    LBRACE          reduce using rule 124 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declaration                shift and go to state 10
    var_declarations               shift and go to state 16
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9

state 11

    (16) var_declaration -> VARIABLE . open_var_declaration simple_type variables SEMICOLON close_var_declaration
    (17) open_var_declaration -> . empty
    (124) empty -> .

    INT             reduce using rule 124 (empty -> .)
    FLOAT           reduce using rule 124 (empty -> .)
    CHAR            reduce using rule 124 (empty -> .)
    BOOLEAN         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    open_var_declaration           shift and go to state 17
    empty                          shift and go to state 18

state 12

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions . main END
    (3) functions -> functions . function
    (11) main -> . MAIN LPAREN RPAREN main_scope var_declarations block
    (6) function -> . FUNCTION function_signature block

    MAIN            shift and go to state 21
    FUNCTION        shift and go to state 15

    main                           shift and go to state 19
    function                       shift and go to state 20

state 13

    (4) functions -> function .

    MAIN            reduce using rule 4 (functions -> function .)
    FUNCTION        reduce using rule 4 (functions -> function .)


state 14

    (5) functions -> empty .

    MAIN            reduce using rule 5 (functions -> empty .)
    FUNCTION        reduce using rule 5 (functions -> empty .)


state 15

    (6) function -> FUNCTION . function_signature block
    (7) function_signature -> . simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (8) function_signature -> . VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (114) simple_type -> . INT
    (115) simple_type -> . FLOAT
    (116) simple_type -> . CHAR
    (117) simple_type -> . BOOLEAN
    (118) simple_type -> . STRING

    VOID            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    function_signature             shift and go to state 22
    simple_type                    shift and go to state 23

state 16

    (15) var_declaration_list -> var_declaration var_declarations .

    FUNCTION        reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)
    MAIN            reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)
    LBRACE          reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)


state 17

    (16) var_declaration -> VARIABLE open_var_declaration . simple_type variables SEMICOLON close_var_declaration
    (114) simple_type -> . INT
    (115) simple_type -> . FLOAT
    (116) simple_type -> . CHAR
    (117) simple_type -> . BOOLEAN
    (118) simple_type -> . STRING

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    simple_type                    shift and go to state 30

state 18

    (17) open_var_declaration -> empty .

    INT             reduce using rule 17 (open_var_declaration -> empty .)
    FLOAT           reduce using rule 17 (open_var_declaration -> empty .)
    CHAR            reduce using rule 17 (open_var_declaration -> empty .)
    BOOLEAN         reduce using rule 17 (open_var_declaration -> empty .)
    STRING          reduce using rule 17 (open_var_declaration -> empty .)
    COMMA           reduce using rule 17 (open_var_declaration -> empty .)
    RPAREN          reduce using rule 17 (open_var_declaration -> empty .)


state 19

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main . END

    END             shift and go to state 31


state 20

    (3) functions -> functions function .

    MAIN            reduce using rule 3 (functions -> functions function .)
    FUNCTION        reduce using rule 3 (functions -> functions function .)


state 21

    (11) main -> MAIN . LPAREN RPAREN main_scope var_declarations block

    LPAREN          shift and go to state 32


state 22

    (6) function -> FUNCTION function_signature . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 33

state 23

    (7) function_signature -> simple_type . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    ID              shift and go to state 35


state 24

    (8) function_signature -> VOID . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    ID              shift and go to state 36


state 25

    (114) simple_type -> INT .

    ID              reduce using rule 114 (simple_type -> INT .)


state 26

    (115) simple_type -> FLOAT .

    ID              reduce using rule 115 (simple_type -> FLOAT .)


state 27

    (116) simple_type -> CHAR .

    ID              reduce using rule 116 (simple_type -> CHAR .)


state 28

    (117) simple_type -> BOOLEAN .

    ID              reduce using rule 117 (simple_type -> BOOLEAN .)


state 29

    (118) simple_type -> STRING .

    ID              reduce using rule 118 (simple_type -> STRING .)


state 30

    (16) var_declaration -> VARIABLE open_var_declaration simple_type . variables SEMICOLON close_var_declaration
    (19) variables -> . variable
    (20) variables -> . variable COMMA variables
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 39

    variables                      shift and go to state 37
    variable                       shift and go to state 38

state 31

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .)


state 32

    (11) main -> MAIN LPAREN . RPAREN main_scope var_declarations block

    RPAREN          shift and go to state 40


state 33

    (6) function -> FUNCTION function_signature block .

    MAIN            reduce using rule 6 (function -> FUNCTION function_signature block .)
    FUNCTION        reduce using rule 6 (function -> FUNCTION function_signature block .)


state 34

    (28) block -> LBRACE . block2 RBRACE
    (29) block2 -> . block3
    (30) block2 -> . empty
    (31) block3 -> . statement block2
    (124) empty -> .
    (32) statement -> . special_func
    (33) statement -> . assingation
    (34) statement -> . for
    (35) statement -> . do_while
    (36) statement -> . while
    (37) statement -> . if_else
    (38) statement -> . invocation
    (39) statement -> . if
    (40) statement -> . print
    (41) statement -> . read
    (42) special_func -> . gen_key
    (43) special_func -> . encrypt
    (44) special_func -> . decrypt
    (45) special_func -> . sha_256
    (46) special_func -> . random_salt
    (47) special_func -> . hmac
    (88) assingation -> . variable ASSIGN expression SEMICOLON
    (57) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (56) do_while -> . DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (62) while -> . WHILE breadcrumb LPAREN expression RPAREN gotof block
    (65) if_else -> . IF LPAREN expression RPAREN gotof block ELSE goto block
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (64) if -> . IF LPAREN expression RPAREN gotof block
    (83) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (54) read -> . READ LPAREN ID RPAREN SEMICOLON
    (51) gen_key -> . GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON
    (52) encrypt -> . ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (53) decrypt -> . DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (50) sha_256 -> . SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON
    (49) random_salt -> . RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON
    (48) hmac -> . HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          reduce using rule 124 (empty -> .)
    FOR             shift and go to state 62
    DO              shift and go to state 64
    WHILE           shift and go to state 65
    IF              shift and go to state 66
    ID              shift and go to state 63
    PRINT           shift and go to state 67
    READ            shift and go to state 68
    GENKEY          shift and go to state 69
    ENCRYPT         shift and go to state 70
    DECRYPT         shift and go to state 71
    SHA_256         shift and go to state 72
    RANDOM_SALT     shift and go to state 73
    HMAC            shift and go to state 74

    block2                         shift and go to state 41
    block3                         shift and go to state 42
    empty                          shift and go to state 43
    statement                      shift and go to state 44
    special_func                   shift and go to state 45
    assingation                    shift and go to state 46
    for                            shift and go to state 47
    do_while                       shift and go to state 48
    while                          shift and go to state 49
    if_else                        shift and go to state 50
    invocation                     shift and go to state 51
    if                             shift and go to state 52
    print                          shift and go to state 53
    read                           shift and go to state 54
    gen_key                        shift and go to state 55
    encrypt                        shift and go to state 56
    decrypt                        shift and go to state 57
    sha_256                        shift and go to state 58
    random_salt                    shift and go to state 59
    hmac                           shift and go to state 60
    variable                       shift and go to state 61

state 35

    (7) function_signature -> simple_type ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (10) function_1 -> . empty
    (124) empty -> .

    LPAREN          reduce using rule 124 (empty -> .)

    function_1                     shift and go to state 75
    empty                          shift and go to state 76

state 36

    (8) function_signature -> VOID ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (10) function_1 -> . empty
    (124) empty -> .

    LPAREN          reduce using rule 124 (empty -> .)

    function_1                     shift and go to state 77
    empty                          shift and go to state 76

state 37

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables . SEMICOLON close_var_declaration

    SEMICOLON       shift and go to state 78


state 38

    (19) variables -> variable .
    (20) variables -> variable . COMMA variables

    SEMICOLON       reduce using rule 19 (variables -> variable .)
    COMMA           shift and go to state 79


state 39

    (21) variable -> ID .
    (22) variable -> ID . LBRACK expression RBRACK
    (23) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK

    COMMA           reduce using rule 21 (variable -> ID .)
    SEMICOLON       reduce using rule 21 (variable -> ID .)
    LBRACK          shift and go to state 80


state 40

    (11) main -> MAIN LPAREN RPAREN . main_scope var_declarations block
    (12) main_scope -> . empty
    (124) empty -> .

    VARIABLE        reduce using rule 124 (empty -> .)
    LBRACE          reduce using rule 124 (empty -> .)

    main_scope                     shift and go to state 81
    empty                          shift and go to state 82

state 41

    (28) block -> LBRACE block2 . RBRACE

    RBRACE          shift and go to state 83


state 42

    (29) block2 -> block3 .

    RBRACE          reduce using rule 29 (block2 -> block3 .)


state 43

    (30) block2 -> empty .

    RBRACE          reduce using rule 30 (block2 -> empty .)


state 44

    (31) block3 -> statement . block2
    (29) block2 -> . block3
    (30) block2 -> . empty
    (31) block3 -> . statement block2
    (124) empty -> .
    (32) statement -> . special_func
    (33) statement -> . assingation
    (34) statement -> . for
    (35) statement -> . do_while
    (36) statement -> . while
    (37) statement -> . if_else
    (38) statement -> . invocation
    (39) statement -> . if
    (40) statement -> . print
    (41) statement -> . read
    (42) special_func -> . gen_key
    (43) special_func -> . encrypt
    (44) special_func -> . decrypt
    (45) special_func -> . sha_256
    (46) special_func -> . random_salt
    (47) special_func -> . hmac
    (88) assingation -> . variable ASSIGN expression SEMICOLON
    (57) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (56) do_while -> . DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (62) while -> . WHILE breadcrumb LPAREN expression RPAREN gotof block
    (65) if_else -> . IF LPAREN expression RPAREN gotof block ELSE goto block
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (64) if -> . IF LPAREN expression RPAREN gotof block
    (83) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (54) read -> . READ LPAREN ID RPAREN SEMICOLON
    (51) gen_key -> . GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON
    (52) encrypt -> . ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (53) decrypt -> . DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (50) sha_256 -> . SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON
    (49) random_salt -> . RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON
    (48) hmac -> . HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          reduce using rule 124 (empty -> .)
    FOR             shift and go to state 62
    DO              shift and go to state 64
    WHILE           shift and go to state 65
    IF              shift and go to state 66
    ID              shift and go to state 63
    PRINT           shift and go to state 67
    READ            shift and go to state 68
    GENKEY          shift and go to state 69
    ENCRYPT         shift and go to state 70
    DECRYPT         shift and go to state 71
    SHA_256         shift and go to state 72
    RANDOM_SALT     shift and go to state 73
    HMAC            shift and go to state 74

    statement                      shift and go to state 44
    block2                         shift and go to state 84
    block3                         shift and go to state 42
    empty                          shift and go to state 43
    special_func                   shift and go to state 45
    assingation                    shift and go to state 46
    for                            shift and go to state 47
    do_while                       shift and go to state 48
    while                          shift and go to state 49
    if_else                        shift and go to state 50
    invocation                     shift and go to state 51
    if                             shift and go to state 52
    print                          shift and go to state 53
    read                           shift and go to state 54
    gen_key                        shift and go to state 55
    encrypt                        shift and go to state 56
    decrypt                        shift and go to state 57
    sha_256                        shift and go to state 58
    random_salt                    shift and go to state 59
    hmac                           shift and go to state 60
    variable                       shift and go to state 61

state 45

    (32) statement -> special_func .

    FOR             reduce using rule 32 (statement -> special_func .)
    DO              reduce using rule 32 (statement -> special_func .)
    WHILE           reduce using rule 32 (statement -> special_func .)
    IF              reduce using rule 32 (statement -> special_func .)
    ID              reduce using rule 32 (statement -> special_func .)
    PRINT           reduce using rule 32 (statement -> special_func .)
    READ            reduce using rule 32 (statement -> special_func .)
    GENKEY          reduce using rule 32 (statement -> special_func .)
    ENCRYPT         reduce using rule 32 (statement -> special_func .)
    DECRYPT         reduce using rule 32 (statement -> special_func .)
    SHA_256         reduce using rule 32 (statement -> special_func .)
    RANDOM_SALT     reduce using rule 32 (statement -> special_func .)
    HMAC            reduce using rule 32 (statement -> special_func .)
    RBRACE          reduce using rule 32 (statement -> special_func .)


state 46

    (33) statement -> assingation .

    FOR             reduce using rule 33 (statement -> assingation .)
    DO              reduce using rule 33 (statement -> assingation .)
    WHILE           reduce using rule 33 (statement -> assingation .)
    IF              reduce using rule 33 (statement -> assingation .)
    ID              reduce using rule 33 (statement -> assingation .)
    PRINT           reduce using rule 33 (statement -> assingation .)
    READ            reduce using rule 33 (statement -> assingation .)
    GENKEY          reduce using rule 33 (statement -> assingation .)
    ENCRYPT         reduce using rule 33 (statement -> assingation .)
    DECRYPT         reduce using rule 33 (statement -> assingation .)
    SHA_256         reduce using rule 33 (statement -> assingation .)
    RANDOM_SALT     reduce using rule 33 (statement -> assingation .)
    HMAC            reduce using rule 33 (statement -> assingation .)
    RBRACE          reduce using rule 33 (statement -> assingation .)


state 47

    (34) statement -> for .

    FOR             reduce using rule 34 (statement -> for .)
    DO              reduce using rule 34 (statement -> for .)
    WHILE           reduce using rule 34 (statement -> for .)
    IF              reduce using rule 34 (statement -> for .)
    ID              reduce using rule 34 (statement -> for .)
    PRINT           reduce using rule 34 (statement -> for .)
    READ            reduce using rule 34 (statement -> for .)
    GENKEY          reduce using rule 34 (statement -> for .)
    ENCRYPT         reduce using rule 34 (statement -> for .)
    DECRYPT         reduce using rule 34 (statement -> for .)
    SHA_256         reduce using rule 34 (statement -> for .)
    RANDOM_SALT     reduce using rule 34 (statement -> for .)
    HMAC            reduce using rule 34 (statement -> for .)
    RBRACE          reduce using rule 34 (statement -> for .)


state 48

    (35) statement -> do_while .

    FOR             reduce using rule 35 (statement -> do_while .)
    DO              reduce using rule 35 (statement -> do_while .)
    WHILE           reduce using rule 35 (statement -> do_while .)
    IF              reduce using rule 35 (statement -> do_while .)
    ID              reduce using rule 35 (statement -> do_while .)
    PRINT           reduce using rule 35 (statement -> do_while .)
    READ            reduce using rule 35 (statement -> do_while .)
    GENKEY          reduce using rule 35 (statement -> do_while .)
    ENCRYPT         reduce using rule 35 (statement -> do_while .)
    DECRYPT         reduce using rule 35 (statement -> do_while .)
    SHA_256         reduce using rule 35 (statement -> do_while .)
    RANDOM_SALT     reduce using rule 35 (statement -> do_while .)
    HMAC            reduce using rule 35 (statement -> do_while .)
    RBRACE          reduce using rule 35 (statement -> do_while .)


state 49

    (36) statement -> while .

    FOR             reduce using rule 36 (statement -> while .)
    DO              reduce using rule 36 (statement -> while .)
    WHILE           reduce using rule 36 (statement -> while .)
    IF              reduce using rule 36 (statement -> while .)
    ID              reduce using rule 36 (statement -> while .)
    PRINT           reduce using rule 36 (statement -> while .)
    READ            reduce using rule 36 (statement -> while .)
    GENKEY          reduce using rule 36 (statement -> while .)
    ENCRYPT         reduce using rule 36 (statement -> while .)
    DECRYPT         reduce using rule 36 (statement -> while .)
    SHA_256         reduce using rule 36 (statement -> while .)
    RANDOM_SALT     reduce using rule 36 (statement -> while .)
    HMAC            reduce using rule 36 (statement -> while .)
    RBRACE          reduce using rule 36 (statement -> while .)


state 50

    (37) statement -> if_else .

    FOR             reduce using rule 37 (statement -> if_else .)
    DO              reduce using rule 37 (statement -> if_else .)
    WHILE           reduce using rule 37 (statement -> if_else .)
    IF              reduce using rule 37 (statement -> if_else .)
    ID              reduce using rule 37 (statement -> if_else .)
    PRINT           reduce using rule 37 (statement -> if_else .)
    READ            reduce using rule 37 (statement -> if_else .)
    GENKEY          reduce using rule 37 (statement -> if_else .)
    ENCRYPT         reduce using rule 37 (statement -> if_else .)
    DECRYPT         reduce using rule 37 (statement -> if_else .)
    SHA_256         reduce using rule 37 (statement -> if_else .)
    RANDOM_SALT     reduce using rule 37 (statement -> if_else .)
    HMAC            reduce using rule 37 (statement -> if_else .)
    RBRACE          reduce using rule 37 (statement -> if_else .)


state 51

    (38) statement -> invocation .

    FOR             reduce using rule 38 (statement -> invocation .)
    DO              reduce using rule 38 (statement -> invocation .)
    WHILE           reduce using rule 38 (statement -> invocation .)
    IF              reduce using rule 38 (statement -> invocation .)
    ID              reduce using rule 38 (statement -> invocation .)
    PRINT           reduce using rule 38 (statement -> invocation .)
    READ            reduce using rule 38 (statement -> invocation .)
    GENKEY          reduce using rule 38 (statement -> invocation .)
    ENCRYPT         reduce using rule 38 (statement -> invocation .)
    DECRYPT         reduce using rule 38 (statement -> invocation .)
    SHA_256         reduce using rule 38 (statement -> invocation .)
    RANDOM_SALT     reduce using rule 38 (statement -> invocation .)
    HMAC            reduce using rule 38 (statement -> invocation .)
    RBRACE          reduce using rule 38 (statement -> invocation .)


state 52

    (39) statement -> if .

    FOR             reduce using rule 39 (statement -> if .)
    DO              reduce using rule 39 (statement -> if .)
    WHILE           reduce using rule 39 (statement -> if .)
    IF              reduce using rule 39 (statement -> if .)
    ID              reduce using rule 39 (statement -> if .)
    PRINT           reduce using rule 39 (statement -> if .)
    READ            reduce using rule 39 (statement -> if .)
    GENKEY          reduce using rule 39 (statement -> if .)
    ENCRYPT         reduce using rule 39 (statement -> if .)
    DECRYPT         reduce using rule 39 (statement -> if .)
    SHA_256         reduce using rule 39 (statement -> if .)
    RANDOM_SALT     reduce using rule 39 (statement -> if .)
    HMAC            reduce using rule 39 (statement -> if .)
    RBRACE          reduce using rule 39 (statement -> if .)


state 53

    (40) statement -> print .

    FOR             reduce using rule 40 (statement -> print .)
    DO              reduce using rule 40 (statement -> print .)
    WHILE           reduce using rule 40 (statement -> print .)
    IF              reduce using rule 40 (statement -> print .)
    ID              reduce using rule 40 (statement -> print .)
    PRINT           reduce using rule 40 (statement -> print .)
    READ            reduce using rule 40 (statement -> print .)
    GENKEY          reduce using rule 40 (statement -> print .)
    ENCRYPT         reduce using rule 40 (statement -> print .)
    DECRYPT         reduce using rule 40 (statement -> print .)
    SHA_256         reduce using rule 40 (statement -> print .)
    RANDOM_SALT     reduce using rule 40 (statement -> print .)
    HMAC            reduce using rule 40 (statement -> print .)
    RBRACE          reduce using rule 40 (statement -> print .)


state 54

    (41) statement -> read .

    FOR             reduce using rule 41 (statement -> read .)
    DO              reduce using rule 41 (statement -> read .)
    WHILE           reduce using rule 41 (statement -> read .)
    IF              reduce using rule 41 (statement -> read .)
    ID              reduce using rule 41 (statement -> read .)
    PRINT           reduce using rule 41 (statement -> read .)
    READ            reduce using rule 41 (statement -> read .)
    GENKEY          reduce using rule 41 (statement -> read .)
    ENCRYPT         reduce using rule 41 (statement -> read .)
    DECRYPT         reduce using rule 41 (statement -> read .)
    SHA_256         reduce using rule 41 (statement -> read .)
    RANDOM_SALT     reduce using rule 41 (statement -> read .)
    HMAC            reduce using rule 41 (statement -> read .)
    RBRACE          reduce using rule 41 (statement -> read .)


state 55

    (42) special_func -> gen_key .

    FOR             reduce using rule 42 (special_func -> gen_key .)
    DO              reduce using rule 42 (special_func -> gen_key .)
    WHILE           reduce using rule 42 (special_func -> gen_key .)
    IF              reduce using rule 42 (special_func -> gen_key .)
    ID              reduce using rule 42 (special_func -> gen_key .)
    PRINT           reduce using rule 42 (special_func -> gen_key .)
    READ            reduce using rule 42 (special_func -> gen_key .)
    GENKEY          reduce using rule 42 (special_func -> gen_key .)
    ENCRYPT         reduce using rule 42 (special_func -> gen_key .)
    DECRYPT         reduce using rule 42 (special_func -> gen_key .)
    SHA_256         reduce using rule 42 (special_func -> gen_key .)
    RANDOM_SALT     reduce using rule 42 (special_func -> gen_key .)
    HMAC            reduce using rule 42 (special_func -> gen_key .)
    RBRACE          reduce using rule 42 (special_func -> gen_key .)


state 56

    (43) special_func -> encrypt .

    FOR             reduce using rule 43 (special_func -> encrypt .)
    DO              reduce using rule 43 (special_func -> encrypt .)
    WHILE           reduce using rule 43 (special_func -> encrypt .)
    IF              reduce using rule 43 (special_func -> encrypt .)
    ID              reduce using rule 43 (special_func -> encrypt .)
    PRINT           reduce using rule 43 (special_func -> encrypt .)
    READ            reduce using rule 43 (special_func -> encrypt .)
    GENKEY          reduce using rule 43 (special_func -> encrypt .)
    ENCRYPT         reduce using rule 43 (special_func -> encrypt .)
    DECRYPT         reduce using rule 43 (special_func -> encrypt .)
    SHA_256         reduce using rule 43 (special_func -> encrypt .)
    RANDOM_SALT     reduce using rule 43 (special_func -> encrypt .)
    HMAC            reduce using rule 43 (special_func -> encrypt .)
    RBRACE          reduce using rule 43 (special_func -> encrypt .)


state 57

    (44) special_func -> decrypt .

    FOR             reduce using rule 44 (special_func -> decrypt .)
    DO              reduce using rule 44 (special_func -> decrypt .)
    WHILE           reduce using rule 44 (special_func -> decrypt .)
    IF              reduce using rule 44 (special_func -> decrypt .)
    ID              reduce using rule 44 (special_func -> decrypt .)
    PRINT           reduce using rule 44 (special_func -> decrypt .)
    READ            reduce using rule 44 (special_func -> decrypt .)
    GENKEY          reduce using rule 44 (special_func -> decrypt .)
    ENCRYPT         reduce using rule 44 (special_func -> decrypt .)
    DECRYPT         reduce using rule 44 (special_func -> decrypt .)
    SHA_256         reduce using rule 44 (special_func -> decrypt .)
    RANDOM_SALT     reduce using rule 44 (special_func -> decrypt .)
    HMAC            reduce using rule 44 (special_func -> decrypt .)
    RBRACE          reduce using rule 44 (special_func -> decrypt .)


state 58

    (45) special_func -> sha_256 .

    FOR             reduce using rule 45 (special_func -> sha_256 .)
    DO              reduce using rule 45 (special_func -> sha_256 .)
    WHILE           reduce using rule 45 (special_func -> sha_256 .)
    IF              reduce using rule 45 (special_func -> sha_256 .)
    ID              reduce using rule 45 (special_func -> sha_256 .)
    PRINT           reduce using rule 45 (special_func -> sha_256 .)
    READ            reduce using rule 45 (special_func -> sha_256 .)
    GENKEY          reduce using rule 45 (special_func -> sha_256 .)
    ENCRYPT         reduce using rule 45 (special_func -> sha_256 .)
    DECRYPT         reduce using rule 45 (special_func -> sha_256 .)
    SHA_256         reduce using rule 45 (special_func -> sha_256 .)
    RANDOM_SALT     reduce using rule 45 (special_func -> sha_256 .)
    HMAC            reduce using rule 45 (special_func -> sha_256 .)
    RBRACE          reduce using rule 45 (special_func -> sha_256 .)


state 59

    (46) special_func -> random_salt .

    FOR             reduce using rule 46 (special_func -> random_salt .)
    DO              reduce using rule 46 (special_func -> random_salt .)
    WHILE           reduce using rule 46 (special_func -> random_salt .)
    IF              reduce using rule 46 (special_func -> random_salt .)
    ID              reduce using rule 46 (special_func -> random_salt .)
    PRINT           reduce using rule 46 (special_func -> random_salt .)
    READ            reduce using rule 46 (special_func -> random_salt .)
    GENKEY          reduce using rule 46 (special_func -> random_salt .)
    ENCRYPT         reduce using rule 46 (special_func -> random_salt .)
    DECRYPT         reduce using rule 46 (special_func -> random_salt .)
    SHA_256         reduce using rule 46 (special_func -> random_salt .)
    RANDOM_SALT     reduce using rule 46 (special_func -> random_salt .)
    HMAC            reduce using rule 46 (special_func -> random_salt .)
    RBRACE          reduce using rule 46 (special_func -> random_salt .)


state 60

    (47) special_func -> hmac .

    FOR             reduce using rule 47 (special_func -> hmac .)
    DO              reduce using rule 47 (special_func -> hmac .)
    WHILE           reduce using rule 47 (special_func -> hmac .)
    IF              reduce using rule 47 (special_func -> hmac .)
    ID              reduce using rule 47 (special_func -> hmac .)
    PRINT           reduce using rule 47 (special_func -> hmac .)
    READ            reduce using rule 47 (special_func -> hmac .)
    GENKEY          reduce using rule 47 (special_func -> hmac .)
    ENCRYPT         reduce using rule 47 (special_func -> hmac .)
    DECRYPT         reduce using rule 47 (special_func -> hmac .)
    SHA_256         reduce using rule 47 (special_func -> hmac .)
    RANDOM_SALT     reduce using rule 47 (special_func -> hmac .)
    HMAC            reduce using rule 47 (special_func -> hmac .)
    RBRACE          reduce using rule 47 (special_func -> hmac .)


state 61

    (88) assingation -> variable . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 85


state 62

    (57) for -> FOR . LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    LPAREN          shift and go to state 86


state 63

    (71) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (21) variable -> ID .
    (22) variable -> ID . LBRACK expression RBRACK
    (23) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (72) invocation_1 -> . empty
    (124) empty -> .

    ASSIGN          reduce using rule 21 (variable -> ID .)
    LBRACK          shift and go to state 80
    LPAREN          reduce using rule 124 (empty -> .)

    invocation_1                   shift and go to state 87
    empty                          shift and go to state 88

state 64

    (56) do_while -> DO . breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (63) breadcrumb -> . empty
    (124) empty -> .

    LBRACE          reduce using rule 124 (empty -> .)

    breadcrumb                     shift and go to state 89
    empty                          shift and go to state 90

state 65

    (62) while -> WHILE . breadcrumb LPAREN expression RPAREN gotof block
    (63) breadcrumb -> . empty
    (124) empty -> .

    LPAREN          reduce using rule 124 (empty -> .)

    breadcrumb                     shift and go to state 91
    empty                          shift and go to state 90

state 66

    (65) if_else -> IF . LPAREN expression RPAREN gotof block ELSE goto block
    (64) if -> IF . LPAREN expression RPAREN gotof block

    LPAREN          shift and go to state 92


state 67

    (83) print -> PRINT . LPAREN print_arguments RPAREN SEMICOLON

    LPAREN          shift and go to state 93


state 68

    (54) read -> READ . LPAREN ID RPAREN SEMICOLON

    LPAREN          shift and go to state 94


state 69

    (51) gen_key -> GENKEY . LPAREN RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 95


state 70

    (52) encrypt -> ENCRYPT . LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 96


state 71

    (53) decrypt -> DECRYPT . LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 97


state 72

    (50) sha_256 -> SHA_256 . LPAREN ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 98


state 73

    (49) random_salt -> RANDOM_SALT . LPAREN CTEI RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 99


state 74

    (48) hmac -> HMAC . LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 100


state 75

    (7) function_signature -> simple_type ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    LPAREN          shift and go to state 101


state 76

    (10) function_1 -> empty .

    LPAREN          reduce using rule 10 (function_1 -> empty .)


state 77

    (8) function_signature -> VOID ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    LPAREN          shift and go to state 102


state 78

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON . close_var_declaration
    (18) close_var_declaration -> . empty
    (124) empty -> .

    VARIABLE        reduce using rule 124 (empty -> .)
    FUNCTION        reduce using rule 124 (empty -> .)
    MAIN            reduce using rule 124 (empty -> .)
    LBRACE          reduce using rule 124 (empty -> .)

    close_var_declaration          shift and go to state 103
    empty                          shift and go to state 104

state 79

    (20) variables -> variable COMMA . variables
    (19) variables -> . variable
    (20) variables -> . variable COMMA variables
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 39

    variable                       shift and go to state 38
    variables                      shift and go to state 105

state 80

    (22) variable -> ID LBRACK . expression RBRACK
    (23) variable -> ID LBRACK . expression RBRACK LBRACK expression RBRACK
    (81) expression -> . t_expression
    (82) expression -> . NOT t_expression
    (89) t_expression -> . g_expression
    (90) t_expression -> . t_expression boolean_operator g_expression
    (91) g_expression -> . m_expression
    (92) g_expression -> . g_expression comparison_operator m_expression
    (93) m_expression -> . term
    (94) m_expression -> . m_expression addition_operator term
    (95) term -> . factor
    (96) term -> . term multiplication_operator factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 109
    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    CTES            shift and go to state 122
    LPAREN          shift and go to state 123

    expression                     shift and go to state 107
    t_expression                   shift and go to state 108
    g_expression                   shift and go to state 110
    m_expression                   shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    variable                       shift and go to state 114
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 81

    (11) main -> MAIN LPAREN RPAREN main_scope . var_declarations block
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (124) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 124 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 124
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 82

    (12) main_scope -> empty .

    VARIABLE        reduce using rule 12 (main_scope -> empty .)
    LBRACE          reduce using rule 12 (main_scope -> empty .)


state 83

    (28) block -> LBRACE block2 RBRACE .

    MAIN            reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    FUNCTION        reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    WHILE           reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    END             reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    ELSE            reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    FOR             reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    DO              reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    IF              reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    ID              reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    PRINT           reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    READ            reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    GENKEY          reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    ENCRYPT         reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    DECRYPT         reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    SHA_256         reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    RANDOM_SALT     reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    HMAC            reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    RBRACE          reduce using rule 28 (block -> LBRACE block2 RBRACE .)


state 84

    (31) block3 -> statement block2 .

    RBRACE          reduce using rule 31 (block3 -> statement block2 .)


state 85

    (88) assingation -> variable ASSIGN . expression SEMICOLON
    (81) expression -> . t_expression
    (82) expression -> . NOT t_expression
    (89) t_expression -> . g_expression
    (90) t_expression -> . t_expression boolean_operator g_expression
    (91) g_expression -> . m_expression
    (92) g_expression -> . g_expression comparison_operator m_expression
    (93) m_expression -> . term
    (94) m_expression -> . m_expression addition_operator term
    (95) term -> . factor
    (96) term -> . term multiplication_operator factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 109
    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    CTES            shift and go to state 122
    LPAREN          shift and go to state 123

    variable                       shift and go to state 114
    expression                     shift and go to state 125
    t_expression                   shift and go to state 108
    g_expression                   shift and go to state 110
    m_expression                   shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 86

    (57) for -> FOR LPAREN . ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    ID              shift and go to state 126


state 87

    (71) invocation -> ID invocation_1 . LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    LPAREN          shift and go to state 127


state 88

    (72) invocation_1 -> empty .

    LPAREN          reduce using rule 72 (invocation_1 -> empty .)


state 89

    (56) do_while -> DO breadcrumb . block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 128

state 90

    (63) breadcrumb -> empty .

    LBRACE          reduce using rule 63 (breadcrumb -> empty .)
    LPAREN          reduce using rule 63 (breadcrumb -> empty .)


state 91

    (62) while -> WHILE breadcrumb . LPAREN expression RPAREN gotof block

    LPAREN          shift and go to state 129


state 92

    (65) if_else -> IF LPAREN . expression RPAREN gotof block ELSE goto block
    (64) if -> IF LPAREN . expression RPAREN gotof block
    (81) expression -> . t_expression
    (82) expression -> . NOT t_expression
    (89) t_expression -> . g_expression
    (90) t_expression -> . t_expression boolean_operator g_expression
    (91) g_expression -> . m_expression
    (92) g_expression -> . g_expression comparison_operator m_expression
    (93) m_expression -> . term
    (94) m_expression -> . m_expression addition_operator term
    (95) term -> . factor
    (96) term -> . term multiplication_operator factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 109
    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    CTES            shift and go to state 122
    LPAREN          shift and go to state 123

    expression                     shift and go to state 130
    t_expression                   shift and go to state 108
    g_expression                   shift and go to state 110
    m_expression                   shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    variable                       shift and go to state 114
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 93

    (83) print -> PRINT LPAREN . print_arguments RPAREN SEMICOLON
    (84) print_arguments -> . print_argument
    (85) print_arguments -> . print_arguments COMMA print_argument
    (86) print_argument -> . CTES
    (87) print_argument -> . expression
    (81) expression -> . t_expression
    (82) expression -> . NOT t_expression
    (89) t_expression -> . g_expression
    (90) t_expression -> . t_expression boolean_operator g_expression
    (91) g_expression -> . m_expression
    (92) g_expression -> . g_expression comparison_operator m_expression
    (93) m_expression -> . term
    (94) m_expression -> . m_expression addition_operator term
    (95) term -> . factor
    (96) term -> . term multiplication_operator factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    CTES            shift and go to state 133
    NOT             shift and go to state 109
    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    LPAREN          shift and go to state 123

    print_arguments                shift and go to state 131
    print_argument                 shift and go to state 132
    expression                     shift and go to state 134
    t_expression                   shift and go to state 108
    g_expression                   shift and go to state 110
    m_expression                   shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    variable                       shift and go to state 114
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 94

    (54) read -> READ LPAREN . ID RPAREN SEMICOLON

    ID              shift and go to state 135


state 95

    (51) gen_key -> GENKEY LPAREN . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 136


state 96

    (52) encrypt -> ENCRYPT LPAREN . ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 137


state 97

    (53) decrypt -> DECRYPT LPAREN . ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 138


state 98

    (50) sha_256 -> SHA_256 LPAREN . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 139


state 99

    (49) random_salt -> RANDOM_SALT LPAREN . CTEI RPAREN SPECIAL ID SEMICOLON

    CTEI            shift and go to state 140


state 100

    (48) hmac -> HMAC LPAREN . ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 141


state 101

    (7) function_signature -> simple_type ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (17) open_var_declaration -> . empty
    (124) empty -> .

    INT             reduce using rule 124 (empty -> .)
    FLOAT           reduce using rule 124 (empty -> .)
    CHAR            reduce using rule 124 (empty -> .)
    BOOLEAN         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)
    COMMA           reduce using rule 124 (empty -> .)
    RPAREN          reduce using rule 124 (empty -> .)

    open_var_declaration           shift and go to state 142
    empty                          shift and go to state 18

state 102

    (8) function_signature -> VOID ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (17) open_var_declaration -> . empty
    (124) empty -> .

    INT             reduce using rule 124 (empty -> .)
    FLOAT           reduce using rule 124 (empty -> .)
    CHAR            reduce using rule 124 (empty -> .)
    BOOLEAN         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)
    COMMA           reduce using rule 124 (empty -> .)
    RPAREN          reduce using rule 124 (empty -> .)

    open_var_declaration           shift and go to state 143
    empty                          shift and go to state 18

state 103

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .

    VARIABLE        reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    FUNCTION        reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    MAIN            reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    LBRACE          reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)


state 104

    (18) close_var_declaration -> empty .

    VARIABLE        reduce using rule 18 (close_var_declaration -> empty .)
    FUNCTION        reduce using rule 18 (close_var_declaration -> empty .)
    MAIN            reduce using rule 18 (close_var_declaration -> empty .)
    LBRACE          reduce using rule 18 (close_var_declaration -> empty .)
    RPAREN          reduce using rule 18 (close_var_declaration -> empty .)


state 105

    (20) variables -> variable COMMA variables .

    SEMICOLON       reduce using rule 20 (variables -> variable COMMA variables .)


state 106

    (21) variable -> ID .
    (22) variable -> ID . LBRACK expression RBRACK
    (23) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (71) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (72) invocation_1 -> . empty
    (124) empty -> .

    TIMES           reduce using rule 21 (variable -> ID .)
    DIVIDE          reduce using rule 21 (variable -> ID .)
    PLUS            reduce using rule 21 (variable -> ID .)
    MINUS           reduce using rule 21 (variable -> ID .)
    LESS            reduce using rule 21 (variable -> ID .)
    GREATER         reduce using rule 21 (variable -> ID .)
    EQUALS          reduce using rule 21 (variable -> ID .)
    NOTEQUAL        reduce using rule 21 (variable -> ID .)
    GREATERTHAN     reduce using rule 21 (variable -> ID .)
    LESSTHAN        reduce using rule 21 (variable -> ID .)
    AND             reduce using rule 21 (variable -> ID .)
    OR              reduce using rule 21 (variable -> ID .)
    RBRACK          reduce using rule 21 (variable -> ID .)
    SEMICOLON       reduce using rule 21 (variable -> ID .)
    RPAREN          reduce using rule 21 (variable -> ID .)
    COMMA           reduce using rule 21 (variable -> ID .)
    FROM            reduce using rule 21 (variable -> ID .)
    LBRACK          shift and go to state 80
    LPAREN          reduce using rule 124 (empty -> .)

    invocation_1                   shift and go to state 87
    empty                          shift and go to state 88

state 107

    (22) variable -> ID LBRACK expression . RBRACK
    (23) variable -> ID LBRACK expression . RBRACK LBRACK expression RBRACK

    RBRACK          shift and go to state 144


state 108

    (81) expression -> t_expression .
    (90) t_expression -> t_expression . boolean_operator g_expression
    (110) boolean_operator -> . AND
    (111) boolean_operator -> . OR

    RBRACK          reduce using rule 81 (expression -> t_expression .)
    SEMICOLON       reduce using rule 81 (expression -> t_expression .)
    RPAREN          reduce using rule 81 (expression -> t_expression .)
    COMMA           reduce using rule 81 (expression -> t_expression .)
    FROM            reduce using rule 81 (expression -> t_expression .)
    AND             shift and go to state 146
    OR              shift and go to state 147

    boolean_operator               shift and go to state 145

state 109

    (82) expression -> NOT . t_expression
    (89) t_expression -> . g_expression
    (90) t_expression -> . t_expression boolean_operator g_expression
    (91) g_expression -> . m_expression
    (92) g_expression -> . g_expression comparison_operator m_expression
    (93) m_expression -> . term
    (94) m_expression -> . m_expression addition_operator term
    (95) term -> . factor
    (96) term -> . term multiplication_operator factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    CTES            shift and go to state 122
    LPAREN          shift and go to state 123

    t_expression                   shift and go to state 148
    g_expression                   shift and go to state 110
    m_expression                   shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    variable                       shift and go to state 114
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 110

    (89) t_expression -> g_expression .
    (92) g_expression -> g_expression . comparison_operator m_expression
    (102) comparison_operator -> . LESS
    (103) comparison_operator -> . GREATER
    (104) comparison_operator -> . EQUALS
    (105) comparison_operator -> . NOTEQUAL
    (106) comparison_operator -> . GREATERTHAN
    (107) comparison_operator -> . LESSTHAN

    AND             reduce using rule 89 (t_expression -> g_expression .)
    OR              reduce using rule 89 (t_expression -> g_expression .)
    RBRACK          reduce using rule 89 (t_expression -> g_expression .)
    SEMICOLON       reduce using rule 89 (t_expression -> g_expression .)
    RPAREN          reduce using rule 89 (t_expression -> g_expression .)
    COMMA           reduce using rule 89 (t_expression -> g_expression .)
    FROM            reduce using rule 89 (t_expression -> g_expression .)
    LESS            shift and go to state 150
    GREATER         shift and go to state 151
    EQUALS          shift and go to state 152
    NOTEQUAL        shift and go to state 153
    GREATERTHAN     shift and go to state 154
    LESSTHAN        shift and go to state 155

    comparison_operator            shift and go to state 149

state 111

    (91) g_expression -> m_expression .
    (94) m_expression -> m_expression . addition_operator term
    (108) addition_operator -> . PLUS
    (109) addition_operator -> . MINUS

    LESS            reduce using rule 91 (g_expression -> m_expression .)
    GREATER         reduce using rule 91 (g_expression -> m_expression .)
    EQUALS          reduce using rule 91 (g_expression -> m_expression .)
    NOTEQUAL        reduce using rule 91 (g_expression -> m_expression .)
    GREATERTHAN     reduce using rule 91 (g_expression -> m_expression .)
    LESSTHAN        reduce using rule 91 (g_expression -> m_expression .)
    AND             reduce using rule 91 (g_expression -> m_expression .)
    OR              reduce using rule 91 (g_expression -> m_expression .)
    RBRACK          reduce using rule 91 (g_expression -> m_expression .)
    SEMICOLON       reduce using rule 91 (g_expression -> m_expression .)
    RPAREN          reduce using rule 91 (g_expression -> m_expression .)
    COMMA           reduce using rule 91 (g_expression -> m_expression .)
    FROM            reduce using rule 91 (g_expression -> m_expression .)
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158

    addition_operator              shift and go to state 156

state 112

    (93) m_expression -> term .
    (96) term -> term . multiplication_operator factor
    (112) multiplication_operator -> . TIMES
    (113) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 93 (m_expression -> term .)
    MINUS           reduce using rule 93 (m_expression -> term .)
    LESS            reduce using rule 93 (m_expression -> term .)
    GREATER         reduce using rule 93 (m_expression -> term .)
    EQUALS          reduce using rule 93 (m_expression -> term .)
    NOTEQUAL        reduce using rule 93 (m_expression -> term .)
    GREATERTHAN     reduce using rule 93 (m_expression -> term .)
    LESSTHAN        reduce using rule 93 (m_expression -> term .)
    AND             reduce using rule 93 (m_expression -> term .)
    OR              reduce using rule 93 (m_expression -> term .)
    RBRACK          reduce using rule 93 (m_expression -> term .)
    SEMICOLON       reduce using rule 93 (m_expression -> term .)
    RPAREN          reduce using rule 93 (m_expression -> term .)
    COMMA           reduce using rule 93 (m_expression -> term .)
    FROM            reduce using rule 93 (m_expression -> term .)
    TIMES           shift and go to state 160
    DIVIDE          shift and go to state 161

    multiplication_operator        shift and go to state 159

state 113

    (95) term -> factor .

    TIMES           reduce using rule 95 (term -> factor .)
    DIVIDE          reduce using rule 95 (term -> factor .)
    PLUS            reduce using rule 95 (term -> factor .)
    MINUS           reduce using rule 95 (term -> factor .)
    LESS            reduce using rule 95 (term -> factor .)
    GREATER         reduce using rule 95 (term -> factor .)
    EQUALS          reduce using rule 95 (term -> factor .)
    NOTEQUAL        reduce using rule 95 (term -> factor .)
    GREATERTHAN     reduce using rule 95 (term -> factor .)
    LESSTHAN        reduce using rule 95 (term -> factor .)
    AND             reduce using rule 95 (term -> factor .)
    OR              reduce using rule 95 (term -> factor .)
    RBRACK          reduce using rule 95 (term -> factor .)
    SEMICOLON       reduce using rule 95 (term -> factor .)
    RPAREN          reduce using rule 95 (term -> factor .)
    COMMA           reduce using rule 95 (term -> factor .)
    FROM            reduce using rule 95 (term -> factor .)


state 114

    (97) factor -> variable .

    TIMES           reduce using rule 97 (factor -> variable .)
    DIVIDE          reduce using rule 97 (factor -> variable .)
    PLUS            reduce using rule 97 (factor -> variable .)
    MINUS           reduce using rule 97 (factor -> variable .)
    LESS            reduce using rule 97 (factor -> variable .)
    GREATER         reduce using rule 97 (factor -> variable .)
    EQUALS          reduce using rule 97 (factor -> variable .)
    NOTEQUAL        reduce using rule 97 (factor -> variable .)
    GREATERTHAN     reduce using rule 97 (factor -> variable .)
    LESSTHAN        reduce using rule 97 (factor -> variable .)
    AND             reduce using rule 97 (factor -> variable .)
    OR              reduce using rule 97 (factor -> variable .)
    RBRACK          reduce using rule 97 (factor -> variable .)
    SEMICOLON       reduce using rule 97 (factor -> variable .)
    RPAREN          reduce using rule 97 (factor -> variable .)
    COMMA           reduce using rule 97 (factor -> variable .)
    FROM            reduce using rule 97 (factor -> variable .)


state 115

    (98) factor -> cte .

    TIMES           reduce using rule 98 (factor -> cte .)
    DIVIDE          reduce using rule 98 (factor -> cte .)
    PLUS            reduce using rule 98 (factor -> cte .)
    MINUS           reduce using rule 98 (factor -> cte .)
    LESS            reduce using rule 98 (factor -> cte .)
    GREATER         reduce using rule 98 (factor -> cte .)
    EQUALS          reduce using rule 98 (factor -> cte .)
    NOTEQUAL        reduce using rule 98 (factor -> cte .)
    GREATERTHAN     reduce using rule 98 (factor -> cte .)
    LESSTHAN        reduce using rule 98 (factor -> cte .)
    AND             reduce using rule 98 (factor -> cte .)
    OR              reduce using rule 98 (factor -> cte .)
    RBRACK          reduce using rule 98 (factor -> cte .)
    SEMICOLON       reduce using rule 98 (factor -> cte .)
    RPAREN          reduce using rule 98 (factor -> cte .)
    COMMA           reduce using rule 98 (factor -> cte .)
    FROM            reduce using rule 98 (factor -> cte .)


state 116

    (99) factor -> invocation .

    TIMES           reduce using rule 99 (factor -> invocation .)
    DIVIDE          reduce using rule 99 (factor -> invocation .)
    PLUS            reduce using rule 99 (factor -> invocation .)
    MINUS           reduce using rule 99 (factor -> invocation .)
    LESS            reduce using rule 99 (factor -> invocation .)
    GREATER         reduce using rule 99 (factor -> invocation .)
    EQUALS          reduce using rule 99 (factor -> invocation .)
    NOTEQUAL        reduce using rule 99 (factor -> invocation .)
    GREATERTHAN     reduce using rule 99 (factor -> invocation .)
    LESSTHAN        reduce using rule 99 (factor -> invocation .)
    AND             reduce using rule 99 (factor -> invocation .)
    OR              reduce using rule 99 (factor -> invocation .)
    RBRACK          reduce using rule 99 (factor -> invocation .)
    SEMICOLON       reduce using rule 99 (factor -> invocation .)
    RPAREN          reduce using rule 99 (factor -> invocation .)
    COMMA           reduce using rule 99 (factor -> invocation .)
    FROM            reduce using rule 99 (factor -> invocation .)


state 117

    (100) factor -> expression_parenthesis .

    TIMES           reduce using rule 100 (factor -> expression_parenthesis .)
    DIVIDE          reduce using rule 100 (factor -> expression_parenthesis .)
    PLUS            reduce using rule 100 (factor -> expression_parenthesis .)
    MINUS           reduce using rule 100 (factor -> expression_parenthesis .)
    LESS            reduce using rule 100 (factor -> expression_parenthesis .)
    GREATER         reduce using rule 100 (factor -> expression_parenthesis .)
    EQUALS          reduce using rule 100 (factor -> expression_parenthesis .)
    NOTEQUAL        reduce using rule 100 (factor -> expression_parenthesis .)
    GREATERTHAN     reduce using rule 100 (factor -> expression_parenthesis .)
    LESSTHAN        reduce using rule 100 (factor -> expression_parenthesis .)
    AND             reduce using rule 100 (factor -> expression_parenthesis .)
    OR              reduce using rule 100 (factor -> expression_parenthesis .)
    RBRACK          reduce using rule 100 (factor -> expression_parenthesis .)
    SEMICOLON       reduce using rule 100 (factor -> expression_parenthesis .)
    RPAREN          reduce using rule 100 (factor -> expression_parenthesis .)
    COMMA           reduce using rule 100 (factor -> expression_parenthesis .)
    FROM            reduce using rule 100 (factor -> expression_parenthesis .)


state 118

    (119) cte -> CTEI .

    TIMES           reduce using rule 119 (cte -> CTEI .)
    DIVIDE          reduce using rule 119 (cte -> CTEI .)
    PLUS            reduce using rule 119 (cte -> CTEI .)
    MINUS           reduce using rule 119 (cte -> CTEI .)
    LESS            reduce using rule 119 (cte -> CTEI .)
    GREATER         reduce using rule 119 (cte -> CTEI .)
    EQUALS          reduce using rule 119 (cte -> CTEI .)
    NOTEQUAL        reduce using rule 119 (cte -> CTEI .)
    GREATERTHAN     reduce using rule 119 (cte -> CTEI .)
    LESSTHAN        reduce using rule 119 (cte -> CTEI .)
    AND             reduce using rule 119 (cte -> CTEI .)
    OR              reduce using rule 119 (cte -> CTEI .)
    RBRACK          reduce using rule 119 (cte -> CTEI .)
    SEMICOLON       reduce using rule 119 (cte -> CTEI .)
    RPAREN          reduce using rule 119 (cte -> CTEI .)
    COMMA           reduce using rule 119 (cte -> CTEI .)
    FROM            reduce using rule 119 (cte -> CTEI .)


state 119

    (120) cte -> CTEF .

    TIMES           reduce using rule 120 (cte -> CTEF .)
    DIVIDE          reduce using rule 120 (cte -> CTEF .)
    PLUS            reduce using rule 120 (cte -> CTEF .)
    MINUS           reduce using rule 120 (cte -> CTEF .)
    LESS            reduce using rule 120 (cte -> CTEF .)
    GREATER         reduce using rule 120 (cte -> CTEF .)
    EQUALS          reduce using rule 120 (cte -> CTEF .)
    NOTEQUAL        reduce using rule 120 (cte -> CTEF .)
    GREATERTHAN     reduce using rule 120 (cte -> CTEF .)
    LESSTHAN        reduce using rule 120 (cte -> CTEF .)
    AND             reduce using rule 120 (cte -> CTEF .)
    OR              reduce using rule 120 (cte -> CTEF .)
    RBRACK          reduce using rule 120 (cte -> CTEF .)
    SEMICOLON       reduce using rule 120 (cte -> CTEF .)
    RPAREN          reduce using rule 120 (cte -> CTEF .)
    COMMA           reduce using rule 120 (cte -> CTEF .)
    FROM            reduce using rule 120 (cte -> CTEF .)


state 120

    (121) cte -> CTEC .

    TIMES           reduce using rule 121 (cte -> CTEC .)
    DIVIDE          reduce using rule 121 (cte -> CTEC .)
    PLUS            reduce using rule 121 (cte -> CTEC .)
    MINUS           reduce using rule 121 (cte -> CTEC .)
    LESS            reduce using rule 121 (cte -> CTEC .)
    GREATER         reduce using rule 121 (cte -> CTEC .)
    EQUALS          reduce using rule 121 (cte -> CTEC .)
    NOTEQUAL        reduce using rule 121 (cte -> CTEC .)
    GREATERTHAN     reduce using rule 121 (cte -> CTEC .)
    LESSTHAN        reduce using rule 121 (cte -> CTEC .)
    AND             reduce using rule 121 (cte -> CTEC .)
    OR              reduce using rule 121 (cte -> CTEC .)
    RBRACK          reduce using rule 121 (cte -> CTEC .)
    SEMICOLON       reduce using rule 121 (cte -> CTEC .)
    RPAREN          reduce using rule 121 (cte -> CTEC .)
    COMMA           reduce using rule 121 (cte -> CTEC .)
    FROM            reduce using rule 121 (cte -> CTEC .)


state 121

    (122) cte -> CTEB .

    TIMES           reduce using rule 122 (cte -> CTEB .)
    DIVIDE          reduce using rule 122 (cte -> CTEB .)
    PLUS            reduce using rule 122 (cte -> CTEB .)
    MINUS           reduce using rule 122 (cte -> CTEB .)
    LESS            reduce using rule 122 (cte -> CTEB .)
    GREATER         reduce using rule 122 (cte -> CTEB .)
    EQUALS          reduce using rule 122 (cte -> CTEB .)
    NOTEQUAL        reduce using rule 122 (cte -> CTEB .)
    GREATERTHAN     reduce using rule 122 (cte -> CTEB .)
    LESSTHAN        reduce using rule 122 (cte -> CTEB .)
    AND             reduce using rule 122 (cte -> CTEB .)
    OR              reduce using rule 122 (cte -> CTEB .)
    RBRACK          reduce using rule 122 (cte -> CTEB .)
    SEMICOLON       reduce using rule 122 (cte -> CTEB .)
    RPAREN          reduce using rule 122 (cte -> CTEB .)
    COMMA           reduce using rule 122 (cte -> CTEB .)
    FROM            reduce using rule 122 (cte -> CTEB .)


state 122

    (123) cte -> CTES .

    TIMES           reduce using rule 123 (cte -> CTES .)
    DIVIDE          reduce using rule 123 (cte -> CTES .)
    PLUS            reduce using rule 123 (cte -> CTES .)
    MINUS           reduce using rule 123 (cte -> CTES .)
    LESS            reduce using rule 123 (cte -> CTES .)
    GREATER         reduce using rule 123 (cte -> CTES .)
    EQUALS          reduce using rule 123 (cte -> CTES .)
    NOTEQUAL        reduce using rule 123 (cte -> CTES .)
    GREATERTHAN     reduce using rule 123 (cte -> CTES .)
    LESSTHAN        reduce using rule 123 (cte -> CTES .)
    AND             reduce using rule 123 (cte -> CTES .)
    OR              reduce using rule 123 (cte -> CTES .)
    RBRACK          reduce using rule 123 (cte -> CTES .)
    SEMICOLON       reduce using rule 123 (cte -> CTES .)
    RPAREN          reduce using rule 123 (cte -> CTES .)
    COMMA           reduce using rule 123 (cte -> CTES .)
    FROM            reduce using rule 123 (cte -> CTES .)


state 123

    (101) expression_parenthesis -> LPAREN . expression RPAREN
    (81) expression -> . t_expression
    (82) expression -> . NOT t_expression
    (89) t_expression -> . g_expression
    (90) t_expression -> . t_expression boolean_operator g_expression
    (91) g_expression -> . m_expression
    (92) g_expression -> . g_expression comparison_operator m_expression
    (93) m_expression -> . term
    (94) m_expression -> . m_expression addition_operator term
    (95) term -> . factor
    (96) term -> . term multiplication_operator factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 109
    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    CTES            shift and go to state 122
    LPAREN          shift and go to state 123

    expression                     shift and go to state 162
    t_expression                   shift and go to state 108
    g_expression                   shift and go to state 110
    m_expression                   shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    variable                       shift and go to state 114
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 124

    (11) main -> MAIN LPAREN RPAREN main_scope var_declarations . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 163

state 125

    (88) assingation -> variable ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 164


state 126

    (57) for -> FOR LPAREN ID . for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (58) for_1 -> . empty
    (124) empty -> .

    ASSIGN          reduce using rule 124 (empty -> .)

    for_1                          shift and go to state 165
    empty                          shift and go to state 166

state 127

    (71) invocation -> ID invocation_1 LPAREN . invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (73) invocation_2 -> . empty
    (124) empty -> .

    NOT             reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    CTEI            reduce using rule 124 (empty -> .)
    CTEF            reduce using rule 124 (empty -> .)
    CTEC            reduce using rule 124 (empty -> .)
    CTEB            reduce using rule 124 (empty -> .)
    CTES            reduce using rule 124 (empty -> .)
    LPAREN          reduce using rule 124 (empty -> .)
    RPAREN          reduce using rule 124 (empty -> .)
    COMMA           reduce using rule 124 (empty -> .)

    invocation_2                   shift and go to state 167
    empty                          shift and go to state 168

state 128

    (56) do_while -> DO breadcrumb block . WHILE LPAREN expression RPAREN gotot SEMICOLON

    WHILE           shift and go to state 169


state 129

    (62) while -> WHILE breadcrumb LPAREN . expression RPAREN gotof block
    (81) expression -> . t_expression
    (82) expression -> . NOT t_expression
    (89) t_expression -> . g_expression
    (90) t_expression -> . t_expression boolean_operator g_expression
    (91) g_expression -> . m_expression
    (92) g_expression -> . g_expression comparison_operator m_expression
    (93) m_expression -> . term
    (94) m_expression -> . m_expression addition_operator term
    (95) term -> . factor
    (96) term -> . term multiplication_operator factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 109
    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    CTES            shift and go to state 122
    LPAREN          shift and go to state 123

    expression                     shift and go to state 170
    t_expression                   shift and go to state 108
    g_expression                   shift and go to state 110
    m_expression                   shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    variable                       shift and go to state 114
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 130

    (65) if_else -> IF LPAREN expression . RPAREN gotof block ELSE goto block
    (64) if -> IF LPAREN expression . RPAREN gotof block

    RPAREN          shift and go to state 171


state 131

    (83) print -> PRINT LPAREN print_arguments . RPAREN SEMICOLON
    (85) print_arguments -> print_arguments . COMMA print_argument

    RPAREN          shift and go to state 172
    COMMA           shift and go to state 173


state 132

    (84) print_arguments -> print_argument .

    RPAREN          reduce using rule 84 (print_arguments -> print_argument .)
    COMMA           reduce using rule 84 (print_arguments -> print_argument .)


state 133

    (86) print_argument -> CTES .
    (123) cte -> CTES .

  ! reduce/reduce conflict for RPAREN resolved using rule 86 (print_argument -> CTES .)
  ! reduce/reduce conflict for COMMA resolved using rule 86 (print_argument -> CTES .)
    RPAREN          reduce using rule 86 (print_argument -> CTES .)
    COMMA           reduce using rule 86 (print_argument -> CTES .)
    TIMES           reduce using rule 123 (cte -> CTES .)
    DIVIDE          reduce using rule 123 (cte -> CTES .)
    PLUS            reduce using rule 123 (cte -> CTES .)
    MINUS           reduce using rule 123 (cte -> CTES .)
    LESS            reduce using rule 123 (cte -> CTES .)
    GREATER         reduce using rule 123 (cte -> CTES .)
    EQUALS          reduce using rule 123 (cte -> CTES .)
    NOTEQUAL        reduce using rule 123 (cte -> CTES .)
    GREATERTHAN     reduce using rule 123 (cte -> CTES .)
    LESSTHAN        reduce using rule 123 (cte -> CTES .)
    AND             reduce using rule 123 (cte -> CTES .)
    OR              reduce using rule 123 (cte -> CTES .)

  ! RPAREN          [ reduce using rule 123 (cte -> CTES .) ]
  ! COMMA           [ reduce using rule 123 (cte -> CTES .) ]


state 134

    (87) print_argument -> expression .

    RPAREN          reduce using rule 87 (print_argument -> expression .)
    COMMA           reduce using rule 87 (print_argument -> expression .)


state 135

    (54) read -> READ LPAREN ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 174


state 136

    (51) gen_key -> GENKEY LPAREN RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 175


state 137

    (52) encrypt -> ENCRYPT LPAREN ID . COMMA ID RPAREN SPECIAL ID SEMICOLON

    COMMA           shift and go to state 176


state 138

    (53) decrypt -> DECRYPT LPAREN ID . COMMA ID RPAREN SPECIAL ID SEMICOLON

    COMMA           shift and go to state 177


state 139

    (50) sha_256 -> SHA_256 LPAREN ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 178


state 140

    (49) random_salt -> RANDOM_SALT LPAREN CTEI . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 179


state 141

    (48) hmac -> HMAC LPAREN ID . COMMA ID RPAREN SPECIAL ID SEMICOLON

    COMMA           shift and go to state 180


state 142

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations
    (24) parameters -> . parameters COMMA parameter
    (25) parameters -> . parameter
    (26) parameters -> . empty
    (27) parameter -> . simple_type ID
    (124) empty -> .
    (114) simple_type -> . INT
    (115) simple_type -> . FLOAT
    (116) simple_type -> . CHAR
    (117) simple_type -> . BOOLEAN
    (118) simple_type -> . STRING

    COMMA           reduce using rule 124 (empty -> .)
    RPAREN          reduce using rule 124 (empty -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    simple_type                    shift and go to state 181
    parameters                     shift and go to state 182
    parameter                      shift and go to state 183
    empty                          shift and go to state 184

state 143

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations
    (24) parameters -> . parameters COMMA parameter
    (25) parameters -> . parameter
    (26) parameters -> . empty
    (27) parameter -> . simple_type ID
    (124) empty -> .
    (114) simple_type -> . INT
    (115) simple_type -> . FLOAT
    (116) simple_type -> . CHAR
    (117) simple_type -> . BOOLEAN
    (118) simple_type -> . STRING

    COMMA           reduce using rule 124 (empty -> .)
    RPAREN          reduce using rule 124 (empty -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    parameters                     shift and go to state 185
    parameter                      shift and go to state 183
    empty                          shift and go to state 184
    simple_type                    shift and go to state 181

state 144

    (22) variable -> ID LBRACK expression RBRACK .
    (23) variable -> ID LBRACK expression RBRACK . LBRACK expression RBRACK

    COMMA           reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    TIMES           reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    PLUS            reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    MINUS           reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    LESS            reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    GREATER         reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    EQUALS          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    AND             reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    OR              reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    RBRACK          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    RPAREN          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    FROM            reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    LBRACK          shift and go to state 186


state 145

    (90) t_expression -> t_expression boolean_operator . g_expression
    (91) g_expression -> . m_expression
    (92) g_expression -> . g_expression comparison_operator m_expression
    (93) m_expression -> . term
    (94) m_expression -> . m_expression addition_operator term
    (95) term -> . factor
    (96) term -> . term multiplication_operator factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    CTES            shift and go to state 122
    LPAREN          shift and go to state 123

    g_expression                   shift and go to state 187
    m_expression                   shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    variable                       shift and go to state 114
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 146

    (110) boolean_operator -> AND .

    ID              reduce using rule 110 (boolean_operator -> AND .)
    CTEI            reduce using rule 110 (boolean_operator -> AND .)
    CTEF            reduce using rule 110 (boolean_operator -> AND .)
    CTEC            reduce using rule 110 (boolean_operator -> AND .)
    CTEB            reduce using rule 110 (boolean_operator -> AND .)
    CTES            reduce using rule 110 (boolean_operator -> AND .)
    LPAREN          reduce using rule 110 (boolean_operator -> AND .)


state 147

    (111) boolean_operator -> OR .

    ID              reduce using rule 111 (boolean_operator -> OR .)
    CTEI            reduce using rule 111 (boolean_operator -> OR .)
    CTEF            reduce using rule 111 (boolean_operator -> OR .)
    CTEC            reduce using rule 111 (boolean_operator -> OR .)
    CTEB            reduce using rule 111 (boolean_operator -> OR .)
    CTES            reduce using rule 111 (boolean_operator -> OR .)
    LPAREN          reduce using rule 111 (boolean_operator -> OR .)


state 148

    (82) expression -> NOT t_expression .
    (90) t_expression -> t_expression . boolean_operator g_expression
    (110) boolean_operator -> . AND
    (111) boolean_operator -> . OR

    RBRACK          reduce using rule 82 (expression -> NOT t_expression .)
    SEMICOLON       reduce using rule 82 (expression -> NOT t_expression .)
    RPAREN          reduce using rule 82 (expression -> NOT t_expression .)
    COMMA           reduce using rule 82 (expression -> NOT t_expression .)
    FROM            reduce using rule 82 (expression -> NOT t_expression .)
    AND             shift and go to state 146
    OR              shift and go to state 147

    boolean_operator               shift and go to state 145

state 149

    (92) g_expression -> g_expression comparison_operator . m_expression
    (93) m_expression -> . term
    (94) m_expression -> . m_expression addition_operator term
    (95) term -> . factor
    (96) term -> . term multiplication_operator factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    CTES            shift and go to state 122
    LPAREN          shift and go to state 123

    m_expression                   shift and go to state 188
    term                           shift and go to state 112
    factor                         shift and go to state 113
    variable                       shift and go to state 114
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 150

    (102) comparison_operator -> LESS .

    ID              reduce using rule 102 (comparison_operator -> LESS .)
    CTEI            reduce using rule 102 (comparison_operator -> LESS .)
    CTEF            reduce using rule 102 (comparison_operator -> LESS .)
    CTEC            reduce using rule 102 (comparison_operator -> LESS .)
    CTEB            reduce using rule 102 (comparison_operator -> LESS .)
    CTES            reduce using rule 102 (comparison_operator -> LESS .)
    LPAREN          reduce using rule 102 (comparison_operator -> LESS .)


state 151

    (103) comparison_operator -> GREATER .

    ID              reduce using rule 103 (comparison_operator -> GREATER .)
    CTEI            reduce using rule 103 (comparison_operator -> GREATER .)
    CTEF            reduce using rule 103 (comparison_operator -> GREATER .)
    CTEC            reduce using rule 103 (comparison_operator -> GREATER .)
    CTEB            reduce using rule 103 (comparison_operator -> GREATER .)
    CTES            reduce using rule 103 (comparison_operator -> GREATER .)
    LPAREN          reduce using rule 103 (comparison_operator -> GREATER .)


state 152

    (104) comparison_operator -> EQUALS .

    ID              reduce using rule 104 (comparison_operator -> EQUALS .)
    CTEI            reduce using rule 104 (comparison_operator -> EQUALS .)
    CTEF            reduce using rule 104 (comparison_operator -> EQUALS .)
    CTEC            reduce using rule 104 (comparison_operator -> EQUALS .)
    CTEB            reduce using rule 104 (comparison_operator -> EQUALS .)
    CTES            reduce using rule 104 (comparison_operator -> EQUALS .)
    LPAREN          reduce using rule 104 (comparison_operator -> EQUALS .)


state 153

    (105) comparison_operator -> NOTEQUAL .

    ID              reduce using rule 105 (comparison_operator -> NOTEQUAL .)
    CTEI            reduce using rule 105 (comparison_operator -> NOTEQUAL .)
    CTEF            reduce using rule 105 (comparison_operator -> NOTEQUAL .)
    CTEC            reduce using rule 105 (comparison_operator -> NOTEQUAL .)
    CTEB            reduce using rule 105 (comparison_operator -> NOTEQUAL .)
    CTES            reduce using rule 105 (comparison_operator -> NOTEQUAL .)
    LPAREN          reduce using rule 105 (comparison_operator -> NOTEQUAL .)


state 154

    (106) comparison_operator -> GREATERTHAN .

    ID              reduce using rule 106 (comparison_operator -> GREATERTHAN .)
    CTEI            reduce using rule 106 (comparison_operator -> GREATERTHAN .)
    CTEF            reduce using rule 106 (comparison_operator -> GREATERTHAN .)
    CTEC            reduce using rule 106 (comparison_operator -> GREATERTHAN .)
    CTEB            reduce using rule 106 (comparison_operator -> GREATERTHAN .)
    CTES            reduce using rule 106 (comparison_operator -> GREATERTHAN .)
    LPAREN          reduce using rule 106 (comparison_operator -> GREATERTHAN .)


state 155

    (107) comparison_operator -> LESSTHAN .

    ID              reduce using rule 107 (comparison_operator -> LESSTHAN .)
    CTEI            reduce using rule 107 (comparison_operator -> LESSTHAN .)
    CTEF            reduce using rule 107 (comparison_operator -> LESSTHAN .)
    CTEC            reduce using rule 107 (comparison_operator -> LESSTHAN .)
    CTEB            reduce using rule 107 (comparison_operator -> LESSTHAN .)
    CTES            reduce using rule 107 (comparison_operator -> LESSTHAN .)
    LPAREN          reduce using rule 107 (comparison_operator -> LESSTHAN .)


state 156

    (94) m_expression -> m_expression addition_operator . term
    (95) term -> . factor
    (96) term -> . term multiplication_operator factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    CTES            shift and go to state 122
    LPAREN          shift and go to state 123

    term                           shift and go to state 189
    factor                         shift and go to state 113
    variable                       shift and go to state 114
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 157

    (108) addition_operator -> PLUS .

    ID              reduce using rule 108 (addition_operator -> PLUS .)
    CTEI            reduce using rule 108 (addition_operator -> PLUS .)
    CTEF            reduce using rule 108 (addition_operator -> PLUS .)
    CTEC            reduce using rule 108 (addition_operator -> PLUS .)
    CTEB            reduce using rule 108 (addition_operator -> PLUS .)
    CTES            reduce using rule 108 (addition_operator -> PLUS .)
    LPAREN          reduce using rule 108 (addition_operator -> PLUS .)


state 158

    (109) addition_operator -> MINUS .

    ID              reduce using rule 109 (addition_operator -> MINUS .)
    CTEI            reduce using rule 109 (addition_operator -> MINUS .)
    CTEF            reduce using rule 109 (addition_operator -> MINUS .)
    CTEC            reduce using rule 109 (addition_operator -> MINUS .)
    CTEB            reduce using rule 109 (addition_operator -> MINUS .)
    CTES            reduce using rule 109 (addition_operator -> MINUS .)
    LPAREN          reduce using rule 109 (addition_operator -> MINUS .)


state 159

    (96) term -> term multiplication_operator . factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    CTES            shift and go to state 122
    LPAREN          shift and go to state 123

    factor                         shift and go to state 190
    variable                       shift and go to state 114
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 160

    (112) multiplication_operator -> TIMES .

    ID              reduce using rule 112 (multiplication_operator -> TIMES .)
    CTEI            reduce using rule 112 (multiplication_operator -> TIMES .)
    CTEF            reduce using rule 112 (multiplication_operator -> TIMES .)
    CTEC            reduce using rule 112 (multiplication_operator -> TIMES .)
    CTEB            reduce using rule 112 (multiplication_operator -> TIMES .)
    CTES            reduce using rule 112 (multiplication_operator -> TIMES .)
    LPAREN          reduce using rule 112 (multiplication_operator -> TIMES .)


state 161

    (113) multiplication_operator -> DIVIDE .

    ID              reduce using rule 113 (multiplication_operator -> DIVIDE .)
    CTEI            reduce using rule 113 (multiplication_operator -> DIVIDE .)
    CTEF            reduce using rule 113 (multiplication_operator -> DIVIDE .)
    CTEC            reduce using rule 113 (multiplication_operator -> DIVIDE .)
    CTEB            reduce using rule 113 (multiplication_operator -> DIVIDE .)
    CTES            reduce using rule 113 (multiplication_operator -> DIVIDE .)
    LPAREN          reduce using rule 113 (multiplication_operator -> DIVIDE .)


state 162

    (101) expression_parenthesis -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 191


state 163

    (11) main -> MAIN LPAREN RPAREN main_scope var_declarations block .

    END             reduce using rule 11 (main -> MAIN LPAREN RPAREN main_scope var_declarations block .)


state 164

    (88) assingation -> variable ASSIGN expression SEMICOLON .

    FOR             reduce using rule 88 (assingation -> variable ASSIGN expression SEMICOLON .)
    DO              reduce using rule 88 (assingation -> variable ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 88 (assingation -> variable ASSIGN expression SEMICOLON .)
    IF              reduce using rule 88 (assingation -> variable ASSIGN expression SEMICOLON .)
    ID              reduce using rule 88 (assingation -> variable ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 88 (assingation -> variable ASSIGN expression SEMICOLON .)
    READ            reduce using rule 88 (assingation -> variable ASSIGN expression SEMICOLON .)
    GENKEY          reduce using rule 88 (assingation -> variable ASSIGN expression SEMICOLON .)
    ENCRYPT         reduce using rule 88 (assingation -> variable ASSIGN expression SEMICOLON .)
    DECRYPT         reduce using rule 88 (assingation -> variable ASSIGN expression SEMICOLON .)
    SHA_256         reduce using rule 88 (assingation -> variable ASSIGN expression SEMICOLON .)
    RANDOM_SALT     reduce using rule 88 (assingation -> variable ASSIGN expression SEMICOLON .)
    HMAC            reduce using rule 88 (assingation -> variable ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 88 (assingation -> variable ASSIGN expression SEMICOLON .)


state 165

    (57) for -> FOR LPAREN ID for_1 . ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    ASSIGN          shift and go to state 192


state 166

    (58) for_1 -> empty .

    ASSIGN          reduce using rule 58 (for_1 -> empty .)


state 167

    (71) invocation -> ID invocation_1 LPAREN invocation_2 . expressions RPAREN invocation_5 SEMICOLON invocation_6
    (78) expressions -> . expressions COMMA invocation_4 expression invocation_3
    (79) expressions -> . expression invocation_3
    (80) expressions -> . empty
    (81) expression -> . t_expression
    (82) expression -> . NOT t_expression
    (124) empty -> .
    (89) t_expression -> . g_expression
    (90) t_expression -> . t_expression boolean_operator g_expression
    (91) g_expression -> . m_expression
    (92) g_expression -> . g_expression comparison_operator m_expression
    (93) m_expression -> . term
    (94) m_expression -> . m_expression addition_operator term
    (95) term -> . factor
    (96) term -> . term multiplication_operator factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 109
    RPAREN          reduce using rule 124 (empty -> .)
    COMMA           reduce using rule 124 (empty -> .)
    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    CTES            shift and go to state 122
    LPAREN          shift and go to state 123

    expressions                    shift and go to state 193
    expression                     shift and go to state 194
    empty                          shift and go to state 195
    t_expression                   shift and go to state 108
    g_expression                   shift and go to state 110
    m_expression                   shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    variable                       shift and go to state 114
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 168

    (73) invocation_2 -> empty .

    NOT             reduce using rule 73 (invocation_2 -> empty .)
    ID              reduce using rule 73 (invocation_2 -> empty .)
    CTEI            reduce using rule 73 (invocation_2 -> empty .)
    CTEF            reduce using rule 73 (invocation_2 -> empty .)
    CTEC            reduce using rule 73 (invocation_2 -> empty .)
    CTEB            reduce using rule 73 (invocation_2 -> empty .)
    CTES            reduce using rule 73 (invocation_2 -> empty .)
    LPAREN          reduce using rule 73 (invocation_2 -> empty .)
    RPAREN          reduce using rule 73 (invocation_2 -> empty .)
    COMMA           reduce using rule 73 (invocation_2 -> empty .)


state 169

    (56) do_while -> DO breadcrumb block WHILE . LPAREN expression RPAREN gotot SEMICOLON

    LPAREN          shift and go to state 196


state 170

    (62) while -> WHILE breadcrumb LPAREN expression . RPAREN gotof block

    RPAREN          shift and go to state 197


state 171

    (65) if_else -> IF LPAREN expression RPAREN . gotof block ELSE goto block
    (64) if -> IF LPAREN expression RPAREN . gotof block
    (68) gotof -> . empty
    (124) empty -> .

    LBRACE          reduce using rule 124 (empty -> .)

    gotof                          shift and go to state 198
    empty                          shift and go to state 199

state 172

    (83) print -> PRINT LPAREN print_arguments RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 200


state 173

    (85) print_arguments -> print_arguments COMMA . print_argument
    (86) print_argument -> . CTES
    (87) print_argument -> . expression
    (81) expression -> . t_expression
    (82) expression -> . NOT t_expression
    (89) t_expression -> . g_expression
    (90) t_expression -> . t_expression boolean_operator g_expression
    (91) g_expression -> . m_expression
    (92) g_expression -> . g_expression comparison_operator m_expression
    (93) m_expression -> . term
    (94) m_expression -> . m_expression addition_operator term
    (95) term -> . factor
    (96) term -> . term multiplication_operator factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    CTES            shift and go to state 133
    NOT             shift and go to state 109
    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    LPAREN          shift and go to state 123

    print_argument                 shift and go to state 201
    expression                     shift and go to state 134
    t_expression                   shift and go to state 108
    g_expression                   shift and go to state 110
    m_expression                   shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    variable                       shift and go to state 114
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 174

    (54) read -> READ LPAREN ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 202


state 175

    (51) gen_key -> GENKEY LPAREN RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 203


state 176

    (52) encrypt -> ENCRYPT LPAREN ID COMMA . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 204


state 177

    (53) decrypt -> DECRYPT LPAREN ID COMMA . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 205


state 178

    (50) sha_256 -> SHA_256 LPAREN ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 206


state 179

    (49) random_salt -> RANDOM_SALT LPAREN CTEI RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 207


state 180

    (48) hmac -> HMAC LPAREN ID COMMA . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 208


state 181

    (27) parameter -> simple_type . ID

    ID              shift and go to state 209


state 182

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations
    (24) parameters -> parameters . COMMA parameter
    (18) close_var_declaration -> . empty
    (124) empty -> .

    COMMA           shift and go to state 211
    RPAREN          reduce using rule 124 (empty -> .)

    close_var_declaration          shift and go to state 210
    empty                          shift and go to state 104

state 183

    (25) parameters -> parameter .

    COMMA           reduce using rule 25 (parameters -> parameter .)
    RPAREN          reduce using rule 25 (parameters -> parameter .)


state 184

    (26) parameters -> empty .

    COMMA           reduce using rule 26 (parameters -> empty .)
    RPAREN          reduce using rule 26 (parameters -> empty .)


state 185

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations
    (24) parameters -> parameters . COMMA parameter
    (18) close_var_declaration -> . empty
    (124) empty -> .

    COMMA           shift and go to state 211
    RPAREN          reduce using rule 124 (empty -> .)

    close_var_declaration          shift and go to state 212
    empty                          shift and go to state 104

state 186

    (23) variable -> ID LBRACK expression RBRACK LBRACK . expression RBRACK
    (81) expression -> . t_expression
    (82) expression -> . NOT t_expression
    (89) t_expression -> . g_expression
    (90) t_expression -> . t_expression boolean_operator g_expression
    (91) g_expression -> . m_expression
    (92) g_expression -> . g_expression comparison_operator m_expression
    (93) m_expression -> . term
    (94) m_expression -> . m_expression addition_operator term
    (95) term -> . factor
    (96) term -> . term multiplication_operator factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 109
    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    CTES            shift and go to state 122
    LPAREN          shift and go to state 123

    expression                     shift and go to state 213
    t_expression                   shift and go to state 108
    g_expression                   shift and go to state 110
    m_expression                   shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    variable                       shift and go to state 114
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 187

    (90) t_expression -> t_expression boolean_operator g_expression .
    (92) g_expression -> g_expression . comparison_operator m_expression
    (102) comparison_operator -> . LESS
    (103) comparison_operator -> . GREATER
    (104) comparison_operator -> . EQUALS
    (105) comparison_operator -> . NOTEQUAL
    (106) comparison_operator -> . GREATERTHAN
    (107) comparison_operator -> . LESSTHAN

    AND             reduce using rule 90 (t_expression -> t_expression boolean_operator g_expression .)
    OR              reduce using rule 90 (t_expression -> t_expression boolean_operator g_expression .)
    RBRACK          reduce using rule 90 (t_expression -> t_expression boolean_operator g_expression .)
    SEMICOLON       reduce using rule 90 (t_expression -> t_expression boolean_operator g_expression .)
    RPAREN          reduce using rule 90 (t_expression -> t_expression boolean_operator g_expression .)
    COMMA           reduce using rule 90 (t_expression -> t_expression boolean_operator g_expression .)
    FROM            reduce using rule 90 (t_expression -> t_expression boolean_operator g_expression .)
    LESS            shift and go to state 150
    GREATER         shift and go to state 151
    EQUALS          shift and go to state 152
    NOTEQUAL        shift and go to state 153
    GREATERTHAN     shift and go to state 154
    LESSTHAN        shift and go to state 155

    comparison_operator            shift and go to state 149

state 188

    (92) g_expression -> g_expression comparison_operator m_expression .
    (94) m_expression -> m_expression . addition_operator term
    (108) addition_operator -> . PLUS
    (109) addition_operator -> . MINUS

    LESS            reduce using rule 92 (g_expression -> g_expression comparison_operator m_expression .)
    GREATER         reduce using rule 92 (g_expression -> g_expression comparison_operator m_expression .)
    EQUALS          reduce using rule 92 (g_expression -> g_expression comparison_operator m_expression .)
    NOTEQUAL        reduce using rule 92 (g_expression -> g_expression comparison_operator m_expression .)
    GREATERTHAN     reduce using rule 92 (g_expression -> g_expression comparison_operator m_expression .)
    LESSTHAN        reduce using rule 92 (g_expression -> g_expression comparison_operator m_expression .)
    AND             reduce using rule 92 (g_expression -> g_expression comparison_operator m_expression .)
    OR              reduce using rule 92 (g_expression -> g_expression comparison_operator m_expression .)
    RBRACK          reduce using rule 92 (g_expression -> g_expression comparison_operator m_expression .)
    SEMICOLON       reduce using rule 92 (g_expression -> g_expression comparison_operator m_expression .)
    RPAREN          reduce using rule 92 (g_expression -> g_expression comparison_operator m_expression .)
    COMMA           reduce using rule 92 (g_expression -> g_expression comparison_operator m_expression .)
    FROM            reduce using rule 92 (g_expression -> g_expression comparison_operator m_expression .)
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158

    addition_operator              shift and go to state 156

state 189

    (94) m_expression -> m_expression addition_operator term .
    (96) term -> term . multiplication_operator factor
    (112) multiplication_operator -> . TIMES
    (113) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 94 (m_expression -> m_expression addition_operator term .)
    MINUS           reduce using rule 94 (m_expression -> m_expression addition_operator term .)
    LESS            reduce using rule 94 (m_expression -> m_expression addition_operator term .)
    GREATER         reduce using rule 94 (m_expression -> m_expression addition_operator term .)
    EQUALS          reduce using rule 94 (m_expression -> m_expression addition_operator term .)
    NOTEQUAL        reduce using rule 94 (m_expression -> m_expression addition_operator term .)
    GREATERTHAN     reduce using rule 94 (m_expression -> m_expression addition_operator term .)
    LESSTHAN        reduce using rule 94 (m_expression -> m_expression addition_operator term .)
    AND             reduce using rule 94 (m_expression -> m_expression addition_operator term .)
    OR              reduce using rule 94 (m_expression -> m_expression addition_operator term .)
    RBRACK          reduce using rule 94 (m_expression -> m_expression addition_operator term .)
    SEMICOLON       reduce using rule 94 (m_expression -> m_expression addition_operator term .)
    RPAREN          reduce using rule 94 (m_expression -> m_expression addition_operator term .)
    COMMA           reduce using rule 94 (m_expression -> m_expression addition_operator term .)
    FROM            reduce using rule 94 (m_expression -> m_expression addition_operator term .)
    TIMES           shift and go to state 160
    DIVIDE          shift and go to state 161

    multiplication_operator        shift and go to state 159

state 190

    (96) term -> term multiplication_operator factor .

    TIMES           reduce using rule 96 (term -> term multiplication_operator factor .)
    DIVIDE          reduce using rule 96 (term -> term multiplication_operator factor .)
    PLUS            reduce using rule 96 (term -> term multiplication_operator factor .)
    MINUS           reduce using rule 96 (term -> term multiplication_operator factor .)
    LESS            reduce using rule 96 (term -> term multiplication_operator factor .)
    GREATER         reduce using rule 96 (term -> term multiplication_operator factor .)
    EQUALS          reduce using rule 96 (term -> term multiplication_operator factor .)
    NOTEQUAL        reduce using rule 96 (term -> term multiplication_operator factor .)
    GREATERTHAN     reduce using rule 96 (term -> term multiplication_operator factor .)
    LESSTHAN        reduce using rule 96 (term -> term multiplication_operator factor .)
    AND             reduce using rule 96 (term -> term multiplication_operator factor .)
    OR              reduce using rule 96 (term -> term multiplication_operator factor .)
    RBRACK          reduce using rule 96 (term -> term multiplication_operator factor .)
    SEMICOLON       reduce using rule 96 (term -> term multiplication_operator factor .)
    RPAREN          reduce using rule 96 (term -> term multiplication_operator factor .)
    COMMA           reduce using rule 96 (term -> term multiplication_operator factor .)
    FROM            reduce using rule 96 (term -> term multiplication_operator factor .)


state 191

    (101) expression_parenthesis -> LPAREN expression RPAREN .

    TIMES           reduce using rule 101 (expression_parenthesis -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 101 (expression_parenthesis -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 101 (expression_parenthesis -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 101 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESS            reduce using rule 101 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 101 (expression_parenthesis -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 101 (expression_parenthesis -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 101 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 101 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 101 (expression_parenthesis -> LPAREN expression RPAREN .)
    AND             reduce using rule 101 (expression_parenthesis -> LPAREN expression RPAREN .)
    OR              reduce using rule 101 (expression_parenthesis -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 101 (expression_parenthesis -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 101 (expression_parenthesis -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 101 (expression_parenthesis -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 101 (expression_parenthesis -> LPAREN expression RPAREN .)
    FROM            reduce using rule 101 (expression_parenthesis -> LPAREN expression RPAREN .)


state 192

    (57) for -> FOR LPAREN ID for_1 ASSIGN . expression for_2 FROM expression RPAREN for_3 DO block for_4
    (81) expression -> . t_expression
    (82) expression -> . NOT t_expression
    (89) t_expression -> . g_expression
    (90) t_expression -> . t_expression boolean_operator g_expression
    (91) g_expression -> . m_expression
    (92) g_expression -> . g_expression comparison_operator m_expression
    (93) m_expression -> . term
    (94) m_expression -> . m_expression addition_operator term
    (95) term -> . factor
    (96) term -> . term multiplication_operator factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 109
    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    CTES            shift and go to state 122
    LPAREN          shift and go to state 123

    expression                     shift and go to state 214
    t_expression                   shift and go to state 108
    g_expression                   shift and go to state 110
    m_expression                   shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    variable                       shift and go to state 114
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 193

    (71) invocation -> ID invocation_1 LPAREN invocation_2 expressions . RPAREN invocation_5 SEMICOLON invocation_6
    (78) expressions -> expressions . COMMA invocation_4 expression invocation_3

    RPAREN          shift and go to state 215
    COMMA           shift and go to state 216


state 194

    (79) expressions -> expression . invocation_3
    (74) invocation_3 -> . empty
    (124) empty -> .

    RPAREN          reduce using rule 124 (empty -> .)
    COMMA           reduce using rule 124 (empty -> .)

    invocation_3                   shift and go to state 217
    empty                          shift and go to state 218

state 195

    (80) expressions -> empty .

    RPAREN          reduce using rule 80 (expressions -> empty .)
    COMMA           reduce using rule 80 (expressions -> empty .)


state 196

    (56) do_while -> DO breadcrumb block WHILE LPAREN . expression RPAREN gotot SEMICOLON
    (81) expression -> . t_expression
    (82) expression -> . NOT t_expression
    (89) t_expression -> . g_expression
    (90) t_expression -> . t_expression boolean_operator g_expression
    (91) g_expression -> . m_expression
    (92) g_expression -> . g_expression comparison_operator m_expression
    (93) m_expression -> . term
    (94) m_expression -> . m_expression addition_operator term
    (95) term -> . factor
    (96) term -> . term multiplication_operator factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 109
    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    CTES            shift and go to state 122
    LPAREN          shift and go to state 123

    expression                     shift and go to state 219
    t_expression                   shift and go to state 108
    g_expression                   shift and go to state 110
    m_expression                   shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    variable                       shift and go to state 114
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 197

    (62) while -> WHILE breadcrumb LPAREN expression RPAREN . gotof block
    (68) gotof -> . empty
    (124) empty -> .

    LBRACE          reduce using rule 124 (empty -> .)

    gotof                          shift and go to state 220
    empty                          shift and go to state 199

state 198

    (65) if_else -> IF LPAREN expression RPAREN gotof . block ELSE goto block
    (64) if -> IF LPAREN expression RPAREN gotof . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 221

state 199

    (68) gotof -> empty .

    LBRACE          reduce using rule 68 (gotof -> empty .)


state 200

    (83) print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .

    FOR             reduce using rule 83 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    DO              reduce using rule 83 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    WHILE           reduce using rule 83 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    IF              reduce using rule 83 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ID              reduce using rule 83 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    PRINT           reduce using rule 83 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    READ            reduce using rule 83 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    GENKEY          reduce using rule 83 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ENCRYPT         reduce using rule 83 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    DECRYPT         reduce using rule 83 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    SHA_256         reduce using rule 83 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    RANDOM_SALT     reduce using rule 83 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    HMAC            reduce using rule 83 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    RBRACE          reduce using rule 83 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)


state 201

    (85) print_arguments -> print_arguments COMMA print_argument .

    RPAREN          reduce using rule 85 (print_arguments -> print_arguments COMMA print_argument .)
    COMMA           reduce using rule 85 (print_arguments -> print_arguments COMMA print_argument .)


state 202

    (54) read -> READ LPAREN ID RPAREN SEMICOLON .

    FOR             reduce using rule 54 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    DO              reduce using rule 54 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 54 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    IF              reduce using rule 54 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    ID              reduce using rule 54 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    PRINT           reduce using rule 54 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    READ            reduce using rule 54 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    GENKEY          reduce using rule 54 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    ENCRYPT         reduce using rule 54 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    DECRYPT         reduce using rule 54 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    SHA_256         reduce using rule 54 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    RANDOM_SALT     reduce using rule 54 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    HMAC            reduce using rule 54 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    RBRACE          reduce using rule 54 (read -> READ LPAREN ID RPAREN SEMICOLON .)


state 203

    (51) gen_key -> GENKEY LPAREN RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 222


state 204

    (52) encrypt -> ENCRYPT LPAREN ID COMMA ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 223


state 205

    (53) decrypt -> DECRYPT LPAREN ID COMMA ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 224


state 206

    (50) sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 225


state 207

    (49) random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 226


state 208

    (48) hmac -> HMAC LPAREN ID COMMA ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 227


state 209

    (27) parameter -> simple_type ID .

    COMMA           reduce using rule 27 (parameter -> simple_type ID .)
    RPAREN          reduce using rule 27 (parameter -> simple_type ID .)


state 210

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations

    RPAREN          shift and go to state 228


state 211

    (24) parameters -> parameters COMMA . parameter
    (27) parameter -> . simple_type ID
    (114) simple_type -> . INT
    (115) simple_type -> . FLOAT
    (116) simple_type -> . CHAR
    (117) simple_type -> . BOOLEAN
    (118) simple_type -> . STRING

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    parameter                      shift and go to state 229
    simple_type                    shift and go to state 181

state 212

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations

    RPAREN          shift and go to state 230


state 213

    (23) variable -> ID LBRACK expression RBRACK LBRACK expression . RBRACK

    RBRACK          shift and go to state 231


state 214

    (57) for -> FOR LPAREN ID for_1 ASSIGN expression . for_2 FROM expression RPAREN for_3 DO block for_4
    (59) for_2 -> . empty
    (124) empty -> .

    FROM            reduce using rule 124 (empty -> .)

    for_2                          shift and go to state 232
    empty                          shift and go to state 233

state 215

    (71) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN . invocation_5 SEMICOLON invocation_6
    (76) invocation_5 -> . empty
    (124) empty -> .

    SEMICOLON       reduce using rule 124 (empty -> .)

    invocation_5                   shift and go to state 234
    empty                          shift and go to state 235

state 216

    (78) expressions -> expressions COMMA . invocation_4 expression invocation_3
    (75) invocation_4 -> . empty
    (124) empty -> .

    NOT             reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    CTEI            reduce using rule 124 (empty -> .)
    CTEF            reduce using rule 124 (empty -> .)
    CTEC            reduce using rule 124 (empty -> .)
    CTEB            reduce using rule 124 (empty -> .)
    CTES            reduce using rule 124 (empty -> .)
    LPAREN          reduce using rule 124 (empty -> .)

    invocation_4                   shift and go to state 236
    empty                          shift and go to state 237

state 217

    (79) expressions -> expression invocation_3 .

    RPAREN          reduce using rule 79 (expressions -> expression invocation_3 .)
    COMMA           reduce using rule 79 (expressions -> expression invocation_3 .)


state 218

    (74) invocation_3 -> empty .

    RPAREN          reduce using rule 74 (invocation_3 -> empty .)
    COMMA           reduce using rule 74 (invocation_3 -> empty .)


state 219

    (56) do_while -> DO breadcrumb block WHILE LPAREN expression . RPAREN gotot SEMICOLON

    RPAREN          shift and go to state 238


state 220

    (62) while -> WHILE breadcrumb LPAREN expression RPAREN gotof . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 239

state 221

    (65) if_else -> IF LPAREN expression RPAREN gotof block . ELSE goto block
    (64) if -> IF LPAREN expression RPAREN gotof block .

    ELSE            shift and go to state 240
    FOR             reduce using rule 64 (if -> IF LPAREN expression RPAREN gotof block .)
    DO              reduce using rule 64 (if -> IF LPAREN expression RPAREN gotof block .)
    WHILE           reduce using rule 64 (if -> IF LPAREN expression RPAREN gotof block .)
    IF              reduce using rule 64 (if -> IF LPAREN expression RPAREN gotof block .)
    ID              reduce using rule 64 (if -> IF LPAREN expression RPAREN gotof block .)
    PRINT           reduce using rule 64 (if -> IF LPAREN expression RPAREN gotof block .)
    READ            reduce using rule 64 (if -> IF LPAREN expression RPAREN gotof block .)
    GENKEY          reduce using rule 64 (if -> IF LPAREN expression RPAREN gotof block .)
    ENCRYPT         reduce using rule 64 (if -> IF LPAREN expression RPAREN gotof block .)
    DECRYPT         reduce using rule 64 (if -> IF LPAREN expression RPAREN gotof block .)
    SHA_256         reduce using rule 64 (if -> IF LPAREN expression RPAREN gotof block .)
    RANDOM_SALT     reduce using rule 64 (if -> IF LPAREN expression RPAREN gotof block .)
    HMAC            reduce using rule 64 (if -> IF LPAREN expression RPAREN gotof block .)
    RBRACE          reduce using rule 64 (if -> IF LPAREN expression RPAREN gotof block .)


state 222

    (51) gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 51 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 51 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 51 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 51 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 51 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 51 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 51 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 51 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 51 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 51 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 51 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 51 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 51 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 51 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)


state 223

    (52) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 241


state 224

    (53) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 242


state 225

    (50) sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 243


state 226

    (49) random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 244


state 227

    (48) hmac -> HMAC LPAREN ID COMMA ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 245


state 228

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (124) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 124 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 246
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 229

    (24) parameters -> parameters COMMA parameter .

    COMMA           reduce using rule 24 (parameters -> parameters COMMA parameter .)
    RPAREN          reduce using rule 24 (parameters -> parameters COMMA parameter .)


state 230

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (124) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 124 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 247
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 231

    (23) variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .

    COMMA           reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    TIMES           reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    PLUS            reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    MINUS           reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESS            reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATER         reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    EQUALS          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    AND             reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    OR              reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RBRACK          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RPAREN          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    FROM            reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)


state 232

    (57) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 . FROM expression RPAREN for_3 DO block for_4

    FROM            shift and go to state 248


state 233

    (59) for_2 -> empty .

    FROM            reduce using rule 59 (for_2 -> empty .)


state 234

    (71) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 . SEMICOLON invocation_6

    SEMICOLON       shift and go to state 249


state 235

    (76) invocation_5 -> empty .

    SEMICOLON       reduce using rule 76 (invocation_5 -> empty .)


state 236

    (78) expressions -> expressions COMMA invocation_4 . expression invocation_3
    (81) expression -> . t_expression
    (82) expression -> . NOT t_expression
    (89) t_expression -> . g_expression
    (90) t_expression -> . t_expression boolean_operator g_expression
    (91) g_expression -> . m_expression
    (92) g_expression -> . g_expression comparison_operator m_expression
    (93) m_expression -> . term
    (94) m_expression -> . m_expression addition_operator term
    (95) term -> . factor
    (96) term -> . term multiplication_operator factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 109
    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    CTES            shift and go to state 122
    LPAREN          shift and go to state 123

    expression                     shift and go to state 250
    t_expression                   shift and go to state 108
    g_expression                   shift and go to state 110
    m_expression                   shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    variable                       shift and go to state 114
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 237

    (75) invocation_4 -> empty .

    NOT             reduce using rule 75 (invocation_4 -> empty .)
    ID              reduce using rule 75 (invocation_4 -> empty .)
    CTEI            reduce using rule 75 (invocation_4 -> empty .)
    CTEF            reduce using rule 75 (invocation_4 -> empty .)
    CTEC            reduce using rule 75 (invocation_4 -> empty .)
    CTEB            reduce using rule 75 (invocation_4 -> empty .)
    CTES            reduce using rule 75 (invocation_4 -> empty .)
    LPAREN          reduce using rule 75 (invocation_4 -> empty .)


state 238

    (56) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN . gotot SEMICOLON
    (66) gotot -> . empty
    (124) empty -> .

    SEMICOLON       reduce using rule 124 (empty -> .)

    gotot                          shift and go to state 251
    empty                          shift and go to state 252

state 239

    (62) while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .

    FOR             reduce using rule 62 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    DO              reduce using rule 62 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    WHILE           reduce using rule 62 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    IF              reduce using rule 62 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    ID              reduce using rule 62 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    PRINT           reduce using rule 62 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    READ            reduce using rule 62 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    GENKEY          reduce using rule 62 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    ENCRYPT         reduce using rule 62 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    DECRYPT         reduce using rule 62 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    SHA_256         reduce using rule 62 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    RANDOM_SALT     reduce using rule 62 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    HMAC            reduce using rule 62 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    RBRACE          reduce using rule 62 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)


state 240

    (65) if_else -> IF LPAREN expression RPAREN gotof block ELSE . goto block
    (67) goto -> . empty
    (124) empty -> .

    LBRACE          reduce using rule 124 (empty -> .)

    goto                           shift and go to state 253
    empty                          shift and go to state 254

state 241

    (52) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 255


state 242

    (53) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 256


state 243

    (50) sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 50 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 50 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 50 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 50 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 50 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 50 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 50 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 50 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 50 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 50 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 50 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 50 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 50 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 50 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)


state 244

    (49) random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 49 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 49 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 49 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 49 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 49 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 49 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 49 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 49 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 49 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 49 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 49 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 49 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 49 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 49 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)


state 245

    (48) hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 257


state 246

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .

    LBRACE          reduce using rule 7 (function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .)


state 247

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .

    LBRACE          reduce using rule 8 (function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .)


state 248

    (57) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM . expression RPAREN for_3 DO block for_4
    (81) expression -> . t_expression
    (82) expression -> . NOT t_expression
    (89) t_expression -> . g_expression
    (90) t_expression -> . t_expression boolean_operator g_expression
    (91) g_expression -> . m_expression
    (92) g_expression -> . g_expression comparison_operator m_expression
    (93) m_expression -> . term
    (94) m_expression -> . m_expression addition_operator term
    (95) term -> . factor
    (96) term -> . term multiplication_operator factor
    (97) factor -> . variable
    (98) factor -> . cte
    (99) factor -> . invocation
    (100) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (119) cte -> . CTEI
    (120) cte -> . CTEF
    (121) cte -> . CTEC
    (122) cte -> . CTEB
    (123) cte -> . CTES
    (71) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (101) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 109
    ID              shift and go to state 106
    CTEI            shift and go to state 118
    CTEF            shift and go to state 119
    CTEC            shift and go to state 120
    CTEB            shift and go to state 121
    CTES            shift and go to state 122
    LPAREN          shift and go to state 123

    expression                     shift and go to state 258
    t_expression                   shift and go to state 108
    g_expression                   shift and go to state 110
    m_expression                   shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    variable                       shift and go to state 114
    cte                            shift and go to state 115
    invocation                     shift and go to state 116
    expression_parenthesis         shift and go to state 117

state 249

    (71) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON . invocation_6
    (77) invocation_6 -> . empty
    (124) empty -> .

    FOR             reduce using rule 124 (empty -> .)
    DO              reduce using rule 124 (empty -> .)
    WHILE           reduce using rule 124 (empty -> .)
    IF              reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    PRINT           reduce using rule 124 (empty -> .)
    READ            reduce using rule 124 (empty -> .)
    GENKEY          reduce using rule 124 (empty -> .)
    ENCRYPT         reduce using rule 124 (empty -> .)
    DECRYPT         reduce using rule 124 (empty -> .)
    SHA_256         reduce using rule 124 (empty -> .)
    RANDOM_SALT     reduce using rule 124 (empty -> .)
    HMAC            reduce using rule 124 (empty -> .)
    RBRACE          reduce using rule 124 (empty -> .)
    TIMES           reduce using rule 124 (empty -> .)
    DIVIDE          reduce using rule 124 (empty -> .)
    PLUS            reduce using rule 124 (empty -> .)
    MINUS           reduce using rule 124 (empty -> .)
    LESS            reduce using rule 124 (empty -> .)
    GREATER         reduce using rule 124 (empty -> .)
    EQUALS          reduce using rule 124 (empty -> .)
    NOTEQUAL        reduce using rule 124 (empty -> .)
    GREATERTHAN     reduce using rule 124 (empty -> .)
    LESSTHAN        reduce using rule 124 (empty -> .)
    AND             reduce using rule 124 (empty -> .)
    OR              reduce using rule 124 (empty -> .)
    RBRACK          reduce using rule 124 (empty -> .)
    SEMICOLON       reduce using rule 124 (empty -> .)
    RPAREN          reduce using rule 124 (empty -> .)
    COMMA           reduce using rule 124 (empty -> .)
    FROM            reduce using rule 124 (empty -> .)

    invocation_6                   shift and go to state 259
    empty                          shift and go to state 260

state 250

    (78) expressions -> expressions COMMA invocation_4 expression . invocation_3
    (74) invocation_3 -> . empty
    (124) empty -> .

    RPAREN          reduce using rule 124 (empty -> .)
    COMMA           reduce using rule 124 (empty -> .)

    invocation_3                   shift and go to state 261
    empty                          shift and go to state 218

state 251

    (56) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot . SEMICOLON

    SEMICOLON       shift and go to state 262


state 252

    (66) gotot -> empty .

    SEMICOLON       reduce using rule 66 (gotot -> empty .)


state 253

    (65) if_else -> IF LPAREN expression RPAREN gotof block ELSE goto . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 263

state 254

    (67) goto -> empty .

    LBRACE          reduce using rule 67 (goto -> empty .)


state 255

    (52) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 264


state 256

    (53) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 265


state 257

    (48) hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 266


state 258

    (57) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression . RPAREN for_3 DO block for_4

    RPAREN          shift and go to state 267


state 259

    (71) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .

    FOR             reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DO              reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    WHILE           reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    IF              reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ID              reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PRINT           reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    READ            reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GENKEY          reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ENCRYPT         reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DECRYPT         reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    SHA_256         reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RANDOM_SALT     reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    HMAC            reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACE          reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    TIMES           reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DIVIDE          reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PLUS            reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    MINUS           reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESS            reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATER         reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    EQUALS          reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    NOTEQUAL        reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATERTHAN     reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESSTHAN        reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    AND             reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    OR              reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACK          reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    SEMICOLON       reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RPAREN          reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    COMMA           reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    FROM            reduce using rule 71 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)


state 260

    (77) invocation_6 -> empty .

    FOR             reduce using rule 77 (invocation_6 -> empty .)
    DO              reduce using rule 77 (invocation_6 -> empty .)
    WHILE           reduce using rule 77 (invocation_6 -> empty .)
    IF              reduce using rule 77 (invocation_6 -> empty .)
    ID              reduce using rule 77 (invocation_6 -> empty .)
    PRINT           reduce using rule 77 (invocation_6 -> empty .)
    READ            reduce using rule 77 (invocation_6 -> empty .)
    GENKEY          reduce using rule 77 (invocation_6 -> empty .)
    ENCRYPT         reduce using rule 77 (invocation_6 -> empty .)
    DECRYPT         reduce using rule 77 (invocation_6 -> empty .)
    SHA_256         reduce using rule 77 (invocation_6 -> empty .)
    RANDOM_SALT     reduce using rule 77 (invocation_6 -> empty .)
    HMAC            reduce using rule 77 (invocation_6 -> empty .)
    RBRACE          reduce using rule 77 (invocation_6 -> empty .)
    TIMES           reduce using rule 77 (invocation_6 -> empty .)
    DIVIDE          reduce using rule 77 (invocation_6 -> empty .)
    PLUS            reduce using rule 77 (invocation_6 -> empty .)
    MINUS           reduce using rule 77 (invocation_6 -> empty .)
    LESS            reduce using rule 77 (invocation_6 -> empty .)
    GREATER         reduce using rule 77 (invocation_6 -> empty .)
    EQUALS          reduce using rule 77 (invocation_6 -> empty .)
    NOTEQUAL        reduce using rule 77 (invocation_6 -> empty .)
    GREATERTHAN     reduce using rule 77 (invocation_6 -> empty .)
    LESSTHAN        reduce using rule 77 (invocation_6 -> empty .)
    AND             reduce using rule 77 (invocation_6 -> empty .)
    OR              reduce using rule 77 (invocation_6 -> empty .)
    RBRACK          reduce using rule 77 (invocation_6 -> empty .)
    SEMICOLON       reduce using rule 77 (invocation_6 -> empty .)
    RPAREN          reduce using rule 77 (invocation_6 -> empty .)
    COMMA           reduce using rule 77 (invocation_6 -> empty .)
    FROM            reduce using rule 77 (invocation_6 -> empty .)


state 261

    (78) expressions -> expressions COMMA invocation_4 expression invocation_3 .

    RPAREN          reduce using rule 78 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)
    COMMA           reduce using rule 78 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)


state 262

    (56) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .

    FOR             reduce using rule 56 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    DO              reduce using rule 56 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    WHILE           reduce using rule 56 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    IF              reduce using rule 56 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ID              reduce using rule 56 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    PRINT           reduce using rule 56 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    READ            reduce using rule 56 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    GENKEY          reduce using rule 56 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ENCRYPT         reduce using rule 56 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    DECRYPT         reduce using rule 56 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    SHA_256         reduce using rule 56 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    RANDOM_SALT     reduce using rule 56 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    HMAC            reduce using rule 56 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    RBRACE          reduce using rule 56 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)


state 263

    (65) if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .

    FOR             reduce using rule 65 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    DO              reduce using rule 65 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    WHILE           reduce using rule 65 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    IF              reduce using rule 65 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    ID              reduce using rule 65 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    PRINT           reduce using rule 65 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    READ            reduce using rule 65 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    GENKEY          reduce using rule 65 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    ENCRYPT         reduce using rule 65 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    DECRYPT         reduce using rule 65 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    SHA_256         reduce using rule 65 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    RANDOM_SALT     reduce using rule 65 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    HMAC            reduce using rule 65 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    RBRACE          reduce using rule 65 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)


state 264

    (52) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 52 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 52 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 52 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 52 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 52 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 52 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 52 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 52 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 52 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 52 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 52 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 52 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 52 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 52 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)


state 265

    (53) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 53 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 53 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 53 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 53 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 53 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 53 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 53 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 53 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 53 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 53 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 53 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 53 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 53 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 53 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)


state 266

    (48) hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 48 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 48 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 48 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 48 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 48 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 48 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 48 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 48 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 48 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 48 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 48 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 48 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 48 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 48 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)


state 267

    (57) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN . for_3 DO block for_4
    (60) for_3 -> . empty
    (124) empty -> .

    DO              reduce using rule 124 (empty -> .)

    for_3                          shift and go to state 268
    empty                          shift and go to state 269

state 268

    (57) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 . DO block for_4

    DO              shift and go to state 270


state 269

    (60) for_3 -> empty .

    DO              reduce using rule 60 (for_3 -> empty .)


state 270

    (57) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO . block for_4
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 271

state 271

    (57) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block . for_4
    (61) for_4 -> . empty
    (124) empty -> .

    FOR             reduce using rule 124 (empty -> .)
    DO              reduce using rule 124 (empty -> .)
    WHILE           reduce using rule 124 (empty -> .)
    IF              reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    PRINT           reduce using rule 124 (empty -> .)
    READ            reduce using rule 124 (empty -> .)
    GENKEY          reduce using rule 124 (empty -> .)
    ENCRYPT         reduce using rule 124 (empty -> .)
    DECRYPT         reduce using rule 124 (empty -> .)
    SHA_256         reduce using rule 124 (empty -> .)
    RANDOM_SALT     reduce using rule 124 (empty -> .)
    HMAC            reduce using rule 124 (empty -> .)
    RBRACE          reduce using rule 124 (empty -> .)

    for_4                          shift and go to state 272
    empty                          shift and go to state 273

state 272

    (57) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .

    FOR             reduce using rule 57 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    DO              reduce using rule 57 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    WHILE           reduce using rule 57 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    IF              reduce using rule 57 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    ID              reduce using rule 57 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    PRINT           reduce using rule 57 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    READ            reduce using rule 57 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    GENKEY          reduce using rule 57 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    ENCRYPT         reduce using rule 57 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    DECRYPT         reduce using rule 57 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    SHA_256         reduce using rule 57 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    RANDOM_SALT     reduce using rule 57 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    HMAC            reduce using rule 57 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    RBRACE          reduce using rule 57 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)


state 273

    (61) for_4 -> empty .

    FOR             reduce using rule 61 (for_4 -> empty .)
    DO              reduce using rule 61 (for_4 -> empty .)
    WHILE           reduce using rule 61 (for_4 -> empty .)
    IF              reduce using rule 61 (for_4 -> empty .)
    ID              reduce using rule 61 (for_4 -> empty .)
    PRINT           reduce using rule 61 (for_4 -> empty .)
    READ            reduce using rule 61 (for_4 -> empty .)
    GENKEY          reduce using rule 61 (for_4 -> empty .)
    ENCRYPT         reduce using rule 61 (for_4 -> empty .)
    DECRYPT         reduce using rule 61 (for_4 -> empty .)
    SHA_256         reduce using rule 61 (for_4 -> empty .)
    RANDOM_SALT     reduce using rule 61 (for_4 -> empty .)
    HMAC            reduce using rule 61 (for_4 -> empty .)
    RBRACE          reduce using rule 61 (for_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 7 resolved as shift
WARNING: reduce/reduce conflict in state 133 resolved using rule (print_argument -> CTES)
WARNING: rejected rule (cte -> CTES) in state 133
