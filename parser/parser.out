Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMENT
    GENKEY
    STRING
    THEN

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END
Rule 2     global_scope -> empty
Rule 3     functions -> functions function
Rule 4     functions -> function
Rule 5     functions -> empty
Rule 6     function -> FUNCTION function_signature block
Rule 7     function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
Rule 8     function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
Rule 9     return -> RETURN expressions SEMICOLON
Rule 10    function_1 -> empty
Rule 11    main -> MAIN LPAREN RPAREN main_scope var_declarations block
Rule 12    main_scope -> empty
Rule 13    var_declarations -> var_declaration_list
Rule 14    var_declarations -> empty
Rule 15    var_declaration_list -> var_declaration var_declarations
Rule 16    var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration
Rule 17    open_var_declaration -> empty
Rule 18    close_var_declaration -> empty
Rule 19    variables -> variable
Rule 20    variables -> variable COMMA variables
Rule 21    variable -> ID
Rule 22    variable -> ID LBRACK expression RBRACK
Rule 23    variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK
Rule 24    parameters -> parameters COMMA parameter
Rule 25    parameters -> parameter
Rule 26    parameters -> empty
Rule 27    parameter -> simple_type ID
Rule 28    block -> LBRACE block2 RBRACE
Rule 29    block2 -> block3
Rule 30    block2 -> empty
Rule 31    block3 -> statement block2
Rule 32    statement -> read
Rule 33    statement -> assingation
Rule 34    statement -> for
Rule 35    statement -> do_while
Rule 36    statement -> while
Rule 37    statement -> if_else
Rule 38    statement -> invocation
Rule 39    statement -> if
Rule 40    statement -> print
Rule 41    assing_to_call -> variable ASSIGN invocation
Rule 42    do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
Rule 43    for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
Rule 44    for_1 -> empty
Rule 45    for_2 -> empty
Rule 46    for_3 -> empty
Rule 47    for_4 -> empty
Rule 48    while -> WHILE breadcrumb LPAREN expression RPAREN gotof block
Rule 49    breadcrumb -> empty
Rule 50    if -> IF LPAREN expression RPAREN gotof block
Rule 51    if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block
Rule 52    gotot -> empty
Rule 53    goto -> empty
Rule 54    gotof -> empty
Rule 55    variable_list -> variable
Rule 56    variable_list -> variable_list COMMA variable
Rule 57    invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
Rule 58    invocation_1 -> empty
Rule 59    invocation_2 -> empty
Rule 60    invocation_3 -> empty
Rule 61    invocation_4 -> empty
Rule 62    invocation_5 -> empty
Rule 63    invocation_6 -> empty
Rule 64    expressions -> expressions COMMA invocation_4 expression invocation_3
Rule 65    expressions -> expression invocation_3
Rule 66    expressions -> empty
Rule 67    expression -> t_expression
Rule 68    expression -> NOT t_expression
Rule 69    print -> PRINT LPAREN print_arguments RPAREN SEMICOLON
Rule 70    read -> READ LPAREN ID RPAREN SEMICOLON
Rule 71    print_arguments -> print_argument
Rule 72    print_arguments -> print_arguments COMMA print_argument
Rule 73    print_argument -> CTES
Rule 74    print_argument -> expression
Rule 75    assingation -> variable ASSIGN expression SEMICOLON
Rule 76    t_expression -> g_expression
Rule 77    t_expression -> t_expression boolean_operator g_expression
Rule 78    g_expression -> m_expression
Rule 79    g_expression -> g_expression comparison_operator m_expression
Rule 80    m_expression -> term
Rule 81    m_expression -> m_expression addition_operator term
Rule 82    term -> factor
Rule 83    term -> term multiplication_operator factor
Rule 84    factor -> variable
Rule 85    factor -> cte
Rule 86    factor -> invocation
Rule 87    factor -> expression_parenthesis
Rule 88    expression_parenthesis -> LPAREN expression RPAREN
Rule 89    comparison_operator -> LESS
Rule 90    comparison_operator -> GREATER
Rule 91    comparison_operator -> EQUALS
Rule 92    comparison_operator -> NOTEQUAL
Rule 93    comparison_operator -> GREATERTHAN
Rule 94    comparison_operator -> LESSTHAN
Rule 95    addition_operator -> PLUS
Rule 96    addition_operator -> MINUS
Rule 97    boolean_operator -> AND
Rule 98    boolean_operator -> OR
Rule 99    multiplication_operator -> TIMES
Rule 100   multiplication_operator -> DIVIDE
Rule 101   simple_type -> INT
Rule 102   simple_type -> FLOAT
Rule 103   simple_type -> CHAR
Rule 104   simple_type -> BOOLEAN
Rule 105   cte -> CTEI
Rule 106   cte -> CTEF
Rule 107   cte -> CTEC
Rule 108   cte -> CTEB
Rule 109   empty -> <empty>

Terminals, with rules where they appear

AND                  : 97
ASSIGN               : 41 43 75
BOOLEAN              : 104
CHAR                 : 103
COLON                : 
COMMA                : 20 24 56 64 72
COMMENT              : 
CTEB                 : 108
CTEC                 : 107
CTEF                 : 106
CTEI                 : 105
CTES                 : 73
DIVIDE               : 100
DO                   : 42 43
ELSE                 : 51
END                  : 1
EQUALS               : 91
FLOAT                : 102
FOR                  : 43
FROM                 : 43
FUNCTION             : 6
GENKEY               : 
GREATER              : 90
GREATERTHAN          : 93
ID                   : 1 7 8 21 22 23 27 43 57 70
IF                   : 50 51
INT                  : 101
LBRACE               : 28
LBRACK               : 22 23 23
LESS                 : 89
LESSTHAN             : 94
LPAREN               : 7 8 11 42 43 48 50 51 57 69 70 88
MAIN                 : 11
MINUS                : 96
NOT                  : 68
NOTEQUAL             : 92
OR                   : 98
PLUS                 : 95
PRINT                : 69
PROGRAM              : 1
RBRACE               : 28
RBRACK               : 22 23 23
READ                 : 70
RETURN               : 9
RPAREN               : 7 8 11 42 43 48 50 51 57 69 70 88
SEMICOLON            : 1 9 16 42 57 69 70 75
STRING               : 
THEN                 : 
TIMES                : 99
VARIABLE             : 16
VOID                 : 8
WHILE                : 42 48
error                : 

Nonterminals, with rules where they appear

addition_operator    : 81
assing_to_call       : 
assingation          : 33
block                : 6 11 42 43 48 50 51 51
block2               : 28 31
block3               : 29
boolean_operator     : 77
breadcrumb           : 42 48
close_var_declaration : 7 8 16
comparison_operator  : 79
cte                  : 85
do_while             : 35
empty                : 2 5 10 12 14 17 18 26 30 44 45 46 47 49 52 53 54 58 59 60 61 62 63 66
expression           : 22 23 23 42 43 43 48 50 51 64 65 74 75 88
expression_parenthesis : 87
expressions          : 9 57 64
factor               : 82 83
for                  : 34
for_1                : 43
for_2                : 43
for_3                : 43
for_4                : 43
function             : 3 4
function_1           : 7 8
function_signature   : 6
functions            : 1 3
g_expression         : 76 77 79
global_scope         : 1
goto                 : 51
gotof                : 48 50 51
gotot                : 42
if                   : 39
if_else              : 37
invocation           : 38 41 86
invocation_1         : 57
invocation_2         : 57
invocation_3         : 64 65
invocation_4         : 64
invocation_5         : 57
invocation_6         : 57
m_expression         : 78 79 81
main                 : 1
main_scope           : 11
multiplication_operator : 83
open_var_declaration : 7 8 16
parameter            : 24 25
parameters           : 7 8 24
print                : 40
print_argument       : 71 72
print_arguments      : 69 72
program              : 0
read                 : 32
return               : 
simple_type          : 7 16 27
statement            : 31
t_expression         : 67 68 77
term                 : 80 81 83
var_declaration      : 15
var_declaration_list : 13
var_declarations     : 1 7 8 11 15
variable             : 19 20 41 55 56 75 84
variable_list        : 56
variables            : 16 20
while                : 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON global_scope var_declarations functions main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON global_scope var_declarations functions main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON global_scope var_declarations functions main END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . global_scope var_declarations functions main END
    (2) global_scope -> . empty
    (109) empty -> .

    VARIABLE        reduce using rule 109 (empty -> .)
    FUNCTION        reduce using rule 109 (empty -> .)
    MAIN            reduce using rule 109 (empty -> .)

    global_scope                   shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON global_scope . var_declarations functions main END
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (109) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 109 (empty -> .)
    MAIN            reduce using rule 109 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 7
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 6

    (2) global_scope -> empty .

    VARIABLE        reduce using rule 2 (global_scope -> empty .)
    FUNCTION        reduce using rule 2 (global_scope -> empty .)
    MAIN            reduce using rule 2 (global_scope -> empty .)


state 7

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations . functions main END
    (3) functions -> . functions function
    (4) functions -> . function
    (5) functions -> . empty
    (6) function -> . FUNCTION function_signature block
    (109) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 109 (empty -> .)

  ! FUNCTION        [ reduce using rule 109 (empty -> .) ]

    functions                      shift and go to state 12
    function                       shift and go to state 13
    empty                          shift and go to state 14

state 8

    (13) var_declarations -> var_declaration_list .

    FUNCTION        reduce using rule 13 (var_declarations -> var_declaration_list .)
    MAIN            reduce using rule 13 (var_declarations -> var_declaration_list .)
    LBRACE          reduce using rule 13 (var_declarations -> var_declaration_list .)


state 9

    (14) var_declarations -> empty .

    FUNCTION        reduce using rule 14 (var_declarations -> empty .)
    MAIN            reduce using rule 14 (var_declarations -> empty .)
    LBRACE          reduce using rule 14 (var_declarations -> empty .)


state 10

    (15) var_declaration_list -> var_declaration . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (109) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 109 (empty -> .)
    MAIN            reduce using rule 109 (empty -> .)
    LBRACE          reduce using rule 109 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declaration                shift and go to state 10
    var_declarations               shift and go to state 16
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9

state 11

    (16) var_declaration -> VARIABLE . open_var_declaration simple_type variables SEMICOLON close_var_declaration
    (17) open_var_declaration -> . empty
    (109) empty -> .

    INT             reduce using rule 109 (empty -> .)
    FLOAT           reduce using rule 109 (empty -> .)
    CHAR            reduce using rule 109 (empty -> .)
    BOOLEAN         reduce using rule 109 (empty -> .)

    open_var_declaration           shift and go to state 17
    empty                          shift and go to state 18

state 12

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions . main END
    (3) functions -> functions . function
    (11) main -> . MAIN LPAREN RPAREN main_scope var_declarations block
    (6) function -> . FUNCTION function_signature block

    MAIN            shift and go to state 21
    FUNCTION        shift and go to state 15

    main                           shift and go to state 19
    function                       shift and go to state 20

state 13

    (4) functions -> function .

    MAIN            reduce using rule 4 (functions -> function .)
    FUNCTION        reduce using rule 4 (functions -> function .)


state 14

    (5) functions -> empty .

    MAIN            reduce using rule 5 (functions -> empty .)
    FUNCTION        reduce using rule 5 (functions -> empty .)


state 15

    (6) function -> FUNCTION . function_signature block
    (7) function_signature -> . simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (8) function_signature -> . VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (101) simple_type -> . INT
    (102) simple_type -> . FLOAT
    (103) simple_type -> . CHAR
    (104) simple_type -> . BOOLEAN

    VOID            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28

    function_signature             shift and go to state 22
    simple_type                    shift and go to state 23

state 16

    (15) var_declaration_list -> var_declaration var_declarations .

    FUNCTION        reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)
    MAIN            reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)
    LBRACE          reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)


state 17

    (16) var_declaration -> VARIABLE open_var_declaration . simple_type variables SEMICOLON close_var_declaration
    (101) simple_type -> . INT
    (102) simple_type -> . FLOAT
    (103) simple_type -> . CHAR
    (104) simple_type -> . BOOLEAN

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28

    simple_type                    shift and go to state 29

state 18

    (17) open_var_declaration -> empty .

    INT             reduce using rule 17 (open_var_declaration -> empty .)
    FLOAT           reduce using rule 17 (open_var_declaration -> empty .)
    CHAR            reduce using rule 17 (open_var_declaration -> empty .)
    BOOLEAN         reduce using rule 17 (open_var_declaration -> empty .)
    COMMA           reduce using rule 17 (open_var_declaration -> empty .)
    RPAREN          reduce using rule 17 (open_var_declaration -> empty .)


state 19

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main . END

    END             shift and go to state 30


state 20

    (3) functions -> functions function .

    MAIN            reduce using rule 3 (functions -> functions function .)
    FUNCTION        reduce using rule 3 (functions -> functions function .)


state 21

    (11) main -> MAIN . LPAREN RPAREN main_scope var_declarations block

    LPAREN          shift and go to state 31


state 22

    (6) function -> FUNCTION function_signature . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 33

    block                          shift and go to state 32

state 23

    (7) function_signature -> simple_type . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    ID              shift and go to state 34


state 24

    (8) function_signature -> VOID . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    ID              shift and go to state 35


state 25

    (101) simple_type -> INT .

    ID              reduce using rule 101 (simple_type -> INT .)


state 26

    (102) simple_type -> FLOAT .

    ID              reduce using rule 102 (simple_type -> FLOAT .)


state 27

    (103) simple_type -> CHAR .

    ID              reduce using rule 103 (simple_type -> CHAR .)


state 28

    (104) simple_type -> BOOLEAN .

    ID              reduce using rule 104 (simple_type -> BOOLEAN .)


state 29

    (16) var_declaration -> VARIABLE open_var_declaration simple_type . variables SEMICOLON close_var_declaration
    (19) variables -> . variable
    (20) variables -> . variable COMMA variables
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 38

    variables                      shift and go to state 36
    variable                       shift and go to state 37

state 30

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .)


state 31

    (11) main -> MAIN LPAREN . RPAREN main_scope var_declarations block

    RPAREN          shift and go to state 39


state 32

    (6) function -> FUNCTION function_signature block .

    MAIN            reduce using rule 6 (function -> FUNCTION function_signature block .)
    FUNCTION        reduce using rule 6 (function -> FUNCTION function_signature block .)


state 33

    (28) block -> LBRACE . block2 RBRACE
    (29) block2 -> . block3
    (30) block2 -> . empty
    (31) block3 -> . statement block2
    (109) empty -> .
    (32) statement -> . read
    (33) statement -> . assingation
    (34) statement -> . for
    (35) statement -> . do_while
    (36) statement -> . while
    (37) statement -> . if_else
    (38) statement -> . invocation
    (39) statement -> . if
    (40) statement -> . print
    (70) read -> . READ LPAREN ID RPAREN SEMICOLON
    (75) assingation -> . variable ASSIGN expression SEMICOLON
    (43) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (42) do_while -> . DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (48) while -> . WHILE breadcrumb LPAREN expression RPAREN gotof block
    (51) if_else -> . IF LPAREN expression RPAREN gotof block ELSE goto block
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (50) if -> . IF LPAREN expression RPAREN gotof block
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          reduce using rule 109 (empty -> .)
    READ            shift and go to state 53
    FOR             shift and go to state 56
    DO              shift and go to state 57
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    ID              shift and go to state 54
    PRINT           shift and go to state 60

    block2                         shift and go to state 40
    block3                         shift and go to state 41
    empty                          shift and go to state 42
    statement                      shift and go to state 43
    read                           shift and go to state 44
    assingation                    shift and go to state 45
    for                            shift and go to state 46
    do_while                       shift and go to state 47
    while                          shift and go to state 48
    if_else                        shift and go to state 49
    invocation                     shift and go to state 50
    if                             shift and go to state 51
    print                          shift and go to state 52
    variable                       shift and go to state 55

state 34

    (7) function_signature -> simple_type ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (10) function_1 -> . empty
    (109) empty -> .

    LPAREN          reduce using rule 109 (empty -> .)

    function_1                     shift and go to state 61
    empty                          shift and go to state 62

state 35

    (8) function_signature -> VOID ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (10) function_1 -> . empty
    (109) empty -> .

    LPAREN          reduce using rule 109 (empty -> .)

    function_1                     shift and go to state 63
    empty                          shift and go to state 62

state 36

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables . SEMICOLON close_var_declaration

    SEMICOLON       shift and go to state 64


state 37

    (19) variables -> variable .
    (20) variables -> variable . COMMA variables

    SEMICOLON       reduce using rule 19 (variables -> variable .)
    COMMA           shift and go to state 65


state 38

    (21) variable -> ID .
    (22) variable -> ID . LBRACK expression RBRACK
    (23) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK

    COMMA           reduce using rule 21 (variable -> ID .)
    SEMICOLON       reduce using rule 21 (variable -> ID .)
    LBRACK          shift and go to state 66


state 39

    (11) main -> MAIN LPAREN RPAREN . main_scope var_declarations block
    (12) main_scope -> . empty
    (109) empty -> .

    VARIABLE        reduce using rule 109 (empty -> .)
    LBRACE          reduce using rule 109 (empty -> .)

    main_scope                     shift and go to state 67
    empty                          shift and go to state 68

state 40

    (28) block -> LBRACE block2 . RBRACE

    RBRACE          shift and go to state 69


state 41

    (29) block2 -> block3 .

    RBRACE          reduce using rule 29 (block2 -> block3 .)


state 42

    (30) block2 -> empty .

    RBRACE          reduce using rule 30 (block2 -> empty .)


state 43

    (31) block3 -> statement . block2
    (29) block2 -> . block3
    (30) block2 -> . empty
    (31) block3 -> . statement block2
    (109) empty -> .
    (32) statement -> . read
    (33) statement -> . assingation
    (34) statement -> . for
    (35) statement -> . do_while
    (36) statement -> . while
    (37) statement -> . if_else
    (38) statement -> . invocation
    (39) statement -> . if
    (40) statement -> . print
    (70) read -> . READ LPAREN ID RPAREN SEMICOLON
    (75) assingation -> . variable ASSIGN expression SEMICOLON
    (43) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (42) do_while -> . DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (48) while -> . WHILE breadcrumb LPAREN expression RPAREN gotof block
    (51) if_else -> . IF LPAREN expression RPAREN gotof block ELSE goto block
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (50) if -> . IF LPAREN expression RPAREN gotof block
    (69) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          reduce using rule 109 (empty -> .)
    READ            shift and go to state 53
    FOR             shift and go to state 56
    DO              shift and go to state 57
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    ID              shift and go to state 54
    PRINT           shift and go to state 60

    statement                      shift and go to state 43
    block2                         shift and go to state 70
    block3                         shift and go to state 41
    empty                          shift and go to state 42
    read                           shift and go to state 44
    assingation                    shift and go to state 45
    for                            shift and go to state 46
    do_while                       shift and go to state 47
    while                          shift and go to state 48
    if_else                        shift and go to state 49
    invocation                     shift and go to state 50
    if                             shift and go to state 51
    print                          shift and go to state 52
    variable                       shift and go to state 55

state 44

    (32) statement -> read .

    READ            reduce using rule 32 (statement -> read .)
    FOR             reduce using rule 32 (statement -> read .)
    DO              reduce using rule 32 (statement -> read .)
    WHILE           reduce using rule 32 (statement -> read .)
    IF              reduce using rule 32 (statement -> read .)
    ID              reduce using rule 32 (statement -> read .)
    PRINT           reduce using rule 32 (statement -> read .)
    RBRACE          reduce using rule 32 (statement -> read .)


state 45

    (33) statement -> assingation .

    READ            reduce using rule 33 (statement -> assingation .)
    FOR             reduce using rule 33 (statement -> assingation .)
    DO              reduce using rule 33 (statement -> assingation .)
    WHILE           reduce using rule 33 (statement -> assingation .)
    IF              reduce using rule 33 (statement -> assingation .)
    ID              reduce using rule 33 (statement -> assingation .)
    PRINT           reduce using rule 33 (statement -> assingation .)
    RBRACE          reduce using rule 33 (statement -> assingation .)


state 46

    (34) statement -> for .

    READ            reduce using rule 34 (statement -> for .)
    FOR             reduce using rule 34 (statement -> for .)
    DO              reduce using rule 34 (statement -> for .)
    WHILE           reduce using rule 34 (statement -> for .)
    IF              reduce using rule 34 (statement -> for .)
    ID              reduce using rule 34 (statement -> for .)
    PRINT           reduce using rule 34 (statement -> for .)
    RBRACE          reduce using rule 34 (statement -> for .)


state 47

    (35) statement -> do_while .

    READ            reduce using rule 35 (statement -> do_while .)
    FOR             reduce using rule 35 (statement -> do_while .)
    DO              reduce using rule 35 (statement -> do_while .)
    WHILE           reduce using rule 35 (statement -> do_while .)
    IF              reduce using rule 35 (statement -> do_while .)
    ID              reduce using rule 35 (statement -> do_while .)
    PRINT           reduce using rule 35 (statement -> do_while .)
    RBRACE          reduce using rule 35 (statement -> do_while .)


state 48

    (36) statement -> while .

    READ            reduce using rule 36 (statement -> while .)
    FOR             reduce using rule 36 (statement -> while .)
    DO              reduce using rule 36 (statement -> while .)
    WHILE           reduce using rule 36 (statement -> while .)
    IF              reduce using rule 36 (statement -> while .)
    ID              reduce using rule 36 (statement -> while .)
    PRINT           reduce using rule 36 (statement -> while .)
    RBRACE          reduce using rule 36 (statement -> while .)


state 49

    (37) statement -> if_else .

    READ            reduce using rule 37 (statement -> if_else .)
    FOR             reduce using rule 37 (statement -> if_else .)
    DO              reduce using rule 37 (statement -> if_else .)
    WHILE           reduce using rule 37 (statement -> if_else .)
    IF              reduce using rule 37 (statement -> if_else .)
    ID              reduce using rule 37 (statement -> if_else .)
    PRINT           reduce using rule 37 (statement -> if_else .)
    RBRACE          reduce using rule 37 (statement -> if_else .)


state 50

    (38) statement -> invocation .

    READ            reduce using rule 38 (statement -> invocation .)
    FOR             reduce using rule 38 (statement -> invocation .)
    DO              reduce using rule 38 (statement -> invocation .)
    WHILE           reduce using rule 38 (statement -> invocation .)
    IF              reduce using rule 38 (statement -> invocation .)
    ID              reduce using rule 38 (statement -> invocation .)
    PRINT           reduce using rule 38 (statement -> invocation .)
    RBRACE          reduce using rule 38 (statement -> invocation .)


state 51

    (39) statement -> if .

    READ            reduce using rule 39 (statement -> if .)
    FOR             reduce using rule 39 (statement -> if .)
    DO              reduce using rule 39 (statement -> if .)
    WHILE           reduce using rule 39 (statement -> if .)
    IF              reduce using rule 39 (statement -> if .)
    ID              reduce using rule 39 (statement -> if .)
    PRINT           reduce using rule 39 (statement -> if .)
    RBRACE          reduce using rule 39 (statement -> if .)


state 52

    (40) statement -> print .

    READ            reduce using rule 40 (statement -> print .)
    FOR             reduce using rule 40 (statement -> print .)
    DO              reduce using rule 40 (statement -> print .)
    WHILE           reduce using rule 40 (statement -> print .)
    IF              reduce using rule 40 (statement -> print .)
    ID              reduce using rule 40 (statement -> print .)
    PRINT           reduce using rule 40 (statement -> print .)
    RBRACE          reduce using rule 40 (statement -> print .)


state 53

    (70) read -> READ . LPAREN ID RPAREN SEMICOLON

    LPAREN          shift and go to state 71


state 54

    (57) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (21) variable -> ID .
    (22) variable -> ID . LBRACK expression RBRACK
    (23) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (58) invocation_1 -> . empty
    (109) empty -> .

    ASSIGN          reduce using rule 21 (variable -> ID .)
    LBRACK          shift and go to state 66
    LPAREN          reduce using rule 109 (empty -> .)

    invocation_1                   shift and go to state 72
    empty                          shift and go to state 73

state 55

    (75) assingation -> variable . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 74


state 56

    (43) for -> FOR . LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    LPAREN          shift and go to state 75


state 57

    (42) do_while -> DO . breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (49) breadcrumb -> . empty
    (109) empty -> .

    LBRACE          reduce using rule 109 (empty -> .)

    breadcrumb                     shift and go to state 76
    empty                          shift and go to state 77

state 58

    (48) while -> WHILE . breadcrumb LPAREN expression RPAREN gotof block
    (49) breadcrumb -> . empty
    (109) empty -> .

    LPAREN          reduce using rule 109 (empty -> .)

    breadcrumb                     shift and go to state 78
    empty                          shift and go to state 77

state 59

    (51) if_else -> IF . LPAREN expression RPAREN gotof block ELSE goto block
    (50) if -> IF . LPAREN expression RPAREN gotof block

    LPAREN          shift and go to state 79


state 60

    (69) print -> PRINT . LPAREN print_arguments RPAREN SEMICOLON

    LPAREN          shift and go to state 80


state 61

    (7) function_signature -> simple_type ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    LPAREN          shift and go to state 81


state 62

    (10) function_1 -> empty .

    LPAREN          reduce using rule 10 (function_1 -> empty .)


state 63

    (8) function_signature -> VOID ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    LPAREN          shift and go to state 82


state 64

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON . close_var_declaration
    (18) close_var_declaration -> . empty
    (109) empty -> .

    VARIABLE        reduce using rule 109 (empty -> .)
    FUNCTION        reduce using rule 109 (empty -> .)
    MAIN            reduce using rule 109 (empty -> .)
    LBRACE          reduce using rule 109 (empty -> .)

    close_var_declaration          shift and go to state 83
    empty                          shift and go to state 84

state 65

    (20) variables -> variable COMMA . variables
    (19) variables -> . variable
    (20) variables -> . variable COMMA variables
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 38

    variable                       shift and go to state 37
    variables                      shift and go to state 85

state 66

    (22) variable -> ID LBRACK . expression RBRACK
    (23) variable -> ID LBRACK . expression RBRACK LBRACK expression RBRACK
    (67) expression -> . t_expression
    (68) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 89
    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    expression                     shift and go to state 87
    t_expression                   shift and go to state 88
    g_expression                   shift and go to state 90
    m_expression                   shift and go to state 91
    term                           shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 67

    (11) main -> MAIN LPAREN RPAREN main_scope . var_declarations block
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (109) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 109 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 103
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 68

    (12) main_scope -> empty .

    VARIABLE        reduce using rule 12 (main_scope -> empty .)
    LBRACE          reduce using rule 12 (main_scope -> empty .)


state 69

    (28) block -> LBRACE block2 RBRACE .

    MAIN            reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    FUNCTION        reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    WHILE           reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    END             reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    ELSE            reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    READ            reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    FOR             reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    DO              reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    IF              reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    ID              reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    PRINT           reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    RBRACE          reduce using rule 28 (block -> LBRACE block2 RBRACE .)


state 70

    (31) block3 -> statement block2 .

    RBRACE          reduce using rule 31 (block3 -> statement block2 .)


state 71

    (70) read -> READ LPAREN . ID RPAREN SEMICOLON

    ID              shift and go to state 104


state 72

    (57) invocation -> ID invocation_1 . LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    LPAREN          shift and go to state 105


state 73

    (58) invocation_1 -> empty .

    LPAREN          reduce using rule 58 (invocation_1 -> empty .)


state 74

    (75) assingation -> variable ASSIGN . expression SEMICOLON
    (67) expression -> . t_expression
    (68) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 89
    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    variable                       shift and go to state 94
    expression                     shift and go to state 106
    t_expression                   shift and go to state 88
    g_expression                   shift and go to state 90
    m_expression                   shift and go to state 91
    term                           shift and go to state 92
    factor                         shift and go to state 93
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 75

    (43) for -> FOR LPAREN . ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    ID              shift and go to state 107


state 76

    (42) do_while -> DO breadcrumb . block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 33

    block                          shift and go to state 108

state 77

    (49) breadcrumb -> empty .

    LBRACE          reduce using rule 49 (breadcrumb -> empty .)
    LPAREN          reduce using rule 49 (breadcrumb -> empty .)


state 78

    (48) while -> WHILE breadcrumb . LPAREN expression RPAREN gotof block

    LPAREN          shift and go to state 109


state 79

    (51) if_else -> IF LPAREN . expression RPAREN gotof block ELSE goto block
    (50) if -> IF LPAREN . expression RPAREN gotof block
    (67) expression -> . t_expression
    (68) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 89
    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    expression                     shift and go to state 110
    t_expression                   shift and go to state 88
    g_expression                   shift and go to state 90
    m_expression                   shift and go to state 91
    term                           shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 80

    (69) print -> PRINT LPAREN . print_arguments RPAREN SEMICOLON
    (71) print_arguments -> . print_argument
    (72) print_arguments -> . print_arguments COMMA print_argument
    (73) print_argument -> . CTES
    (74) print_argument -> . expression
    (67) expression -> . t_expression
    (68) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    CTES            shift and go to state 113
    NOT             shift and go to state 89
    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    print_arguments                shift and go to state 111
    print_argument                 shift and go to state 112
    expression                     shift and go to state 114
    t_expression                   shift and go to state 88
    g_expression                   shift and go to state 90
    m_expression                   shift and go to state 91
    term                           shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 81

    (7) function_signature -> simple_type ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (17) open_var_declaration -> . empty
    (109) empty -> .

    INT             reduce using rule 109 (empty -> .)
    FLOAT           reduce using rule 109 (empty -> .)
    CHAR            reduce using rule 109 (empty -> .)
    BOOLEAN         reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)
    RPAREN          reduce using rule 109 (empty -> .)

    open_var_declaration           shift and go to state 115
    empty                          shift and go to state 18

state 82

    (8) function_signature -> VOID ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (17) open_var_declaration -> . empty
    (109) empty -> .

    INT             reduce using rule 109 (empty -> .)
    FLOAT           reduce using rule 109 (empty -> .)
    CHAR            reduce using rule 109 (empty -> .)
    BOOLEAN         reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)
    RPAREN          reduce using rule 109 (empty -> .)

    open_var_declaration           shift and go to state 116
    empty                          shift and go to state 18

state 83

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .

    VARIABLE        reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    FUNCTION        reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    MAIN            reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    LBRACE          reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)


state 84

    (18) close_var_declaration -> empty .

    VARIABLE        reduce using rule 18 (close_var_declaration -> empty .)
    FUNCTION        reduce using rule 18 (close_var_declaration -> empty .)
    MAIN            reduce using rule 18 (close_var_declaration -> empty .)
    LBRACE          reduce using rule 18 (close_var_declaration -> empty .)
    RPAREN          reduce using rule 18 (close_var_declaration -> empty .)


state 85

    (20) variables -> variable COMMA variables .

    SEMICOLON       reduce using rule 20 (variables -> variable COMMA variables .)


state 86

    (21) variable -> ID .
    (22) variable -> ID . LBRACK expression RBRACK
    (23) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (57) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (58) invocation_1 -> . empty
    (109) empty -> .

    TIMES           reduce using rule 21 (variable -> ID .)
    DIVIDE          reduce using rule 21 (variable -> ID .)
    PLUS            reduce using rule 21 (variable -> ID .)
    MINUS           reduce using rule 21 (variable -> ID .)
    LESS            reduce using rule 21 (variable -> ID .)
    GREATER         reduce using rule 21 (variable -> ID .)
    EQUALS          reduce using rule 21 (variable -> ID .)
    NOTEQUAL        reduce using rule 21 (variable -> ID .)
    GREATERTHAN     reduce using rule 21 (variable -> ID .)
    LESSTHAN        reduce using rule 21 (variable -> ID .)
    AND             reduce using rule 21 (variable -> ID .)
    OR              reduce using rule 21 (variable -> ID .)
    RBRACK          reduce using rule 21 (variable -> ID .)
    SEMICOLON       reduce using rule 21 (variable -> ID .)
    RPAREN          reduce using rule 21 (variable -> ID .)
    COMMA           reduce using rule 21 (variable -> ID .)
    FROM            reduce using rule 21 (variable -> ID .)
    LBRACK          shift and go to state 66
    LPAREN          reduce using rule 109 (empty -> .)

    invocation_1                   shift and go to state 72
    empty                          shift and go to state 73

state 87

    (22) variable -> ID LBRACK expression . RBRACK
    (23) variable -> ID LBRACK expression . RBRACK LBRACK expression RBRACK

    RBRACK          shift and go to state 117


state 88

    (67) expression -> t_expression .
    (77) t_expression -> t_expression . boolean_operator g_expression
    (97) boolean_operator -> . AND
    (98) boolean_operator -> . OR

    RBRACK          reduce using rule 67 (expression -> t_expression .)
    SEMICOLON       reduce using rule 67 (expression -> t_expression .)
    RPAREN          reduce using rule 67 (expression -> t_expression .)
    COMMA           reduce using rule 67 (expression -> t_expression .)
    FROM            reduce using rule 67 (expression -> t_expression .)
    AND             shift and go to state 119
    OR              shift and go to state 120

    boolean_operator               shift and go to state 118

state 89

    (68) expression -> NOT . t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    t_expression                   shift and go to state 121
    g_expression                   shift and go to state 90
    m_expression                   shift and go to state 91
    term                           shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 90

    (76) t_expression -> g_expression .
    (79) g_expression -> g_expression . comparison_operator m_expression
    (89) comparison_operator -> . LESS
    (90) comparison_operator -> . GREATER
    (91) comparison_operator -> . EQUALS
    (92) comparison_operator -> . NOTEQUAL
    (93) comparison_operator -> . GREATERTHAN
    (94) comparison_operator -> . LESSTHAN

    AND             reduce using rule 76 (t_expression -> g_expression .)
    OR              reduce using rule 76 (t_expression -> g_expression .)
    RBRACK          reduce using rule 76 (t_expression -> g_expression .)
    SEMICOLON       reduce using rule 76 (t_expression -> g_expression .)
    RPAREN          reduce using rule 76 (t_expression -> g_expression .)
    COMMA           reduce using rule 76 (t_expression -> g_expression .)
    FROM            reduce using rule 76 (t_expression -> g_expression .)
    LESS            shift and go to state 123
    GREATER         shift and go to state 124
    EQUALS          shift and go to state 125
    NOTEQUAL        shift and go to state 126
    GREATERTHAN     shift and go to state 127
    LESSTHAN        shift and go to state 128

    comparison_operator            shift and go to state 122

state 91

    (78) g_expression -> m_expression .
    (81) m_expression -> m_expression . addition_operator term
    (95) addition_operator -> . PLUS
    (96) addition_operator -> . MINUS

    LESS            reduce using rule 78 (g_expression -> m_expression .)
    GREATER         reduce using rule 78 (g_expression -> m_expression .)
    EQUALS          reduce using rule 78 (g_expression -> m_expression .)
    NOTEQUAL        reduce using rule 78 (g_expression -> m_expression .)
    GREATERTHAN     reduce using rule 78 (g_expression -> m_expression .)
    LESSTHAN        reduce using rule 78 (g_expression -> m_expression .)
    AND             reduce using rule 78 (g_expression -> m_expression .)
    OR              reduce using rule 78 (g_expression -> m_expression .)
    RBRACK          reduce using rule 78 (g_expression -> m_expression .)
    SEMICOLON       reduce using rule 78 (g_expression -> m_expression .)
    RPAREN          reduce using rule 78 (g_expression -> m_expression .)
    COMMA           reduce using rule 78 (g_expression -> m_expression .)
    FROM            reduce using rule 78 (g_expression -> m_expression .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131

    addition_operator              shift and go to state 129

state 92

    (80) m_expression -> term .
    (83) term -> term . multiplication_operator factor
    (99) multiplication_operator -> . TIMES
    (100) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 80 (m_expression -> term .)
    MINUS           reduce using rule 80 (m_expression -> term .)
    LESS            reduce using rule 80 (m_expression -> term .)
    GREATER         reduce using rule 80 (m_expression -> term .)
    EQUALS          reduce using rule 80 (m_expression -> term .)
    NOTEQUAL        reduce using rule 80 (m_expression -> term .)
    GREATERTHAN     reduce using rule 80 (m_expression -> term .)
    LESSTHAN        reduce using rule 80 (m_expression -> term .)
    AND             reduce using rule 80 (m_expression -> term .)
    OR              reduce using rule 80 (m_expression -> term .)
    RBRACK          reduce using rule 80 (m_expression -> term .)
    SEMICOLON       reduce using rule 80 (m_expression -> term .)
    RPAREN          reduce using rule 80 (m_expression -> term .)
    COMMA           reduce using rule 80 (m_expression -> term .)
    FROM            reduce using rule 80 (m_expression -> term .)
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134

    multiplication_operator        shift and go to state 132

state 93

    (82) term -> factor .

    TIMES           reduce using rule 82 (term -> factor .)
    DIVIDE          reduce using rule 82 (term -> factor .)
    PLUS            reduce using rule 82 (term -> factor .)
    MINUS           reduce using rule 82 (term -> factor .)
    LESS            reduce using rule 82 (term -> factor .)
    GREATER         reduce using rule 82 (term -> factor .)
    EQUALS          reduce using rule 82 (term -> factor .)
    NOTEQUAL        reduce using rule 82 (term -> factor .)
    GREATERTHAN     reduce using rule 82 (term -> factor .)
    LESSTHAN        reduce using rule 82 (term -> factor .)
    AND             reduce using rule 82 (term -> factor .)
    OR              reduce using rule 82 (term -> factor .)
    RBRACK          reduce using rule 82 (term -> factor .)
    SEMICOLON       reduce using rule 82 (term -> factor .)
    RPAREN          reduce using rule 82 (term -> factor .)
    COMMA           reduce using rule 82 (term -> factor .)
    FROM            reduce using rule 82 (term -> factor .)


state 94

    (84) factor -> variable .

    TIMES           reduce using rule 84 (factor -> variable .)
    DIVIDE          reduce using rule 84 (factor -> variable .)
    PLUS            reduce using rule 84 (factor -> variable .)
    MINUS           reduce using rule 84 (factor -> variable .)
    LESS            reduce using rule 84 (factor -> variable .)
    GREATER         reduce using rule 84 (factor -> variable .)
    EQUALS          reduce using rule 84 (factor -> variable .)
    NOTEQUAL        reduce using rule 84 (factor -> variable .)
    GREATERTHAN     reduce using rule 84 (factor -> variable .)
    LESSTHAN        reduce using rule 84 (factor -> variable .)
    AND             reduce using rule 84 (factor -> variable .)
    OR              reduce using rule 84 (factor -> variable .)
    RBRACK          reduce using rule 84 (factor -> variable .)
    SEMICOLON       reduce using rule 84 (factor -> variable .)
    RPAREN          reduce using rule 84 (factor -> variable .)
    COMMA           reduce using rule 84 (factor -> variable .)
    FROM            reduce using rule 84 (factor -> variable .)


state 95

    (85) factor -> cte .

    TIMES           reduce using rule 85 (factor -> cte .)
    DIVIDE          reduce using rule 85 (factor -> cte .)
    PLUS            reduce using rule 85 (factor -> cte .)
    MINUS           reduce using rule 85 (factor -> cte .)
    LESS            reduce using rule 85 (factor -> cte .)
    GREATER         reduce using rule 85 (factor -> cte .)
    EQUALS          reduce using rule 85 (factor -> cte .)
    NOTEQUAL        reduce using rule 85 (factor -> cte .)
    GREATERTHAN     reduce using rule 85 (factor -> cte .)
    LESSTHAN        reduce using rule 85 (factor -> cte .)
    AND             reduce using rule 85 (factor -> cte .)
    OR              reduce using rule 85 (factor -> cte .)
    RBRACK          reduce using rule 85 (factor -> cte .)
    SEMICOLON       reduce using rule 85 (factor -> cte .)
    RPAREN          reduce using rule 85 (factor -> cte .)
    COMMA           reduce using rule 85 (factor -> cte .)
    FROM            reduce using rule 85 (factor -> cte .)


state 96

    (86) factor -> invocation .

    TIMES           reduce using rule 86 (factor -> invocation .)
    DIVIDE          reduce using rule 86 (factor -> invocation .)
    PLUS            reduce using rule 86 (factor -> invocation .)
    MINUS           reduce using rule 86 (factor -> invocation .)
    LESS            reduce using rule 86 (factor -> invocation .)
    GREATER         reduce using rule 86 (factor -> invocation .)
    EQUALS          reduce using rule 86 (factor -> invocation .)
    NOTEQUAL        reduce using rule 86 (factor -> invocation .)
    GREATERTHAN     reduce using rule 86 (factor -> invocation .)
    LESSTHAN        reduce using rule 86 (factor -> invocation .)
    AND             reduce using rule 86 (factor -> invocation .)
    OR              reduce using rule 86 (factor -> invocation .)
    RBRACK          reduce using rule 86 (factor -> invocation .)
    SEMICOLON       reduce using rule 86 (factor -> invocation .)
    RPAREN          reduce using rule 86 (factor -> invocation .)
    COMMA           reduce using rule 86 (factor -> invocation .)
    FROM            reduce using rule 86 (factor -> invocation .)


state 97

    (87) factor -> expression_parenthesis .

    TIMES           reduce using rule 87 (factor -> expression_parenthesis .)
    DIVIDE          reduce using rule 87 (factor -> expression_parenthesis .)
    PLUS            reduce using rule 87 (factor -> expression_parenthesis .)
    MINUS           reduce using rule 87 (factor -> expression_parenthesis .)
    LESS            reduce using rule 87 (factor -> expression_parenthesis .)
    GREATER         reduce using rule 87 (factor -> expression_parenthesis .)
    EQUALS          reduce using rule 87 (factor -> expression_parenthesis .)
    NOTEQUAL        reduce using rule 87 (factor -> expression_parenthesis .)
    GREATERTHAN     reduce using rule 87 (factor -> expression_parenthesis .)
    LESSTHAN        reduce using rule 87 (factor -> expression_parenthesis .)
    AND             reduce using rule 87 (factor -> expression_parenthesis .)
    OR              reduce using rule 87 (factor -> expression_parenthesis .)
    RBRACK          reduce using rule 87 (factor -> expression_parenthesis .)
    SEMICOLON       reduce using rule 87 (factor -> expression_parenthesis .)
    RPAREN          reduce using rule 87 (factor -> expression_parenthesis .)
    COMMA           reduce using rule 87 (factor -> expression_parenthesis .)
    FROM            reduce using rule 87 (factor -> expression_parenthesis .)


state 98

    (105) cte -> CTEI .

    TIMES           reduce using rule 105 (cte -> CTEI .)
    DIVIDE          reduce using rule 105 (cte -> CTEI .)
    PLUS            reduce using rule 105 (cte -> CTEI .)
    MINUS           reduce using rule 105 (cte -> CTEI .)
    LESS            reduce using rule 105 (cte -> CTEI .)
    GREATER         reduce using rule 105 (cte -> CTEI .)
    EQUALS          reduce using rule 105 (cte -> CTEI .)
    NOTEQUAL        reduce using rule 105 (cte -> CTEI .)
    GREATERTHAN     reduce using rule 105 (cte -> CTEI .)
    LESSTHAN        reduce using rule 105 (cte -> CTEI .)
    AND             reduce using rule 105 (cte -> CTEI .)
    OR              reduce using rule 105 (cte -> CTEI .)
    RBRACK          reduce using rule 105 (cte -> CTEI .)
    SEMICOLON       reduce using rule 105 (cte -> CTEI .)
    RPAREN          reduce using rule 105 (cte -> CTEI .)
    COMMA           reduce using rule 105 (cte -> CTEI .)
    FROM            reduce using rule 105 (cte -> CTEI .)


state 99

    (106) cte -> CTEF .

    TIMES           reduce using rule 106 (cte -> CTEF .)
    DIVIDE          reduce using rule 106 (cte -> CTEF .)
    PLUS            reduce using rule 106 (cte -> CTEF .)
    MINUS           reduce using rule 106 (cte -> CTEF .)
    LESS            reduce using rule 106 (cte -> CTEF .)
    GREATER         reduce using rule 106 (cte -> CTEF .)
    EQUALS          reduce using rule 106 (cte -> CTEF .)
    NOTEQUAL        reduce using rule 106 (cte -> CTEF .)
    GREATERTHAN     reduce using rule 106 (cte -> CTEF .)
    LESSTHAN        reduce using rule 106 (cte -> CTEF .)
    AND             reduce using rule 106 (cte -> CTEF .)
    OR              reduce using rule 106 (cte -> CTEF .)
    RBRACK          reduce using rule 106 (cte -> CTEF .)
    SEMICOLON       reduce using rule 106 (cte -> CTEF .)
    RPAREN          reduce using rule 106 (cte -> CTEF .)
    COMMA           reduce using rule 106 (cte -> CTEF .)
    FROM            reduce using rule 106 (cte -> CTEF .)


state 100

    (107) cte -> CTEC .

    TIMES           reduce using rule 107 (cte -> CTEC .)
    DIVIDE          reduce using rule 107 (cte -> CTEC .)
    PLUS            reduce using rule 107 (cte -> CTEC .)
    MINUS           reduce using rule 107 (cte -> CTEC .)
    LESS            reduce using rule 107 (cte -> CTEC .)
    GREATER         reduce using rule 107 (cte -> CTEC .)
    EQUALS          reduce using rule 107 (cte -> CTEC .)
    NOTEQUAL        reduce using rule 107 (cte -> CTEC .)
    GREATERTHAN     reduce using rule 107 (cte -> CTEC .)
    LESSTHAN        reduce using rule 107 (cte -> CTEC .)
    AND             reduce using rule 107 (cte -> CTEC .)
    OR              reduce using rule 107 (cte -> CTEC .)
    RBRACK          reduce using rule 107 (cte -> CTEC .)
    SEMICOLON       reduce using rule 107 (cte -> CTEC .)
    RPAREN          reduce using rule 107 (cte -> CTEC .)
    COMMA           reduce using rule 107 (cte -> CTEC .)
    FROM            reduce using rule 107 (cte -> CTEC .)


state 101

    (108) cte -> CTEB .

    TIMES           reduce using rule 108 (cte -> CTEB .)
    DIVIDE          reduce using rule 108 (cte -> CTEB .)
    PLUS            reduce using rule 108 (cte -> CTEB .)
    MINUS           reduce using rule 108 (cte -> CTEB .)
    LESS            reduce using rule 108 (cte -> CTEB .)
    GREATER         reduce using rule 108 (cte -> CTEB .)
    EQUALS          reduce using rule 108 (cte -> CTEB .)
    NOTEQUAL        reduce using rule 108 (cte -> CTEB .)
    GREATERTHAN     reduce using rule 108 (cte -> CTEB .)
    LESSTHAN        reduce using rule 108 (cte -> CTEB .)
    AND             reduce using rule 108 (cte -> CTEB .)
    OR              reduce using rule 108 (cte -> CTEB .)
    RBRACK          reduce using rule 108 (cte -> CTEB .)
    SEMICOLON       reduce using rule 108 (cte -> CTEB .)
    RPAREN          reduce using rule 108 (cte -> CTEB .)
    COMMA           reduce using rule 108 (cte -> CTEB .)
    FROM            reduce using rule 108 (cte -> CTEB .)


state 102

    (88) expression_parenthesis -> LPAREN . expression RPAREN
    (67) expression -> . t_expression
    (68) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 89
    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    expression                     shift and go to state 135
    t_expression                   shift and go to state 88
    g_expression                   shift and go to state 90
    m_expression                   shift and go to state 91
    term                           shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 103

    (11) main -> MAIN LPAREN RPAREN main_scope var_declarations . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 33

    block                          shift and go to state 136

state 104

    (70) read -> READ LPAREN ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 137


state 105

    (57) invocation -> ID invocation_1 LPAREN . invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (59) invocation_2 -> . empty
    (109) empty -> .

    NOT             reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    CTEI            reduce using rule 109 (empty -> .)
    CTEF            reduce using rule 109 (empty -> .)
    CTEC            reduce using rule 109 (empty -> .)
    CTEB            reduce using rule 109 (empty -> .)
    LPAREN          reduce using rule 109 (empty -> .)
    RPAREN          reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)

    invocation_2                   shift and go to state 138
    empty                          shift and go to state 139

state 106

    (75) assingation -> variable ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 140


state 107

    (43) for -> FOR LPAREN ID . for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (44) for_1 -> . empty
    (109) empty -> .

    ASSIGN          reduce using rule 109 (empty -> .)

    for_1                          shift and go to state 141
    empty                          shift and go to state 142

state 108

    (42) do_while -> DO breadcrumb block . WHILE LPAREN expression RPAREN gotot SEMICOLON

    WHILE           shift and go to state 143


state 109

    (48) while -> WHILE breadcrumb LPAREN . expression RPAREN gotof block
    (67) expression -> . t_expression
    (68) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 89
    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    expression                     shift and go to state 144
    t_expression                   shift and go to state 88
    g_expression                   shift and go to state 90
    m_expression                   shift and go to state 91
    term                           shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 110

    (51) if_else -> IF LPAREN expression . RPAREN gotof block ELSE goto block
    (50) if -> IF LPAREN expression . RPAREN gotof block

    RPAREN          shift and go to state 145


state 111

    (69) print -> PRINT LPAREN print_arguments . RPAREN SEMICOLON
    (72) print_arguments -> print_arguments . COMMA print_argument

    RPAREN          shift and go to state 146
    COMMA           shift and go to state 147


state 112

    (71) print_arguments -> print_argument .

    RPAREN          reduce using rule 71 (print_arguments -> print_argument .)
    COMMA           reduce using rule 71 (print_arguments -> print_argument .)


state 113

    (73) print_argument -> CTES .

    RPAREN          reduce using rule 73 (print_argument -> CTES .)
    COMMA           reduce using rule 73 (print_argument -> CTES .)


state 114

    (74) print_argument -> expression .

    RPAREN          reduce using rule 74 (print_argument -> expression .)
    COMMA           reduce using rule 74 (print_argument -> expression .)


state 115

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations
    (24) parameters -> . parameters COMMA parameter
    (25) parameters -> . parameter
    (26) parameters -> . empty
    (27) parameter -> . simple_type ID
    (109) empty -> .
    (101) simple_type -> . INT
    (102) simple_type -> . FLOAT
    (103) simple_type -> . CHAR
    (104) simple_type -> . BOOLEAN

    COMMA           reduce using rule 109 (empty -> .)
    RPAREN          reduce using rule 109 (empty -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28

    simple_type                    shift and go to state 148
    parameters                     shift and go to state 149
    parameter                      shift and go to state 150
    empty                          shift and go to state 151

state 116

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations
    (24) parameters -> . parameters COMMA parameter
    (25) parameters -> . parameter
    (26) parameters -> . empty
    (27) parameter -> . simple_type ID
    (109) empty -> .
    (101) simple_type -> . INT
    (102) simple_type -> . FLOAT
    (103) simple_type -> . CHAR
    (104) simple_type -> . BOOLEAN

    COMMA           reduce using rule 109 (empty -> .)
    RPAREN          reduce using rule 109 (empty -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28

    parameters                     shift and go to state 152
    parameter                      shift and go to state 150
    empty                          shift and go to state 151
    simple_type                    shift and go to state 148

state 117

    (22) variable -> ID LBRACK expression RBRACK .
    (23) variable -> ID LBRACK expression RBRACK . LBRACK expression RBRACK

    COMMA           reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    TIMES           reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    PLUS            reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    MINUS           reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    LESS            reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    GREATER         reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    EQUALS          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    AND             reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    OR              reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    RBRACK          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    RPAREN          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    FROM            reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    LBRACK          shift and go to state 153


state 118

    (77) t_expression -> t_expression boolean_operator . g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    g_expression                   shift and go to state 154
    m_expression                   shift and go to state 91
    term                           shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 119

    (97) boolean_operator -> AND .

    ID              reduce using rule 97 (boolean_operator -> AND .)
    CTEI            reduce using rule 97 (boolean_operator -> AND .)
    CTEF            reduce using rule 97 (boolean_operator -> AND .)
    CTEC            reduce using rule 97 (boolean_operator -> AND .)
    CTEB            reduce using rule 97 (boolean_operator -> AND .)
    LPAREN          reduce using rule 97 (boolean_operator -> AND .)


state 120

    (98) boolean_operator -> OR .

    ID              reduce using rule 98 (boolean_operator -> OR .)
    CTEI            reduce using rule 98 (boolean_operator -> OR .)
    CTEF            reduce using rule 98 (boolean_operator -> OR .)
    CTEC            reduce using rule 98 (boolean_operator -> OR .)
    CTEB            reduce using rule 98 (boolean_operator -> OR .)
    LPAREN          reduce using rule 98 (boolean_operator -> OR .)


state 121

    (68) expression -> NOT t_expression .
    (77) t_expression -> t_expression . boolean_operator g_expression
    (97) boolean_operator -> . AND
    (98) boolean_operator -> . OR

    RBRACK          reduce using rule 68 (expression -> NOT t_expression .)
    SEMICOLON       reduce using rule 68 (expression -> NOT t_expression .)
    RPAREN          reduce using rule 68 (expression -> NOT t_expression .)
    COMMA           reduce using rule 68 (expression -> NOT t_expression .)
    FROM            reduce using rule 68 (expression -> NOT t_expression .)
    AND             shift and go to state 119
    OR              shift and go to state 120

    boolean_operator               shift and go to state 118

state 122

    (79) g_expression -> g_expression comparison_operator . m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    m_expression                   shift and go to state 155
    term                           shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 123

    (89) comparison_operator -> LESS .

    ID              reduce using rule 89 (comparison_operator -> LESS .)
    CTEI            reduce using rule 89 (comparison_operator -> LESS .)
    CTEF            reduce using rule 89 (comparison_operator -> LESS .)
    CTEC            reduce using rule 89 (comparison_operator -> LESS .)
    CTEB            reduce using rule 89 (comparison_operator -> LESS .)
    LPAREN          reduce using rule 89 (comparison_operator -> LESS .)


state 124

    (90) comparison_operator -> GREATER .

    ID              reduce using rule 90 (comparison_operator -> GREATER .)
    CTEI            reduce using rule 90 (comparison_operator -> GREATER .)
    CTEF            reduce using rule 90 (comparison_operator -> GREATER .)
    CTEC            reduce using rule 90 (comparison_operator -> GREATER .)
    CTEB            reduce using rule 90 (comparison_operator -> GREATER .)
    LPAREN          reduce using rule 90 (comparison_operator -> GREATER .)


state 125

    (91) comparison_operator -> EQUALS .

    ID              reduce using rule 91 (comparison_operator -> EQUALS .)
    CTEI            reduce using rule 91 (comparison_operator -> EQUALS .)
    CTEF            reduce using rule 91 (comparison_operator -> EQUALS .)
    CTEC            reduce using rule 91 (comparison_operator -> EQUALS .)
    CTEB            reduce using rule 91 (comparison_operator -> EQUALS .)
    LPAREN          reduce using rule 91 (comparison_operator -> EQUALS .)


state 126

    (92) comparison_operator -> NOTEQUAL .

    ID              reduce using rule 92 (comparison_operator -> NOTEQUAL .)
    CTEI            reduce using rule 92 (comparison_operator -> NOTEQUAL .)
    CTEF            reduce using rule 92 (comparison_operator -> NOTEQUAL .)
    CTEC            reduce using rule 92 (comparison_operator -> NOTEQUAL .)
    CTEB            reduce using rule 92 (comparison_operator -> NOTEQUAL .)
    LPAREN          reduce using rule 92 (comparison_operator -> NOTEQUAL .)


state 127

    (93) comparison_operator -> GREATERTHAN .

    ID              reduce using rule 93 (comparison_operator -> GREATERTHAN .)
    CTEI            reduce using rule 93 (comparison_operator -> GREATERTHAN .)
    CTEF            reduce using rule 93 (comparison_operator -> GREATERTHAN .)
    CTEC            reduce using rule 93 (comparison_operator -> GREATERTHAN .)
    CTEB            reduce using rule 93 (comparison_operator -> GREATERTHAN .)
    LPAREN          reduce using rule 93 (comparison_operator -> GREATERTHAN .)


state 128

    (94) comparison_operator -> LESSTHAN .

    ID              reduce using rule 94 (comparison_operator -> LESSTHAN .)
    CTEI            reduce using rule 94 (comparison_operator -> LESSTHAN .)
    CTEF            reduce using rule 94 (comparison_operator -> LESSTHAN .)
    CTEC            reduce using rule 94 (comparison_operator -> LESSTHAN .)
    CTEB            reduce using rule 94 (comparison_operator -> LESSTHAN .)
    LPAREN          reduce using rule 94 (comparison_operator -> LESSTHAN .)


state 129

    (81) m_expression -> m_expression addition_operator . term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    term                           shift and go to state 156
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 130

    (95) addition_operator -> PLUS .

    ID              reduce using rule 95 (addition_operator -> PLUS .)
    CTEI            reduce using rule 95 (addition_operator -> PLUS .)
    CTEF            reduce using rule 95 (addition_operator -> PLUS .)
    CTEC            reduce using rule 95 (addition_operator -> PLUS .)
    CTEB            reduce using rule 95 (addition_operator -> PLUS .)
    LPAREN          reduce using rule 95 (addition_operator -> PLUS .)


state 131

    (96) addition_operator -> MINUS .

    ID              reduce using rule 96 (addition_operator -> MINUS .)
    CTEI            reduce using rule 96 (addition_operator -> MINUS .)
    CTEF            reduce using rule 96 (addition_operator -> MINUS .)
    CTEC            reduce using rule 96 (addition_operator -> MINUS .)
    CTEB            reduce using rule 96 (addition_operator -> MINUS .)
    LPAREN          reduce using rule 96 (addition_operator -> MINUS .)


state 132

    (83) term -> term multiplication_operator . factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    factor                         shift and go to state 157
    variable                       shift and go to state 94
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 133

    (99) multiplication_operator -> TIMES .

    ID              reduce using rule 99 (multiplication_operator -> TIMES .)
    CTEI            reduce using rule 99 (multiplication_operator -> TIMES .)
    CTEF            reduce using rule 99 (multiplication_operator -> TIMES .)
    CTEC            reduce using rule 99 (multiplication_operator -> TIMES .)
    CTEB            reduce using rule 99 (multiplication_operator -> TIMES .)
    LPAREN          reduce using rule 99 (multiplication_operator -> TIMES .)


state 134

    (100) multiplication_operator -> DIVIDE .

    ID              reduce using rule 100 (multiplication_operator -> DIVIDE .)
    CTEI            reduce using rule 100 (multiplication_operator -> DIVIDE .)
    CTEF            reduce using rule 100 (multiplication_operator -> DIVIDE .)
    CTEC            reduce using rule 100 (multiplication_operator -> DIVIDE .)
    CTEB            reduce using rule 100 (multiplication_operator -> DIVIDE .)
    LPAREN          reduce using rule 100 (multiplication_operator -> DIVIDE .)


state 135

    (88) expression_parenthesis -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 158


state 136

    (11) main -> MAIN LPAREN RPAREN main_scope var_declarations block .

    END             reduce using rule 11 (main -> MAIN LPAREN RPAREN main_scope var_declarations block .)


state 137

    (70) read -> READ LPAREN ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 159


state 138

    (57) invocation -> ID invocation_1 LPAREN invocation_2 . expressions RPAREN invocation_5 SEMICOLON invocation_6
    (64) expressions -> . expressions COMMA invocation_4 expression invocation_3
    (65) expressions -> . expression invocation_3
    (66) expressions -> . empty
    (67) expression -> . t_expression
    (68) expression -> . NOT t_expression
    (109) empty -> .
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 89
    RPAREN          reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)
    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    expressions                    shift and go to state 160
    expression                     shift and go to state 161
    empty                          shift and go to state 162
    t_expression                   shift and go to state 88
    g_expression                   shift and go to state 90
    m_expression                   shift and go to state 91
    term                           shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 139

    (59) invocation_2 -> empty .

    NOT             reduce using rule 59 (invocation_2 -> empty .)
    ID              reduce using rule 59 (invocation_2 -> empty .)
    CTEI            reduce using rule 59 (invocation_2 -> empty .)
    CTEF            reduce using rule 59 (invocation_2 -> empty .)
    CTEC            reduce using rule 59 (invocation_2 -> empty .)
    CTEB            reduce using rule 59 (invocation_2 -> empty .)
    LPAREN          reduce using rule 59 (invocation_2 -> empty .)
    RPAREN          reduce using rule 59 (invocation_2 -> empty .)
    COMMA           reduce using rule 59 (invocation_2 -> empty .)


state 140

    (75) assingation -> variable ASSIGN expression SEMICOLON .

    READ            reduce using rule 75 (assingation -> variable ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 75 (assingation -> variable ASSIGN expression SEMICOLON .)
    DO              reduce using rule 75 (assingation -> variable ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 75 (assingation -> variable ASSIGN expression SEMICOLON .)
    IF              reduce using rule 75 (assingation -> variable ASSIGN expression SEMICOLON .)
    ID              reduce using rule 75 (assingation -> variable ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 75 (assingation -> variable ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 75 (assingation -> variable ASSIGN expression SEMICOLON .)


state 141

    (43) for -> FOR LPAREN ID for_1 . ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    ASSIGN          shift and go to state 163


state 142

    (44) for_1 -> empty .

    ASSIGN          reduce using rule 44 (for_1 -> empty .)


state 143

    (42) do_while -> DO breadcrumb block WHILE . LPAREN expression RPAREN gotot SEMICOLON

    LPAREN          shift and go to state 164


state 144

    (48) while -> WHILE breadcrumb LPAREN expression . RPAREN gotof block

    RPAREN          shift and go to state 165


state 145

    (51) if_else -> IF LPAREN expression RPAREN . gotof block ELSE goto block
    (50) if -> IF LPAREN expression RPAREN . gotof block
    (54) gotof -> . empty
    (109) empty -> .

    LBRACE          reduce using rule 109 (empty -> .)

    gotof                          shift and go to state 166
    empty                          shift and go to state 167

state 146

    (69) print -> PRINT LPAREN print_arguments RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 168


state 147

    (72) print_arguments -> print_arguments COMMA . print_argument
    (73) print_argument -> . CTES
    (74) print_argument -> . expression
    (67) expression -> . t_expression
    (68) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    CTES            shift and go to state 113
    NOT             shift and go to state 89
    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    print_argument                 shift and go to state 169
    expression                     shift and go to state 114
    t_expression                   shift and go to state 88
    g_expression                   shift and go to state 90
    m_expression                   shift and go to state 91
    term                           shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 148

    (27) parameter -> simple_type . ID

    ID              shift and go to state 170


state 149

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations
    (24) parameters -> parameters . COMMA parameter
    (18) close_var_declaration -> . empty
    (109) empty -> .

    COMMA           shift and go to state 172
    RPAREN          reduce using rule 109 (empty -> .)

    close_var_declaration          shift and go to state 171
    empty                          shift and go to state 84

state 150

    (25) parameters -> parameter .

    COMMA           reduce using rule 25 (parameters -> parameter .)
    RPAREN          reduce using rule 25 (parameters -> parameter .)


state 151

    (26) parameters -> empty .

    COMMA           reduce using rule 26 (parameters -> empty .)
    RPAREN          reduce using rule 26 (parameters -> empty .)


state 152

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations
    (24) parameters -> parameters . COMMA parameter
    (18) close_var_declaration -> . empty
    (109) empty -> .

    COMMA           shift and go to state 172
    RPAREN          reduce using rule 109 (empty -> .)

    close_var_declaration          shift and go to state 173
    empty                          shift and go to state 84

state 153

    (23) variable -> ID LBRACK expression RBRACK LBRACK . expression RBRACK
    (67) expression -> . t_expression
    (68) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 89
    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    expression                     shift and go to state 174
    t_expression                   shift and go to state 88
    g_expression                   shift and go to state 90
    m_expression                   shift and go to state 91
    term                           shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 154

    (77) t_expression -> t_expression boolean_operator g_expression .
    (79) g_expression -> g_expression . comparison_operator m_expression
    (89) comparison_operator -> . LESS
    (90) comparison_operator -> . GREATER
    (91) comparison_operator -> . EQUALS
    (92) comparison_operator -> . NOTEQUAL
    (93) comparison_operator -> . GREATERTHAN
    (94) comparison_operator -> . LESSTHAN

    AND             reduce using rule 77 (t_expression -> t_expression boolean_operator g_expression .)
    OR              reduce using rule 77 (t_expression -> t_expression boolean_operator g_expression .)
    RBRACK          reduce using rule 77 (t_expression -> t_expression boolean_operator g_expression .)
    SEMICOLON       reduce using rule 77 (t_expression -> t_expression boolean_operator g_expression .)
    RPAREN          reduce using rule 77 (t_expression -> t_expression boolean_operator g_expression .)
    COMMA           reduce using rule 77 (t_expression -> t_expression boolean_operator g_expression .)
    FROM            reduce using rule 77 (t_expression -> t_expression boolean_operator g_expression .)
    LESS            shift and go to state 123
    GREATER         shift and go to state 124
    EQUALS          shift and go to state 125
    NOTEQUAL        shift and go to state 126
    GREATERTHAN     shift and go to state 127
    LESSTHAN        shift and go to state 128

    comparison_operator            shift and go to state 122

state 155

    (79) g_expression -> g_expression comparison_operator m_expression .
    (81) m_expression -> m_expression . addition_operator term
    (95) addition_operator -> . PLUS
    (96) addition_operator -> . MINUS

    LESS            reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    GREATER         reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    EQUALS          reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    NOTEQUAL        reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    GREATERTHAN     reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    LESSTHAN        reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    AND             reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    OR              reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    RBRACK          reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    SEMICOLON       reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    RPAREN          reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    COMMA           reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    FROM            reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131

    addition_operator              shift and go to state 129

state 156

    (81) m_expression -> m_expression addition_operator term .
    (83) term -> term . multiplication_operator factor
    (99) multiplication_operator -> . TIMES
    (100) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    MINUS           reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    LESS            reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    GREATER         reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    EQUALS          reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    NOTEQUAL        reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    GREATERTHAN     reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    LESSTHAN        reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    AND             reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    OR              reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    RBRACK          reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    SEMICOLON       reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    RPAREN          reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    COMMA           reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    FROM            reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134

    multiplication_operator        shift and go to state 132

state 157

    (83) term -> term multiplication_operator factor .

    TIMES           reduce using rule 83 (term -> term multiplication_operator factor .)
    DIVIDE          reduce using rule 83 (term -> term multiplication_operator factor .)
    PLUS            reduce using rule 83 (term -> term multiplication_operator factor .)
    MINUS           reduce using rule 83 (term -> term multiplication_operator factor .)
    LESS            reduce using rule 83 (term -> term multiplication_operator factor .)
    GREATER         reduce using rule 83 (term -> term multiplication_operator factor .)
    EQUALS          reduce using rule 83 (term -> term multiplication_operator factor .)
    NOTEQUAL        reduce using rule 83 (term -> term multiplication_operator factor .)
    GREATERTHAN     reduce using rule 83 (term -> term multiplication_operator factor .)
    LESSTHAN        reduce using rule 83 (term -> term multiplication_operator factor .)
    AND             reduce using rule 83 (term -> term multiplication_operator factor .)
    OR              reduce using rule 83 (term -> term multiplication_operator factor .)
    RBRACK          reduce using rule 83 (term -> term multiplication_operator factor .)
    SEMICOLON       reduce using rule 83 (term -> term multiplication_operator factor .)
    RPAREN          reduce using rule 83 (term -> term multiplication_operator factor .)
    COMMA           reduce using rule 83 (term -> term multiplication_operator factor .)
    FROM            reduce using rule 83 (term -> term multiplication_operator factor .)


state 158

    (88) expression_parenthesis -> LPAREN expression RPAREN .

    TIMES           reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESS            reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    AND             reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    OR              reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    FROM            reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)


state 159

    (70) read -> READ LPAREN ID RPAREN SEMICOLON .

    READ            reduce using rule 70 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    FOR             reduce using rule 70 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    DO              reduce using rule 70 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 70 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    IF              reduce using rule 70 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    ID              reduce using rule 70 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    PRINT           reduce using rule 70 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    RBRACE          reduce using rule 70 (read -> READ LPAREN ID RPAREN SEMICOLON .)


state 160

    (57) invocation -> ID invocation_1 LPAREN invocation_2 expressions . RPAREN invocation_5 SEMICOLON invocation_6
    (64) expressions -> expressions . COMMA invocation_4 expression invocation_3

    RPAREN          shift and go to state 175
    COMMA           shift and go to state 176


state 161

    (65) expressions -> expression . invocation_3
    (60) invocation_3 -> . empty
    (109) empty -> .

    RPAREN          reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)

    invocation_3                   shift and go to state 177
    empty                          shift and go to state 178

state 162

    (66) expressions -> empty .

    RPAREN          reduce using rule 66 (expressions -> empty .)
    COMMA           reduce using rule 66 (expressions -> empty .)


state 163

    (43) for -> FOR LPAREN ID for_1 ASSIGN . expression for_2 FROM expression RPAREN for_3 DO block for_4
    (67) expression -> . t_expression
    (68) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 89
    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    expression                     shift and go to state 179
    t_expression                   shift and go to state 88
    g_expression                   shift and go to state 90
    m_expression                   shift and go to state 91
    term                           shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 164

    (42) do_while -> DO breadcrumb block WHILE LPAREN . expression RPAREN gotot SEMICOLON
    (67) expression -> . t_expression
    (68) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 89
    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    expression                     shift and go to state 180
    t_expression                   shift and go to state 88
    g_expression                   shift and go to state 90
    m_expression                   shift and go to state 91
    term                           shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 165

    (48) while -> WHILE breadcrumb LPAREN expression RPAREN . gotof block
    (54) gotof -> . empty
    (109) empty -> .

    LBRACE          reduce using rule 109 (empty -> .)

    gotof                          shift and go to state 181
    empty                          shift and go to state 167

state 166

    (51) if_else -> IF LPAREN expression RPAREN gotof . block ELSE goto block
    (50) if -> IF LPAREN expression RPAREN gotof . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 33

    block                          shift and go to state 182

state 167

    (54) gotof -> empty .

    LBRACE          reduce using rule 54 (gotof -> empty .)


state 168

    (69) print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .

    READ            reduce using rule 69 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    FOR             reduce using rule 69 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    DO              reduce using rule 69 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    WHILE           reduce using rule 69 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    IF              reduce using rule 69 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ID              reduce using rule 69 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    PRINT           reduce using rule 69 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    RBRACE          reduce using rule 69 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)


state 169

    (72) print_arguments -> print_arguments COMMA print_argument .

    RPAREN          reduce using rule 72 (print_arguments -> print_arguments COMMA print_argument .)
    COMMA           reduce using rule 72 (print_arguments -> print_arguments COMMA print_argument .)


state 170

    (27) parameter -> simple_type ID .

    COMMA           reduce using rule 27 (parameter -> simple_type ID .)
    RPAREN          reduce using rule 27 (parameter -> simple_type ID .)


state 171

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations

    RPAREN          shift and go to state 183


state 172

    (24) parameters -> parameters COMMA . parameter
    (27) parameter -> . simple_type ID
    (101) simple_type -> . INT
    (102) simple_type -> . FLOAT
    (103) simple_type -> . CHAR
    (104) simple_type -> . BOOLEAN

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28

    parameter                      shift and go to state 184
    simple_type                    shift and go to state 148

state 173

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations

    RPAREN          shift and go to state 185


state 174

    (23) variable -> ID LBRACK expression RBRACK LBRACK expression . RBRACK

    RBRACK          shift and go to state 186


state 175

    (57) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN . invocation_5 SEMICOLON invocation_6
    (62) invocation_5 -> . empty
    (109) empty -> .

    SEMICOLON       reduce using rule 109 (empty -> .)

    invocation_5                   shift and go to state 187
    empty                          shift and go to state 188

state 176

    (64) expressions -> expressions COMMA . invocation_4 expression invocation_3
    (61) invocation_4 -> . empty
    (109) empty -> .

    NOT             reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    CTEI            reduce using rule 109 (empty -> .)
    CTEF            reduce using rule 109 (empty -> .)
    CTEC            reduce using rule 109 (empty -> .)
    CTEB            reduce using rule 109 (empty -> .)
    LPAREN          reduce using rule 109 (empty -> .)

    invocation_4                   shift and go to state 189
    empty                          shift and go to state 190

state 177

    (65) expressions -> expression invocation_3 .

    RPAREN          reduce using rule 65 (expressions -> expression invocation_3 .)
    COMMA           reduce using rule 65 (expressions -> expression invocation_3 .)


state 178

    (60) invocation_3 -> empty .

    RPAREN          reduce using rule 60 (invocation_3 -> empty .)
    COMMA           reduce using rule 60 (invocation_3 -> empty .)


state 179

    (43) for -> FOR LPAREN ID for_1 ASSIGN expression . for_2 FROM expression RPAREN for_3 DO block for_4
    (45) for_2 -> . empty
    (109) empty -> .

    FROM            reduce using rule 109 (empty -> .)

    for_2                          shift and go to state 191
    empty                          shift and go to state 192

state 180

    (42) do_while -> DO breadcrumb block WHILE LPAREN expression . RPAREN gotot SEMICOLON

    RPAREN          shift and go to state 193


state 181

    (48) while -> WHILE breadcrumb LPAREN expression RPAREN gotof . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 33

    block                          shift and go to state 194

state 182

    (51) if_else -> IF LPAREN expression RPAREN gotof block . ELSE goto block
    (50) if -> IF LPAREN expression RPAREN gotof block .

    ELSE            shift and go to state 195
    READ            reduce using rule 50 (if -> IF LPAREN expression RPAREN gotof block .)
    FOR             reduce using rule 50 (if -> IF LPAREN expression RPAREN gotof block .)
    DO              reduce using rule 50 (if -> IF LPAREN expression RPAREN gotof block .)
    WHILE           reduce using rule 50 (if -> IF LPAREN expression RPAREN gotof block .)
    IF              reduce using rule 50 (if -> IF LPAREN expression RPAREN gotof block .)
    ID              reduce using rule 50 (if -> IF LPAREN expression RPAREN gotof block .)
    PRINT           reduce using rule 50 (if -> IF LPAREN expression RPAREN gotof block .)
    RBRACE          reduce using rule 50 (if -> IF LPAREN expression RPAREN gotof block .)


state 183

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (109) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 109 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 196
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 184

    (24) parameters -> parameters COMMA parameter .

    COMMA           reduce using rule 24 (parameters -> parameters COMMA parameter .)
    RPAREN          reduce using rule 24 (parameters -> parameters COMMA parameter .)


state 185

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (109) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 109 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 197
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 186

    (23) variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .

    COMMA           reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    TIMES           reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    PLUS            reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    MINUS           reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESS            reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATER         reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    EQUALS          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    AND             reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    OR              reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RBRACK          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RPAREN          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    FROM            reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)


state 187

    (57) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 . SEMICOLON invocation_6

    SEMICOLON       shift and go to state 198


state 188

    (62) invocation_5 -> empty .

    SEMICOLON       reduce using rule 62 (invocation_5 -> empty .)


state 189

    (64) expressions -> expressions COMMA invocation_4 . expression invocation_3
    (67) expression -> . t_expression
    (68) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 89
    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    expression                     shift and go to state 199
    t_expression                   shift and go to state 88
    g_expression                   shift and go to state 90
    m_expression                   shift and go to state 91
    term                           shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 190

    (61) invocation_4 -> empty .

    NOT             reduce using rule 61 (invocation_4 -> empty .)
    ID              reduce using rule 61 (invocation_4 -> empty .)
    CTEI            reduce using rule 61 (invocation_4 -> empty .)
    CTEF            reduce using rule 61 (invocation_4 -> empty .)
    CTEC            reduce using rule 61 (invocation_4 -> empty .)
    CTEB            reduce using rule 61 (invocation_4 -> empty .)
    LPAREN          reduce using rule 61 (invocation_4 -> empty .)


state 191

    (43) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 . FROM expression RPAREN for_3 DO block for_4

    FROM            shift and go to state 200


state 192

    (45) for_2 -> empty .

    FROM            reduce using rule 45 (for_2 -> empty .)


state 193

    (42) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN . gotot SEMICOLON
    (52) gotot -> . empty
    (109) empty -> .

    SEMICOLON       reduce using rule 109 (empty -> .)

    gotot                          shift and go to state 201
    empty                          shift and go to state 202

state 194

    (48) while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .

    READ            reduce using rule 48 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    FOR             reduce using rule 48 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    DO              reduce using rule 48 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    WHILE           reduce using rule 48 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    IF              reduce using rule 48 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    ID              reduce using rule 48 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    PRINT           reduce using rule 48 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    RBRACE          reduce using rule 48 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)


state 195

    (51) if_else -> IF LPAREN expression RPAREN gotof block ELSE . goto block
    (53) goto -> . empty
    (109) empty -> .

    LBRACE          reduce using rule 109 (empty -> .)

    goto                           shift and go to state 203
    empty                          shift and go to state 204

state 196

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .

    LBRACE          reduce using rule 7 (function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .)


state 197

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .

    LBRACE          reduce using rule 8 (function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .)


state 198

    (57) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON . invocation_6
    (63) invocation_6 -> . empty
    (109) empty -> .

    READ            reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    DO              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    RBRACE          reduce using rule 109 (empty -> .)
    TIMES           reduce using rule 109 (empty -> .)
    DIVIDE          reduce using rule 109 (empty -> .)
    PLUS            reduce using rule 109 (empty -> .)
    MINUS           reduce using rule 109 (empty -> .)
    LESS            reduce using rule 109 (empty -> .)
    GREATER         reduce using rule 109 (empty -> .)
    EQUALS          reduce using rule 109 (empty -> .)
    NOTEQUAL        reduce using rule 109 (empty -> .)
    GREATERTHAN     reduce using rule 109 (empty -> .)
    LESSTHAN        reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    RBRACK          reduce using rule 109 (empty -> .)
    SEMICOLON       reduce using rule 109 (empty -> .)
    RPAREN          reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)
    FROM            reduce using rule 109 (empty -> .)

    invocation_6                   shift and go to state 205
    empty                          shift and go to state 206

state 199

    (64) expressions -> expressions COMMA invocation_4 expression . invocation_3
    (60) invocation_3 -> . empty
    (109) empty -> .

    RPAREN          reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)

    invocation_3                   shift and go to state 207
    empty                          shift and go to state 178

state 200

    (43) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM . expression RPAREN for_3 DO block for_4
    (67) expression -> . t_expression
    (68) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . invocation
    (87) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (57) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (88) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 89
    ID              shift and go to state 86
    CTEI            shift and go to state 98
    CTEF            shift and go to state 99
    CTEC            shift and go to state 100
    CTEB            shift and go to state 101
    LPAREN          shift and go to state 102

    expression                     shift and go to state 208
    t_expression                   shift and go to state 88
    g_expression                   shift and go to state 90
    m_expression                   shift and go to state 91
    term                           shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    cte                            shift and go to state 95
    invocation                     shift and go to state 96
    expression_parenthesis         shift and go to state 97

state 201

    (42) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot . SEMICOLON

    SEMICOLON       shift and go to state 209


state 202

    (52) gotot -> empty .

    SEMICOLON       reduce using rule 52 (gotot -> empty .)


state 203

    (51) if_else -> IF LPAREN expression RPAREN gotof block ELSE goto . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 33

    block                          shift and go to state 210

state 204

    (53) goto -> empty .

    LBRACE          reduce using rule 53 (goto -> empty .)


state 205

    (57) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .

    READ            reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    FOR             reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DO              reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    WHILE           reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    IF              reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ID              reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PRINT           reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACE          reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    TIMES           reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DIVIDE          reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PLUS            reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    MINUS           reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESS            reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATER         reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    EQUALS          reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    NOTEQUAL        reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATERTHAN     reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESSTHAN        reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    AND             reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    OR              reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACK          reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    SEMICOLON       reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RPAREN          reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    COMMA           reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    FROM            reduce using rule 57 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)


state 206

    (63) invocation_6 -> empty .

    READ            reduce using rule 63 (invocation_6 -> empty .)
    FOR             reduce using rule 63 (invocation_6 -> empty .)
    DO              reduce using rule 63 (invocation_6 -> empty .)
    WHILE           reduce using rule 63 (invocation_6 -> empty .)
    IF              reduce using rule 63 (invocation_6 -> empty .)
    ID              reduce using rule 63 (invocation_6 -> empty .)
    PRINT           reduce using rule 63 (invocation_6 -> empty .)
    RBRACE          reduce using rule 63 (invocation_6 -> empty .)
    TIMES           reduce using rule 63 (invocation_6 -> empty .)
    DIVIDE          reduce using rule 63 (invocation_6 -> empty .)
    PLUS            reduce using rule 63 (invocation_6 -> empty .)
    MINUS           reduce using rule 63 (invocation_6 -> empty .)
    LESS            reduce using rule 63 (invocation_6 -> empty .)
    GREATER         reduce using rule 63 (invocation_6 -> empty .)
    EQUALS          reduce using rule 63 (invocation_6 -> empty .)
    NOTEQUAL        reduce using rule 63 (invocation_6 -> empty .)
    GREATERTHAN     reduce using rule 63 (invocation_6 -> empty .)
    LESSTHAN        reduce using rule 63 (invocation_6 -> empty .)
    AND             reduce using rule 63 (invocation_6 -> empty .)
    OR              reduce using rule 63 (invocation_6 -> empty .)
    RBRACK          reduce using rule 63 (invocation_6 -> empty .)
    SEMICOLON       reduce using rule 63 (invocation_6 -> empty .)
    RPAREN          reduce using rule 63 (invocation_6 -> empty .)
    COMMA           reduce using rule 63 (invocation_6 -> empty .)
    FROM            reduce using rule 63 (invocation_6 -> empty .)


state 207

    (64) expressions -> expressions COMMA invocation_4 expression invocation_3 .

    RPAREN          reduce using rule 64 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)
    COMMA           reduce using rule 64 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)


state 208

    (43) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression . RPAREN for_3 DO block for_4

    RPAREN          shift and go to state 211


state 209

    (42) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .

    READ            reduce using rule 42 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    FOR             reduce using rule 42 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    DO              reduce using rule 42 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    WHILE           reduce using rule 42 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    IF              reduce using rule 42 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ID              reduce using rule 42 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    PRINT           reduce using rule 42 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    RBRACE          reduce using rule 42 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)


state 210

    (51) if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .

    READ            reduce using rule 51 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    FOR             reduce using rule 51 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    DO              reduce using rule 51 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    WHILE           reduce using rule 51 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    IF              reduce using rule 51 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    ID              reduce using rule 51 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    PRINT           reduce using rule 51 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    RBRACE          reduce using rule 51 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)


state 211

    (43) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN . for_3 DO block for_4
    (46) for_3 -> . empty
    (109) empty -> .

    DO              reduce using rule 109 (empty -> .)

    for_3                          shift and go to state 212
    empty                          shift and go to state 213

state 212

    (43) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 . DO block for_4

    DO              shift and go to state 214


state 213

    (46) for_3 -> empty .

    DO              reduce using rule 46 (for_3 -> empty .)


state 214

    (43) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO . block for_4
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 33

    block                          shift and go to state 215

state 215

    (43) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block . for_4
    (47) for_4 -> . empty
    (109) empty -> .

    READ            reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    DO              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)
    RBRACE          reduce using rule 109 (empty -> .)

    for_4                          shift and go to state 216
    empty                          shift and go to state 217

state 216

    (43) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .

    READ            reduce using rule 43 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    FOR             reduce using rule 43 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    DO              reduce using rule 43 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    WHILE           reduce using rule 43 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    IF              reduce using rule 43 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    ID              reduce using rule 43 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    PRINT           reduce using rule 43 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    RBRACE          reduce using rule 43 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)


state 217

    (47) for_4 -> empty .

    READ            reduce using rule 47 (for_4 -> empty .)
    FOR             reduce using rule 47 (for_4 -> empty .)
    DO              reduce using rule 47 (for_4 -> empty .)
    WHILE           reduce using rule 47 (for_4 -> empty .)
    IF              reduce using rule 47 (for_4 -> empty .)
    ID              reduce using rule 47 (for_4 -> empty .)
    PRINT           reduce using rule 47 (for_4 -> empty .)
    RBRACE          reduce using rule 47 (for_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 7 resolved as shift
