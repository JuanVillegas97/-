Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMENT
    FALSE
    STRING
    THEN
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END
Rule 2     global_scope -> empty
Rule 3     functions -> functions function
Rule 4     functions -> function
Rule 5     functions -> empty
Rule 6     function -> FUNCTION function_signature function_body
Rule 7     function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
Rule 8     function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
Rule 9     function_body -> LBRACE statements return_stmt RBRACE
Rule 10    function_body -> LBRACE statements RBRACE
Rule 11    return_stmt -> RETURN expression SEMICOLON
Rule 12    return_stmt -> RETURN SEMICOLON
Rule 13    function_1 -> empty
Rule 14    main -> MAIN LPAREN RPAREN main_scope var_declarations LBRACE statements RBRACE
Rule 15    main_scope -> empty
Rule 16    var_declarations -> var_declaration_list
Rule 17    var_declarations -> empty
Rule 18    var_declaration_list -> var_declaration var_declarations
Rule 19    var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration
Rule 20    open_var_declaration -> empty
Rule 21    close_var_declaration -> empty
Rule 22    variables -> variable
Rule 23    variables -> variable COMMA variables
Rule 24    variable -> ID
Rule 25    variable -> ID LBRACK expression RBRACK
Rule 26    variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK
Rule 27    parameters -> parameters COMMA parameter
Rule 28    parameters -> parameter
Rule 29    parameters -> empty
Rule 30    parameter -> simple_type ID
Rule 31    statements -> statements statement
Rule 32    statements -> statement
Rule 33    statements -> empty
Rule 34    statement -> read
Rule 35    statement -> for
Rule 36    statement -> do_while
Rule 37    statement -> while
Rule 38    statement -> if_else
Rule 39    statement -> invocation
Rule 40    statement -> if
Rule 41    statement -> assingation
Rule 42    statement -> return
Rule 43    statement -> print
Rule 44    do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
Rule 45    for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
Rule 46    for_1 -> empty
Rule 47    for_2 -> empty
Rule 48    for_3 -> empty
Rule 49    for_4 -> empty
Rule 50    while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
Rule 51    breadcrumb -> empty
Rule 52    if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
Rule 53    open_temporal_boolean -> empty
Rule 54    close_temporal_boolean -> empty
Rule 55    if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
Rule 56    gotot -> empty
Rule 57    goto -> empty
Rule 58    gotof -> empty
Rule 59    return -> RETURN expression SEMICOLON
Rule 60    read -> READ LPAREN variable_list RPAREN SEMICOLON
Rule 61    variable_list -> variable
Rule 62    variable_list -> variable_list COMMA variable
Rule 63    invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
Rule 64    invocation_1 -> empty
Rule 65    invocation_2 -> empty
Rule 66    invocation_3 -> empty
Rule 67    invocation_4 -> empty
Rule 68    invocation_5 -> empty
Rule 69    invocation_6 -> empty
Rule 70    expressions -> expressions COMMA invocation_4 expression invocation_3
Rule 71    expressions -> expression invocation_3
Rule 72    expressions -> empty
Rule 73    expression -> t_expression
Rule 74    expression -> NOT t_expression
Rule 75    print -> PRINT LPAREN print_arguments RPAREN SEMICOLON
Rule 76    print_arguments -> print_argument
Rule 77    print_arguments -> print_arguments COMMA print_argument
Rule 78    print_argument -> CTES
Rule 79    print_argument -> expression
Rule 80    assingation -> variable ASSIGN expression SEMICOLON
Rule 81    t_expression -> g_expression
Rule 82    t_expression -> t_expression boolean_operator g_expression
Rule 83    g_expression -> m_expression
Rule 84    g_expression -> g_expression comparison_operator m_expression
Rule 85    m_expression -> term
Rule 86    m_expression -> m_expression addition_operator term
Rule 87    term -> factor
Rule 88    term -> term multiplication_operator factor
Rule 89    factor -> variable
Rule 90    factor -> cte
Rule 91    factor -> expression_parenthesis
Rule 92    factor -> invocation
Rule 93    expression_parenthesis -> LPAREN expression RPAREN
Rule 94    comparison_operator -> LESS
Rule 95    comparison_operator -> GREATER
Rule 96    comparison_operator -> EQUALS
Rule 97    comparison_operator -> NOTEQUAL
Rule 98    comparison_operator -> GREATERTHAN
Rule 99    comparison_operator -> LESSTHAN
Rule 100   addition_operator -> PLUS
Rule 101   addition_operator -> MINUS
Rule 102   boolean_operator -> AND
Rule 103   boolean_operator -> OR
Rule 104   multiplication_operator -> TIMES
Rule 105   multiplication_operator -> DIVIDE
Rule 106   simple_type -> INT
Rule 107   simple_type -> FLOAT
Rule 108   simple_type -> CHAR
Rule 109   simple_type -> BOOLEAN
Rule 110   cte -> CTEI
Rule 111   cte -> CTEF
Rule 112   cte -> CTEC
Rule 113   cte -> CTEB
Rule 114   empty -> <empty>

Terminals, with rules where they appear

AND                  : 102
ASSIGN               : 45 80
BOOLEAN              : 109
CHAR                 : 108
COLON                : 
COMMA                : 23 27 62 70 77
COMMENT              : 
CTEB                 : 113
CTEC                 : 112
CTEF                 : 111
CTEI                 : 110
CTES                 : 78
DIVIDE               : 105
DO                   : 44 45
ELSE                 : 55
END                  : 1
EQUALS               : 96
FALSE                : 
FLOAT                : 107
FOR                  : 45
FROM                 : 45
FUNCTION             : 6
GREATER              : 95
GREATERTHAN          : 98
ID                   : 1 7 8 24 25 26 30 45 63
IF                   : 52 55
INT                  : 106
LBRACE               : 9 10 14 44 45 50 52 55 55
LBRACK               : 25 26 26
LESS                 : 94
LESSTHAN             : 99
LPAREN               : 7 8 14 44 45 50 52 55 60 63 75 93
MAIN                 : 14
MINUS                : 101
NOT                  : 74
NOTEQUAL             : 97
OR                   : 103
PLUS                 : 100
PRINT                : 75
PROGRAM              : 1
RBRACE               : 9 10 14 44 45 50 52 55 55
RBRACK               : 25 26 26
READ                 : 60
RETURN               : 11 12 59
RPAREN               : 7 8 14 44 45 50 52 55 60 63 75 93
SEMICOLON            : 1 11 12 19 44 59 60 63 75 80
STRING               : 
THEN                 : 
TIMES                : 104
TRUE                 : 
VARIABLE             : 19
VOID                 : 8
WHILE                : 44 50
error                : 

Nonterminals, with rules where they appear

addition_operator    : 86
assingation          : 41
boolean_operator     : 82
breadcrumb           : 44 50
close_temporal_boolean : 50 52 55
close_var_declaration : 7 8 19
comparison_operator  : 84
cte                  : 90
do_while             : 36
empty                : 2 5 13 15 17 20 21 29 33 46 47 48 49 51 53 54 56 57 58 64 65 66 67 68 69 72
expression           : 11 25 26 26 44 45 45 50 52 55 59 70 71 79 80 93
expression_parenthesis : 91
expressions          : 63 70
factor               : 87 88
for                  : 35
for_1                : 45
for_2                : 45
for_3                : 45
for_4                : 45
function             : 3 4
function_1           : 7 8
function_body        : 6
function_signature   : 6
functions            : 1 3
g_expression         : 81 82 84
global_scope         : 1
goto                 : 55
gotof                : 50 52 55
gotot                : 44
if                   : 40
if_else              : 38
invocation           : 39 92
invocation_1         : 63
invocation_2         : 63
invocation_3         : 70 71
invocation_4         : 70
invocation_5         : 63
invocation_6         : 63
m_expression         : 83 84 86
main                 : 1
main_scope           : 14
multiplication_operator : 88
open_temporal_boolean : 50 52 55
open_var_declaration : 7 8 19
parameter            : 27 28
parameters           : 7 8 27
print                : 43
print_argument       : 76 77
print_arguments      : 75 77
program              : 0
read                 : 34
return               : 42
return_stmt          : 9
simple_type          : 7 19 30
statement            : 31 32
statements           : 9 10 14 31 44 45 50 52 55 55
t_expression         : 73 74 82
term                 : 85 86 88
var_declaration      : 18
var_declaration_list : 16
var_declarations     : 1 7 8 14 18
variable             : 22 23 61 62 80 89
variable_list        : 60 62
variables            : 19 23
while                : 37

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON global_scope var_declarations functions main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON global_scope var_declarations functions main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON global_scope var_declarations functions main END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . global_scope var_declarations functions main END
    (2) global_scope -> . empty
    (114) empty -> .

    VARIABLE        reduce using rule 114 (empty -> .)
    FUNCTION        reduce using rule 114 (empty -> .)
    MAIN            reduce using rule 114 (empty -> .)

    global_scope                   shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON global_scope . var_declarations functions main END
    (16) var_declarations -> . var_declaration_list
    (17) var_declarations -> . empty
    (18) var_declaration_list -> . var_declaration var_declarations
    (114) empty -> .
    (19) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 114 (empty -> .)
    MAIN            reduce using rule 114 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 7
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 6

    (2) global_scope -> empty .

    VARIABLE        reduce using rule 2 (global_scope -> empty .)
    FUNCTION        reduce using rule 2 (global_scope -> empty .)
    MAIN            reduce using rule 2 (global_scope -> empty .)


state 7

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations . functions main END
    (3) functions -> . functions function
    (4) functions -> . function
    (5) functions -> . empty
    (6) function -> . FUNCTION function_signature function_body
    (114) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 114 (empty -> .)

  ! FUNCTION        [ reduce using rule 114 (empty -> .) ]

    functions                      shift and go to state 12
    function                       shift and go to state 13
    empty                          shift and go to state 14

state 8

    (16) var_declarations -> var_declaration_list .

    FUNCTION        reduce using rule 16 (var_declarations -> var_declaration_list .)
    MAIN            reduce using rule 16 (var_declarations -> var_declaration_list .)
    LBRACE          reduce using rule 16 (var_declarations -> var_declaration_list .)


state 9

    (17) var_declarations -> empty .

    FUNCTION        reduce using rule 17 (var_declarations -> empty .)
    MAIN            reduce using rule 17 (var_declarations -> empty .)
    LBRACE          reduce using rule 17 (var_declarations -> empty .)


state 10

    (18) var_declaration_list -> var_declaration . var_declarations
    (16) var_declarations -> . var_declaration_list
    (17) var_declarations -> . empty
    (18) var_declaration_list -> . var_declaration var_declarations
    (114) empty -> .
    (19) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 114 (empty -> .)
    MAIN            reduce using rule 114 (empty -> .)
    LBRACE          reduce using rule 114 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declaration                shift and go to state 10
    var_declarations               shift and go to state 16
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9

state 11

    (19) var_declaration -> VARIABLE . open_var_declaration simple_type variables SEMICOLON close_var_declaration
    (20) open_var_declaration -> . empty
    (114) empty -> .

    INT             reduce using rule 114 (empty -> .)
    FLOAT           reduce using rule 114 (empty -> .)
    CHAR            reduce using rule 114 (empty -> .)
    BOOLEAN         reduce using rule 114 (empty -> .)

    open_var_declaration           shift and go to state 17
    empty                          shift and go to state 18

state 12

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions . main END
    (3) functions -> functions . function
    (14) main -> . MAIN LPAREN RPAREN main_scope var_declarations LBRACE statements RBRACE
    (6) function -> . FUNCTION function_signature function_body

    MAIN            shift and go to state 21
    FUNCTION        shift and go to state 15

    main                           shift and go to state 19
    function                       shift and go to state 20

state 13

    (4) functions -> function .

    MAIN            reduce using rule 4 (functions -> function .)
    FUNCTION        reduce using rule 4 (functions -> function .)


state 14

    (5) functions -> empty .

    MAIN            reduce using rule 5 (functions -> empty .)
    FUNCTION        reduce using rule 5 (functions -> empty .)


state 15

    (6) function -> FUNCTION . function_signature function_body
    (7) function_signature -> . simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (8) function_signature -> . VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (106) simple_type -> . INT
    (107) simple_type -> . FLOAT
    (108) simple_type -> . CHAR
    (109) simple_type -> . BOOLEAN

    VOID            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28

    function_signature             shift and go to state 22
    simple_type                    shift and go to state 23

state 16

    (18) var_declaration_list -> var_declaration var_declarations .

    FUNCTION        reduce using rule 18 (var_declaration_list -> var_declaration var_declarations .)
    MAIN            reduce using rule 18 (var_declaration_list -> var_declaration var_declarations .)
    LBRACE          reduce using rule 18 (var_declaration_list -> var_declaration var_declarations .)


state 17

    (19) var_declaration -> VARIABLE open_var_declaration . simple_type variables SEMICOLON close_var_declaration
    (106) simple_type -> . INT
    (107) simple_type -> . FLOAT
    (108) simple_type -> . CHAR
    (109) simple_type -> . BOOLEAN

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28

    simple_type                    shift and go to state 29

state 18

    (20) open_var_declaration -> empty .

    INT             reduce using rule 20 (open_var_declaration -> empty .)
    FLOAT           reduce using rule 20 (open_var_declaration -> empty .)
    CHAR            reduce using rule 20 (open_var_declaration -> empty .)
    BOOLEAN         reduce using rule 20 (open_var_declaration -> empty .)
    COMMA           reduce using rule 20 (open_var_declaration -> empty .)
    RPAREN          reduce using rule 20 (open_var_declaration -> empty .)


state 19

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main . END

    END             shift and go to state 30


state 20

    (3) functions -> functions function .

    MAIN            reduce using rule 3 (functions -> functions function .)
    FUNCTION        reduce using rule 3 (functions -> functions function .)


state 21

    (14) main -> MAIN . LPAREN RPAREN main_scope var_declarations LBRACE statements RBRACE

    LPAREN          shift and go to state 31


state 22

    (6) function -> FUNCTION function_signature . function_body
    (9) function_body -> . LBRACE statements return_stmt RBRACE
    (10) function_body -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 33

    function_body                  shift and go to state 32

state 23

    (7) function_signature -> simple_type . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    ID              shift and go to state 34


state 24

    (8) function_signature -> VOID . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    ID              shift and go to state 35


state 25

    (106) simple_type -> INT .

    ID              reduce using rule 106 (simple_type -> INT .)


state 26

    (107) simple_type -> FLOAT .

    ID              reduce using rule 107 (simple_type -> FLOAT .)


state 27

    (108) simple_type -> CHAR .

    ID              reduce using rule 108 (simple_type -> CHAR .)


state 28

    (109) simple_type -> BOOLEAN .

    ID              reduce using rule 109 (simple_type -> BOOLEAN .)


state 29

    (19) var_declaration -> VARIABLE open_var_declaration simple_type . variables SEMICOLON close_var_declaration
    (22) variables -> . variable
    (23) variables -> . variable COMMA variables
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 38

    variables                      shift and go to state 36
    variable                       shift and go to state 37

state 30

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .)


state 31

    (14) main -> MAIN LPAREN . RPAREN main_scope var_declarations LBRACE statements RBRACE

    RPAREN          shift and go to state 39


state 32

    (6) function -> FUNCTION function_signature function_body .

    MAIN            reduce using rule 6 (function -> FUNCTION function_signature function_body .)
    FUNCTION        reduce using rule 6 (function -> FUNCTION function_signature function_body .)


state 33

    (9) function_body -> LBRACE . statements return_stmt RBRACE
    (10) function_body -> LBRACE . statements RBRACE
    (31) statements -> . statements statement
    (32) statements -> . statement
    (33) statements -> . empty
    (34) statement -> . read
    (35) statement -> . for
    (36) statement -> . do_while
    (37) statement -> . while
    (38) statement -> . if_else
    (39) statement -> . invocation
    (40) statement -> . if
    (41) statement -> . assingation
    (42) statement -> . return
    (43) statement -> . print
    (114) empty -> .
    (60) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (45) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (44) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (50) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (55) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (52) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (80) assingation -> . variable ASSIGN expression SEMICOLON
    (59) return -> . RETURN expression SEMICOLON
    (75) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 114 (empty -> .)
    READ            shift and go to state 53
    FOR             shift and go to state 54
    DO              shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    ID              shift and go to state 55
    RETURN          shift and go to state 60
    PRINT           shift and go to state 61

  ! RETURN          [ reduce using rule 114 (empty -> .) ]
  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! PRINT           [ reduce using rule 114 (empty -> .) ]

    statements                     shift and go to state 40
    statement                      shift and go to state 41
    empty                          shift and go to state 42
    read                           shift and go to state 43
    for                            shift and go to state 44
    do_while                       shift and go to state 45
    while                          shift and go to state 46
    if_else                        shift and go to state 47
    invocation                     shift and go to state 48
    if                             shift and go to state 49
    assingation                    shift and go to state 50
    return                         shift and go to state 51
    print                          shift and go to state 52
    variable                       shift and go to state 59

state 34

    (7) function_signature -> simple_type ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (13) function_1 -> . empty
    (114) empty -> .

    LPAREN          reduce using rule 114 (empty -> .)

    function_1                     shift and go to state 62
    empty                          shift and go to state 63

state 35

    (8) function_signature -> VOID ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (13) function_1 -> . empty
    (114) empty -> .

    LPAREN          reduce using rule 114 (empty -> .)

    function_1                     shift and go to state 64
    empty                          shift and go to state 63

state 36

    (19) var_declaration -> VARIABLE open_var_declaration simple_type variables . SEMICOLON close_var_declaration

    SEMICOLON       shift and go to state 65


state 37

    (22) variables -> variable .
    (23) variables -> variable . COMMA variables

    SEMICOLON       reduce using rule 22 (variables -> variable .)
    COMMA           shift and go to state 66


state 38

    (24) variable -> ID .
    (25) variable -> ID . LBRACK expression RBRACK
    (26) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK

    COMMA           reduce using rule 24 (variable -> ID .)
    SEMICOLON       reduce using rule 24 (variable -> ID .)
    RPAREN          reduce using rule 24 (variable -> ID .)
    LBRACK          shift and go to state 67


state 39

    (14) main -> MAIN LPAREN RPAREN . main_scope var_declarations LBRACE statements RBRACE
    (15) main_scope -> . empty
    (114) empty -> .

    VARIABLE        reduce using rule 114 (empty -> .)
    LBRACE          reduce using rule 114 (empty -> .)

    main_scope                     shift and go to state 68
    empty                          shift and go to state 69

state 40

    (9) function_body -> LBRACE statements . return_stmt RBRACE
    (10) function_body -> LBRACE statements . RBRACE
    (31) statements -> statements . statement
    (11) return_stmt -> . RETURN expression SEMICOLON
    (12) return_stmt -> . RETURN SEMICOLON
    (34) statement -> . read
    (35) statement -> . for
    (36) statement -> . do_while
    (37) statement -> . while
    (38) statement -> . if_else
    (39) statement -> . invocation
    (40) statement -> . if
    (41) statement -> . assingation
    (42) statement -> . return
    (43) statement -> . print
    (60) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (45) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (44) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (50) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (55) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (52) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (80) assingation -> . variable ASSIGN expression SEMICOLON
    (59) return -> . RETURN expression SEMICOLON
    (75) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 71
    RETURN          shift and go to state 73
    READ            shift and go to state 53
    FOR             shift and go to state 54
    DO              shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    ID              shift and go to state 55
    PRINT           shift and go to state 61

    return_stmt                    shift and go to state 70
    statement                      shift and go to state 72
    read                           shift and go to state 43
    for                            shift and go to state 44
    do_while                       shift and go to state 45
    while                          shift and go to state 46
    if_else                        shift and go to state 47
    invocation                     shift and go to state 48
    if                             shift and go to state 49
    assingation                    shift and go to state 50
    return                         shift and go to state 51
    print                          shift and go to state 52
    variable                       shift and go to state 59

state 41

    (32) statements -> statement .

    RBRACE          reduce using rule 32 (statements -> statement .)
    RETURN          reduce using rule 32 (statements -> statement .)
    READ            reduce using rule 32 (statements -> statement .)
    FOR             reduce using rule 32 (statements -> statement .)
    DO              reduce using rule 32 (statements -> statement .)
    WHILE           reduce using rule 32 (statements -> statement .)
    IF              reduce using rule 32 (statements -> statement .)
    ID              reduce using rule 32 (statements -> statement .)
    PRINT           reduce using rule 32 (statements -> statement .)


state 42

    (33) statements -> empty .

    RBRACE          reduce using rule 33 (statements -> empty .)
    RETURN          reduce using rule 33 (statements -> empty .)
    READ            reduce using rule 33 (statements -> empty .)
    FOR             reduce using rule 33 (statements -> empty .)
    DO              reduce using rule 33 (statements -> empty .)
    WHILE           reduce using rule 33 (statements -> empty .)
    IF              reduce using rule 33 (statements -> empty .)
    ID              reduce using rule 33 (statements -> empty .)
    PRINT           reduce using rule 33 (statements -> empty .)


state 43

    (34) statement -> read .

    RBRACE          reduce using rule 34 (statement -> read .)
    RETURN          reduce using rule 34 (statement -> read .)
    READ            reduce using rule 34 (statement -> read .)
    FOR             reduce using rule 34 (statement -> read .)
    DO              reduce using rule 34 (statement -> read .)
    WHILE           reduce using rule 34 (statement -> read .)
    IF              reduce using rule 34 (statement -> read .)
    ID              reduce using rule 34 (statement -> read .)
    PRINT           reduce using rule 34 (statement -> read .)


state 44

    (35) statement -> for .

    RBRACE          reduce using rule 35 (statement -> for .)
    RETURN          reduce using rule 35 (statement -> for .)
    READ            reduce using rule 35 (statement -> for .)
    FOR             reduce using rule 35 (statement -> for .)
    DO              reduce using rule 35 (statement -> for .)
    WHILE           reduce using rule 35 (statement -> for .)
    IF              reduce using rule 35 (statement -> for .)
    ID              reduce using rule 35 (statement -> for .)
    PRINT           reduce using rule 35 (statement -> for .)


state 45

    (36) statement -> do_while .

    RBRACE          reduce using rule 36 (statement -> do_while .)
    RETURN          reduce using rule 36 (statement -> do_while .)
    READ            reduce using rule 36 (statement -> do_while .)
    FOR             reduce using rule 36 (statement -> do_while .)
    DO              reduce using rule 36 (statement -> do_while .)
    WHILE           reduce using rule 36 (statement -> do_while .)
    IF              reduce using rule 36 (statement -> do_while .)
    ID              reduce using rule 36 (statement -> do_while .)
    PRINT           reduce using rule 36 (statement -> do_while .)


state 46

    (37) statement -> while .

    RBRACE          reduce using rule 37 (statement -> while .)
    RETURN          reduce using rule 37 (statement -> while .)
    READ            reduce using rule 37 (statement -> while .)
    FOR             reduce using rule 37 (statement -> while .)
    DO              reduce using rule 37 (statement -> while .)
    WHILE           reduce using rule 37 (statement -> while .)
    IF              reduce using rule 37 (statement -> while .)
    ID              reduce using rule 37 (statement -> while .)
    PRINT           reduce using rule 37 (statement -> while .)


state 47

    (38) statement -> if_else .

    RBRACE          reduce using rule 38 (statement -> if_else .)
    RETURN          reduce using rule 38 (statement -> if_else .)
    READ            reduce using rule 38 (statement -> if_else .)
    FOR             reduce using rule 38 (statement -> if_else .)
    DO              reduce using rule 38 (statement -> if_else .)
    WHILE           reduce using rule 38 (statement -> if_else .)
    IF              reduce using rule 38 (statement -> if_else .)
    ID              reduce using rule 38 (statement -> if_else .)
    PRINT           reduce using rule 38 (statement -> if_else .)


state 48

    (39) statement -> invocation .

    RBRACE          reduce using rule 39 (statement -> invocation .)
    RETURN          reduce using rule 39 (statement -> invocation .)
    READ            reduce using rule 39 (statement -> invocation .)
    FOR             reduce using rule 39 (statement -> invocation .)
    DO              reduce using rule 39 (statement -> invocation .)
    WHILE           reduce using rule 39 (statement -> invocation .)
    IF              reduce using rule 39 (statement -> invocation .)
    ID              reduce using rule 39 (statement -> invocation .)
    PRINT           reduce using rule 39 (statement -> invocation .)


state 49

    (40) statement -> if .

    RBRACE          reduce using rule 40 (statement -> if .)
    RETURN          reduce using rule 40 (statement -> if .)
    READ            reduce using rule 40 (statement -> if .)
    FOR             reduce using rule 40 (statement -> if .)
    DO              reduce using rule 40 (statement -> if .)
    WHILE           reduce using rule 40 (statement -> if .)
    IF              reduce using rule 40 (statement -> if .)
    ID              reduce using rule 40 (statement -> if .)
    PRINT           reduce using rule 40 (statement -> if .)


state 50

    (41) statement -> assingation .

    RBRACE          reduce using rule 41 (statement -> assingation .)
    RETURN          reduce using rule 41 (statement -> assingation .)
    READ            reduce using rule 41 (statement -> assingation .)
    FOR             reduce using rule 41 (statement -> assingation .)
    DO              reduce using rule 41 (statement -> assingation .)
    WHILE           reduce using rule 41 (statement -> assingation .)
    IF              reduce using rule 41 (statement -> assingation .)
    ID              reduce using rule 41 (statement -> assingation .)
    PRINT           reduce using rule 41 (statement -> assingation .)


state 51

    (42) statement -> return .

    RBRACE          reduce using rule 42 (statement -> return .)
    RETURN          reduce using rule 42 (statement -> return .)
    READ            reduce using rule 42 (statement -> return .)
    FOR             reduce using rule 42 (statement -> return .)
    DO              reduce using rule 42 (statement -> return .)
    WHILE           reduce using rule 42 (statement -> return .)
    IF              reduce using rule 42 (statement -> return .)
    ID              reduce using rule 42 (statement -> return .)
    PRINT           reduce using rule 42 (statement -> return .)


state 52

    (43) statement -> print .

    RBRACE          reduce using rule 43 (statement -> print .)
    RETURN          reduce using rule 43 (statement -> print .)
    READ            reduce using rule 43 (statement -> print .)
    FOR             reduce using rule 43 (statement -> print .)
    DO              reduce using rule 43 (statement -> print .)
    WHILE           reduce using rule 43 (statement -> print .)
    IF              reduce using rule 43 (statement -> print .)
    ID              reduce using rule 43 (statement -> print .)
    PRINT           reduce using rule 43 (statement -> print .)


state 53

    (60) read -> READ . LPAREN variable_list RPAREN SEMICOLON

    LPAREN          shift and go to state 74


state 54

    (45) for -> FOR . LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4

    LPAREN          shift and go to state 75


state 55

    (63) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (24) variable -> ID .
    (25) variable -> ID . LBRACK expression RBRACK
    (26) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (64) invocation_1 -> . empty
    (114) empty -> .

    ASSIGN          reduce using rule 24 (variable -> ID .)
    LBRACK          shift and go to state 67
    LPAREN          reduce using rule 114 (empty -> .)

    invocation_1                   shift and go to state 76
    empty                          shift and go to state 77

state 56

    (44) do_while -> DO . breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (51) breadcrumb -> . empty
    (114) empty -> .

    LBRACE          reduce using rule 114 (empty -> .)

    breadcrumb                     shift and go to state 78
    empty                          shift and go to state 79

state 57

    (50) while -> WHILE . breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (51) breadcrumb -> . empty
    (114) empty -> .

    LPAREN          reduce using rule 114 (empty -> .)

    breadcrumb                     shift and go to state 80
    empty                          shift and go to state 79

state 58

    (55) if_else -> IF . LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (52) if -> IF . LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE

    LPAREN          shift and go to state 81


state 59

    (80) assingation -> variable . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 82


state 60

    (59) return -> RETURN . expression SEMICOLON
    (73) expression -> . t_expression
    (74) expression -> . NOT t_expression
    (81) t_expression -> . g_expression
    (82) t_expression -> . t_expression boolean_operator g_expression
    (83) g_expression -> . m_expression
    (84) g_expression -> . g_expression comparison_operator m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 85
    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    expression                     shift and go to state 83
    t_expression                   shift and go to state 84
    g_expression                   shift and go to state 86
    m_expression                   shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 61

    (75) print -> PRINT . LPAREN print_arguments RPAREN SEMICOLON

    LPAREN          shift and go to state 100


state 62

    (7) function_signature -> simple_type ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    LPAREN          shift and go to state 101


state 63

    (13) function_1 -> empty .

    LPAREN          reduce using rule 13 (function_1 -> empty .)


state 64

    (8) function_signature -> VOID ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    LPAREN          shift and go to state 102


state 65

    (19) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON . close_var_declaration
    (21) close_var_declaration -> . empty
    (114) empty -> .

    VARIABLE        reduce using rule 114 (empty -> .)
    FUNCTION        reduce using rule 114 (empty -> .)
    MAIN            reduce using rule 114 (empty -> .)
    LBRACE          reduce using rule 114 (empty -> .)

    close_var_declaration          shift and go to state 103
    empty                          shift and go to state 104

state 66

    (23) variables -> variable COMMA . variables
    (22) variables -> . variable
    (23) variables -> . variable COMMA variables
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 38

    variable                       shift and go to state 37
    variables                      shift and go to state 105

state 67

    (25) variable -> ID LBRACK . expression RBRACK
    (26) variable -> ID LBRACK . expression RBRACK LBRACK expression RBRACK
    (73) expression -> . t_expression
    (74) expression -> . NOT t_expression
    (81) t_expression -> . g_expression
    (82) t_expression -> . t_expression boolean_operator g_expression
    (83) g_expression -> . m_expression
    (84) g_expression -> . g_expression comparison_operator m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 85
    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    expression                     shift and go to state 106
    t_expression                   shift and go to state 84
    g_expression                   shift and go to state 86
    m_expression                   shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 68

    (14) main -> MAIN LPAREN RPAREN main_scope . var_declarations LBRACE statements RBRACE
    (16) var_declarations -> . var_declaration_list
    (17) var_declarations -> . empty
    (18) var_declaration_list -> . var_declaration var_declarations
    (114) empty -> .
    (19) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 114 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 107
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 69

    (15) main_scope -> empty .

    VARIABLE        reduce using rule 15 (main_scope -> empty .)
    LBRACE          reduce using rule 15 (main_scope -> empty .)


state 70

    (9) function_body -> LBRACE statements return_stmt . RBRACE

    RBRACE          shift and go to state 108


state 71

    (10) function_body -> LBRACE statements RBRACE .

    MAIN            reduce using rule 10 (function_body -> LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 10 (function_body -> LBRACE statements RBRACE .)


state 72

    (31) statements -> statements statement .

    RBRACE          reduce using rule 31 (statements -> statements statement .)
    RETURN          reduce using rule 31 (statements -> statements statement .)
    READ            reduce using rule 31 (statements -> statements statement .)
    FOR             reduce using rule 31 (statements -> statements statement .)
    DO              reduce using rule 31 (statements -> statements statement .)
    WHILE           reduce using rule 31 (statements -> statements statement .)
    IF              reduce using rule 31 (statements -> statements statement .)
    ID              reduce using rule 31 (statements -> statements statement .)
    PRINT           reduce using rule 31 (statements -> statements statement .)


state 73

    (11) return_stmt -> RETURN . expression SEMICOLON
    (12) return_stmt -> RETURN . SEMICOLON
    (59) return -> RETURN . expression SEMICOLON
    (73) expression -> . t_expression
    (74) expression -> . NOT t_expression
    (81) t_expression -> . g_expression
    (82) t_expression -> . t_expression boolean_operator g_expression
    (83) g_expression -> . m_expression
    (84) g_expression -> . g_expression comparison_operator m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    SEMICOLON       shift and go to state 110
    NOT             shift and go to state 85
    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    expression                     shift and go to state 109
    t_expression                   shift and go to state 84
    g_expression                   shift and go to state 86
    m_expression                   shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 74

    (60) read -> READ LPAREN . variable_list RPAREN SEMICOLON
    (61) variable_list -> . variable
    (62) variable_list -> . variable_list COMMA variable
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 38

    variable_list                  shift and go to state 111
    variable                       shift and go to state 112

state 75

    (45) for -> FOR LPAREN . ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4

    ID              shift and go to state 113


state 76

    (63) invocation -> ID invocation_1 . LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    LPAREN          shift and go to state 114


state 77

    (64) invocation_1 -> empty .

    LPAREN          reduce using rule 64 (invocation_1 -> empty .)


state 78

    (44) do_while -> DO breadcrumb . LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON

    LBRACE          shift and go to state 115


state 79

    (51) breadcrumb -> empty .

    LBRACE          reduce using rule 51 (breadcrumb -> empty .)
    LPAREN          reduce using rule 51 (breadcrumb -> empty .)


state 80

    (50) while -> WHILE breadcrumb . LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE

    LPAREN          shift and go to state 116


state 81

    (55) if_else -> IF LPAREN . open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (52) if -> IF LPAREN . open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (53) open_temporal_boolean -> . empty
    (114) empty -> .

    NOT             reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    CTEI            reduce using rule 114 (empty -> .)
    CTEF            reduce using rule 114 (empty -> .)
    CTEC            reduce using rule 114 (empty -> .)
    CTEB            reduce using rule 114 (empty -> .)
    LPAREN          reduce using rule 114 (empty -> .)

    open_temporal_boolean          shift and go to state 117
    empty                          shift and go to state 118

state 82

    (80) assingation -> variable ASSIGN . expression SEMICOLON
    (73) expression -> . t_expression
    (74) expression -> . NOT t_expression
    (81) t_expression -> . g_expression
    (82) t_expression -> . t_expression boolean_operator g_expression
    (83) g_expression -> . m_expression
    (84) g_expression -> . g_expression comparison_operator m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 85
    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    variable                       shift and go to state 90
    expression                     shift and go to state 119
    t_expression                   shift and go to state 84
    g_expression                   shift and go to state 86
    m_expression                   shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 89
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 83

    (59) return -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 120


state 84

    (73) expression -> t_expression .
    (82) t_expression -> t_expression . boolean_operator g_expression
    (102) boolean_operator -> . AND
    (103) boolean_operator -> . OR

    SEMICOLON       reduce using rule 73 (expression -> t_expression .)
    RBRACK          reduce using rule 73 (expression -> t_expression .)
    RPAREN          reduce using rule 73 (expression -> t_expression .)
    COMMA           reduce using rule 73 (expression -> t_expression .)
    FROM            reduce using rule 73 (expression -> t_expression .)
    AND             shift and go to state 122
    OR              shift and go to state 123

    boolean_operator               shift and go to state 121

state 85

    (74) expression -> NOT . t_expression
    (81) t_expression -> . g_expression
    (82) t_expression -> . t_expression boolean_operator g_expression
    (83) g_expression -> . m_expression
    (84) g_expression -> . g_expression comparison_operator m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    t_expression                   shift and go to state 124
    g_expression                   shift and go to state 86
    m_expression                   shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 86

    (81) t_expression -> g_expression .
    (84) g_expression -> g_expression . comparison_operator m_expression
    (94) comparison_operator -> . LESS
    (95) comparison_operator -> . GREATER
    (96) comparison_operator -> . EQUALS
    (97) comparison_operator -> . NOTEQUAL
    (98) comparison_operator -> . GREATERTHAN
    (99) comparison_operator -> . LESSTHAN

    AND             reduce using rule 81 (t_expression -> g_expression .)
    OR              reduce using rule 81 (t_expression -> g_expression .)
    SEMICOLON       reduce using rule 81 (t_expression -> g_expression .)
    RBRACK          reduce using rule 81 (t_expression -> g_expression .)
    RPAREN          reduce using rule 81 (t_expression -> g_expression .)
    COMMA           reduce using rule 81 (t_expression -> g_expression .)
    FROM            reduce using rule 81 (t_expression -> g_expression .)
    LESS            shift and go to state 126
    GREATER         shift and go to state 127
    EQUALS          shift and go to state 128
    NOTEQUAL        shift and go to state 129
    GREATERTHAN     shift and go to state 130
    LESSTHAN        shift and go to state 131

    comparison_operator            shift and go to state 125

state 87

    (83) g_expression -> m_expression .
    (86) m_expression -> m_expression . addition_operator term
    (100) addition_operator -> . PLUS
    (101) addition_operator -> . MINUS

    LESS            reduce using rule 83 (g_expression -> m_expression .)
    GREATER         reduce using rule 83 (g_expression -> m_expression .)
    EQUALS          reduce using rule 83 (g_expression -> m_expression .)
    NOTEQUAL        reduce using rule 83 (g_expression -> m_expression .)
    GREATERTHAN     reduce using rule 83 (g_expression -> m_expression .)
    LESSTHAN        reduce using rule 83 (g_expression -> m_expression .)
    AND             reduce using rule 83 (g_expression -> m_expression .)
    OR              reduce using rule 83 (g_expression -> m_expression .)
    SEMICOLON       reduce using rule 83 (g_expression -> m_expression .)
    RBRACK          reduce using rule 83 (g_expression -> m_expression .)
    RPAREN          reduce using rule 83 (g_expression -> m_expression .)
    COMMA           reduce using rule 83 (g_expression -> m_expression .)
    FROM            reduce using rule 83 (g_expression -> m_expression .)
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134

    addition_operator              shift and go to state 132

state 88

    (85) m_expression -> term .
    (88) term -> term . multiplication_operator factor
    (104) multiplication_operator -> . TIMES
    (105) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 85 (m_expression -> term .)
    MINUS           reduce using rule 85 (m_expression -> term .)
    LESS            reduce using rule 85 (m_expression -> term .)
    GREATER         reduce using rule 85 (m_expression -> term .)
    EQUALS          reduce using rule 85 (m_expression -> term .)
    NOTEQUAL        reduce using rule 85 (m_expression -> term .)
    GREATERTHAN     reduce using rule 85 (m_expression -> term .)
    LESSTHAN        reduce using rule 85 (m_expression -> term .)
    AND             reduce using rule 85 (m_expression -> term .)
    OR              reduce using rule 85 (m_expression -> term .)
    SEMICOLON       reduce using rule 85 (m_expression -> term .)
    RBRACK          reduce using rule 85 (m_expression -> term .)
    RPAREN          reduce using rule 85 (m_expression -> term .)
    COMMA           reduce using rule 85 (m_expression -> term .)
    FROM            reduce using rule 85 (m_expression -> term .)
    TIMES           shift and go to state 136
    DIVIDE          shift and go to state 137

    multiplication_operator        shift and go to state 135

state 89

    (87) term -> factor .

    TIMES           reduce using rule 87 (term -> factor .)
    DIVIDE          reduce using rule 87 (term -> factor .)
    PLUS            reduce using rule 87 (term -> factor .)
    MINUS           reduce using rule 87 (term -> factor .)
    LESS            reduce using rule 87 (term -> factor .)
    GREATER         reduce using rule 87 (term -> factor .)
    EQUALS          reduce using rule 87 (term -> factor .)
    NOTEQUAL        reduce using rule 87 (term -> factor .)
    GREATERTHAN     reduce using rule 87 (term -> factor .)
    LESSTHAN        reduce using rule 87 (term -> factor .)
    AND             reduce using rule 87 (term -> factor .)
    OR              reduce using rule 87 (term -> factor .)
    SEMICOLON       reduce using rule 87 (term -> factor .)
    RBRACK          reduce using rule 87 (term -> factor .)
    RPAREN          reduce using rule 87 (term -> factor .)
    COMMA           reduce using rule 87 (term -> factor .)
    FROM            reduce using rule 87 (term -> factor .)


state 90

    (89) factor -> variable .

    TIMES           reduce using rule 89 (factor -> variable .)
    DIVIDE          reduce using rule 89 (factor -> variable .)
    PLUS            reduce using rule 89 (factor -> variable .)
    MINUS           reduce using rule 89 (factor -> variable .)
    LESS            reduce using rule 89 (factor -> variable .)
    GREATER         reduce using rule 89 (factor -> variable .)
    EQUALS          reduce using rule 89 (factor -> variable .)
    NOTEQUAL        reduce using rule 89 (factor -> variable .)
    GREATERTHAN     reduce using rule 89 (factor -> variable .)
    LESSTHAN        reduce using rule 89 (factor -> variable .)
    AND             reduce using rule 89 (factor -> variable .)
    OR              reduce using rule 89 (factor -> variable .)
    SEMICOLON       reduce using rule 89 (factor -> variable .)
    RBRACK          reduce using rule 89 (factor -> variable .)
    RPAREN          reduce using rule 89 (factor -> variable .)
    COMMA           reduce using rule 89 (factor -> variable .)
    FROM            reduce using rule 89 (factor -> variable .)


state 91

    (90) factor -> cte .

    TIMES           reduce using rule 90 (factor -> cte .)
    DIVIDE          reduce using rule 90 (factor -> cte .)
    PLUS            reduce using rule 90 (factor -> cte .)
    MINUS           reduce using rule 90 (factor -> cte .)
    LESS            reduce using rule 90 (factor -> cte .)
    GREATER         reduce using rule 90 (factor -> cte .)
    EQUALS          reduce using rule 90 (factor -> cte .)
    NOTEQUAL        reduce using rule 90 (factor -> cte .)
    GREATERTHAN     reduce using rule 90 (factor -> cte .)
    LESSTHAN        reduce using rule 90 (factor -> cte .)
    AND             reduce using rule 90 (factor -> cte .)
    OR              reduce using rule 90 (factor -> cte .)
    SEMICOLON       reduce using rule 90 (factor -> cte .)
    RBRACK          reduce using rule 90 (factor -> cte .)
    RPAREN          reduce using rule 90 (factor -> cte .)
    COMMA           reduce using rule 90 (factor -> cte .)
    FROM            reduce using rule 90 (factor -> cte .)


state 92

    (91) factor -> expression_parenthesis .

    TIMES           reduce using rule 91 (factor -> expression_parenthesis .)
    DIVIDE          reduce using rule 91 (factor -> expression_parenthesis .)
    PLUS            reduce using rule 91 (factor -> expression_parenthesis .)
    MINUS           reduce using rule 91 (factor -> expression_parenthesis .)
    LESS            reduce using rule 91 (factor -> expression_parenthesis .)
    GREATER         reduce using rule 91 (factor -> expression_parenthesis .)
    EQUALS          reduce using rule 91 (factor -> expression_parenthesis .)
    NOTEQUAL        reduce using rule 91 (factor -> expression_parenthesis .)
    GREATERTHAN     reduce using rule 91 (factor -> expression_parenthesis .)
    LESSTHAN        reduce using rule 91 (factor -> expression_parenthesis .)
    AND             reduce using rule 91 (factor -> expression_parenthesis .)
    OR              reduce using rule 91 (factor -> expression_parenthesis .)
    SEMICOLON       reduce using rule 91 (factor -> expression_parenthesis .)
    RBRACK          reduce using rule 91 (factor -> expression_parenthesis .)
    RPAREN          reduce using rule 91 (factor -> expression_parenthesis .)
    COMMA           reduce using rule 91 (factor -> expression_parenthesis .)
    FROM            reduce using rule 91 (factor -> expression_parenthesis .)


state 93

    (92) factor -> invocation .

    TIMES           reduce using rule 92 (factor -> invocation .)
    DIVIDE          reduce using rule 92 (factor -> invocation .)
    PLUS            reduce using rule 92 (factor -> invocation .)
    MINUS           reduce using rule 92 (factor -> invocation .)
    LESS            reduce using rule 92 (factor -> invocation .)
    GREATER         reduce using rule 92 (factor -> invocation .)
    EQUALS          reduce using rule 92 (factor -> invocation .)
    NOTEQUAL        reduce using rule 92 (factor -> invocation .)
    GREATERTHAN     reduce using rule 92 (factor -> invocation .)
    LESSTHAN        reduce using rule 92 (factor -> invocation .)
    AND             reduce using rule 92 (factor -> invocation .)
    OR              reduce using rule 92 (factor -> invocation .)
    SEMICOLON       reduce using rule 92 (factor -> invocation .)
    RBRACK          reduce using rule 92 (factor -> invocation .)
    RPAREN          reduce using rule 92 (factor -> invocation .)
    COMMA           reduce using rule 92 (factor -> invocation .)
    FROM            reduce using rule 92 (factor -> invocation .)


state 94

    (24) variable -> ID .
    (25) variable -> ID . LBRACK expression RBRACK
    (26) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (63) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (64) invocation_1 -> . empty
    (114) empty -> .

    TIMES           reduce using rule 24 (variable -> ID .)
    DIVIDE          reduce using rule 24 (variable -> ID .)
    PLUS            reduce using rule 24 (variable -> ID .)
    MINUS           reduce using rule 24 (variable -> ID .)
    LESS            reduce using rule 24 (variable -> ID .)
    GREATER         reduce using rule 24 (variable -> ID .)
    EQUALS          reduce using rule 24 (variable -> ID .)
    NOTEQUAL        reduce using rule 24 (variable -> ID .)
    GREATERTHAN     reduce using rule 24 (variable -> ID .)
    LESSTHAN        reduce using rule 24 (variable -> ID .)
    AND             reduce using rule 24 (variable -> ID .)
    OR              reduce using rule 24 (variable -> ID .)
    SEMICOLON       reduce using rule 24 (variable -> ID .)
    RBRACK          reduce using rule 24 (variable -> ID .)
    RPAREN          reduce using rule 24 (variable -> ID .)
    COMMA           reduce using rule 24 (variable -> ID .)
    FROM            reduce using rule 24 (variable -> ID .)
    LBRACK          shift and go to state 67
    LPAREN          reduce using rule 114 (empty -> .)

    invocation_1                   shift and go to state 76
    empty                          shift and go to state 77

state 95

    (110) cte -> CTEI .

    TIMES           reduce using rule 110 (cte -> CTEI .)
    DIVIDE          reduce using rule 110 (cte -> CTEI .)
    PLUS            reduce using rule 110 (cte -> CTEI .)
    MINUS           reduce using rule 110 (cte -> CTEI .)
    LESS            reduce using rule 110 (cte -> CTEI .)
    GREATER         reduce using rule 110 (cte -> CTEI .)
    EQUALS          reduce using rule 110 (cte -> CTEI .)
    NOTEQUAL        reduce using rule 110 (cte -> CTEI .)
    GREATERTHAN     reduce using rule 110 (cte -> CTEI .)
    LESSTHAN        reduce using rule 110 (cte -> CTEI .)
    AND             reduce using rule 110 (cte -> CTEI .)
    OR              reduce using rule 110 (cte -> CTEI .)
    SEMICOLON       reduce using rule 110 (cte -> CTEI .)
    RBRACK          reduce using rule 110 (cte -> CTEI .)
    RPAREN          reduce using rule 110 (cte -> CTEI .)
    COMMA           reduce using rule 110 (cte -> CTEI .)
    FROM            reduce using rule 110 (cte -> CTEI .)


state 96

    (111) cte -> CTEF .

    TIMES           reduce using rule 111 (cte -> CTEF .)
    DIVIDE          reduce using rule 111 (cte -> CTEF .)
    PLUS            reduce using rule 111 (cte -> CTEF .)
    MINUS           reduce using rule 111 (cte -> CTEF .)
    LESS            reduce using rule 111 (cte -> CTEF .)
    GREATER         reduce using rule 111 (cte -> CTEF .)
    EQUALS          reduce using rule 111 (cte -> CTEF .)
    NOTEQUAL        reduce using rule 111 (cte -> CTEF .)
    GREATERTHAN     reduce using rule 111 (cte -> CTEF .)
    LESSTHAN        reduce using rule 111 (cte -> CTEF .)
    AND             reduce using rule 111 (cte -> CTEF .)
    OR              reduce using rule 111 (cte -> CTEF .)
    SEMICOLON       reduce using rule 111 (cte -> CTEF .)
    RBRACK          reduce using rule 111 (cte -> CTEF .)
    RPAREN          reduce using rule 111 (cte -> CTEF .)
    COMMA           reduce using rule 111 (cte -> CTEF .)
    FROM            reduce using rule 111 (cte -> CTEF .)


state 97

    (112) cte -> CTEC .

    TIMES           reduce using rule 112 (cte -> CTEC .)
    DIVIDE          reduce using rule 112 (cte -> CTEC .)
    PLUS            reduce using rule 112 (cte -> CTEC .)
    MINUS           reduce using rule 112 (cte -> CTEC .)
    LESS            reduce using rule 112 (cte -> CTEC .)
    GREATER         reduce using rule 112 (cte -> CTEC .)
    EQUALS          reduce using rule 112 (cte -> CTEC .)
    NOTEQUAL        reduce using rule 112 (cte -> CTEC .)
    GREATERTHAN     reduce using rule 112 (cte -> CTEC .)
    LESSTHAN        reduce using rule 112 (cte -> CTEC .)
    AND             reduce using rule 112 (cte -> CTEC .)
    OR              reduce using rule 112 (cte -> CTEC .)
    SEMICOLON       reduce using rule 112 (cte -> CTEC .)
    RBRACK          reduce using rule 112 (cte -> CTEC .)
    RPAREN          reduce using rule 112 (cte -> CTEC .)
    COMMA           reduce using rule 112 (cte -> CTEC .)
    FROM            reduce using rule 112 (cte -> CTEC .)


state 98

    (113) cte -> CTEB .

    TIMES           reduce using rule 113 (cte -> CTEB .)
    DIVIDE          reduce using rule 113 (cte -> CTEB .)
    PLUS            reduce using rule 113 (cte -> CTEB .)
    MINUS           reduce using rule 113 (cte -> CTEB .)
    LESS            reduce using rule 113 (cte -> CTEB .)
    GREATER         reduce using rule 113 (cte -> CTEB .)
    EQUALS          reduce using rule 113 (cte -> CTEB .)
    NOTEQUAL        reduce using rule 113 (cte -> CTEB .)
    GREATERTHAN     reduce using rule 113 (cte -> CTEB .)
    LESSTHAN        reduce using rule 113 (cte -> CTEB .)
    AND             reduce using rule 113 (cte -> CTEB .)
    OR              reduce using rule 113 (cte -> CTEB .)
    SEMICOLON       reduce using rule 113 (cte -> CTEB .)
    RBRACK          reduce using rule 113 (cte -> CTEB .)
    RPAREN          reduce using rule 113 (cte -> CTEB .)
    COMMA           reduce using rule 113 (cte -> CTEB .)
    FROM            reduce using rule 113 (cte -> CTEB .)


state 99

    (93) expression_parenthesis -> LPAREN . expression RPAREN
    (73) expression -> . t_expression
    (74) expression -> . NOT t_expression
    (81) t_expression -> . g_expression
    (82) t_expression -> . t_expression boolean_operator g_expression
    (83) g_expression -> . m_expression
    (84) g_expression -> . g_expression comparison_operator m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 85
    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    expression                     shift and go to state 138
    t_expression                   shift and go to state 84
    g_expression                   shift and go to state 86
    m_expression                   shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 100

    (75) print -> PRINT LPAREN . print_arguments RPAREN SEMICOLON
    (76) print_arguments -> . print_argument
    (77) print_arguments -> . print_arguments COMMA print_argument
    (78) print_argument -> . CTES
    (79) print_argument -> . expression
    (73) expression -> . t_expression
    (74) expression -> . NOT t_expression
    (81) t_expression -> . g_expression
    (82) t_expression -> . t_expression boolean_operator g_expression
    (83) g_expression -> . m_expression
    (84) g_expression -> . g_expression comparison_operator m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    CTES            shift and go to state 141
    NOT             shift and go to state 85
    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    print_arguments                shift and go to state 139
    print_argument                 shift and go to state 140
    expression                     shift and go to state 142
    t_expression                   shift and go to state 84
    g_expression                   shift and go to state 86
    m_expression                   shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 101

    (7) function_signature -> simple_type ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (20) open_var_declaration -> . empty
    (114) empty -> .

    INT             reduce using rule 114 (empty -> .)
    FLOAT           reduce using rule 114 (empty -> .)
    CHAR            reduce using rule 114 (empty -> .)
    BOOLEAN         reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)
    RPAREN          reduce using rule 114 (empty -> .)

    open_var_declaration           shift and go to state 143
    empty                          shift and go to state 18

state 102

    (8) function_signature -> VOID ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (20) open_var_declaration -> . empty
    (114) empty -> .

    INT             reduce using rule 114 (empty -> .)
    FLOAT           reduce using rule 114 (empty -> .)
    CHAR            reduce using rule 114 (empty -> .)
    BOOLEAN         reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)
    RPAREN          reduce using rule 114 (empty -> .)

    open_var_declaration           shift and go to state 144
    empty                          shift and go to state 18

state 103

    (19) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .

    VARIABLE        reduce using rule 19 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    FUNCTION        reduce using rule 19 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    MAIN            reduce using rule 19 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    LBRACE          reduce using rule 19 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)


state 104

    (21) close_var_declaration -> empty .

    VARIABLE        reduce using rule 21 (close_var_declaration -> empty .)
    FUNCTION        reduce using rule 21 (close_var_declaration -> empty .)
    MAIN            reduce using rule 21 (close_var_declaration -> empty .)
    LBRACE          reduce using rule 21 (close_var_declaration -> empty .)
    RPAREN          reduce using rule 21 (close_var_declaration -> empty .)


state 105

    (23) variables -> variable COMMA variables .

    SEMICOLON       reduce using rule 23 (variables -> variable COMMA variables .)


state 106

    (25) variable -> ID LBRACK expression . RBRACK
    (26) variable -> ID LBRACK expression . RBRACK LBRACK expression RBRACK

    RBRACK          shift and go to state 145


state 107

    (14) main -> MAIN LPAREN RPAREN main_scope var_declarations . LBRACE statements RBRACE

    LBRACE          shift and go to state 146


state 108

    (9) function_body -> LBRACE statements return_stmt RBRACE .

    MAIN            reduce using rule 9 (function_body -> LBRACE statements return_stmt RBRACE .)
    FUNCTION        reduce using rule 9 (function_body -> LBRACE statements return_stmt RBRACE .)


state 109

    (11) return_stmt -> RETURN expression . SEMICOLON
    (59) return -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 147


state 110

    (12) return_stmt -> RETURN SEMICOLON .

    RBRACE          reduce using rule 12 (return_stmt -> RETURN SEMICOLON .)


state 111

    (60) read -> READ LPAREN variable_list . RPAREN SEMICOLON
    (62) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 148
    COMMA           shift and go to state 149


state 112

    (61) variable_list -> variable .

    RPAREN          reduce using rule 61 (variable_list -> variable .)
    COMMA           reduce using rule 61 (variable_list -> variable .)


state 113

    (45) for -> FOR LPAREN ID . for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (46) for_1 -> . empty
    (114) empty -> .

    ASSIGN          reduce using rule 114 (empty -> .)

    for_1                          shift and go to state 150
    empty                          shift and go to state 151

state 114

    (63) invocation -> ID invocation_1 LPAREN . invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (65) invocation_2 -> . empty
    (114) empty -> .

    NOT             reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    CTEI            reduce using rule 114 (empty -> .)
    CTEF            reduce using rule 114 (empty -> .)
    CTEC            reduce using rule 114 (empty -> .)
    CTEB            reduce using rule 114 (empty -> .)
    LPAREN          reduce using rule 114 (empty -> .)
    RPAREN          reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)

    invocation_2                   shift and go to state 152
    empty                          shift and go to state 153

state 115

    (44) do_while -> DO breadcrumb LBRACE . statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (31) statements -> . statements statement
    (32) statements -> . statement
    (33) statements -> . empty
    (34) statement -> . read
    (35) statement -> . for
    (36) statement -> . do_while
    (37) statement -> . while
    (38) statement -> . if_else
    (39) statement -> . invocation
    (40) statement -> . if
    (41) statement -> . assingation
    (42) statement -> . return
    (43) statement -> . print
    (114) empty -> .
    (60) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (45) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (44) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (50) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (55) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (52) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (80) assingation -> . variable ASSIGN expression SEMICOLON
    (59) return -> . RETURN expression SEMICOLON
    (75) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 114 (empty -> .)
    READ            shift and go to state 53
    FOR             shift and go to state 54
    DO              shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    ID              shift and go to state 55
    RETURN          shift and go to state 60
    PRINT           shift and go to state 61

  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! RETURN          [ reduce using rule 114 (empty -> .) ]
  ! PRINT           [ reduce using rule 114 (empty -> .) ]

    statements                     shift and go to state 154
    statement                      shift and go to state 41
    empty                          shift and go to state 42
    read                           shift and go to state 43
    for                            shift and go to state 44
    do_while                       shift and go to state 45
    while                          shift and go to state 46
    if_else                        shift and go to state 47
    invocation                     shift and go to state 48
    if                             shift and go to state 49
    assingation                    shift and go to state 50
    return                         shift and go to state 51
    print                          shift and go to state 52
    variable                       shift and go to state 59

state 116

    (50) while -> WHILE breadcrumb LPAREN . open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (53) open_temporal_boolean -> . empty
    (114) empty -> .

    NOT             reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    CTEI            reduce using rule 114 (empty -> .)
    CTEF            reduce using rule 114 (empty -> .)
    CTEC            reduce using rule 114 (empty -> .)
    CTEB            reduce using rule 114 (empty -> .)
    LPAREN          reduce using rule 114 (empty -> .)

    open_temporal_boolean          shift and go to state 155
    empty                          shift and go to state 118

state 117

    (55) if_else -> IF LPAREN open_temporal_boolean . expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (52) if -> IF LPAREN open_temporal_boolean . expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) expression -> . t_expression
    (74) expression -> . NOT t_expression
    (81) t_expression -> . g_expression
    (82) t_expression -> . t_expression boolean_operator g_expression
    (83) g_expression -> . m_expression
    (84) g_expression -> . g_expression comparison_operator m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 85
    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    expression                     shift and go to state 156
    t_expression                   shift and go to state 84
    g_expression                   shift and go to state 86
    m_expression                   shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 118

    (53) open_temporal_boolean -> empty .

    NOT             reduce using rule 53 (open_temporal_boolean -> empty .)
    ID              reduce using rule 53 (open_temporal_boolean -> empty .)
    CTEI            reduce using rule 53 (open_temporal_boolean -> empty .)
    CTEF            reduce using rule 53 (open_temporal_boolean -> empty .)
    CTEC            reduce using rule 53 (open_temporal_boolean -> empty .)
    CTEB            reduce using rule 53 (open_temporal_boolean -> empty .)
    LPAREN          reduce using rule 53 (open_temporal_boolean -> empty .)


state 119

    (80) assingation -> variable ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 157


state 120

    (59) return -> RETURN expression SEMICOLON .

    RBRACE          reduce using rule 59 (return -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 59 (return -> RETURN expression SEMICOLON .)
    READ            reduce using rule 59 (return -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 59 (return -> RETURN expression SEMICOLON .)
    DO              reduce using rule 59 (return -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 59 (return -> RETURN expression SEMICOLON .)
    IF              reduce using rule 59 (return -> RETURN expression SEMICOLON .)
    ID              reduce using rule 59 (return -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 59 (return -> RETURN expression SEMICOLON .)


state 121

    (82) t_expression -> t_expression boolean_operator . g_expression
    (83) g_expression -> . m_expression
    (84) g_expression -> . g_expression comparison_operator m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    g_expression                   shift and go to state 158
    m_expression                   shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 122

    (102) boolean_operator -> AND .

    ID              reduce using rule 102 (boolean_operator -> AND .)
    CTEI            reduce using rule 102 (boolean_operator -> AND .)
    CTEF            reduce using rule 102 (boolean_operator -> AND .)
    CTEC            reduce using rule 102 (boolean_operator -> AND .)
    CTEB            reduce using rule 102 (boolean_operator -> AND .)
    LPAREN          reduce using rule 102 (boolean_operator -> AND .)


state 123

    (103) boolean_operator -> OR .

    ID              reduce using rule 103 (boolean_operator -> OR .)
    CTEI            reduce using rule 103 (boolean_operator -> OR .)
    CTEF            reduce using rule 103 (boolean_operator -> OR .)
    CTEC            reduce using rule 103 (boolean_operator -> OR .)
    CTEB            reduce using rule 103 (boolean_operator -> OR .)
    LPAREN          reduce using rule 103 (boolean_operator -> OR .)


state 124

    (74) expression -> NOT t_expression .
    (82) t_expression -> t_expression . boolean_operator g_expression
    (102) boolean_operator -> . AND
    (103) boolean_operator -> . OR

    SEMICOLON       reduce using rule 74 (expression -> NOT t_expression .)
    RBRACK          reduce using rule 74 (expression -> NOT t_expression .)
    RPAREN          reduce using rule 74 (expression -> NOT t_expression .)
    COMMA           reduce using rule 74 (expression -> NOT t_expression .)
    FROM            reduce using rule 74 (expression -> NOT t_expression .)
    AND             shift and go to state 122
    OR              shift and go to state 123

    boolean_operator               shift and go to state 121

state 125

    (84) g_expression -> g_expression comparison_operator . m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    m_expression                   shift and go to state 159
    term                           shift and go to state 88
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 126

    (94) comparison_operator -> LESS .

    ID              reduce using rule 94 (comparison_operator -> LESS .)
    CTEI            reduce using rule 94 (comparison_operator -> LESS .)
    CTEF            reduce using rule 94 (comparison_operator -> LESS .)
    CTEC            reduce using rule 94 (comparison_operator -> LESS .)
    CTEB            reduce using rule 94 (comparison_operator -> LESS .)
    LPAREN          reduce using rule 94 (comparison_operator -> LESS .)


state 127

    (95) comparison_operator -> GREATER .

    ID              reduce using rule 95 (comparison_operator -> GREATER .)
    CTEI            reduce using rule 95 (comparison_operator -> GREATER .)
    CTEF            reduce using rule 95 (comparison_operator -> GREATER .)
    CTEC            reduce using rule 95 (comparison_operator -> GREATER .)
    CTEB            reduce using rule 95 (comparison_operator -> GREATER .)
    LPAREN          reduce using rule 95 (comparison_operator -> GREATER .)


state 128

    (96) comparison_operator -> EQUALS .

    ID              reduce using rule 96 (comparison_operator -> EQUALS .)
    CTEI            reduce using rule 96 (comparison_operator -> EQUALS .)
    CTEF            reduce using rule 96 (comparison_operator -> EQUALS .)
    CTEC            reduce using rule 96 (comparison_operator -> EQUALS .)
    CTEB            reduce using rule 96 (comparison_operator -> EQUALS .)
    LPAREN          reduce using rule 96 (comparison_operator -> EQUALS .)


state 129

    (97) comparison_operator -> NOTEQUAL .

    ID              reduce using rule 97 (comparison_operator -> NOTEQUAL .)
    CTEI            reduce using rule 97 (comparison_operator -> NOTEQUAL .)
    CTEF            reduce using rule 97 (comparison_operator -> NOTEQUAL .)
    CTEC            reduce using rule 97 (comparison_operator -> NOTEQUAL .)
    CTEB            reduce using rule 97 (comparison_operator -> NOTEQUAL .)
    LPAREN          reduce using rule 97 (comparison_operator -> NOTEQUAL .)


state 130

    (98) comparison_operator -> GREATERTHAN .

    ID              reduce using rule 98 (comparison_operator -> GREATERTHAN .)
    CTEI            reduce using rule 98 (comparison_operator -> GREATERTHAN .)
    CTEF            reduce using rule 98 (comparison_operator -> GREATERTHAN .)
    CTEC            reduce using rule 98 (comparison_operator -> GREATERTHAN .)
    CTEB            reduce using rule 98 (comparison_operator -> GREATERTHAN .)
    LPAREN          reduce using rule 98 (comparison_operator -> GREATERTHAN .)


state 131

    (99) comparison_operator -> LESSTHAN .

    ID              reduce using rule 99 (comparison_operator -> LESSTHAN .)
    CTEI            reduce using rule 99 (comparison_operator -> LESSTHAN .)
    CTEF            reduce using rule 99 (comparison_operator -> LESSTHAN .)
    CTEC            reduce using rule 99 (comparison_operator -> LESSTHAN .)
    CTEB            reduce using rule 99 (comparison_operator -> LESSTHAN .)
    LPAREN          reduce using rule 99 (comparison_operator -> LESSTHAN .)


state 132

    (86) m_expression -> m_expression addition_operator . term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    term                           shift and go to state 160
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 133

    (100) addition_operator -> PLUS .

    ID              reduce using rule 100 (addition_operator -> PLUS .)
    CTEI            reduce using rule 100 (addition_operator -> PLUS .)
    CTEF            reduce using rule 100 (addition_operator -> PLUS .)
    CTEC            reduce using rule 100 (addition_operator -> PLUS .)
    CTEB            reduce using rule 100 (addition_operator -> PLUS .)
    LPAREN          reduce using rule 100 (addition_operator -> PLUS .)


state 134

    (101) addition_operator -> MINUS .

    ID              reduce using rule 101 (addition_operator -> MINUS .)
    CTEI            reduce using rule 101 (addition_operator -> MINUS .)
    CTEF            reduce using rule 101 (addition_operator -> MINUS .)
    CTEC            reduce using rule 101 (addition_operator -> MINUS .)
    CTEB            reduce using rule 101 (addition_operator -> MINUS .)
    LPAREN          reduce using rule 101 (addition_operator -> MINUS .)


state 135

    (88) term -> term multiplication_operator . factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    factor                         shift and go to state 161
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 136

    (104) multiplication_operator -> TIMES .

    ID              reduce using rule 104 (multiplication_operator -> TIMES .)
    CTEI            reduce using rule 104 (multiplication_operator -> TIMES .)
    CTEF            reduce using rule 104 (multiplication_operator -> TIMES .)
    CTEC            reduce using rule 104 (multiplication_operator -> TIMES .)
    CTEB            reduce using rule 104 (multiplication_operator -> TIMES .)
    LPAREN          reduce using rule 104 (multiplication_operator -> TIMES .)


state 137

    (105) multiplication_operator -> DIVIDE .

    ID              reduce using rule 105 (multiplication_operator -> DIVIDE .)
    CTEI            reduce using rule 105 (multiplication_operator -> DIVIDE .)
    CTEF            reduce using rule 105 (multiplication_operator -> DIVIDE .)
    CTEC            reduce using rule 105 (multiplication_operator -> DIVIDE .)
    CTEB            reduce using rule 105 (multiplication_operator -> DIVIDE .)
    LPAREN          reduce using rule 105 (multiplication_operator -> DIVIDE .)


state 138

    (93) expression_parenthesis -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 162


state 139

    (75) print -> PRINT LPAREN print_arguments . RPAREN SEMICOLON
    (77) print_arguments -> print_arguments . COMMA print_argument

    RPAREN          shift and go to state 163
    COMMA           shift and go to state 164


state 140

    (76) print_arguments -> print_argument .

    RPAREN          reduce using rule 76 (print_arguments -> print_argument .)
    COMMA           reduce using rule 76 (print_arguments -> print_argument .)


state 141

    (78) print_argument -> CTES .

    RPAREN          reduce using rule 78 (print_argument -> CTES .)
    COMMA           reduce using rule 78 (print_argument -> CTES .)


state 142

    (79) print_argument -> expression .

    RPAREN          reduce using rule 79 (print_argument -> expression .)
    COMMA           reduce using rule 79 (print_argument -> expression .)


state 143

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations
    (27) parameters -> . parameters COMMA parameter
    (28) parameters -> . parameter
    (29) parameters -> . empty
    (30) parameter -> . simple_type ID
    (114) empty -> .
    (106) simple_type -> . INT
    (107) simple_type -> . FLOAT
    (108) simple_type -> . CHAR
    (109) simple_type -> . BOOLEAN

    COMMA           reduce using rule 114 (empty -> .)
    RPAREN          reduce using rule 114 (empty -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28

    simple_type                    shift and go to state 165
    parameters                     shift and go to state 166
    parameter                      shift and go to state 167
    empty                          shift and go to state 168

state 144

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations
    (27) parameters -> . parameters COMMA parameter
    (28) parameters -> . parameter
    (29) parameters -> . empty
    (30) parameter -> . simple_type ID
    (114) empty -> .
    (106) simple_type -> . INT
    (107) simple_type -> . FLOAT
    (108) simple_type -> . CHAR
    (109) simple_type -> . BOOLEAN

    COMMA           reduce using rule 114 (empty -> .)
    RPAREN          reduce using rule 114 (empty -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28

    parameters                     shift and go to state 169
    parameter                      shift and go to state 167
    empty                          shift and go to state 168
    simple_type                    shift and go to state 165

state 145

    (25) variable -> ID LBRACK expression RBRACK .
    (26) variable -> ID LBRACK expression RBRACK . LBRACK expression RBRACK

    COMMA           reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    TIMES           reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    PLUS            reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    MINUS           reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    LESS            reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    GREATER         reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    EQUALS          reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    AND             reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    OR              reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    RBRACK          reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    RPAREN          reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    FROM            reduce using rule 25 (variable -> ID LBRACK expression RBRACK .)
    LBRACK          shift and go to state 170


state 146

    (14) main -> MAIN LPAREN RPAREN main_scope var_declarations LBRACE . statements RBRACE
    (31) statements -> . statements statement
    (32) statements -> . statement
    (33) statements -> . empty
    (34) statement -> . read
    (35) statement -> . for
    (36) statement -> . do_while
    (37) statement -> . while
    (38) statement -> . if_else
    (39) statement -> . invocation
    (40) statement -> . if
    (41) statement -> . assingation
    (42) statement -> . return
    (43) statement -> . print
    (114) empty -> .
    (60) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (45) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (44) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (50) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (55) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (52) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (80) assingation -> . variable ASSIGN expression SEMICOLON
    (59) return -> . RETURN expression SEMICOLON
    (75) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 114 (empty -> .)
    READ            shift and go to state 53
    FOR             shift and go to state 54
    DO              shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    ID              shift and go to state 55
    RETURN          shift and go to state 60
    PRINT           shift and go to state 61

  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! RETURN          [ reduce using rule 114 (empty -> .) ]
  ! PRINT           [ reduce using rule 114 (empty -> .) ]

    statements                     shift and go to state 171
    statement                      shift and go to state 41
    empty                          shift and go to state 42
    read                           shift and go to state 43
    for                            shift and go to state 44
    do_while                       shift and go to state 45
    while                          shift and go to state 46
    if_else                        shift and go to state 47
    invocation                     shift and go to state 48
    if                             shift and go to state 49
    assingation                    shift and go to state 50
    return                         shift and go to state 51
    print                          shift and go to state 52
    variable                       shift and go to state 59

state 147

    (11) return_stmt -> RETURN expression SEMICOLON .
    (59) return -> RETURN expression SEMICOLON .

  ! reduce/reduce conflict for RBRACE resolved using rule 11 (return_stmt -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 11 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 59 (return -> RETURN expression SEMICOLON .)
    READ            reduce using rule 59 (return -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 59 (return -> RETURN expression SEMICOLON .)
    DO              reduce using rule 59 (return -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 59 (return -> RETURN expression SEMICOLON .)
    IF              reduce using rule 59 (return -> RETURN expression SEMICOLON .)
    ID              reduce using rule 59 (return -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 59 (return -> RETURN expression SEMICOLON .)

  ! RBRACE          [ reduce using rule 59 (return -> RETURN expression SEMICOLON .) ]


state 148

    (60) read -> READ LPAREN variable_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 172


state 149

    (62) variable_list -> variable_list COMMA . variable
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 38

    variable                       shift and go to state 173

state 150

    (45) for -> FOR LPAREN ID for_1 . ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4

    ASSIGN          shift and go to state 174


state 151

    (46) for_1 -> empty .

    ASSIGN          reduce using rule 46 (for_1 -> empty .)


state 152

    (63) invocation -> ID invocation_1 LPAREN invocation_2 . expressions RPAREN invocation_5 SEMICOLON invocation_6
    (70) expressions -> . expressions COMMA invocation_4 expression invocation_3
    (71) expressions -> . expression invocation_3
    (72) expressions -> . empty
    (73) expression -> . t_expression
    (74) expression -> . NOT t_expression
    (114) empty -> .
    (81) t_expression -> . g_expression
    (82) t_expression -> . t_expression boolean_operator g_expression
    (83) g_expression -> . m_expression
    (84) g_expression -> . g_expression comparison_operator m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 85
    RPAREN          reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)
    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    expressions                    shift and go to state 175
    expression                     shift and go to state 176
    empty                          shift and go to state 177
    t_expression                   shift and go to state 84
    g_expression                   shift and go to state 86
    m_expression                   shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 153

    (65) invocation_2 -> empty .

    NOT             reduce using rule 65 (invocation_2 -> empty .)
    ID              reduce using rule 65 (invocation_2 -> empty .)
    CTEI            reduce using rule 65 (invocation_2 -> empty .)
    CTEF            reduce using rule 65 (invocation_2 -> empty .)
    CTEC            reduce using rule 65 (invocation_2 -> empty .)
    CTEB            reduce using rule 65 (invocation_2 -> empty .)
    LPAREN          reduce using rule 65 (invocation_2 -> empty .)
    RPAREN          reduce using rule 65 (invocation_2 -> empty .)
    COMMA           reduce using rule 65 (invocation_2 -> empty .)


state 154

    (44) do_while -> DO breadcrumb LBRACE statements . RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (31) statements -> statements . statement
    (34) statement -> . read
    (35) statement -> . for
    (36) statement -> . do_while
    (37) statement -> . while
    (38) statement -> . if_else
    (39) statement -> . invocation
    (40) statement -> . if
    (41) statement -> . assingation
    (42) statement -> . return
    (43) statement -> . print
    (60) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (45) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (44) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (50) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (55) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (52) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (80) assingation -> . variable ASSIGN expression SEMICOLON
    (59) return -> . RETURN expression SEMICOLON
    (75) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 178
    READ            shift and go to state 53
    FOR             shift and go to state 54
    DO              shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    ID              shift and go to state 55
    RETURN          shift and go to state 60
    PRINT           shift and go to state 61

    statement                      shift and go to state 72
    read                           shift and go to state 43
    for                            shift and go to state 44
    do_while                       shift and go to state 45
    while                          shift and go to state 46
    if_else                        shift and go to state 47
    invocation                     shift and go to state 48
    if                             shift and go to state 49
    assingation                    shift and go to state 50
    return                         shift and go to state 51
    print                          shift and go to state 52
    variable                       shift and go to state 59

state 155

    (50) while -> WHILE breadcrumb LPAREN open_temporal_boolean . expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) expression -> . t_expression
    (74) expression -> . NOT t_expression
    (81) t_expression -> . g_expression
    (82) t_expression -> . t_expression boolean_operator g_expression
    (83) g_expression -> . m_expression
    (84) g_expression -> . g_expression comparison_operator m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 85
    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    expression                     shift and go to state 179
    t_expression                   shift and go to state 84
    g_expression                   shift and go to state 86
    m_expression                   shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 156

    (55) if_else -> IF LPAREN open_temporal_boolean expression . close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (52) if -> IF LPAREN open_temporal_boolean expression . close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (54) close_temporal_boolean -> . empty
    (114) empty -> .

    RPAREN          reduce using rule 114 (empty -> .)

    close_temporal_boolean         shift and go to state 180
    empty                          shift and go to state 181

state 157

    (80) assingation -> variable ASSIGN expression SEMICOLON .

    RBRACE          reduce using rule 80 (assingation -> variable ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 80 (assingation -> variable ASSIGN expression SEMICOLON .)
    READ            reduce using rule 80 (assingation -> variable ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 80 (assingation -> variable ASSIGN expression SEMICOLON .)
    DO              reduce using rule 80 (assingation -> variable ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 80 (assingation -> variable ASSIGN expression SEMICOLON .)
    IF              reduce using rule 80 (assingation -> variable ASSIGN expression SEMICOLON .)
    ID              reduce using rule 80 (assingation -> variable ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 80 (assingation -> variable ASSIGN expression SEMICOLON .)


state 158

    (82) t_expression -> t_expression boolean_operator g_expression .
    (84) g_expression -> g_expression . comparison_operator m_expression
    (94) comparison_operator -> . LESS
    (95) comparison_operator -> . GREATER
    (96) comparison_operator -> . EQUALS
    (97) comparison_operator -> . NOTEQUAL
    (98) comparison_operator -> . GREATERTHAN
    (99) comparison_operator -> . LESSTHAN

    AND             reduce using rule 82 (t_expression -> t_expression boolean_operator g_expression .)
    OR              reduce using rule 82 (t_expression -> t_expression boolean_operator g_expression .)
    SEMICOLON       reduce using rule 82 (t_expression -> t_expression boolean_operator g_expression .)
    RBRACK          reduce using rule 82 (t_expression -> t_expression boolean_operator g_expression .)
    RPAREN          reduce using rule 82 (t_expression -> t_expression boolean_operator g_expression .)
    COMMA           reduce using rule 82 (t_expression -> t_expression boolean_operator g_expression .)
    FROM            reduce using rule 82 (t_expression -> t_expression boolean_operator g_expression .)
    LESS            shift and go to state 126
    GREATER         shift and go to state 127
    EQUALS          shift and go to state 128
    NOTEQUAL        shift and go to state 129
    GREATERTHAN     shift and go to state 130
    LESSTHAN        shift and go to state 131

    comparison_operator            shift and go to state 125

state 159

    (84) g_expression -> g_expression comparison_operator m_expression .
    (86) m_expression -> m_expression . addition_operator term
    (100) addition_operator -> . PLUS
    (101) addition_operator -> . MINUS

    LESS            reduce using rule 84 (g_expression -> g_expression comparison_operator m_expression .)
    GREATER         reduce using rule 84 (g_expression -> g_expression comparison_operator m_expression .)
    EQUALS          reduce using rule 84 (g_expression -> g_expression comparison_operator m_expression .)
    NOTEQUAL        reduce using rule 84 (g_expression -> g_expression comparison_operator m_expression .)
    GREATERTHAN     reduce using rule 84 (g_expression -> g_expression comparison_operator m_expression .)
    LESSTHAN        reduce using rule 84 (g_expression -> g_expression comparison_operator m_expression .)
    AND             reduce using rule 84 (g_expression -> g_expression comparison_operator m_expression .)
    OR              reduce using rule 84 (g_expression -> g_expression comparison_operator m_expression .)
    SEMICOLON       reduce using rule 84 (g_expression -> g_expression comparison_operator m_expression .)
    RBRACK          reduce using rule 84 (g_expression -> g_expression comparison_operator m_expression .)
    RPAREN          reduce using rule 84 (g_expression -> g_expression comparison_operator m_expression .)
    COMMA           reduce using rule 84 (g_expression -> g_expression comparison_operator m_expression .)
    FROM            reduce using rule 84 (g_expression -> g_expression comparison_operator m_expression .)
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134

    addition_operator              shift and go to state 132

state 160

    (86) m_expression -> m_expression addition_operator term .
    (88) term -> term . multiplication_operator factor
    (104) multiplication_operator -> . TIMES
    (105) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 86 (m_expression -> m_expression addition_operator term .)
    MINUS           reduce using rule 86 (m_expression -> m_expression addition_operator term .)
    LESS            reduce using rule 86 (m_expression -> m_expression addition_operator term .)
    GREATER         reduce using rule 86 (m_expression -> m_expression addition_operator term .)
    EQUALS          reduce using rule 86 (m_expression -> m_expression addition_operator term .)
    NOTEQUAL        reduce using rule 86 (m_expression -> m_expression addition_operator term .)
    GREATERTHAN     reduce using rule 86 (m_expression -> m_expression addition_operator term .)
    LESSTHAN        reduce using rule 86 (m_expression -> m_expression addition_operator term .)
    AND             reduce using rule 86 (m_expression -> m_expression addition_operator term .)
    OR              reduce using rule 86 (m_expression -> m_expression addition_operator term .)
    SEMICOLON       reduce using rule 86 (m_expression -> m_expression addition_operator term .)
    RBRACK          reduce using rule 86 (m_expression -> m_expression addition_operator term .)
    RPAREN          reduce using rule 86 (m_expression -> m_expression addition_operator term .)
    COMMA           reduce using rule 86 (m_expression -> m_expression addition_operator term .)
    FROM            reduce using rule 86 (m_expression -> m_expression addition_operator term .)
    TIMES           shift and go to state 136
    DIVIDE          shift and go to state 137

    multiplication_operator        shift and go to state 135

state 161

    (88) term -> term multiplication_operator factor .

    TIMES           reduce using rule 88 (term -> term multiplication_operator factor .)
    DIVIDE          reduce using rule 88 (term -> term multiplication_operator factor .)
    PLUS            reduce using rule 88 (term -> term multiplication_operator factor .)
    MINUS           reduce using rule 88 (term -> term multiplication_operator factor .)
    LESS            reduce using rule 88 (term -> term multiplication_operator factor .)
    GREATER         reduce using rule 88 (term -> term multiplication_operator factor .)
    EQUALS          reduce using rule 88 (term -> term multiplication_operator factor .)
    NOTEQUAL        reduce using rule 88 (term -> term multiplication_operator factor .)
    GREATERTHAN     reduce using rule 88 (term -> term multiplication_operator factor .)
    LESSTHAN        reduce using rule 88 (term -> term multiplication_operator factor .)
    AND             reduce using rule 88 (term -> term multiplication_operator factor .)
    OR              reduce using rule 88 (term -> term multiplication_operator factor .)
    SEMICOLON       reduce using rule 88 (term -> term multiplication_operator factor .)
    RBRACK          reduce using rule 88 (term -> term multiplication_operator factor .)
    RPAREN          reduce using rule 88 (term -> term multiplication_operator factor .)
    COMMA           reduce using rule 88 (term -> term multiplication_operator factor .)
    FROM            reduce using rule 88 (term -> term multiplication_operator factor .)


state 162

    (93) expression_parenthesis -> LPAREN expression RPAREN .

    TIMES           reduce using rule 93 (expression_parenthesis -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 93 (expression_parenthesis -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 93 (expression_parenthesis -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 93 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESS            reduce using rule 93 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 93 (expression_parenthesis -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 93 (expression_parenthesis -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 93 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 93 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 93 (expression_parenthesis -> LPAREN expression RPAREN .)
    AND             reduce using rule 93 (expression_parenthesis -> LPAREN expression RPAREN .)
    OR              reduce using rule 93 (expression_parenthesis -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 93 (expression_parenthesis -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 93 (expression_parenthesis -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 93 (expression_parenthesis -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 93 (expression_parenthesis -> LPAREN expression RPAREN .)
    FROM            reduce using rule 93 (expression_parenthesis -> LPAREN expression RPAREN .)


state 163

    (75) print -> PRINT LPAREN print_arguments RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 182


state 164

    (77) print_arguments -> print_arguments COMMA . print_argument
    (78) print_argument -> . CTES
    (79) print_argument -> . expression
    (73) expression -> . t_expression
    (74) expression -> . NOT t_expression
    (81) t_expression -> . g_expression
    (82) t_expression -> . t_expression boolean_operator g_expression
    (83) g_expression -> . m_expression
    (84) g_expression -> . g_expression comparison_operator m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    CTES            shift and go to state 141
    NOT             shift and go to state 85
    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    print_argument                 shift and go to state 183
    expression                     shift and go to state 142
    t_expression                   shift and go to state 84
    g_expression                   shift and go to state 86
    m_expression                   shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 165

    (30) parameter -> simple_type . ID

    ID              shift and go to state 184


state 166

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations
    (27) parameters -> parameters . COMMA parameter
    (21) close_var_declaration -> . empty
    (114) empty -> .

    COMMA           shift and go to state 186
    RPAREN          reduce using rule 114 (empty -> .)

    close_var_declaration          shift and go to state 185
    empty                          shift and go to state 104

state 167

    (28) parameters -> parameter .

    COMMA           reduce using rule 28 (parameters -> parameter .)
    RPAREN          reduce using rule 28 (parameters -> parameter .)


state 168

    (29) parameters -> empty .

    COMMA           reduce using rule 29 (parameters -> empty .)
    RPAREN          reduce using rule 29 (parameters -> empty .)


state 169

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations
    (27) parameters -> parameters . COMMA parameter
    (21) close_var_declaration -> . empty
    (114) empty -> .

    COMMA           shift and go to state 186
    RPAREN          reduce using rule 114 (empty -> .)

    close_var_declaration          shift and go to state 187
    empty                          shift and go to state 104

state 170

    (26) variable -> ID LBRACK expression RBRACK LBRACK . expression RBRACK
    (73) expression -> . t_expression
    (74) expression -> . NOT t_expression
    (81) t_expression -> . g_expression
    (82) t_expression -> . t_expression boolean_operator g_expression
    (83) g_expression -> . m_expression
    (84) g_expression -> . g_expression comparison_operator m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 85
    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    expression                     shift and go to state 188
    t_expression                   shift and go to state 84
    g_expression                   shift and go to state 86
    m_expression                   shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 171

    (14) main -> MAIN LPAREN RPAREN main_scope var_declarations LBRACE statements . RBRACE
    (31) statements -> statements . statement
    (34) statement -> . read
    (35) statement -> . for
    (36) statement -> . do_while
    (37) statement -> . while
    (38) statement -> . if_else
    (39) statement -> . invocation
    (40) statement -> . if
    (41) statement -> . assingation
    (42) statement -> . return
    (43) statement -> . print
    (60) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (45) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (44) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (50) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (55) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (52) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (80) assingation -> . variable ASSIGN expression SEMICOLON
    (59) return -> . RETURN expression SEMICOLON
    (75) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 189
    READ            shift and go to state 53
    FOR             shift and go to state 54
    DO              shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    ID              shift and go to state 55
    RETURN          shift and go to state 60
    PRINT           shift and go to state 61

    statement                      shift and go to state 72
    read                           shift and go to state 43
    for                            shift and go to state 44
    do_while                       shift and go to state 45
    while                          shift and go to state 46
    if_else                        shift and go to state 47
    invocation                     shift and go to state 48
    if                             shift and go to state 49
    assingation                    shift and go to state 50
    return                         shift and go to state 51
    print                          shift and go to state 52
    variable                       shift and go to state 59

state 172

    (60) read -> READ LPAREN variable_list RPAREN SEMICOLON .

    RBRACE          reduce using rule 60 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    RETURN          reduce using rule 60 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    READ            reduce using rule 60 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    FOR             reduce using rule 60 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    DO              reduce using rule 60 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    WHILE           reduce using rule 60 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    IF              reduce using rule 60 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    ID              reduce using rule 60 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    PRINT           reduce using rule 60 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)


state 173

    (62) variable_list -> variable_list COMMA variable .

    RPAREN          reduce using rule 62 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 62 (variable_list -> variable_list COMMA variable .)


state 174

    (45) for -> FOR LPAREN ID for_1 ASSIGN . expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (73) expression -> . t_expression
    (74) expression -> . NOT t_expression
    (81) t_expression -> . g_expression
    (82) t_expression -> . t_expression boolean_operator g_expression
    (83) g_expression -> . m_expression
    (84) g_expression -> . g_expression comparison_operator m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 85
    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    expression                     shift and go to state 190
    t_expression                   shift and go to state 84
    g_expression                   shift and go to state 86
    m_expression                   shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 175

    (63) invocation -> ID invocation_1 LPAREN invocation_2 expressions . RPAREN invocation_5 SEMICOLON invocation_6
    (70) expressions -> expressions . COMMA invocation_4 expression invocation_3

    RPAREN          shift and go to state 191
    COMMA           shift and go to state 192


state 176

    (71) expressions -> expression . invocation_3
    (66) invocation_3 -> . empty
    (114) empty -> .

    RPAREN          reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)

    invocation_3                   shift and go to state 193
    empty                          shift and go to state 194

state 177

    (72) expressions -> empty .

    RPAREN          reduce using rule 72 (expressions -> empty .)
    COMMA           reduce using rule 72 (expressions -> empty .)


state 178

    (44) do_while -> DO breadcrumb LBRACE statements RBRACE . WHILE LPAREN expression RPAREN gotot SEMICOLON

    WHILE           shift and go to state 195


state 179

    (50) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression . close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (54) close_temporal_boolean -> . empty
    (114) empty -> .

    RPAREN          reduce using rule 114 (empty -> .)

    close_temporal_boolean         shift and go to state 196
    empty                          shift and go to state 181

state 180

    (55) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean . RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (52) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean . RPAREN gotof LBRACE statements RBRACE

    RPAREN          shift and go to state 197


state 181

    (54) close_temporal_boolean -> empty .

    RPAREN          reduce using rule 54 (close_temporal_boolean -> empty .)


state 182

    (75) print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .

    RBRACE          reduce using rule 75 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    RETURN          reduce using rule 75 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    READ            reduce using rule 75 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    FOR             reduce using rule 75 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    DO              reduce using rule 75 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    WHILE           reduce using rule 75 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    IF              reduce using rule 75 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ID              reduce using rule 75 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    PRINT           reduce using rule 75 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)


state 183

    (77) print_arguments -> print_arguments COMMA print_argument .

    RPAREN          reduce using rule 77 (print_arguments -> print_arguments COMMA print_argument .)
    COMMA           reduce using rule 77 (print_arguments -> print_arguments COMMA print_argument .)


state 184

    (30) parameter -> simple_type ID .

    COMMA           reduce using rule 30 (parameter -> simple_type ID .)
    RPAREN          reduce using rule 30 (parameter -> simple_type ID .)


state 185

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations

    RPAREN          shift and go to state 198


state 186

    (27) parameters -> parameters COMMA . parameter
    (30) parameter -> . simple_type ID
    (106) simple_type -> . INT
    (107) simple_type -> . FLOAT
    (108) simple_type -> . CHAR
    (109) simple_type -> . BOOLEAN

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28

    parameter                      shift and go to state 199
    simple_type                    shift and go to state 165

state 187

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations

    RPAREN          shift and go to state 200


state 188

    (26) variable -> ID LBRACK expression RBRACK LBRACK expression . RBRACK

    RBRACK          shift and go to state 201


state 189

    (14) main -> MAIN LPAREN RPAREN main_scope var_declarations LBRACE statements RBRACE .

    END             reduce using rule 14 (main -> MAIN LPAREN RPAREN main_scope var_declarations LBRACE statements RBRACE .)


state 190

    (45) for -> FOR LPAREN ID for_1 ASSIGN expression . for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (47) for_2 -> . empty
    (114) empty -> .

    FROM            reduce using rule 114 (empty -> .)

    for_2                          shift and go to state 202
    empty                          shift and go to state 203

state 191

    (63) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN . invocation_5 SEMICOLON invocation_6
    (68) invocation_5 -> . empty
    (114) empty -> .

    SEMICOLON       reduce using rule 114 (empty -> .)

    invocation_5                   shift and go to state 204
    empty                          shift and go to state 205

state 192

    (70) expressions -> expressions COMMA . invocation_4 expression invocation_3
    (67) invocation_4 -> . empty
    (114) empty -> .

    NOT             reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    CTEI            reduce using rule 114 (empty -> .)
    CTEF            reduce using rule 114 (empty -> .)
    CTEC            reduce using rule 114 (empty -> .)
    CTEB            reduce using rule 114 (empty -> .)
    LPAREN          reduce using rule 114 (empty -> .)

    invocation_4                   shift and go to state 206
    empty                          shift and go to state 207

state 193

    (71) expressions -> expression invocation_3 .

    RPAREN          reduce using rule 71 (expressions -> expression invocation_3 .)
    COMMA           reduce using rule 71 (expressions -> expression invocation_3 .)


state 194

    (66) invocation_3 -> empty .

    RPAREN          reduce using rule 66 (invocation_3 -> empty .)
    COMMA           reduce using rule 66 (invocation_3 -> empty .)


state 195

    (44) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE . LPAREN expression RPAREN gotot SEMICOLON

    LPAREN          shift and go to state 208


state 196

    (50) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean . RPAREN gotof LBRACE statements RBRACE

    RPAREN          shift and go to state 209


state 197

    (55) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN . gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (52) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN . gotof LBRACE statements RBRACE
    (58) gotof -> . empty
    (114) empty -> .

    LBRACE          reduce using rule 114 (empty -> .)

    gotof                          shift and go to state 210
    empty                          shift and go to state 211

state 198

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations
    (16) var_declarations -> . var_declaration_list
    (17) var_declarations -> . empty
    (18) var_declaration_list -> . var_declaration var_declarations
    (114) empty -> .
    (19) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 114 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 212
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 199

    (27) parameters -> parameters COMMA parameter .

    COMMA           reduce using rule 27 (parameters -> parameters COMMA parameter .)
    RPAREN          reduce using rule 27 (parameters -> parameters COMMA parameter .)


state 200

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations
    (16) var_declarations -> . var_declaration_list
    (17) var_declarations -> . empty
    (18) var_declaration_list -> . var_declaration var_declarations
    (114) empty -> .
    (19) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 114 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 213
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 201

    (26) variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .

    COMMA           reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    TIMES           reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    PLUS            reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    MINUS           reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESS            reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATER         reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    EQUALS          reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    AND             reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    OR              reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RBRACK          reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RPAREN          reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    FROM            reduce using rule 26 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)


state 202

    (45) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 . FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4

    FROM            shift and go to state 214


state 203

    (47) for_2 -> empty .

    FROM            reduce using rule 47 (for_2 -> empty .)


state 204

    (63) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 . SEMICOLON invocation_6

    SEMICOLON       shift and go to state 215


state 205

    (68) invocation_5 -> empty .

    SEMICOLON       reduce using rule 68 (invocation_5 -> empty .)


state 206

    (70) expressions -> expressions COMMA invocation_4 . expression invocation_3
    (73) expression -> . t_expression
    (74) expression -> . NOT t_expression
    (81) t_expression -> . g_expression
    (82) t_expression -> . t_expression boolean_operator g_expression
    (83) g_expression -> . m_expression
    (84) g_expression -> . g_expression comparison_operator m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 85
    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    expression                     shift and go to state 216
    t_expression                   shift and go to state 84
    g_expression                   shift and go to state 86
    m_expression                   shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 207

    (67) invocation_4 -> empty .

    NOT             reduce using rule 67 (invocation_4 -> empty .)
    ID              reduce using rule 67 (invocation_4 -> empty .)
    CTEI            reduce using rule 67 (invocation_4 -> empty .)
    CTEF            reduce using rule 67 (invocation_4 -> empty .)
    CTEC            reduce using rule 67 (invocation_4 -> empty .)
    CTEB            reduce using rule 67 (invocation_4 -> empty .)
    LPAREN          reduce using rule 67 (invocation_4 -> empty .)


state 208

    (44) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN . expression RPAREN gotot SEMICOLON
    (73) expression -> . t_expression
    (74) expression -> . NOT t_expression
    (81) t_expression -> . g_expression
    (82) t_expression -> . t_expression boolean_operator g_expression
    (83) g_expression -> . m_expression
    (84) g_expression -> . g_expression comparison_operator m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 85
    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    expression                     shift and go to state 217
    t_expression                   shift and go to state 84
    g_expression                   shift and go to state 86
    m_expression                   shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 209

    (50) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN . gotof LBRACE statements RBRACE
    (58) gotof -> . empty
    (114) empty -> .

    LBRACE          reduce using rule 114 (empty -> .)

    gotof                          shift and go to state 218
    empty                          shift and go to state 211

state 210

    (55) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof . LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (52) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof . LBRACE statements RBRACE

    LBRACE          shift and go to state 219


state 211

    (58) gotof -> empty .

    LBRACE          reduce using rule 58 (gotof -> empty .)


state 212

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .

    LBRACE          reduce using rule 7 (function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .)


state 213

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .

    LBRACE          reduce using rule 8 (function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .)


state 214

    (45) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM . expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (73) expression -> . t_expression
    (74) expression -> . NOT t_expression
    (81) t_expression -> . g_expression
    (82) t_expression -> . t_expression boolean_operator g_expression
    (83) g_expression -> . m_expression
    (84) g_expression -> . g_expression comparison_operator m_expression
    (85) m_expression -> . term
    (86) m_expression -> . m_expression addition_operator term
    (87) term -> . factor
    (88) term -> . term multiplication_operator factor
    (89) factor -> . variable
    (90) factor -> . cte
    (91) factor -> . expression_parenthesis
    (92) factor -> . invocation
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (110) cte -> . CTEI
    (111) cte -> . CTEF
    (112) cte -> . CTEC
    (113) cte -> . CTEB
    (93) expression_parenthesis -> . LPAREN expression RPAREN
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 85
    ID              shift and go to state 94
    CTEI            shift and go to state 95
    CTEF            shift and go to state 96
    CTEC            shift and go to state 97
    CTEB            shift and go to state 98
    LPAREN          shift and go to state 99

    expression                     shift and go to state 220
    t_expression                   shift and go to state 84
    g_expression                   shift and go to state 86
    m_expression                   shift and go to state 87
    term                           shift and go to state 88
    factor                         shift and go to state 89
    variable                       shift and go to state 90
    cte                            shift and go to state 91
    expression_parenthesis         shift and go to state 92
    invocation                     shift and go to state 93

state 215

    (63) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON . invocation_6
    (69) invocation_6 -> . empty
    (114) empty -> .

    RBRACE          reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    READ            reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    DO              reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    PRINT           reduce using rule 114 (empty -> .)
    TIMES           reduce using rule 114 (empty -> .)
    DIVIDE          reduce using rule 114 (empty -> .)
    PLUS            reduce using rule 114 (empty -> .)
    MINUS           reduce using rule 114 (empty -> .)
    LESS            reduce using rule 114 (empty -> .)
    GREATER         reduce using rule 114 (empty -> .)
    EQUALS          reduce using rule 114 (empty -> .)
    NOTEQUAL        reduce using rule 114 (empty -> .)
    GREATERTHAN     reduce using rule 114 (empty -> .)
    LESSTHAN        reduce using rule 114 (empty -> .)
    AND             reduce using rule 114 (empty -> .)
    OR              reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    RBRACK          reduce using rule 114 (empty -> .)
    RPAREN          reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)
    FROM            reduce using rule 114 (empty -> .)

    invocation_6                   shift and go to state 221
    empty                          shift and go to state 222

state 216

    (70) expressions -> expressions COMMA invocation_4 expression . invocation_3
    (66) invocation_3 -> . empty
    (114) empty -> .

    RPAREN          reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)

    invocation_3                   shift and go to state 223
    empty                          shift and go to state 194

state 217

    (44) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression . RPAREN gotot SEMICOLON

    RPAREN          shift and go to state 224


state 218

    (50) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof . LBRACE statements RBRACE

    LBRACE          shift and go to state 225


state 219

    (55) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE . statements RBRACE ELSE goto LBRACE statements RBRACE
    (52) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE . statements RBRACE
    (31) statements -> . statements statement
    (32) statements -> . statement
    (33) statements -> . empty
    (34) statement -> . read
    (35) statement -> . for
    (36) statement -> . do_while
    (37) statement -> . while
    (38) statement -> . if_else
    (39) statement -> . invocation
    (40) statement -> . if
    (41) statement -> . assingation
    (42) statement -> . return
    (43) statement -> . print
    (114) empty -> .
    (60) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (45) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (44) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (50) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (55) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (52) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (80) assingation -> . variable ASSIGN expression SEMICOLON
    (59) return -> . RETURN expression SEMICOLON
    (75) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 114 (empty -> .)
    READ            shift and go to state 53
    FOR             shift and go to state 54
    DO              shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    ID              shift and go to state 55
    RETURN          shift and go to state 60
    PRINT           shift and go to state 61

  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! RETURN          [ reduce using rule 114 (empty -> .) ]
  ! PRINT           [ reduce using rule 114 (empty -> .) ]

    statements                     shift and go to state 226
    statement                      shift and go to state 41
    empty                          shift and go to state 42
    read                           shift and go to state 43
    for                            shift and go to state 44
    do_while                       shift and go to state 45
    while                          shift and go to state 46
    if_else                        shift and go to state 47
    invocation                     shift and go to state 48
    if                             shift and go to state 49
    assingation                    shift and go to state 50
    return                         shift and go to state 51
    print                          shift and go to state 52
    variable                       shift and go to state 59

state 220

    (45) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression . RPAREN for_3 DO LBRACE statements RBRACE for_4

    RPAREN          shift and go to state 227


state 221

    (63) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .

    RBRACE          reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RETURN          reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    READ            reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    FOR             reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DO              reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    WHILE           reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    IF              reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ID              reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PRINT           reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    TIMES           reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DIVIDE          reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PLUS            reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    MINUS           reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESS            reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATER         reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    EQUALS          reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    NOTEQUAL        reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATERTHAN     reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESSTHAN        reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    AND             reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    OR              reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    SEMICOLON       reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACK          reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RPAREN          reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    COMMA           reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    FROM            reduce using rule 63 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)


state 222

    (69) invocation_6 -> empty .

    RBRACE          reduce using rule 69 (invocation_6 -> empty .)
    RETURN          reduce using rule 69 (invocation_6 -> empty .)
    READ            reduce using rule 69 (invocation_6 -> empty .)
    FOR             reduce using rule 69 (invocation_6 -> empty .)
    DO              reduce using rule 69 (invocation_6 -> empty .)
    WHILE           reduce using rule 69 (invocation_6 -> empty .)
    IF              reduce using rule 69 (invocation_6 -> empty .)
    ID              reduce using rule 69 (invocation_6 -> empty .)
    PRINT           reduce using rule 69 (invocation_6 -> empty .)
    TIMES           reduce using rule 69 (invocation_6 -> empty .)
    DIVIDE          reduce using rule 69 (invocation_6 -> empty .)
    PLUS            reduce using rule 69 (invocation_6 -> empty .)
    MINUS           reduce using rule 69 (invocation_6 -> empty .)
    LESS            reduce using rule 69 (invocation_6 -> empty .)
    GREATER         reduce using rule 69 (invocation_6 -> empty .)
    EQUALS          reduce using rule 69 (invocation_6 -> empty .)
    NOTEQUAL        reduce using rule 69 (invocation_6 -> empty .)
    GREATERTHAN     reduce using rule 69 (invocation_6 -> empty .)
    LESSTHAN        reduce using rule 69 (invocation_6 -> empty .)
    AND             reduce using rule 69 (invocation_6 -> empty .)
    OR              reduce using rule 69 (invocation_6 -> empty .)
    SEMICOLON       reduce using rule 69 (invocation_6 -> empty .)
    RBRACK          reduce using rule 69 (invocation_6 -> empty .)
    RPAREN          reduce using rule 69 (invocation_6 -> empty .)
    COMMA           reduce using rule 69 (invocation_6 -> empty .)
    FROM            reduce using rule 69 (invocation_6 -> empty .)


state 223

    (70) expressions -> expressions COMMA invocation_4 expression invocation_3 .

    RPAREN          reduce using rule 70 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)
    COMMA           reduce using rule 70 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)


state 224

    (44) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN . gotot SEMICOLON
    (56) gotot -> . empty
    (114) empty -> .

    SEMICOLON       reduce using rule 114 (empty -> .)

    gotot                          shift and go to state 228
    empty                          shift and go to state 229

state 225

    (50) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE . statements RBRACE
    (31) statements -> . statements statement
    (32) statements -> . statement
    (33) statements -> . empty
    (34) statement -> . read
    (35) statement -> . for
    (36) statement -> . do_while
    (37) statement -> . while
    (38) statement -> . if_else
    (39) statement -> . invocation
    (40) statement -> . if
    (41) statement -> . assingation
    (42) statement -> . return
    (43) statement -> . print
    (114) empty -> .
    (60) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (45) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (44) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (50) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (55) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (52) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (80) assingation -> . variable ASSIGN expression SEMICOLON
    (59) return -> . RETURN expression SEMICOLON
    (75) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 114 (empty -> .)
    READ            shift and go to state 53
    FOR             shift and go to state 54
    DO              shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    ID              shift and go to state 55
    RETURN          shift and go to state 60
    PRINT           shift and go to state 61

  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! RETURN          [ reduce using rule 114 (empty -> .) ]
  ! PRINT           [ reduce using rule 114 (empty -> .) ]

    statements                     shift and go to state 230
    statement                      shift and go to state 41
    empty                          shift and go to state 42
    read                           shift and go to state 43
    for                            shift and go to state 44
    do_while                       shift and go to state 45
    while                          shift and go to state 46
    if_else                        shift and go to state 47
    invocation                     shift and go to state 48
    if                             shift and go to state 49
    assingation                    shift and go to state 50
    return                         shift and go to state 51
    print                          shift and go to state 52
    variable                       shift and go to state 59

state 226

    (55) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements . RBRACE ELSE goto LBRACE statements RBRACE
    (52) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements . RBRACE
    (31) statements -> statements . statement
    (34) statement -> . read
    (35) statement -> . for
    (36) statement -> . do_while
    (37) statement -> . while
    (38) statement -> . if_else
    (39) statement -> . invocation
    (40) statement -> . if
    (41) statement -> . assingation
    (42) statement -> . return
    (43) statement -> . print
    (60) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (45) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (44) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (50) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (55) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (52) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (80) assingation -> . variable ASSIGN expression SEMICOLON
    (59) return -> . RETURN expression SEMICOLON
    (75) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 231
    READ            shift and go to state 53
    FOR             shift and go to state 54
    DO              shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    ID              shift and go to state 55
    RETURN          shift and go to state 60
    PRINT           shift and go to state 61

    statement                      shift and go to state 72
    read                           shift and go to state 43
    for                            shift and go to state 44
    do_while                       shift and go to state 45
    while                          shift and go to state 46
    if_else                        shift and go to state 47
    invocation                     shift and go to state 48
    if                             shift and go to state 49
    assingation                    shift and go to state 50
    return                         shift and go to state 51
    print                          shift and go to state 52
    variable                       shift and go to state 59

state 227

    (45) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN . for_3 DO LBRACE statements RBRACE for_4
    (48) for_3 -> . empty
    (114) empty -> .

    DO              reduce using rule 114 (empty -> .)

    for_3                          shift and go to state 232
    empty                          shift and go to state 233

state 228

    (44) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot . SEMICOLON

    SEMICOLON       shift and go to state 234


state 229

    (56) gotot -> empty .

    SEMICOLON       reduce using rule 56 (gotot -> empty .)


state 230

    (50) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements . RBRACE
    (31) statements -> statements . statement
    (34) statement -> . read
    (35) statement -> . for
    (36) statement -> . do_while
    (37) statement -> . while
    (38) statement -> . if_else
    (39) statement -> . invocation
    (40) statement -> . if
    (41) statement -> . assingation
    (42) statement -> . return
    (43) statement -> . print
    (60) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (45) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (44) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (50) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (55) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (52) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (80) assingation -> . variable ASSIGN expression SEMICOLON
    (59) return -> . RETURN expression SEMICOLON
    (75) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 235
    READ            shift and go to state 53
    FOR             shift and go to state 54
    DO              shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    ID              shift and go to state 55
    RETURN          shift and go to state 60
    PRINT           shift and go to state 61

    statement                      shift and go to state 72
    read                           shift and go to state 43
    for                            shift and go to state 44
    do_while                       shift and go to state 45
    while                          shift and go to state 46
    if_else                        shift and go to state 47
    invocation                     shift and go to state 48
    if                             shift and go to state 49
    assingation                    shift and go to state 50
    return                         shift and go to state 51
    print                          shift and go to state 52
    variable                       shift and go to state 59

state 231

    (55) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE . ELSE goto LBRACE statements RBRACE
    (52) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .

    ELSE            shift and go to state 236
    RBRACE          reduce using rule 52 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    RETURN          reduce using rule 52 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    READ            reduce using rule 52 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    FOR             reduce using rule 52 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    DO              reduce using rule 52 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    WHILE           reduce using rule 52 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    IF              reduce using rule 52 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    ID              reduce using rule 52 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    PRINT           reduce using rule 52 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)


state 232

    (45) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 . DO LBRACE statements RBRACE for_4

    DO              shift and go to state 237


state 233

    (48) for_3 -> empty .

    DO              reduce using rule 48 (for_3 -> empty .)


state 234

    (44) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .

    RBRACE          reduce using rule 44 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    RETURN          reduce using rule 44 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    READ            reduce using rule 44 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    FOR             reduce using rule 44 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    DO              reduce using rule 44 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    WHILE           reduce using rule 44 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    IF              reduce using rule 44 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ID              reduce using rule 44 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    PRINT           reduce using rule 44 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)


state 235

    (50) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .

    RBRACE          reduce using rule 50 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    RETURN          reduce using rule 50 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    READ            reduce using rule 50 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    FOR             reduce using rule 50 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    DO              reduce using rule 50 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    WHILE           reduce using rule 50 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    IF              reduce using rule 50 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    ID              reduce using rule 50 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    PRINT           reduce using rule 50 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)


state 236

    (55) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE . goto LBRACE statements RBRACE
    (57) goto -> . empty
    (114) empty -> .

    LBRACE          reduce using rule 114 (empty -> .)

    goto                           shift and go to state 238
    empty                          shift and go to state 239

state 237

    (45) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO . LBRACE statements RBRACE for_4

    LBRACE          shift and go to state 240


state 238

    (55) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto . LBRACE statements RBRACE

    LBRACE          shift and go to state 241


state 239

    (57) goto -> empty .

    LBRACE          reduce using rule 57 (goto -> empty .)


state 240

    (45) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE . statements RBRACE for_4
    (31) statements -> . statements statement
    (32) statements -> . statement
    (33) statements -> . empty
    (34) statement -> . read
    (35) statement -> . for
    (36) statement -> . do_while
    (37) statement -> . while
    (38) statement -> . if_else
    (39) statement -> . invocation
    (40) statement -> . if
    (41) statement -> . assingation
    (42) statement -> . return
    (43) statement -> . print
    (114) empty -> .
    (60) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (45) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (44) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (50) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (55) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (52) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (80) assingation -> . variable ASSIGN expression SEMICOLON
    (59) return -> . RETURN expression SEMICOLON
    (75) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 114 (empty -> .)
    READ            shift and go to state 53
    FOR             shift and go to state 54
    DO              shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    ID              shift and go to state 55
    RETURN          shift and go to state 60
    PRINT           shift and go to state 61

  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! RETURN          [ reduce using rule 114 (empty -> .) ]
  ! PRINT           [ reduce using rule 114 (empty -> .) ]

    statements                     shift and go to state 242
    statement                      shift and go to state 41
    empty                          shift and go to state 42
    read                           shift and go to state 43
    for                            shift and go to state 44
    do_while                       shift and go to state 45
    while                          shift and go to state 46
    if_else                        shift and go to state 47
    invocation                     shift and go to state 48
    if                             shift and go to state 49
    assingation                    shift and go to state 50
    return                         shift and go to state 51
    print                          shift and go to state 52
    variable                       shift and go to state 59

state 241

    (55) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE . statements RBRACE
    (31) statements -> . statements statement
    (32) statements -> . statement
    (33) statements -> . empty
    (34) statement -> . read
    (35) statement -> . for
    (36) statement -> . do_while
    (37) statement -> . while
    (38) statement -> . if_else
    (39) statement -> . invocation
    (40) statement -> . if
    (41) statement -> . assingation
    (42) statement -> . return
    (43) statement -> . print
    (114) empty -> .
    (60) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (45) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (44) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (50) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (55) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (52) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (80) assingation -> . variable ASSIGN expression SEMICOLON
    (59) return -> . RETURN expression SEMICOLON
    (75) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 114 (empty -> .)
    READ            shift and go to state 53
    FOR             shift and go to state 54
    DO              shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    ID              shift and go to state 55
    RETURN          shift and go to state 60
    PRINT           shift and go to state 61

  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! RETURN          [ reduce using rule 114 (empty -> .) ]
  ! PRINT           [ reduce using rule 114 (empty -> .) ]

    statements                     shift and go to state 243
    statement                      shift and go to state 41
    empty                          shift and go to state 42
    read                           shift and go to state 43
    for                            shift and go to state 44
    do_while                       shift and go to state 45
    while                          shift and go to state 46
    if_else                        shift and go to state 47
    invocation                     shift and go to state 48
    if                             shift and go to state 49
    assingation                    shift and go to state 50
    return                         shift and go to state 51
    print                          shift and go to state 52
    variable                       shift and go to state 59

state 242

    (45) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements . RBRACE for_4
    (31) statements -> statements . statement
    (34) statement -> . read
    (35) statement -> . for
    (36) statement -> . do_while
    (37) statement -> . while
    (38) statement -> . if_else
    (39) statement -> . invocation
    (40) statement -> . if
    (41) statement -> . assingation
    (42) statement -> . return
    (43) statement -> . print
    (60) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (45) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (44) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (50) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (55) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (52) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (80) assingation -> . variable ASSIGN expression SEMICOLON
    (59) return -> . RETURN expression SEMICOLON
    (75) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 244
    READ            shift and go to state 53
    FOR             shift and go to state 54
    DO              shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    ID              shift and go to state 55
    RETURN          shift and go to state 60
    PRINT           shift and go to state 61

    statement                      shift and go to state 72
    read                           shift and go to state 43
    for                            shift and go to state 44
    do_while                       shift and go to state 45
    while                          shift and go to state 46
    if_else                        shift and go to state 47
    invocation                     shift and go to state 48
    if                             shift and go to state 49
    assingation                    shift and go to state 50
    return                         shift and go to state 51
    print                          shift and go to state 52
    variable                       shift and go to state 59

state 243

    (55) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements . RBRACE
    (31) statements -> statements . statement
    (34) statement -> . read
    (35) statement -> . for
    (36) statement -> . do_while
    (37) statement -> . while
    (38) statement -> . if_else
    (39) statement -> . invocation
    (40) statement -> . if
    (41) statement -> . assingation
    (42) statement -> . return
    (43) statement -> . print
    (60) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (45) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (44) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (50) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (55) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (63) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (52) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (80) assingation -> . variable ASSIGN expression SEMICOLON
    (59) return -> . RETURN expression SEMICOLON
    (75) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (24) variable -> . ID
    (25) variable -> . ID LBRACK expression RBRACK
    (26) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 245
    READ            shift and go to state 53
    FOR             shift and go to state 54
    DO              shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58
    ID              shift and go to state 55
    RETURN          shift and go to state 60
    PRINT           shift and go to state 61

    statement                      shift and go to state 72
    read                           shift and go to state 43
    for                            shift and go to state 44
    do_while                       shift and go to state 45
    while                          shift and go to state 46
    if_else                        shift and go to state 47
    invocation                     shift and go to state 48
    if                             shift and go to state 49
    assingation                    shift and go to state 50
    return                         shift and go to state 51
    print                          shift and go to state 52
    variable                       shift and go to state 59

state 244

    (45) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE . for_4
    (49) for_4 -> . empty
    (114) empty -> .

    RBRACE          reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    READ            reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    DO              reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    PRINT           reduce using rule 114 (empty -> .)

    for_4                          shift and go to state 246
    empty                          shift and go to state 247

state 245

    (55) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .

    RBRACE          reduce using rule 55 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    RETURN          reduce using rule 55 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    READ            reduce using rule 55 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    FOR             reduce using rule 55 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    DO              reduce using rule 55 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    WHILE           reduce using rule 55 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    IF              reduce using rule 55 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    ID              reduce using rule 55 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    PRINT           reduce using rule 55 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)


state 246

    (45) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .

    RBRACE          reduce using rule 45 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    RETURN          reduce using rule 45 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    READ            reduce using rule 45 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    FOR             reduce using rule 45 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    DO              reduce using rule 45 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    WHILE           reduce using rule 45 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    IF              reduce using rule 45 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    ID              reduce using rule 45 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    PRINT           reduce using rule 45 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)


state 247

    (49) for_4 -> empty .

    RBRACE          reduce using rule 49 (for_4 -> empty .)
    RETURN          reduce using rule 49 (for_4 -> empty .)
    READ            reduce using rule 49 (for_4 -> empty .)
    FOR             reduce using rule 49 (for_4 -> empty .)
    DO              reduce using rule 49 (for_4 -> empty .)
    WHILE           reduce using rule 49 (for_4 -> empty .)
    IF              reduce using rule 49 (for_4 -> empty .)
    ID              reduce using rule 49 (for_4 -> empty .)
    PRINT           reduce using rule 49 (for_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 7 resolved as shift
WARNING: shift/reduce conflict for READ in state 33 resolved as shift
WARNING: shift/reduce conflict for FOR in state 33 resolved as shift
WARNING: shift/reduce conflict for DO in state 33 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 33 resolved as shift
WARNING: shift/reduce conflict for IF in state 33 resolved as shift
WARNING: shift/reduce conflict for ID in state 33 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 33 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 33 resolved as shift
WARNING: shift/reduce conflict for READ in state 115 resolved as shift
WARNING: shift/reduce conflict for FOR in state 115 resolved as shift
WARNING: shift/reduce conflict for DO in state 115 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 115 resolved as shift
WARNING: shift/reduce conflict for IF in state 115 resolved as shift
WARNING: shift/reduce conflict for ID in state 115 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 115 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 115 resolved as shift
WARNING: shift/reduce conflict for READ in state 146 resolved as shift
WARNING: shift/reduce conflict for FOR in state 146 resolved as shift
WARNING: shift/reduce conflict for DO in state 146 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 146 resolved as shift
WARNING: shift/reduce conflict for IF in state 146 resolved as shift
WARNING: shift/reduce conflict for ID in state 146 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 146 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 146 resolved as shift
WARNING: shift/reduce conflict for READ in state 219 resolved as shift
WARNING: shift/reduce conflict for FOR in state 219 resolved as shift
WARNING: shift/reduce conflict for DO in state 219 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 219 resolved as shift
WARNING: shift/reduce conflict for IF in state 219 resolved as shift
WARNING: shift/reduce conflict for ID in state 219 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 219 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 219 resolved as shift
WARNING: shift/reduce conflict for READ in state 225 resolved as shift
WARNING: shift/reduce conflict for FOR in state 225 resolved as shift
WARNING: shift/reduce conflict for DO in state 225 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 225 resolved as shift
WARNING: shift/reduce conflict for IF in state 225 resolved as shift
WARNING: shift/reduce conflict for ID in state 225 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 225 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 225 resolved as shift
WARNING: shift/reduce conflict for READ in state 240 resolved as shift
WARNING: shift/reduce conflict for FOR in state 240 resolved as shift
WARNING: shift/reduce conflict for DO in state 240 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 240 resolved as shift
WARNING: shift/reduce conflict for IF in state 240 resolved as shift
WARNING: shift/reduce conflict for ID in state 240 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 240 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 240 resolved as shift
WARNING: shift/reduce conflict for READ in state 241 resolved as shift
WARNING: shift/reduce conflict for FOR in state 241 resolved as shift
WARNING: shift/reduce conflict for DO in state 241 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 241 resolved as shift
WARNING: shift/reduce conflict for IF in state 241 resolved as shift
WARNING: shift/reduce conflict for ID in state 241 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 241 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 241 resolved as shift
WARNING: reduce/reduce conflict in state 147 resolved using rule (return_stmt -> RETURN expression SEMICOLON)
WARNING: rejected rule (return -> RETURN expression SEMICOLON) in state 147
