Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMENT
    THEN

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END
Rule 2     global_scope -> empty
Rule 3     functions -> functions function
Rule 4     functions -> function
Rule 5     functions -> empty
Rule 6     function -> FUNCTION function_signature block
Rule 7     function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
Rule 8     function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
Rule 9     return -> RETURN expression SEMICOLON
Rule 10    function_1 -> empty
Rule 11    main -> MAIN LPAREN RPAREN main_scope var_declarations block
Rule 12    main_scope -> empty
Rule 13    var_declarations -> var_declaration_list
Rule 14    var_declarations -> empty
Rule 15    var_declaration_list -> var_declaration var_declarations
Rule 16    var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration
Rule 17    open_var_declaration -> empty
Rule 18    close_var_declaration -> empty
Rule 19    variables -> variable
Rule 20    variables -> variable COMMA variables
Rule 21    variable -> ID
Rule 22    variable -> ID LBRACK expression RBRACK
Rule 23    variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK
Rule 24    parameters -> parameters COMMA parameter
Rule 25    parameters -> parameter
Rule 26    parameters -> empty
Rule 27    parameter -> simple_type ID
Rule 28    block -> LBRACE block2 RBRACE
Rule 29    block2 -> block3
Rule 30    block2 -> empty
Rule 31    block3 -> statement block2
Rule 32    statement -> special_func
Rule 33    statement -> assingation
Rule 34    statement -> for
Rule 35    statement -> do_while
Rule 36    statement -> while
Rule 37    statement -> if_else
Rule 38    statement -> invocation
Rule 39    statement -> if
Rule 40    statement -> print
Rule 41    statement -> read
Rule 42    statement -> return
Rule 43    special_func -> gen_key
Rule 44    special_func -> encrypt
Rule 45    special_func -> decrypt
Rule 46    special_func -> sha_256
Rule 47    special_func -> random_salt
Rule 48    special_func -> hmac
Rule 49    special_func -> ecdsa
Rule 50    special_func -> ecdsa_key
Rule 51    ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON
Rule 52    ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
Rule 53    hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
Rule 54    random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON
Rule 55    sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON
Rule 56    gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON
Rule 57    encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
Rule 58    decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
Rule 59    read -> READ LPAREN ID RPAREN SEMICOLON
Rule 60    assing_to_call -> variable ASSIGN invocation
Rule 61    do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
Rule 62    for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
Rule 63    for_1 -> empty
Rule 64    for_2 -> empty
Rule 65    for_3 -> empty
Rule 66    for_4 -> empty
Rule 67    while -> WHILE breadcrumb LPAREN expression RPAREN gotof block
Rule 68    breadcrumb -> empty
Rule 69    if -> IF LPAREN expression RPAREN gotof block
Rule 70    if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block
Rule 71    gotot -> empty
Rule 72    goto -> empty
Rule 73    gotof -> empty
Rule 74    variable_list -> variable
Rule 75    variable_list -> variable_list COMMA variable
Rule 76    invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
Rule 77    invocation_1 -> empty
Rule 78    invocation_2 -> empty
Rule 79    invocation_3 -> empty
Rule 80    invocation_4 -> empty
Rule 81    invocation_5 -> empty
Rule 82    invocation_6 -> empty
Rule 83    expressions -> expressions COMMA invocation_4 expression invocation_3
Rule 84    expressions -> expression invocation_3
Rule 85    expressions -> empty
Rule 86    expression -> t_expression
Rule 87    expression -> NOT t_expression
Rule 88    print -> PRINT LPAREN print_arguments RPAREN SEMICOLON
Rule 89    print_arguments -> print_argument
Rule 90    print_arguments -> print_arguments COMMA print_argument
Rule 91    print_argument -> CTES
Rule 92    print_argument -> expression
Rule 93    assingation -> variable ASSIGN expression SEMICOLON
Rule 94    t_expression -> g_expression
Rule 95    t_expression -> t_expression boolean_operator g_expression
Rule 96    g_expression -> m_expression
Rule 97    g_expression -> g_expression comparison_operator m_expression
Rule 98    m_expression -> term
Rule 99    m_expression -> m_expression addition_operator term
Rule 100   term -> factor
Rule 101   term -> term multiplication_operator factor
Rule 102   factor -> variable
Rule 103   factor -> cte
Rule 104   factor -> invocation
Rule 105   comparison_operator -> LESS
Rule 106   comparison_operator -> GREATER
Rule 107   comparison_operator -> EQUALS
Rule 108   comparison_operator -> NOTEQUAL
Rule 109   comparison_operator -> GREATERTHAN
Rule 110   comparison_operator -> LESSTHAN
Rule 111   addition_operator -> PLUS
Rule 112   addition_operator -> MINUS
Rule 113   boolean_operator -> AND
Rule 114   boolean_operator -> OR
Rule 115   multiplication_operator -> TIMES
Rule 116   multiplication_operator -> DIVIDE
Rule 117   simple_type -> INT
Rule 118   simple_type -> FLOAT
Rule 119   simple_type -> CHAR
Rule 120   simple_type -> BOOLEAN
Rule 121   simple_type -> STRING
Rule 122   cte -> CTEI
Rule 123   cte -> CTEF
Rule 124   cte -> CTEC
Rule 125   cte -> CTEB
Rule 126   cte -> CTES
Rule 127   empty -> <empty>

Terminals, with rules where they appear

AND                  : 113
ASSIGN               : 60 62 93
BOOLEAN              : 120
CHAR                 : 119
COLON                : 
COMMA                : 20 24 52 53 57 58 75 83 90
COMMENT              : 
CTEB                 : 125
CTEC                 : 124
CTEF                 : 123
CTEI                 : 54 122
CTES                 : 91 126
DECRYPT              : 58
DIVIDE               : 116
DO                   : 61 62
ECDSA                : 52
ECDSAKEY             : 51
ELSE                 : 70
ENCRYPT              : 57
END                  : 1
EQUALS               : 107
FLOAT                : 118
FOR                  : 62
FROM                 : 62
FUNCTION             : 6
GENKEY               : 56
GREATER              : 106
GREATERTHAN          : 109
HMAC                 : 53
ID                   : 1 7 8 21 22 23 27 51 52 52 52 53 53 53 54 55 55 56 57 57 57 58 58 58 59 62 76
IF                   : 69 70
INT                  : 117
LBRACE               : 28
LBRACK               : 22 23 23
LESS                 : 105
LESSTHAN             : 110
LPAREN               : 7 8 11 51 52 53 54 55 56 57 58 59 61 62 67 69 70 76 88
MAIN                 : 11
MINUS                : 112
NOT                  : 87
NOTEQUAL             : 108
OR                   : 114
PLUS                 : 111
PRINT                : 88
PROGRAM              : 1
RANDOM_SALT          : 54
RBRACE               : 28
RBRACK               : 22 23 23
READ                 : 59
RETURN               : 9
RPAREN               : 7 8 11 51 52 53 54 55 56 57 58 59 61 62 67 69 70 76 88
SEMICOLON            : 1 9 16 51 52 53 54 55 56 57 58 59 61 76 88 93
SHA_256              : 55
SPECIAL              : 51 52 53 54 55 56 57 58
STRING               : 121
THEN                 : 
TIMES                : 115
VARIABLE             : 16
VOID                 : 8
WHILE                : 61 67
error                : 

Nonterminals, with rules where they appear

addition_operator    : 99
assing_to_call       : 
assingation          : 33
block                : 6 11 61 62 67 69 70 70
block2               : 28 31
block3               : 29
boolean_operator     : 95
breadcrumb           : 61 67
close_var_declaration : 7 8 16
comparison_operator  : 97
cte                  : 103
decrypt              : 45
do_while             : 35
ecdsa                : 49
ecdsa_key            : 50
empty                : 2 5 10 12 14 17 18 26 30 63 64 65 66 68 71 72 73 77 78 79 80 81 82 85
encrypt              : 44
expression           : 9 22 23 23 61 62 62 67 69 70 83 84 92 93
expressions          : 76 83
factor               : 100 101
for                  : 34
for_1                : 62
for_2                : 62
for_3                : 62
for_4                : 62
function             : 3 4
function_1           : 7 8
function_signature   : 6
functions            : 1 3
g_expression         : 94 95 97
gen_key              : 43
global_scope         : 1
goto                 : 70
gotof                : 67 69 70
gotot                : 61
hmac                 : 48
if                   : 39
if_else              : 37
invocation           : 38 60 104
invocation_1         : 76
invocation_2         : 76
invocation_3         : 83 84
invocation_4         : 83
invocation_5         : 76
invocation_6         : 76
m_expression         : 96 97 99
main                 : 1
main_scope           : 11
multiplication_operator : 101
open_var_declaration : 7 8 16
parameter            : 24 25
parameters           : 7 8 24
print                : 40
print_argument       : 89 90
print_arguments      : 88 90
program              : 0
random_salt          : 47
read                 : 41
return               : 42
sha_256              : 46
simple_type          : 7 16 27
special_func         : 32
statement            : 31
t_expression         : 86 87 95
term                 : 98 99 101
var_declaration      : 15
var_declaration_list : 13
var_declarations     : 1 7 8 11 15
variable             : 19 20 60 74 75 93 102
variable_list        : 75
variables            : 16 20
while                : 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON global_scope var_declarations functions main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON global_scope var_declarations functions main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON global_scope var_declarations functions main END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . global_scope var_declarations functions main END
    (2) global_scope -> . empty
    (127) empty -> .

    VARIABLE        reduce using rule 127 (empty -> .)
    FUNCTION        reduce using rule 127 (empty -> .)
    MAIN            reduce using rule 127 (empty -> .)

    global_scope                   shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON global_scope . var_declarations functions main END
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (127) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 127 (empty -> .)
    MAIN            reduce using rule 127 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 7
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 6

    (2) global_scope -> empty .

    VARIABLE        reduce using rule 2 (global_scope -> empty .)
    FUNCTION        reduce using rule 2 (global_scope -> empty .)
    MAIN            reduce using rule 2 (global_scope -> empty .)


state 7

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations . functions main END
    (3) functions -> . functions function
    (4) functions -> . function
    (5) functions -> . empty
    (6) function -> . FUNCTION function_signature block
    (127) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 127 (empty -> .)

  ! FUNCTION        [ reduce using rule 127 (empty -> .) ]

    functions                      shift and go to state 12
    function                       shift and go to state 13
    empty                          shift and go to state 14

state 8

    (13) var_declarations -> var_declaration_list .

    FUNCTION        reduce using rule 13 (var_declarations -> var_declaration_list .)
    MAIN            reduce using rule 13 (var_declarations -> var_declaration_list .)
    LBRACE          reduce using rule 13 (var_declarations -> var_declaration_list .)


state 9

    (14) var_declarations -> empty .

    FUNCTION        reduce using rule 14 (var_declarations -> empty .)
    MAIN            reduce using rule 14 (var_declarations -> empty .)
    LBRACE          reduce using rule 14 (var_declarations -> empty .)


state 10

    (15) var_declaration_list -> var_declaration . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (127) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 127 (empty -> .)
    MAIN            reduce using rule 127 (empty -> .)
    LBRACE          reduce using rule 127 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declaration                shift and go to state 10
    var_declarations               shift and go to state 16
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9

state 11

    (16) var_declaration -> VARIABLE . open_var_declaration simple_type variables SEMICOLON close_var_declaration
    (17) open_var_declaration -> . empty
    (127) empty -> .

    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    CHAR            reduce using rule 127 (empty -> .)
    BOOLEAN         reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    open_var_declaration           shift and go to state 17
    empty                          shift and go to state 18

state 12

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions . main END
    (3) functions -> functions . function
    (11) main -> . MAIN LPAREN RPAREN main_scope var_declarations block
    (6) function -> . FUNCTION function_signature block

    MAIN            shift and go to state 21
    FUNCTION        shift and go to state 15

    main                           shift and go to state 19
    function                       shift and go to state 20

state 13

    (4) functions -> function .

    MAIN            reduce using rule 4 (functions -> function .)
    FUNCTION        reduce using rule 4 (functions -> function .)


state 14

    (5) functions -> empty .

    MAIN            reduce using rule 5 (functions -> empty .)
    FUNCTION        reduce using rule 5 (functions -> empty .)


state 15

    (6) function -> FUNCTION . function_signature block
    (7) function_signature -> . simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (8) function_signature -> . VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (117) simple_type -> . INT
    (118) simple_type -> . FLOAT
    (119) simple_type -> . CHAR
    (120) simple_type -> . BOOLEAN
    (121) simple_type -> . STRING

    VOID            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    function_signature             shift and go to state 22
    simple_type                    shift and go to state 23

state 16

    (15) var_declaration_list -> var_declaration var_declarations .

    FUNCTION        reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)
    MAIN            reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)
    LBRACE          reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)


state 17

    (16) var_declaration -> VARIABLE open_var_declaration . simple_type variables SEMICOLON close_var_declaration
    (117) simple_type -> . INT
    (118) simple_type -> . FLOAT
    (119) simple_type -> . CHAR
    (120) simple_type -> . BOOLEAN
    (121) simple_type -> . STRING

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    simple_type                    shift and go to state 30

state 18

    (17) open_var_declaration -> empty .

    INT             reduce using rule 17 (open_var_declaration -> empty .)
    FLOAT           reduce using rule 17 (open_var_declaration -> empty .)
    CHAR            reduce using rule 17 (open_var_declaration -> empty .)
    BOOLEAN         reduce using rule 17 (open_var_declaration -> empty .)
    STRING          reduce using rule 17 (open_var_declaration -> empty .)
    COMMA           reduce using rule 17 (open_var_declaration -> empty .)
    RPAREN          reduce using rule 17 (open_var_declaration -> empty .)


state 19

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main . END

    END             shift and go to state 31


state 20

    (3) functions -> functions function .

    MAIN            reduce using rule 3 (functions -> functions function .)
    FUNCTION        reduce using rule 3 (functions -> functions function .)


state 21

    (11) main -> MAIN . LPAREN RPAREN main_scope var_declarations block

    LPAREN          shift and go to state 32


state 22

    (6) function -> FUNCTION function_signature . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 33

state 23

    (7) function_signature -> simple_type . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    ID              shift and go to state 35


state 24

    (8) function_signature -> VOID . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    ID              shift and go to state 36


state 25

    (117) simple_type -> INT .

    ID              reduce using rule 117 (simple_type -> INT .)


state 26

    (118) simple_type -> FLOAT .

    ID              reduce using rule 118 (simple_type -> FLOAT .)


state 27

    (119) simple_type -> CHAR .

    ID              reduce using rule 119 (simple_type -> CHAR .)


state 28

    (120) simple_type -> BOOLEAN .

    ID              reduce using rule 120 (simple_type -> BOOLEAN .)


state 29

    (121) simple_type -> STRING .

    ID              reduce using rule 121 (simple_type -> STRING .)


state 30

    (16) var_declaration -> VARIABLE open_var_declaration simple_type . variables SEMICOLON close_var_declaration
    (19) variables -> . variable
    (20) variables -> . variable COMMA variables
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 39

    variables                      shift and go to state 37
    variable                       shift and go to state 38

state 31

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .)


state 32

    (11) main -> MAIN LPAREN . RPAREN main_scope var_declarations block

    RPAREN          shift and go to state 40


state 33

    (6) function -> FUNCTION function_signature block .

    MAIN            reduce using rule 6 (function -> FUNCTION function_signature block .)
    FUNCTION        reduce using rule 6 (function -> FUNCTION function_signature block .)


state 34

    (28) block -> LBRACE . block2 RBRACE
    (29) block2 -> . block3
    (30) block2 -> . empty
    (31) block3 -> . statement block2
    (127) empty -> .
    (32) statement -> . special_func
    (33) statement -> . assingation
    (34) statement -> . for
    (35) statement -> . do_while
    (36) statement -> . while
    (37) statement -> . if_else
    (38) statement -> . invocation
    (39) statement -> . if
    (40) statement -> . print
    (41) statement -> . read
    (42) statement -> . return
    (43) special_func -> . gen_key
    (44) special_func -> . encrypt
    (45) special_func -> . decrypt
    (46) special_func -> . sha_256
    (47) special_func -> . random_salt
    (48) special_func -> . hmac
    (49) special_func -> . ecdsa
    (50) special_func -> . ecdsa_key
    (93) assingation -> . variable ASSIGN expression SEMICOLON
    (62) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (61) do_while -> . DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (67) while -> . WHILE breadcrumb LPAREN expression RPAREN gotof block
    (70) if_else -> . IF LPAREN expression RPAREN gotof block ELSE goto block
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (69) if -> . IF LPAREN expression RPAREN gotof block
    (88) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (59) read -> . READ LPAREN ID RPAREN SEMICOLON
    (9) return -> . RETURN expression SEMICOLON
    (56) gen_key -> . GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON
    (57) encrypt -> . ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (58) decrypt -> . DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (55) sha_256 -> . SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON
    (54) random_salt -> . RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON
    (53) hmac -> . HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (52) ecdsa -> . ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (51) ecdsa_key -> . ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          reduce using rule 127 (empty -> .)
    FOR             shift and go to state 65
    DO              shift and go to state 67
    WHILE           shift and go to state 68
    IF              shift and go to state 69
    ID              shift and go to state 66
    PRINT           shift and go to state 70
    READ            shift and go to state 71
    RETURN          shift and go to state 72
    GENKEY          shift and go to state 73
    ENCRYPT         shift and go to state 74
    DECRYPT         shift and go to state 75
    SHA_256         shift and go to state 76
    RANDOM_SALT     shift and go to state 77
    HMAC            shift and go to state 78
    ECDSA           shift and go to state 79
    ECDSAKEY        shift and go to state 80

    block2                         shift and go to state 41
    block3                         shift and go to state 42
    empty                          shift and go to state 43
    statement                      shift and go to state 44
    special_func                   shift and go to state 45
    assingation                    shift and go to state 46
    for                            shift and go to state 47
    do_while                       shift and go to state 48
    while                          shift and go to state 49
    if_else                        shift and go to state 50
    invocation                     shift and go to state 51
    if                             shift and go to state 52
    print                          shift and go to state 53
    read                           shift and go to state 54
    return                         shift and go to state 55
    gen_key                        shift and go to state 56
    encrypt                        shift and go to state 57
    decrypt                        shift and go to state 58
    sha_256                        shift and go to state 59
    random_salt                    shift and go to state 60
    hmac                           shift and go to state 61
    ecdsa                          shift and go to state 62
    ecdsa_key                      shift and go to state 63
    variable                       shift and go to state 64

state 35

    (7) function_signature -> simple_type ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (10) function_1 -> . empty
    (127) empty -> .

    LPAREN          reduce using rule 127 (empty -> .)

    function_1                     shift and go to state 81
    empty                          shift and go to state 82

state 36

    (8) function_signature -> VOID ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (10) function_1 -> . empty
    (127) empty -> .

    LPAREN          reduce using rule 127 (empty -> .)

    function_1                     shift and go to state 83
    empty                          shift and go to state 82

state 37

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables . SEMICOLON close_var_declaration

    SEMICOLON       shift and go to state 84


state 38

    (19) variables -> variable .
    (20) variables -> variable . COMMA variables

    SEMICOLON       reduce using rule 19 (variables -> variable .)
    COMMA           shift and go to state 85


state 39

    (21) variable -> ID .
    (22) variable -> ID . LBRACK expression RBRACK
    (23) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK

    COMMA           reduce using rule 21 (variable -> ID .)
    SEMICOLON       reduce using rule 21 (variable -> ID .)
    LBRACK          shift and go to state 86


state 40

    (11) main -> MAIN LPAREN RPAREN . main_scope var_declarations block
    (12) main_scope -> . empty
    (127) empty -> .

    VARIABLE        reduce using rule 127 (empty -> .)
    LBRACE          reduce using rule 127 (empty -> .)

    main_scope                     shift and go to state 87
    empty                          shift and go to state 88

state 41

    (28) block -> LBRACE block2 . RBRACE

    RBRACE          shift and go to state 89


state 42

    (29) block2 -> block3 .

    RBRACE          reduce using rule 29 (block2 -> block3 .)


state 43

    (30) block2 -> empty .

    RBRACE          reduce using rule 30 (block2 -> empty .)


state 44

    (31) block3 -> statement . block2
    (29) block2 -> . block3
    (30) block2 -> . empty
    (31) block3 -> . statement block2
    (127) empty -> .
    (32) statement -> . special_func
    (33) statement -> . assingation
    (34) statement -> . for
    (35) statement -> . do_while
    (36) statement -> . while
    (37) statement -> . if_else
    (38) statement -> . invocation
    (39) statement -> . if
    (40) statement -> . print
    (41) statement -> . read
    (42) statement -> . return
    (43) special_func -> . gen_key
    (44) special_func -> . encrypt
    (45) special_func -> . decrypt
    (46) special_func -> . sha_256
    (47) special_func -> . random_salt
    (48) special_func -> . hmac
    (49) special_func -> . ecdsa
    (50) special_func -> . ecdsa_key
    (93) assingation -> . variable ASSIGN expression SEMICOLON
    (62) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (61) do_while -> . DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (67) while -> . WHILE breadcrumb LPAREN expression RPAREN gotof block
    (70) if_else -> . IF LPAREN expression RPAREN gotof block ELSE goto block
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (69) if -> . IF LPAREN expression RPAREN gotof block
    (88) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (59) read -> . READ LPAREN ID RPAREN SEMICOLON
    (9) return -> . RETURN expression SEMICOLON
    (56) gen_key -> . GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON
    (57) encrypt -> . ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (58) decrypt -> . DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (55) sha_256 -> . SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON
    (54) random_salt -> . RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON
    (53) hmac -> . HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (52) ecdsa -> . ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (51) ecdsa_key -> . ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          reduce using rule 127 (empty -> .)
    FOR             shift and go to state 65
    DO              shift and go to state 67
    WHILE           shift and go to state 68
    IF              shift and go to state 69
    ID              shift and go to state 66
    PRINT           shift and go to state 70
    READ            shift and go to state 71
    RETURN          shift and go to state 72
    GENKEY          shift and go to state 73
    ENCRYPT         shift and go to state 74
    DECRYPT         shift and go to state 75
    SHA_256         shift and go to state 76
    RANDOM_SALT     shift and go to state 77
    HMAC            shift and go to state 78
    ECDSA           shift and go to state 79
    ECDSAKEY        shift and go to state 80

    statement                      shift and go to state 44
    block2                         shift and go to state 90
    block3                         shift and go to state 42
    empty                          shift and go to state 43
    special_func                   shift and go to state 45
    assingation                    shift and go to state 46
    for                            shift and go to state 47
    do_while                       shift and go to state 48
    while                          shift and go to state 49
    if_else                        shift and go to state 50
    invocation                     shift and go to state 51
    if                             shift and go to state 52
    print                          shift and go to state 53
    read                           shift and go to state 54
    return                         shift and go to state 55
    gen_key                        shift and go to state 56
    encrypt                        shift and go to state 57
    decrypt                        shift and go to state 58
    sha_256                        shift and go to state 59
    random_salt                    shift and go to state 60
    hmac                           shift and go to state 61
    ecdsa                          shift and go to state 62
    ecdsa_key                      shift and go to state 63
    variable                       shift and go to state 64

state 45

    (32) statement -> special_func .

    FOR             reduce using rule 32 (statement -> special_func .)
    DO              reduce using rule 32 (statement -> special_func .)
    WHILE           reduce using rule 32 (statement -> special_func .)
    IF              reduce using rule 32 (statement -> special_func .)
    ID              reduce using rule 32 (statement -> special_func .)
    PRINT           reduce using rule 32 (statement -> special_func .)
    READ            reduce using rule 32 (statement -> special_func .)
    RETURN          reduce using rule 32 (statement -> special_func .)
    GENKEY          reduce using rule 32 (statement -> special_func .)
    ENCRYPT         reduce using rule 32 (statement -> special_func .)
    DECRYPT         reduce using rule 32 (statement -> special_func .)
    SHA_256         reduce using rule 32 (statement -> special_func .)
    RANDOM_SALT     reduce using rule 32 (statement -> special_func .)
    HMAC            reduce using rule 32 (statement -> special_func .)
    ECDSA           reduce using rule 32 (statement -> special_func .)
    ECDSAKEY        reduce using rule 32 (statement -> special_func .)
    RBRACE          reduce using rule 32 (statement -> special_func .)


state 46

    (33) statement -> assingation .

    FOR             reduce using rule 33 (statement -> assingation .)
    DO              reduce using rule 33 (statement -> assingation .)
    WHILE           reduce using rule 33 (statement -> assingation .)
    IF              reduce using rule 33 (statement -> assingation .)
    ID              reduce using rule 33 (statement -> assingation .)
    PRINT           reduce using rule 33 (statement -> assingation .)
    READ            reduce using rule 33 (statement -> assingation .)
    RETURN          reduce using rule 33 (statement -> assingation .)
    GENKEY          reduce using rule 33 (statement -> assingation .)
    ENCRYPT         reduce using rule 33 (statement -> assingation .)
    DECRYPT         reduce using rule 33 (statement -> assingation .)
    SHA_256         reduce using rule 33 (statement -> assingation .)
    RANDOM_SALT     reduce using rule 33 (statement -> assingation .)
    HMAC            reduce using rule 33 (statement -> assingation .)
    ECDSA           reduce using rule 33 (statement -> assingation .)
    ECDSAKEY        reduce using rule 33 (statement -> assingation .)
    RBRACE          reduce using rule 33 (statement -> assingation .)


state 47

    (34) statement -> for .

    FOR             reduce using rule 34 (statement -> for .)
    DO              reduce using rule 34 (statement -> for .)
    WHILE           reduce using rule 34 (statement -> for .)
    IF              reduce using rule 34 (statement -> for .)
    ID              reduce using rule 34 (statement -> for .)
    PRINT           reduce using rule 34 (statement -> for .)
    READ            reduce using rule 34 (statement -> for .)
    RETURN          reduce using rule 34 (statement -> for .)
    GENKEY          reduce using rule 34 (statement -> for .)
    ENCRYPT         reduce using rule 34 (statement -> for .)
    DECRYPT         reduce using rule 34 (statement -> for .)
    SHA_256         reduce using rule 34 (statement -> for .)
    RANDOM_SALT     reduce using rule 34 (statement -> for .)
    HMAC            reduce using rule 34 (statement -> for .)
    ECDSA           reduce using rule 34 (statement -> for .)
    ECDSAKEY        reduce using rule 34 (statement -> for .)
    RBRACE          reduce using rule 34 (statement -> for .)


state 48

    (35) statement -> do_while .

    FOR             reduce using rule 35 (statement -> do_while .)
    DO              reduce using rule 35 (statement -> do_while .)
    WHILE           reduce using rule 35 (statement -> do_while .)
    IF              reduce using rule 35 (statement -> do_while .)
    ID              reduce using rule 35 (statement -> do_while .)
    PRINT           reduce using rule 35 (statement -> do_while .)
    READ            reduce using rule 35 (statement -> do_while .)
    RETURN          reduce using rule 35 (statement -> do_while .)
    GENKEY          reduce using rule 35 (statement -> do_while .)
    ENCRYPT         reduce using rule 35 (statement -> do_while .)
    DECRYPT         reduce using rule 35 (statement -> do_while .)
    SHA_256         reduce using rule 35 (statement -> do_while .)
    RANDOM_SALT     reduce using rule 35 (statement -> do_while .)
    HMAC            reduce using rule 35 (statement -> do_while .)
    ECDSA           reduce using rule 35 (statement -> do_while .)
    ECDSAKEY        reduce using rule 35 (statement -> do_while .)
    RBRACE          reduce using rule 35 (statement -> do_while .)


state 49

    (36) statement -> while .

    FOR             reduce using rule 36 (statement -> while .)
    DO              reduce using rule 36 (statement -> while .)
    WHILE           reduce using rule 36 (statement -> while .)
    IF              reduce using rule 36 (statement -> while .)
    ID              reduce using rule 36 (statement -> while .)
    PRINT           reduce using rule 36 (statement -> while .)
    READ            reduce using rule 36 (statement -> while .)
    RETURN          reduce using rule 36 (statement -> while .)
    GENKEY          reduce using rule 36 (statement -> while .)
    ENCRYPT         reduce using rule 36 (statement -> while .)
    DECRYPT         reduce using rule 36 (statement -> while .)
    SHA_256         reduce using rule 36 (statement -> while .)
    RANDOM_SALT     reduce using rule 36 (statement -> while .)
    HMAC            reduce using rule 36 (statement -> while .)
    ECDSA           reduce using rule 36 (statement -> while .)
    ECDSAKEY        reduce using rule 36 (statement -> while .)
    RBRACE          reduce using rule 36 (statement -> while .)


state 50

    (37) statement -> if_else .

    FOR             reduce using rule 37 (statement -> if_else .)
    DO              reduce using rule 37 (statement -> if_else .)
    WHILE           reduce using rule 37 (statement -> if_else .)
    IF              reduce using rule 37 (statement -> if_else .)
    ID              reduce using rule 37 (statement -> if_else .)
    PRINT           reduce using rule 37 (statement -> if_else .)
    READ            reduce using rule 37 (statement -> if_else .)
    RETURN          reduce using rule 37 (statement -> if_else .)
    GENKEY          reduce using rule 37 (statement -> if_else .)
    ENCRYPT         reduce using rule 37 (statement -> if_else .)
    DECRYPT         reduce using rule 37 (statement -> if_else .)
    SHA_256         reduce using rule 37 (statement -> if_else .)
    RANDOM_SALT     reduce using rule 37 (statement -> if_else .)
    HMAC            reduce using rule 37 (statement -> if_else .)
    ECDSA           reduce using rule 37 (statement -> if_else .)
    ECDSAKEY        reduce using rule 37 (statement -> if_else .)
    RBRACE          reduce using rule 37 (statement -> if_else .)


state 51

    (38) statement -> invocation .

    FOR             reduce using rule 38 (statement -> invocation .)
    DO              reduce using rule 38 (statement -> invocation .)
    WHILE           reduce using rule 38 (statement -> invocation .)
    IF              reduce using rule 38 (statement -> invocation .)
    ID              reduce using rule 38 (statement -> invocation .)
    PRINT           reduce using rule 38 (statement -> invocation .)
    READ            reduce using rule 38 (statement -> invocation .)
    RETURN          reduce using rule 38 (statement -> invocation .)
    GENKEY          reduce using rule 38 (statement -> invocation .)
    ENCRYPT         reduce using rule 38 (statement -> invocation .)
    DECRYPT         reduce using rule 38 (statement -> invocation .)
    SHA_256         reduce using rule 38 (statement -> invocation .)
    RANDOM_SALT     reduce using rule 38 (statement -> invocation .)
    HMAC            reduce using rule 38 (statement -> invocation .)
    ECDSA           reduce using rule 38 (statement -> invocation .)
    ECDSAKEY        reduce using rule 38 (statement -> invocation .)
    RBRACE          reduce using rule 38 (statement -> invocation .)


state 52

    (39) statement -> if .

    FOR             reduce using rule 39 (statement -> if .)
    DO              reduce using rule 39 (statement -> if .)
    WHILE           reduce using rule 39 (statement -> if .)
    IF              reduce using rule 39 (statement -> if .)
    ID              reduce using rule 39 (statement -> if .)
    PRINT           reduce using rule 39 (statement -> if .)
    READ            reduce using rule 39 (statement -> if .)
    RETURN          reduce using rule 39 (statement -> if .)
    GENKEY          reduce using rule 39 (statement -> if .)
    ENCRYPT         reduce using rule 39 (statement -> if .)
    DECRYPT         reduce using rule 39 (statement -> if .)
    SHA_256         reduce using rule 39 (statement -> if .)
    RANDOM_SALT     reduce using rule 39 (statement -> if .)
    HMAC            reduce using rule 39 (statement -> if .)
    ECDSA           reduce using rule 39 (statement -> if .)
    ECDSAKEY        reduce using rule 39 (statement -> if .)
    RBRACE          reduce using rule 39 (statement -> if .)


state 53

    (40) statement -> print .

    FOR             reduce using rule 40 (statement -> print .)
    DO              reduce using rule 40 (statement -> print .)
    WHILE           reduce using rule 40 (statement -> print .)
    IF              reduce using rule 40 (statement -> print .)
    ID              reduce using rule 40 (statement -> print .)
    PRINT           reduce using rule 40 (statement -> print .)
    READ            reduce using rule 40 (statement -> print .)
    RETURN          reduce using rule 40 (statement -> print .)
    GENKEY          reduce using rule 40 (statement -> print .)
    ENCRYPT         reduce using rule 40 (statement -> print .)
    DECRYPT         reduce using rule 40 (statement -> print .)
    SHA_256         reduce using rule 40 (statement -> print .)
    RANDOM_SALT     reduce using rule 40 (statement -> print .)
    HMAC            reduce using rule 40 (statement -> print .)
    ECDSA           reduce using rule 40 (statement -> print .)
    ECDSAKEY        reduce using rule 40 (statement -> print .)
    RBRACE          reduce using rule 40 (statement -> print .)


state 54

    (41) statement -> read .

    FOR             reduce using rule 41 (statement -> read .)
    DO              reduce using rule 41 (statement -> read .)
    WHILE           reduce using rule 41 (statement -> read .)
    IF              reduce using rule 41 (statement -> read .)
    ID              reduce using rule 41 (statement -> read .)
    PRINT           reduce using rule 41 (statement -> read .)
    READ            reduce using rule 41 (statement -> read .)
    RETURN          reduce using rule 41 (statement -> read .)
    GENKEY          reduce using rule 41 (statement -> read .)
    ENCRYPT         reduce using rule 41 (statement -> read .)
    DECRYPT         reduce using rule 41 (statement -> read .)
    SHA_256         reduce using rule 41 (statement -> read .)
    RANDOM_SALT     reduce using rule 41 (statement -> read .)
    HMAC            reduce using rule 41 (statement -> read .)
    ECDSA           reduce using rule 41 (statement -> read .)
    ECDSAKEY        reduce using rule 41 (statement -> read .)
    RBRACE          reduce using rule 41 (statement -> read .)


state 55

    (42) statement -> return .

    FOR             reduce using rule 42 (statement -> return .)
    DO              reduce using rule 42 (statement -> return .)
    WHILE           reduce using rule 42 (statement -> return .)
    IF              reduce using rule 42 (statement -> return .)
    ID              reduce using rule 42 (statement -> return .)
    PRINT           reduce using rule 42 (statement -> return .)
    READ            reduce using rule 42 (statement -> return .)
    RETURN          reduce using rule 42 (statement -> return .)
    GENKEY          reduce using rule 42 (statement -> return .)
    ENCRYPT         reduce using rule 42 (statement -> return .)
    DECRYPT         reduce using rule 42 (statement -> return .)
    SHA_256         reduce using rule 42 (statement -> return .)
    RANDOM_SALT     reduce using rule 42 (statement -> return .)
    HMAC            reduce using rule 42 (statement -> return .)
    ECDSA           reduce using rule 42 (statement -> return .)
    ECDSAKEY        reduce using rule 42 (statement -> return .)
    RBRACE          reduce using rule 42 (statement -> return .)


state 56

    (43) special_func -> gen_key .

    FOR             reduce using rule 43 (special_func -> gen_key .)
    DO              reduce using rule 43 (special_func -> gen_key .)
    WHILE           reduce using rule 43 (special_func -> gen_key .)
    IF              reduce using rule 43 (special_func -> gen_key .)
    ID              reduce using rule 43 (special_func -> gen_key .)
    PRINT           reduce using rule 43 (special_func -> gen_key .)
    READ            reduce using rule 43 (special_func -> gen_key .)
    RETURN          reduce using rule 43 (special_func -> gen_key .)
    GENKEY          reduce using rule 43 (special_func -> gen_key .)
    ENCRYPT         reduce using rule 43 (special_func -> gen_key .)
    DECRYPT         reduce using rule 43 (special_func -> gen_key .)
    SHA_256         reduce using rule 43 (special_func -> gen_key .)
    RANDOM_SALT     reduce using rule 43 (special_func -> gen_key .)
    HMAC            reduce using rule 43 (special_func -> gen_key .)
    ECDSA           reduce using rule 43 (special_func -> gen_key .)
    ECDSAKEY        reduce using rule 43 (special_func -> gen_key .)
    RBRACE          reduce using rule 43 (special_func -> gen_key .)


state 57

    (44) special_func -> encrypt .

    FOR             reduce using rule 44 (special_func -> encrypt .)
    DO              reduce using rule 44 (special_func -> encrypt .)
    WHILE           reduce using rule 44 (special_func -> encrypt .)
    IF              reduce using rule 44 (special_func -> encrypt .)
    ID              reduce using rule 44 (special_func -> encrypt .)
    PRINT           reduce using rule 44 (special_func -> encrypt .)
    READ            reduce using rule 44 (special_func -> encrypt .)
    RETURN          reduce using rule 44 (special_func -> encrypt .)
    GENKEY          reduce using rule 44 (special_func -> encrypt .)
    ENCRYPT         reduce using rule 44 (special_func -> encrypt .)
    DECRYPT         reduce using rule 44 (special_func -> encrypt .)
    SHA_256         reduce using rule 44 (special_func -> encrypt .)
    RANDOM_SALT     reduce using rule 44 (special_func -> encrypt .)
    HMAC            reduce using rule 44 (special_func -> encrypt .)
    ECDSA           reduce using rule 44 (special_func -> encrypt .)
    ECDSAKEY        reduce using rule 44 (special_func -> encrypt .)
    RBRACE          reduce using rule 44 (special_func -> encrypt .)


state 58

    (45) special_func -> decrypt .

    FOR             reduce using rule 45 (special_func -> decrypt .)
    DO              reduce using rule 45 (special_func -> decrypt .)
    WHILE           reduce using rule 45 (special_func -> decrypt .)
    IF              reduce using rule 45 (special_func -> decrypt .)
    ID              reduce using rule 45 (special_func -> decrypt .)
    PRINT           reduce using rule 45 (special_func -> decrypt .)
    READ            reduce using rule 45 (special_func -> decrypt .)
    RETURN          reduce using rule 45 (special_func -> decrypt .)
    GENKEY          reduce using rule 45 (special_func -> decrypt .)
    ENCRYPT         reduce using rule 45 (special_func -> decrypt .)
    DECRYPT         reduce using rule 45 (special_func -> decrypt .)
    SHA_256         reduce using rule 45 (special_func -> decrypt .)
    RANDOM_SALT     reduce using rule 45 (special_func -> decrypt .)
    HMAC            reduce using rule 45 (special_func -> decrypt .)
    ECDSA           reduce using rule 45 (special_func -> decrypt .)
    ECDSAKEY        reduce using rule 45 (special_func -> decrypt .)
    RBRACE          reduce using rule 45 (special_func -> decrypt .)


state 59

    (46) special_func -> sha_256 .

    FOR             reduce using rule 46 (special_func -> sha_256 .)
    DO              reduce using rule 46 (special_func -> sha_256 .)
    WHILE           reduce using rule 46 (special_func -> sha_256 .)
    IF              reduce using rule 46 (special_func -> sha_256 .)
    ID              reduce using rule 46 (special_func -> sha_256 .)
    PRINT           reduce using rule 46 (special_func -> sha_256 .)
    READ            reduce using rule 46 (special_func -> sha_256 .)
    RETURN          reduce using rule 46 (special_func -> sha_256 .)
    GENKEY          reduce using rule 46 (special_func -> sha_256 .)
    ENCRYPT         reduce using rule 46 (special_func -> sha_256 .)
    DECRYPT         reduce using rule 46 (special_func -> sha_256 .)
    SHA_256         reduce using rule 46 (special_func -> sha_256 .)
    RANDOM_SALT     reduce using rule 46 (special_func -> sha_256 .)
    HMAC            reduce using rule 46 (special_func -> sha_256 .)
    ECDSA           reduce using rule 46 (special_func -> sha_256 .)
    ECDSAKEY        reduce using rule 46 (special_func -> sha_256 .)
    RBRACE          reduce using rule 46 (special_func -> sha_256 .)


state 60

    (47) special_func -> random_salt .

    FOR             reduce using rule 47 (special_func -> random_salt .)
    DO              reduce using rule 47 (special_func -> random_salt .)
    WHILE           reduce using rule 47 (special_func -> random_salt .)
    IF              reduce using rule 47 (special_func -> random_salt .)
    ID              reduce using rule 47 (special_func -> random_salt .)
    PRINT           reduce using rule 47 (special_func -> random_salt .)
    READ            reduce using rule 47 (special_func -> random_salt .)
    RETURN          reduce using rule 47 (special_func -> random_salt .)
    GENKEY          reduce using rule 47 (special_func -> random_salt .)
    ENCRYPT         reduce using rule 47 (special_func -> random_salt .)
    DECRYPT         reduce using rule 47 (special_func -> random_salt .)
    SHA_256         reduce using rule 47 (special_func -> random_salt .)
    RANDOM_SALT     reduce using rule 47 (special_func -> random_salt .)
    HMAC            reduce using rule 47 (special_func -> random_salt .)
    ECDSA           reduce using rule 47 (special_func -> random_salt .)
    ECDSAKEY        reduce using rule 47 (special_func -> random_salt .)
    RBRACE          reduce using rule 47 (special_func -> random_salt .)


state 61

    (48) special_func -> hmac .

    FOR             reduce using rule 48 (special_func -> hmac .)
    DO              reduce using rule 48 (special_func -> hmac .)
    WHILE           reduce using rule 48 (special_func -> hmac .)
    IF              reduce using rule 48 (special_func -> hmac .)
    ID              reduce using rule 48 (special_func -> hmac .)
    PRINT           reduce using rule 48 (special_func -> hmac .)
    READ            reduce using rule 48 (special_func -> hmac .)
    RETURN          reduce using rule 48 (special_func -> hmac .)
    GENKEY          reduce using rule 48 (special_func -> hmac .)
    ENCRYPT         reduce using rule 48 (special_func -> hmac .)
    DECRYPT         reduce using rule 48 (special_func -> hmac .)
    SHA_256         reduce using rule 48 (special_func -> hmac .)
    RANDOM_SALT     reduce using rule 48 (special_func -> hmac .)
    HMAC            reduce using rule 48 (special_func -> hmac .)
    ECDSA           reduce using rule 48 (special_func -> hmac .)
    ECDSAKEY        reduce using rule 48 (special_func -> hmac .)
    RBRACE          reduce using rule 48 (special_func -> hmac .)


state 62

    (49) special_func -> ecdsa .

    FOR             reduce using rule 49 (special_func -> ecdsa .)
    DO              reduce using rule 49 (special_func -> ecdsa .)
    WHILE           reduce using rule 49 (special_func -> ecdsa .)
    IF              reduce using rule 49 (special_func -> ecdsa .)
    ID              reduce using rule 49 (special_func -> ecdsa .)
    PRINT           reduce using rule 49 (special_func -> ecdsa .)
    READ            reduce using rule 49 (special_func -> ecdsa .)
    RETURN          reduce using rule 49 (special_func -> ecdsa .)
    GENKEY          reduce using rule 49 (special_func -> ecdsa .)
    ENCRYPT         reduce using rule 49 (special_func -> ecdsa .)
    DECRYPT         reduce using rule 49 (special_func -> ecdsa .)
    SHA_256         reduce using rule 49 (special_func -> ecdsa .)
    RANDOM_SALT     reduce using rule 49 (special_func -> ecdsa .)
    HMAC            reduce using rule 49 (special_func -> ecdsa .)
    ECDSA           reduce using rule 49 (special_func -> ecdsa .)
    ECDSAKEY        reduce using rule 49 (special_func -> ecdsa .)
    RBRACE          reduce using rule 49 (special_func -> ecdsa .)


state 63

    (50) special_func -> ecdsa_key .

    FOR             reduce using rule 50 (special_func -> ecdsa_key .)
    DO              reduce using rule 50 (special_func -> ecdsa_key .)
    WHILE           reduce using rule 50 (special_func -> ecdsa_key .)
    IF              reduce using rule 50 (special_func -> ecdsa_key .)
    ID              reduce using rule 50 (special_func -> ecdsa_key .)
    PRINT           reduce using rule 50 (special_func -> ecdsa_key .)
    READ            reduce using rule 50 (special_func -> ecdsa_key .)
    RETURN          reduce using rule 50 (special_func -> ecdsa_key .)
    GENKEY          reduce using rule 50 (special_func -> ecdsa_key .)
    ENCRYPT         reduce using rule 50 (special_func -> ecdsa_key .)
    DECRYPT         reduce using rule 50 (special_func -> ecdsa_key .)
    SHA_256         reduce using rule 50 (special_func -> ecdsa_key .)
    RANDOM_SALT     reduce using rule 50 (special_func -> ecdsa_key .)
    HMAC            reduce using rule 50 (special_func -> ecdsa_key .)
    ECDSA           reduce using rule 50 (special_func -> ecdsa_key .)
    ECDSAKEY        reduce using rule 50 (special_func -> ecdsa_key .)
    RBRACE          reduce using rule 50 (special_func -> ecdsa_key .)


state 64

    (93) assingation -> variable . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 91


state 65

    (62) for -> FOR . LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    LPAREN          shift and go to state 92


state 66

    (76) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (21) variable -> ID .
    (22) variable -> ID . LBRACK expression RBRACK
    (23) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (77) invocation_1 -> . empty
    (127) empty -> .

    ASSIGN          reduce using rule 21 (variable -> ID .)
    LBRACK          shift and go to state 86
    LPAREN          reduce using rule 127 (empty -> .)

    invocation_1                   shift and go to state 93
    empty                          shift and go to state 94

state 67

    (61) do_while -> DO . breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (68) breadcrumb -> . empty
    (127) empty -> .

    LBRACE          reduce using rule 127 (empty -> .)

    breadcrumb                     shift and go to state 95
    empty                          shift and go to state 96

state 68

    (67) while -> WHILE . breadcrumb LPAREN expression RPAREN gotof block
    (68) breadcrumb -> . empty
    (127) empty -> .

    LPAREN          reduce using rule 127 (empty -> .)

    breadcrumb                     shift and go to state 97
    empty                          shift and go to state 96

state 69

    (70) if_else -> IF . LPAREN expression RPAREN gotof block ELSE goto block
    (69) if -> IF . LPAREN expression RPAREN gotof block

    LPAREN          shift and go to state 98


state 70

    (88) print -> PRINT . LPAREN print_arguments RPAREN SEMICOLON

    LPAREN          shift and go to state 99


state 71

    (59) read -> READ . LPAREN ID RPAREN SEMICOLON

    LPAREN          shift and go to state 100


state 72

    (9) return -> RETURN . expression SEMICOLON
    (86) expression -> . t_expression
    (87) expression -> . NOT t_expression
    (94) t_expression -> . g_expression
    (95) t_expression -> . t_expression boolean_operator g_expression
    (96) g_expression -> . m_expression
    (97) g_expression -> . g_expression comparison_operator m_expression
    (98) m_expression -> . term
    (99) m_expression -> . m_expression addition_operator term
    (100) term -> . factor
    (101) term -> . term multiplication_operator factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 103
    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115
    CTES            shift and go to state 116

    expression                     shift and go to state 101
    t_expression                   shift and go to state 102
    g_expression                   shift and go to state 104
    m_expression                   shift and go to state 105
    term                           shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 108
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 73

    (56) gen_key -> GENKEY . LPAREN RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 117


state 74

    (57) encrypt -> ENCRYPT . LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 118


state 75

    (58) decrypt -> DECRYPT . LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 119


state 76

    (55) sha_256 -> SHA_256 . LPAREN ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 120


state 77

    (54) random_salt -> RANDOM_SALT . LPAREN CTEI RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 121


state 78

    (53) hmac -> HMAC . LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 122


state 79

    (52) ecdsa -> ECDSA . LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 123


state 80

    (51) ecdsa_key -> ECDSAKEY . LPAREN RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 124


state 81

    (7) function_signature -> simple_type ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    LPAREN          shift and go to state 125


state 82

    (10) function_1 -> empty .

    LPAREN          reduce using rule 10 (function_1 -> empty .)


state 83

    (8) function_signature -> VOID ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    LPAREN          shift and go to state 126


state 84

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON . close_var_declaration
    (18) close_var_declaration -> . empty
    (127) empty -> .

    VARIABLE        reduce using rule 127 (empty -> .)
    FUNCTION        reduce using rule 127 (empty -> .)
    MAIN            reduce using rule 127 (empty -> .)
    LBRACE          reduce using rule 127 (empty -> .)

    close_var_declaration          shift and go to state 127
    empty                          shift and go to state 128

state 85

    (20) variables -> variable COMMA . variables
    (19) variables -> . variable
    (20) variables -> . variable COMMA variables
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 39

    variable                       shift and go to state 38
    variables                      shift and go to state 129

state 86

    (22) variable -> ID LBRACK . expression RBRACK
    (23) variable -> ID LBRACK . expression RBRACK LBRACK expression RBRACK
    (86) expression -> . t_expression
    (87) expression -> . NOT t_expression
    (94) t_expression -> . g_expression
    (95) t_expression -> . t_expression boolean_operator g_expression
    (96) g_expression -> . m_expression
    (97) g_expression -> . g_expression comparison_operator m_expression
    (98) m_expression -> . term
    (99) m_expression -> . m_expression addition_operator term
    (100) term -> . factor
    (101) term -> . term multiplication_operator factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 103
    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115
    CTES            shift and go to state 116

    expression                     shift and go to state 130
    t_expression                   shift and go to state 102
    g_expression                   shift and go to state 104
    m_expression                   shift and go to state 105
    term                           shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 108
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 87

    (11) main -> MAIN LPAREN RPAREN main_scope . var_declarations block
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (127) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 127 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 131
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 88

    (12) main_scope -> empty .

    VARIABLE        reduce using rule 12 (main_scope -> empty .)
    LBRACE          reduce using rule 12 (main_scope -> empty .)


state 89

    (28) block -> LBRACE block2 RBRACE .

    MAIN            reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    FUNCTION        reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    WHILE           reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    END             reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    ELSE            reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    FOR             reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    DO              reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    IF              reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    ID              reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    PRINT           reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    READ            reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    RETURN          reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    GENKEY          reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    ENCRYPT         reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    DECRYPT         reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    SHA_256         reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    RANDOM_SALT     reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    HMAC            reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    ECDSA           reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    ECDSAKEY        reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    RBRACE          reduce using rule 28 (block -> LBRACE block2 RBRACE .)


state 90

    (31) block3 -> statement block2 .

    RBRACE          reduce using rule 31 (block3 -> statement block2 .)


state 91

    (93) assingation -> variable ASSIGN . expression SEMICOLON
    (86) expression -> . t_expression
    (87) expression -> . NOT t_expression
    (94) t_expression -> . g_expression
    (95) t_expression -> . t_expression boolean_operator g_expression
    (96) g_expression -> . m_expression
    (97) g_expression -> . g_expression comparison_operator m_expression
    (98) m_expression -> . term
    (99) m_expression -> . m_expression addition_operator term
    (100) term -> . factor
    (101) term -> . term multiplication_operator factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 103
    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115
    CTES            shift and go to state 116

    variable                       shift and go to state 108
    expression                     shift and go to state 132
    t_expression                   shift and go to state 102
    g_expression                   shift and go to state 104
    m_expression                   shift and go to state 105
    term                           shift and go to state 106
    factor                         shift and go to state 107
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 92

    (62) for -> FOR LPAREN . ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    ID              shift and go to state 133


state 93

    (76) invocation -> ID invocation_1 . LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    LPAREN          shift and go to state 134


state 94

    (77) invocation_1 -> empty .

    LPAREN          reduce using rule 77 (invocation_1 -> empty .)


state 95

    (61) do_while -> DO breadcrumb . block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 135

state 96

    (68) breadcrumb -> empty .

    LBRACE          reduce using rule 68 (breadcrumb -> empty .)
    LPAREN          reduce using rule 68 (breadcrumb -> empty .)


state 97

    (67) while -> WHILE breadcrumb . LPAREN expression RPAREN gotof block

    LPAREN          shift and go to state 136


state 98

    (70) if_else -> IF LPAREN . expression RPAREN gotof block ELSE goto block
    (69) if -> IF LPAREN . expression RPAREN gotof block
    (86) expression -> . t_expression
    (87) expression -> . NOT t_expression
    (94) t_expression -> . g_expression
    (95) t_expression -> . t_expression boolean_operator g_expression
    (96) g_expression -> . m_expression
    (97) g_expression -> . g_expression comparison_operator m_expression
    (98) m_expression -> . term
    (99) m_expression -> . m_expression addition_operator term
    (100) term -> . factor
    (101) term -> . term multiplication_operator factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 103
    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115
    CTES            shift and go to state 116

    expression                     shift and go to state 137
    t_expression                   shift and go to state 102
    g_expression                   shift and go to state 104
    m_expression                   shift and go to state 105
    term                           shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 108
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 99

    (88) print -> PRINT LPAREN . print_arguments RPAREN SEMICOLON
    (89) print_arguments -> . print_argument
    (90) print_arguments -> . print_arguments COMMA print_argument
    (91) print_argument -> . CTES
    (92) print_argument -> . expression
    (86) expression -> . t_expression
    (87) expression -> . NOT t_expression
    (94) t_expression -> . g_expression
    (95) t_expression -> . t_expression boolean_operator g_expression
    (96) g_expression -> . m_expression
    (97) g_expression -> . g_expression comparison_operator m_expression
    (98) m_expression -> . term
    (99) m_expression -> . m_expression addition_operator term
    (100) term -> . factor
    (101) term -> . term multiplication_operator factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    CTES            shift and go to state 140
    NOT             shift and go to state 103
    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115

    print_arguments                shift and go to state 138
    print_argument                 shift and go to state 139
    expression                     shift and go to state 141
    t_expression                   shift and go to state 102
    g_expression                   shift and go to state 104
    m_expression                   shift and go to state 105
    term                           shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 108
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 100

    (59) read -> READ LPAREN . ID RPAREN SEMICOLON

    ID              shift and go to state 142


state 101

    (9) return -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 143


state 102

    (86) expression -> t_expression .
    (95) t_expression -> t_expression . boolean_operator g_expression
    (113) boolean_operator -> . AND
    (114) boolean_operator -> . OR

    SEMICOLON       reduce using rule 86 (expression -> t_expression .)
    RBRACK          reduce using rule 86 (expression -> t_expression .)
    RPAREN          reduce using rule 86 (expression -> t_expression .)
    COMMA           reduce using rule 86 (expression -> t_expression .)
    FROM            reduce using rule 86 (expression -> t_expression .)
    AND             shift and go to state 145
    OR              shift and go to state 146

    boolean_operator               shift and go to state 144

state 103

    (87) expression -> NOT . t_expression
    (94) t_expression -> . g_expression
    (95) t_expression -> . t_expression boolean_operator g_expression
    (96) g_expression -> . m_expression
    (97) g_expression -> . g_expression comparison_operator m_expression
    (98) m_expression -> . term
    (99) m_expression -> . m_expression addition_operator term
    (100) term -> . factor
    (101) term -> . term multiplication_operator factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115
    CTES            shift and go to state 116

    t_expression                   shift and go to state 147
    g_expression                   shift and go to state 104
    m_expression                   shift and go to state 105
    term                           shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 108
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 104

    (94) t_expression -> g_expression .
    (97) g_expression -> g_expression . comparison_operator m_expression
    (105) comparison_operator -> . LESS
    (106) comparison_operator -> . GREATER
    (107) comparison_operator -> . EQUALS
    (108) comparison_operator -> . NOTEQUAL
    (109) comparison_operator -> . GREATERTHAN
    (110) comparison_operator -> . LESSTHAN

    AND             reduce using rule 94 (t_expression -> g_expression .)
    OR              reduce using rule 94 (t_expression -> g_expression .)
    SEMICOLON       reduce using rule 94 (t_expression -> g_expression .)
    RBRACK          reduce using rule 94 (t_expression -> g_expression .)
    RPAREN          reduce using rule 94 (t_expression -> g_expression .)
    COMMA           reduce using rule 94 (t_expression -> g_expression .)
    FROM            reduce using rule 94 (t_expression -> g_expression .)
    LESS            shift and go to state 149
    GREATER         shift and go to state 150
    EQUALS          shift and go to state 151
    NOTEQUAL        shift and go to state 152
    GREATERTHAN     shift and go to state 153
    LESSTHAN        shift and go to state 154

    comparison_operator            shift and go to state 148

state 105

    (96) g_expression -> m_expression .
    (99) m_expression -> m_expression . addition_operator term
    (111) addition_operator -> . PLUS
    (112) addition_operator -> . MINUS

    LESS            reduce using rule 96 (g_expression -> m_expression .)
    GREATER         reduce using rule 96 (g_expression -> m_expression .)
    EQUALS          reduce using rule 96 (g_expression -> m_expression .)
    NOTEQUAL        reduce using rule 96 (g_expression -> m_expression .)
    GREATERTHAN     reduce using rule 96 (g_expression -> m_expression .)
    LESSTHAN        reduce using rule 96 (g_expression -> m_expression .)
    AND             reduce using rule 96 (g_expression -> m_expression .)
    OR              reduce using rule 96 (g_expression -> m_expression .)
    SEMICOLON       reduce using rule 96 (g_expression -> m_expression .)
    RBRACK          reduce using rule 96 (g_expression -> m_expression .)
    RPAREN          reduce using rule 96 (g_expression -> m_expression .)
    COMMA           reduce using rule 96 (g_expression -> m_expression .)
    FROM            reduce using rule 96 (g_expression -> m_expression .)
    PLUS            shift and go to state 156
    MINUS           shift and go to state 157

    addition_operator              shift and go to state 155

state 106

    (98) m_expression -> term .
    (101) term -> term . multiplication_operator factor
    (115) multiplication_operator -> . TIMES
    (116) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 98 (m_expression -> term .)
    MINUS           reduce using rule 98 (m_expression -> term .)
    LESS            reduce using rule 98 (m_expression -> term .)
    GREATER         reduce using rule 98 (m_expression -> term .)
    EQUALS          reduce using rule 98 (m_expression -> term .)
    NOTEQUAL        reduce using rule 98 (m_expression -> term .)
    GREATERTHAN     reduce using rule 98 (m_expression -> term .)
    LESSTHAN        reduce using rule 98 (m_expression -> term .)
    AND             reduce using rule 98 (m_expression -> term .)
    OR              reduce using rule 98 (m_expression -> term .)
    SEMICOLON       reduce using rule 98 (m_expression -> term .)
    RBRACK          reduce using rule 98 (m_expression -> term .)
    RPAREN          reduce using rule 98 (m_expression -> term .)
    COMMA           reduce using rule 98 (m_expression -> term .)
    FROM            reduce using rule 98 (m_expression -> term .)
    TIMES           shift and go to state 159
    DIVIDE          shift and go to state 160

    multiplication_operator        shift and go to state 158

state 107

    (100) term -> factor .

    TIMES           reduce using rule 100 (term -> factor .)
    DIVIDE          reduce using rule 100 (term -> factor .)
    PLUS            reduce using rule 100 (term -> factor .)
    MINUS           reduce using rule 100 (term -> factor .)
    LESS            reduce using rule 100 (term -> factor .)
    GREATER         reduce using rule 100 (term -> factor .)
    EQUALS          reduce using rule 100 (term -> factor .)
    NOTEQUAL        reduce using rule 100 (term -> factor .)
    GREATERTHAN     reduce using rule 100 (term -> factor .)
    LESSTHAN        reduce using rule 100 (term -> factor .)
    AND             reduce using rule 100 (term -> factor .)
    OR              reduce using rule 100 (term -> factor .)
    SEMICOLON       reduce using rule 100 (term -> factor .)
    RBRACK          reduce using rule 100 (term -> factor .)
    RPAREN          reduce using rule 100 (term -> factor .)
    COMMA           reduce using rule 100 (term -> factor .)
    FROM            reduce using rule 100 (term -> factor .)


state 108

    (102) factor -> variable .

    TIMES           reduce using rule 102 (factor -> variable .)
    DIVIDE          reduce using rule 102 (factor -> variable .)
    PLUS            reduce using rule 102 (factor -> variable .)
    MINUS           reduce using rule 102 (factor -> variable .)
    LESS            reduce using rule 102 (factor -> variable .)
    GREATER         reduce using rule 102 (factor -> variable .)
    EQUALS          reduce using rule 102 (factor -> variable .)
    NOTEQUAL        reduce using rule 102 (factor -> variable .)
    GREATERTHAN     reduce using rule 102 (factor -> variable .)
    LESSTHAN        reduce using rule 102 (factor -> variable .)
    AND             reduce using rule 102 (factor -> variable .)
    OR              reduce using rule 102 (factor -> variable .)
    SEMICOLON       reduce using rule 102 (factor -> variable .)
    RBRACK          reduce using rule 102 (factor -> variable .)
    RPAREN          reduce using rule 102 (factor -> variable .)
    COMMA           reduce using rule 102 (factor -> variable .)
    FROM            reduce using rule 102 (factor -> variable .)


state 109

    (103) factor -> cte .

    TIMES           reduce using rule 103 (factor -> cte .)
    DIVIDE          reduce using rule 103 (factor -> cte .)
    PLUS            reduce using rule 103 (factor -> cte .)
    MINUS           reduce using rule 103 (factor -> cte .)
    LESS            reduce using rule 103 (factor -> cte .)
    GREATER         reduce using rule 103 (factor -> cte .)
    EQUALS          reduce using rule 103 (factor -> cte .)
    NOTEQUAL        reduce using rule 103 (factor -> cte .)
    GREATERTHAN     reduce using rule 103 (factor -> cte .)
    LESSTHAN        reduce using rule 103 (factor -> cte .)
    AND             reduce using rule 103 (factor -> cte .)
    OR              reduce using rule 103 (factor -> cte .)
    SEMICOLON       reduce using rule 103 (factor -> cte .)
    RBRACK          reduce using rule 103 (factor -> cte .)
    RPAREN          reduce using rule 103 (factor -> cte .)
    COMMA           reduce using rule 103 (factor -> cte .)
    FROM            reduce using rule 103 (factor -> cte .)


state 110

    (104) factor -> invocation .

    TIMES           reduce using rule 104 (factor -> invocation .)
    DIVIDE          reduce using rule 104 (factor -> invocation .)
    PLUS            reduce using rule 104 (factor -> invocation .)
    MINUS           reduce using rule 104 (factor -> invocation .)
    LESS            reduce using rule 104 (factor -> invocation .)
    GREATER         reduce using rule 104 (factor -> invocation .)
    EQUALS          reduce using rule 104 (factor -> invocation .)
    NOTEQUAL        reduce using rule 104 (factor -> invocation .)
    GREATERTHAN     reduce using rule 104 (factor -> invocation .)
    LESSTHAN        reduce using rule 104 (factor -> invocation .)
    AND             reduce using rule 104 (factor -> invocation .)
    OR              reduce using rule 104 (factor -> invocation .)
    SEMICOLON       reduce using rule 104 (factor -> invocation .)
    RBRACK          reduce using rule 104 (factor -> invocation .)
    RPAREN          reduce using rule 104 (factor -> invocation .)
    COMMA           reduce using rule 104 (factor -> invocation .)
    FROM            reduce using rule 104 (factor -> invocation .)


state 111

    (21) variable -> ID .
    (22) variable -> ID . LBRACK expression RBRACK
    (23) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (76) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (77) invocation_1 -> . empty
    (127) empty -> .

    TIMES           reduce using rule 21 (variable -> ID .)
    DIVIDE          reduce using rule 21 (variable -> ID .)
    PLUS            reduce using rule 21 (variable -> ID .)
    MINUS           reduce using rule 21 (variable -> ID .)
    LESS            reduce using rule 21 (variable -> ID .)
    GREATER         reduce using rule 21 (variable -> ID .)
    EQUALS          reduce using rule 21 (variable -> ID .)
    NOTEQUAL        reduce using rule 21 (variable -> ID .)
    GREATERTHAN     reduce using rule 21 (variable -> ID .)
    LESSTHAN        reduce using rule 21 (variable -> ID .)
    AND             reduce using rule 21 (variable -> ID .)
    OR              reduce using rule 21 (variable -> ID .)
    SEMICOLON       reduce using rule 21 (variable -> ID .)
    RBRACK          reduce using rule 21 (variable -> ID .)
    RPAREN          reduce using rule 21 (variable -> ID .)
    COMMA           reduce using rule 21 (variable -> ID .)
    FROM            reduce using rule 21 (variable -> ID .)
    LBRACK          shift and go to state 86
    LPAREN          reduce using rule 127 (empty -> .)

    invocation_1                   shift and go to state 93
    empty                          shift and go to state 94

state 112

    (122) cte -> CTEI .

    TIMES           reduce using rule 122 (cte -> CTEI .)
    DIVIDE          reduce using rule 122 (cte -> CTEI .)
    PLUS            reduce using rule 122 (cte -> CTEI .)
    MINUS           reduce using rule 122 (cte -> CTEI .)
    LESS            reduce using rule 122 (cte -> CTEI .)
    GREATER         reduce using rule 122 (cte -> CTEI .)
    EQUALS          reduce using rule 122 (cte -> CTEI .)
    NOTEQUAL        reduce using rule 122 (cte -> CTEI .)
    GREATERTHAN     reduce using rule 122 (cte -> CTEI .)
    LESSTHAN        reduce using rule 122 (cte -> CTEI .)
    AND             reduce using rule 122 (cte -> CTEI .)
    OR              reduce using rule 122 (cte -> CTEI .)
    SEMICOLON       reduce using rule 122 (cte -> CTEI .)
    RBRACK          reduce using rule 122 (cte -> CTEI .)
    RPAREN          reduce using rule 122 (cte -> CTEI .)
    COMMA           reduce using rule 122 (cte -> CTEI .)
    FROM            reduce using rule 122 (cte -> CTEI .)


state 113

    (123) cte -> CTEF .

    TIMES           reduce using rule 123 (cte -> CTEF .)
    DIVIDE          reduce using rule 123 (cte -> CTEF .)
    PLUS            reduce using rule 123 (cte -> CTEF .)
    MINUS           reduce using rule 123 (cte -> CTEF .)
    LESS            reduce using rule 123 (cte -> CTEF .)
    GREATER         reduce using rule 123 (cte -> CTEF .)
    EQUALS          reduce using rule 123 (cte -> CTEF .)
    NOTEQUAL        reduce using rule 123 (cte -> CTEF .)
    GREATERTHAN     reduce using rule 123 (cte -> CTEF .)
    LESSTHAN        reduce using rule 123 (cte -> CTEF .)
    AND             reduce using rule 123 (cte -> CTEF .)
    OR              reduce using rule 123 (cte -> CTEF .)
    SEMICOLON       reduce using rule 123 (cte -> CTEF .)
    RBRACK          reduce using rule 123 (cte -> CTEF .)
    RPAREN          reduce using rule 123 (cte -> CTEF .)
    COMMA           reduce using rule 123 (cte -> CTEF .)
    FROM            reduce using rule 123 (cte -> CTEF .)


state 114

    (124) cte -> CTEC .

    TIMES           reduce using rule 124 (cte -> CTEC .)
    DIVIDE          reduce using rule 124 (cte -> CTEC .)
    PLUS            reduce using rule 124 (cte -> CTEC .)
    MINUS           reduce using rule 124 (cte -> CTEC .)
    LESS            reduce using rule 124 (cte -> CTEC .)
    GREATER         reduce using rule 124 (cte -> CTEC .)
    EQUALS          reduce using rule 124 (cte -> CTEC .)
    NOTEQUAL        reduce using rule 124 (cte -> CTEC .)
    GREATERTHAN     reduce using rule 124 (cte -> CTEC .)
    LESSTHAN        reduce using rule 124 (cte -> CTEC .)
    AND             reduce using rule 124 (cte -> CTEC .)
    OR              reduce using rule 124 (cte -> CTEC .)
    SEMICOLON       reduce using rule 124 (cte -> CTEC .)
    RBRACK          reduce using rule 124 (cte -> CTEC .)
    RPAREN          reduce using rule 124 (cte -> CTEC .)
    COMMA           reduce using rule 124 (cte -> CTEC .)
    FROM            reduce using rule 124 (cte -> CTEC .)


state 115

    (125) cte -> CTEB .

    TIMES           reduce using rule 125 (cte -> CTEB .)
    DIVIDE          reduce using rule 125 (cte -> CTEB .)
    PLUS            reduce using rule 125 (cte -> CTEB .)
    MINUS           reduce using rule 125 (cte -> CTEB .)
    LESS            reduce using rule 125 (cte -> CTEB .)
    GREATER         reduce using rule 125 (cte -> CTEB .)
    EQUALS          reduce using rule 125 (cte -> CTEB .)
    NOTEQUAL        reduce using rule 125 (cte -> CTEB .)
    GREATERTHAN     reduce using rule 125 (cte -> CTEB .)
    LESSTHAN        reduce using rule 125 (cte -> CTEB .)
    AND             reduce using rule 125 (cte -> CTEB .)
    OR              reduce using rule 125 (cte -> CTEB .)
    SEMICOLON       reduce using rule 125 (cte -> CTEB .)
    RBRACK          reduce using rule 125 (cte -> CTEB .)
    RPAREN          reduce using rule 125 (cte -> CTEB .)
    COMMA           reduce using rule 125 (cte -> CTEB .)
    FROM            reduce using rule 125 (cte -> CTEB .)


state 116

    (126) cte -> CTES .

    TIMES           reduce using rule 126 (cte -> CTES .)
    DIVIDE          reduce using rule 126 (cte -> CTES .)
    PLUS            reduce using rule 126 (cte -> CTES .)
    MINUS           reduce using rule 126 (cte -> CTES .)
    LESS            reduce using rule 126 (cte -> CTES .)
    GREATER         reduce using rule 126 (cte -> CTES .)
    EQUALS          reduce using rule 126 (cte -> CTES .)
    NOTEQUAL        reduce using rule 126 (cte -> CTES .)
    GREATERTHAN     reduce using rule 126 (cte -> CTES .)
    LESSTHAN        reduce using rule 126 (cte -> CTES .)
    AND             reduce using rule 126 (cte -> CTES .)
    OR              reduce using rule 126 (cte -> CTES .)
    SEMICOLON       reduce using rule 126 (cte -> CTES .)
    RBRACK          reduce using rule 126 (cte -> CTES .)
    RPAREN          reduce using rule 126 (cte -> CTES .)
    COMMA           reduce using rule 126 (cte -> CTES .)
    FROM            reduce using rule 126 (cte -> CTES .)


state 117

    (56) gen_key -> GENKEY LPAREN . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 161


state 118

    (57) encrypt -> ENCRYPT LPAREN . ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 162


state 119

    (58) decrypt -> DECRYPT LPAREN . ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 163


state 120

    (55) sha_256 -> SHA_256 LPAREN . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 164


state 121

    (54) random_salt -> RANDOM_SALT LPAREN . CTEI RPAREN SPECIAL ID SEMICOLON

    CTEI            shift and go to state 165


state 122

    (53) hmac -> HMAC LPAREN . ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 166


state 123

    (52) ecdsa -> ECDSA LPAREN . ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 167


state 124

    (51) ecdsa_key -> ECDSAKEY LPAREN . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 168


state 125

    (7) function_signature -> simple_type ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (17) open_var_declaration -> . empty
    (127) empty -> .

    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    CHAR            reduce using rule 127 (empty -> .)
    BOOLEAN         reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)

    open_var_declaration           shift and go to state 169
    empty                          shift and go to state 18

state 126

    (8) function_signature -> VOID ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (17) open_var_declaration -> . empty
    (127) empty -> .

    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    CHAR            reduce using rule 127 (empty -> .)
    BOOLEAN         reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)

    open_var_declaration           shift and go to state 170
    empty                          shift and go to state 18

state 127

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .

    VARIABLE        reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    FUNCTION        reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    MAIN            reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    LBRACE          reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)


state 128

    (18) close_var_declaration -> empty .

    VARIABLE        reduce using rule 18 (close_var_declaration -> empty .)
    FUNCTION        reduce using rule 18 (close_var_declaration -> empty .)
    MAIN            reduce using rule 18 (close_var_declaration -> empty .)
    LBRACE          reduce using rule 18 (close_var_declaration -> empty .)
    RPAREN          reduce using rule 18 (close_var_declaration -> empty .)


state 129

    (20) variables -> variable COMMA variables .

    SEMICOLON       reduce using rule 20 (variables -> variable COMMA variables .)


state 130

    (22) variable -> ID LBRACK expression . RBRACK
    (23) variable -> ID LBRACK expression . RBRACK LBRACK expression RBRACK

    RBRACK          shift and go to state 171


state 131

    (11) main -> MAIN LPAREN RPAREN main_scope var_declarations . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 172

state 132

    (93) assingation -> variable ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 173


state 133

    (62) for -> FOR LPAREN ID . for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (63) for_1 -> . empty
    (127) empty -> .

    ASSIGN          reduce using rule 127 (empty -> .)

    for_1                          shift and go to state 174
    empty                          shift and go to state 175

state 134

    (76) invocation -> ID invocation_1 LPAREN . invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (78) invocation_2 -> . empty
    (127) empty -> .

    NOT             reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    CTEI            reduce using rule 127 (empty -> .)
    CTEF            reduce using rule 127 (empty -> .)
    CTEC            reduce using rule 127 (empty -> .)
    CTEB            reduce using rule 127 (empty -> .)
    CTES            reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)

    invocation_2                   shift and go to state 176
    empty                          shift and go to state 177

state 135

    (61) do_while -> DO breadcrumb block . WHILE LPAREN expression RPAREN gotot SEMICOLON

    WHILE           shift and go to state 178


state 136

    (67) while -> WHILE breadcrumb LPAREN . expression RPAREN gotof block
    (86) expression -> . t_expression
    (87) expression -> . NOT t_expression
    (94) t_expression -> . g_expression
    (95) t_expression -> . t_expression boolean_operator g_expression
    (96) g_expression -> . m_expression
    (97) g_expression -> . g_expression comparison_operator m_expression
    (98) m_expression -> . term
    (99) m_expression -> . m_expression addition_operator term
    (100) term -> . factor
    (101) term -> . term multiplication_operator factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 103
    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115
    CTES            shift and go to state 116

    expression                     shift and go to state 179
    t_expression                   shift and go to state 102
    g_expression                   shift and go to state 104
    m_expression                   shift and go to state 105
    term                           shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 108
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 137

    (70) if_else -> IF LPAREN expression . RPAREN gotof block ELSE goto block
    (69) if -> IF LPAREN expression . RPAREN gotof block

    RPAREN          shift and go to state 180


state 138

    (88) print -> PRINT LPAREN print_arguments . RPAREN SEMICOLON
    (90) print_arguments -> print_arguments . COMMA print_argument

    RPAREN          shift and go to state 181
    COMMA           shift and go to state 182


state 139

    (89) print_arguments -> print_argument .

    RPAREN          reduce using rule 89 (print_arguments -> print_argument .)
    COMMA           reduce using rule 89 (print_arguments -> print_argument .)


state 140

    (91) print_argument -> CTES .
    (126) cte -> CTES .

  ! reduce/reduce conflict for RPAREN resolved using rule 91 (print_argument -> CTES .)
  ! reduce/reduce conflict for COMMA resolved using rule 91 (print_argument -> CTES .)
    RPAREN          reduce using rule 91 (print_argument -> CTES .)
    COMMA           reduce using rule 91 (print_argument -> CTES .)
    TIMES           reduce using rule 126 (cte -> CTES .)
    DIVIDE          reduce using rule 126 (cte -> CTES .)
    PLUS            reduce using rule 126 (cte -> CTES .)
    MINUS           reduce using rule 126 (cte -> CTES .)
    LESS            reduce using rule 126 (cte -> CTES .)
    GREATER         reduce using rule 126 (cte -> CTES .)
    EQUALS          reduce using rule 126 (cte -> CTES .)
    NOTEQUAL        reduce using rule 126 (cte -> CTES .)
    GREATERTHAN     reduce using rule 126 (cte -> CTES .)
    LESSTHAN        reduce using rule 126 (cte -> CTES .)
    AND             reduce using rule 126 (cte -> CTES .)
    OR              reduce using rule 126 (cte -> CTES .)

  ! RPAREN          [ reduce using rule 126 (cte -> CTES .) ]
  ! COMMA           [ reduce using rule 126 (cte -> CTES .) ]


state 141

    (92) print_argument -> expression .

    RPAREN          reduce using rule 92 (print_argument -> expression .)
    COMMA           reduce using rule 92 (print_argument -> expression .)


state 142

    (59) read -> READ LPAREN ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 183


state 143

    (9) return -> RETURN expression SEMICOLON .

    FOR             reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    DO              reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    IF              reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    ID              reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    READ            reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    GENKEY          reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    ENCRYPT         reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    DECRYPT         reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    SHA_256         reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    RANDOM_SALT     reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    HMAC            reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    ECDSA           reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    ECDSAKEY        reduce using rule 9 (return -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 9 (return -> RETURN expression SEMICOLON .)


state 144

    (95) t_expression -> t_expression boolean_operator . g_expression
    (96) g_expression -> . m_expression
    (97) g_expression -> . g_expression comparison_operator m_expression
    (98) m_expression -> . term
    (99) m_expression -> . m_expression addition_operator term
    (100) term -> . factor
    (101) term -> . term multiplication_operator factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115
    CTES            shift and go to state 116

    g_expression                   shift and go to state 184
    m_expression                   shift and go to state 105
    term                           shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 108
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 145

    (113) boolean_operator -> AND .

    ID              reduce using rule 113 (boolean_operator -> AND .)
    CTEI            reduce using rule 113 (boolean_operator -> AND .)
    CTEF            reduce using rule 113 (boolean_operator -> AND .)
    CTEC            reduce using rule 113 (boolean_operator -> AND .)
    CTEB            reduce using rule 113 (boolean_operator -> AND .)
    CTES            reduce using rule 113 (boolean_operator -> AND .)


state 146

    (114) boolean_operator -> OR .

    ID              reduce using rule 114 (boolean_operator -> OR .)
    CTEI            reduce using rule 114 (boolean_operator -> OR .)
    CTEF            reduce using rule 114 (boolean_operator -> OR .)
    CTEC            reduce using rule 114 (boolean_operator -> OR .)
    CTEB            reduce using rule 114 (boolean_operator -> OR .)
    CTES            reduce using rule 114 (boolean_operator -> OR .)


state 147

    (87) expression -> NOT t_expression .
    (95) t_expression -> t_expression . boolean_operator g_expression
    (113) boolean_operator -> . AND
    (114) boolean_operator -> . OR

    SEMICOLON       reduce using rule 87 (expression -> NOT t_expression .)
    RBRACK          reduce using rule 87 (expression -> NOT t_expression .)
    RPAREN          reduce using rule 87 (expression -> NOT t_expression .)
    COMMA           reduce using rule 87 (expression -> NOT t_expression .)
    FROM            reduce using rule 87 (expression -> NOT t_expression .)
    AND             shift and go to state 145
    OR              shift and go to state 146

    boolean_operator               shift and go to state 144

state 148

    (97) g_expression -> g_expression comparison_operator . m_expression
    (98) m_expression -> . term
    (99) m_expression -> . m_expression addition_operator term
    (100) term -> . factor
    (101) term -> . term multiplication_operator factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115
    CTES            shift and go to state 116

    m_expression                   shift and go to state 185
    term                           shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 108
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 149

    (105) comparison_operator -> LESS .

    ID              reduce using rule 105 (comparison_operator -> LESS .)
    CTEI            reduce using rule 105 (comparison_operator -> LESS .)
    CTEF            reduce using rule 105 (comparison_operator -> LESS .)
    CTEC            reduce using rule 105 (comparison_operator -> LESS .)
    CTEB            reduce using rule 105 (comparison_operator -> LESS .)
    CTES            reduce using rule 105 (comparison_operator -> LESS .)


state 150

    (106) comparison_operator -> GREATER .

    ID              reduce using rule 106 (comparison_operator -> GREATER .)
    CTEI            reduce using rule 106 (comparison_operator -> GREATER .)
    CTEF            reduce using rule 106 (comparison_operator -> GREATER .)
    CTEC            reduce using rule 106 (comparison_operator -> GREATER .)
    CTEB            reduce using rule 106 (comparison_operator -> GREATER .)
    CTES            reduce using rule 106 (comparison_operator -> GREATER .)


state 151

    (107) comparison_operator -> EQUALS .

    ID              reduce using rule 107 (comparison_operator -> EQUALS .)
    CTEI            reduce using rule 107 (comparison_operator -> EQUALS .)
    CTEF            reduce using rule 107 (comparison_operator -> EQUALS .)
    CTEC            reduce using rule 107 (comparison_operator -> EQUALS .)
    CTEB            reduce using rule 107 (comparison_operator -> EQUALS .)
    CTES            reduce using rule 107 (comparison_operator -> EQUALS .)


state 152

    (108) comparison_operator -> NOTEQUAL .

    ID              reduce using rule 108 (comparison_operator -> NOTEQUAL .)
    CTEI            reduce using rule 108 (comparison_operator -> NOTEQUAL .)
    CTEF            reduce using rule 108 (comparison_operator -> NOTEQUAL .)
    CTEC            reduce using rule 108 (comparison_operator -> NOTEQUAL .)
    CTEB            reduce using rule 108 (comparison_operator -> NOTEQUAL .)
    CTES            reduce using rule 108 (comparison_operator -> NOTEQUAL .)


state 153

    (109) comparison_operator -> GREATERTHAN .

    ID              reduce using rule 109 (comparison_operator -> GREATERTHAN .)
    CTEI            reduce using rule 109 (comparison_operator -> GREATERTHAN .)
    CTEF            reduce using rule 109 (comparison_operator -> GREATERTHAN .)
    CTEC            reduce using rule 109 (comparison_operator -> GREATERTHAN .)
    CTEB            reduce using rule 109 (comparison_operator -> GREATERTHAN .)
    CTES            reduce using rule 109 (comparison_operator -> GREATERTHAN .)


state 154

    (110) comparison_operator -> LESSTHAN .

    ID              reduce using rule 110 (comparison_operator -> LESSTHAN .)
    CTEI            reduce using rule 110 (comparison_operator -> LESSTHAN .)
    CTEF            reduce using rule 110 (comparison_operator -> LESSTHAN .)
    CTEC            reduce using rule 110 (comparison_operator -> LESSTHAN .)
    CTEB            reduce using rule 110 (comparison_operator -> LESSTHAN .)
    CTES            reduce using rule 110 (comparison_operator -> LESSTHAN .)


state 155

    (99) m_expression -> m_expression addition_operator . term
    (100) term -> . factor
    (101) term -> . term multiplication_operator factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115
    CTES            shift and go to state 116

    term                           shift and go to state 186
    factor                         shift and go to state 107
    variable                       shift and go to state 108
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 156

    (111) addition_operator -> PLUS .

    ID              reduce using rule 111 (addition_operator -> PLUS .)
    CTEI            reduce using rule 111 (addition_operator -> PLUS .)
    CTEF            reduce using rule 111 (addition_operator -> PLUS .)
    CTEC            reduce using rule 111 (addition_operator -> PLUS .)
    CTEB            reduce using rule 111 (addition_operator -> PLUS .)
    CTES            reduce using rule 111 (addition_operator -> PLUS .)


state 157

    (112) addition_operator -> MINUS .

    ID              reduce using rule 112 (addition_operator -> MINUS .)
    CTEI            reduce using rule 112 (addition_operator -> MINUS .)
    CTEF            reduce using rule 112 (addition_operator -> MINUS .)
    CTEC            reduce using rule 112 (addition_operator -> MINUS .)
    CTEB            reduce using rule 112 (addition_operator -> MINUS .)
    CTES            reduce using rule 112 (addition_operator -> MINUS .)


state 158

    (101) term -> term multiplication_operator . factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115
    CTES            shift and go to state 116

    factor                         shift and go to state 187
    variable                       shift and go to state 108
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 159

    (115) multiplication_operator -> TIMES .

    ID              reduce using rule 115 (multiplication_operator -> TIMES .)
    CTEI            reduce using rule 115 (multiplication_operator -> TIMES .)
    CTEF            reduce using rule 115 (multiplication_operator -> TIMES .)
    CTEC            reduce using rule 115 (multiplication_operator -> TIMES .)
    CTEB            reduce using rule 115 (multiplication_operator -> TIMES .)
    CTES            reduce using rule 115 (multiplication_operator -> TIMES .)


state 160

    (116) multiplication_operator -> DIVIDE .

    ID              reduce using rule 116 (multiplication_operator -> DIVIDE .)
    CTEI            reduce using rule 116 (multiplication_operator -> DIVIDE .)
    CTEF            reduce using rule 116 (multiplication_operator -> DIVIDE .)
    CTEC            reduce using rule 116 (multiplication_operator -> DIVIDE .)
    CTEB            reduce using rule 116 (multiplication_operator -> DIVIDE .)
    CTES            reduce using rule 116 (multiplication_operator -> DIVIDE .)


state 161

    (56) gen_key -> GENKEY LPAREN RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 188


state 162

    (57) encrypt -> ENCRYPT LPAREN ID . COMMA ID RPAREN SPECIAL ID SEMICOLON

    COMMA           shift and go to state 189


state 163

    (58) decrypt -> DECRYPT LPAREN ID . COMMA ID RPAREN SPECIAL ID SEMICOLON

    COMMA           shift and go to state 190


state 164

    (55) sha_256 -> SHA_256 LPAREN ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 191


state 165

    (54) random_salt -> RANDOM_SALT LPAREN CTEI . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 192


state 166

    (53) hmac -> HMAC LPAREN ID . COMMA ID RPAREN SPECIAL ID SEMICOLON

    COMMA           shift and go to state 193


state 167

    (52) ecdsa -> ECDSA LPAREN ID . COMMA ID RPAREN SPECIAL ID SEMICOLON

    COMMA           shift and go to state 194


state 168

    (51) ecdsa_key -> ECDSAKEY LPAREN RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 195


state 169

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations
    (24) parameters -> . parameters COMMA parameter
    (25) parameters -> . parameter
    (26) parameters -> . empty
    (27) parameter -> . simple_type ID
    (127) empty -> .
    (117) simple_type -> . INT
    (118) simple_type -> . FLOAT
    (119) simple_type -> . CHAR
    (120) simple_type -> . BOOLEAN
    (121) simple_type -> . STRING

    COMMA           reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    simple_type                    shift and go to state 196
    parameters                     shift and go to state 197
    parameter                      shift and go to state 198
    empty                          shift and go to state 199

state 170

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations
    (24) parameters -> . parameters COMMA parameter
    (25) parameters -> . parameter
    (26) parameters -> . empty
    (27) parameter -> . simple_type ID
    (127) empty -> .
    (117) simple_type -> . INT
    (118) simple_type -> . FLOAT
    (119) simple_type -> . CHAR
    (120) simple_type -> . BOOLEAN
    (121) simple_type -> . STRING

    COMMA           reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    parameters                     shift and go to state 200
    parameter                      shift and go to state 198
    empty                          shift and go to state 199
    simple_type                    shift and go to state 196

state 171

    (22) variable -> ID LBRACK expression RBRACK .
    (23) variable -> ID LBRACK expression RBRACK . LBRACK expression RBRACK

    COMMA           reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    TIMES           reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    PLUS            reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    MINUS           reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    LESS            reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    GREATER         reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    EQUALS          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    AND             reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    OR              reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    RBRACK          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    RPAREN          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    FROM            reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    LBRACK          shift and go to state 201


state 172

    (11) main -> MAIN LPAREN RPAREN main_scope var_declarations block .

    END             reduce using rule 11 (main -> MAIN LPAREN RPAREN main_scope var_declarations block .)


state 173

    (93) assingation -> variable ASSIGN expression SEMICOLON .

    FOR             reduce using rule 93 (assingation -> variable ASSIGN expression SEMICOLON .)
    DO              reduce using rule 93 (assingation -> variable ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 93 (assingation -> variable ASSIGN expression SEMICOLON .)
    IF              reduce using rule 93 (assingation -> variable ASSIGN expression SEMICOLON .)
    ID              reduce using rule 93 (assingation -> variable ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 93 (assingation -> variable ASSIGN expression SEMICOLON .)
    READ            reduce using rule 93 (assingation -> variable ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 93 (assingation -> variable ASSIGN expression SEMICOLON .)
    GENKEY          reduce using rule 93 (assingation -> variable ASSIGN expression SEMICOLON .)
    ENCRYPT         reduce using rule 93 (assingation -> variable ASSIGN expression SEMICOLON .)
    DECRYPT         reduce using rule 93 (assingation -> variable ASSIGN expression SEMICOLON .)
    SHA_256         reduce using rule 93 (assingation -> variable ASSIGN expression SEMICOLON .)
    RANDOM_SALT     reduce using rule 93 (assingation -> variable ASSIGN expression SEMICOLON .)
    HMAC            reduce using rule 93 (assingation -> variable ASSIGN expression SEMICOLON .)
    ECDSA           reduce using rule 93 (assingation -> variable ASSIGN expression SEMICOLON .)
    ECDSAKEY        reduce using rule 93 (assingation -> variable ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 93 (assingation -> variable ASSIGN expression SEMICOLON .)


state 174

    (62) for -> FOR LPAREN ID for_1 . ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    ASSIGN          shift and go to state 202


state 175

    (63) for_1 -> empty .

    ASSIGN          reduce using rule 63 (for_1 -> empty .)


state 176

    (76) invocation -> ID invocation_1 LPAREN invocation_2 . expressions RPAREN invocation_5 SEMICOLON invocation_6
    (83) expressions -> . expressions COMMA invocation_4 expression invocation_3
    (84) expressions -> . expression invocation_3
    (85) expressions -> . empty
    (86) expression -> . t_expression
    (87) expression -> . NOT t_expression
    (127) empty -> .
    (94) t_expression -> . g_expression
    (95) t_expression -> . t_expression boolean_operator g_expression
    (96) g_expression -> . m_expression
    (97) g_expression -> . g_expression comparison_operator m_expression
    (98) m_expression -> . term
    (99) m_expression -> . m_expression addition_operator term
    (100) term -> . factor
    (101) term -> . term multiplication_operator factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 103
    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115
    CTES            shift and go to state 116

    expressions                    shift and go to state 203
    expression                     shift and go to state 204
    empty                          shift and go to state 205
    t_expression                   shift and go to state 102
    g_expression                   shift and go to state 104
    m_expression                   shift and go to state 105
    term                           shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 108
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 177

    (78) invocation_2 -> empty .

    NOT             reduce using rule 78 (invocation_2 -> empty .)
    ID              reduce using rule 78 (invocation_2 -> empty .)
    CTEI            reduce using rule 78 (invocation_2 -> empty .)
    CTEF            reduce using rule 78 (invocation_2 -> empty .)
    CTEC            reduce using rule 78 (invocation_2 -> empty .)
    CTEB            reduce using rule 78 (invocation_2 -> empty .)
    CTES            reduce using rule 78 (invocation_2 -> empty .)
    RPAREN          reduce using rule 78 (invocation_2 -> empty .)
    COMMA           reduce using rule 78 (invocation_2 -> empty .)


state 178

    (61) do_while -> DO breadcrumb block WHILE . LPAREN expression RPAREN gotot SEMICOLON

    LPAREN          shift and go to state 206


state 179

    (67) while -> WHILE breadcrumb LPAREN expression . RPAREN gotof block

    RPAREN          shift and go to state 207


state 180

    (70) if_else -> IF LPAREN expression RPAREN . gotof block ELSE goto block
    (69) if -> IF LPAREN expression RPAREN . gotof block
    (73) gotof -> . empty
    (127) empty -> .

    LBRACE          reduce using rule 127 (empty -> .)

    gotof                          shift and go to state 208
    empty                          shift and go to state 209

state 181

    (88) print -> PRINT LPAREN print_arguments RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 210


state 182

    (90) print_arguments -> print_arguments COMMA . print_argument
    (91) print_argument -> . CTES
    (92) print_argument -> . expression
    (86) expression -> . t_expression
    (87) expression -> . NOT t_expression
    (94) t_expression -> . g_expression
    (95) t_expression -> . t_expression boolean_operator g_expression
    (96) g_expression -> . m_expression
    (97) g_expression -> . g_expression comparison_operator m_expression
    (98) m_expression -> . term
    (99) m_expression -> . m_expression addition_operator term
    (100) term -> . factor
    (101) term -> . term multiplication_operator factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    CTES            shift and go to state 140
    NOT             shift and go to state 103
    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115

    print_argument                 shift and go to state 211
    expression                     shift and go to state 141
    t_expression                   shift and go to state 102
    g_expression                   shift and go to state 104
    m_expression                   shift and go to state 105
    term                           shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 108
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 183

    (59) read -> READ LPAREN ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 212


state 184

    (95) t_expression -> t_expression boolean_operator g_expression .
    (97) g_expression -> g_expression . comparison_operator m_expression
    (105) comparison_operator -> . LESS
    (106) comparison_operator -> . GREATER
    (107) comparison_operator -> . EQUALS
    (108) comparison_operator -> . NOTEQUAL
    (109) comparison_operator -> . GREATERTHAN
    (110) comparison_operator -> . LESSTHAN

    AND             reduce using rule 95 (t_expression -> t_expression boolean_operator g_expression .)
    OR              reduce using rule 95 (t_expression -> t_expression boolean_operator g_expression .)
    SEMICOLON       reduce using rule 95 (t_expression -> t_expression boolean_operator g_expression .)
    RBRACK          reduce using rule 95 (t_expression -> t_expression boolean_operator g_expression .)
    RPAREN          reduce using rule 95 (t_expression -> t_expression boolean_operator g_expression .)
    COMMA           reduce using rule 95 (t_expression -> t_expression boolean_operator g_expression .)
    FROM            reduce using rule 95 (t_expression -> t_expression boolean_operator g_expression .)
    LESS            shift and go to state 149
    GREATER         shift and go to state 150
    EQUALS          shift and go to state 151
    NOTEQUAL        shift and go to state 152
    GREATERTHAN     shift and go to state 153
    LESSTHAN        shift and go to state 154

    comparison_operator            shift and go to state 148

state 185

    (97) g_expression -> g_expression comparison_operator m_expression .
    (99) m_expression -> m_expression . addition_operator term
    (111) addition_operator -> . PLUS
    (112) addition_operator -> . MINUS

    LESS            reduce using rule 97 (g_expression -> g_expression comparison_operator m_expression .)
    GREATER         reduce using rule 97 (g_expression -> g_expression comparison_operator m_expression .)
    EQUALS          reduce using rule 97 (g_expression -> g_expression comparison_operator m_expression .)
    NOTEQUAL        reduce using rule 97 (g_expression -> g_expression comparison_operator m_expression .)
    GREATERTHAN     reduce using rule 97 (g_expression -> g_expression comparison_operator m_expression .)
    LESSTHAN        reduce using rule 97 (g_expression -> g_expression comparison_operator m_expression .)
    AND             reduce using rule 97 (g_expression -> g_expression comparison_operator m_expression .)
    OR              reduce using rule 97 (g_expression -> g_expression comparison_operator m_expression .)
    SEMICOLON       reduce using rule 97 (g_expression -> g_expression comparison_operator m_expression .)
    RBRACK          reduce using rule 97 (g_expression -> g_expression comparison_operator m_expression .)
    RPAREN          reduce using rule 97 (g_expression -> g_expression comparison_operator m_expression .)
    COMMA           reduce using rule 97 (g_expression -> g_expression comparison_operator m_expression .)
    FROM            reduce using rule 97 (g_expression -> g_expression comparison_operator m_expression .)
    PLUS            shift and go to state 156
    MINUS           shift and go to state 157

    addition_operator              shift and go to state 155

state 186

    (99) m_expression -> m_expression addition_operator term .
    (101) term -> term . multiplication_operator factor
    (115) multiplication_operator -> . TIMES
    (116) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 99 (m_expression -> m_expression addition_operator term .)
    MINUS           reduce using rule 99 (m_expression -> m_expression addition_operator term .)
    LESS            reduce using rule 99 (m_expression -> m_expression addition_operator term .)
    GREATER         reduce using rule 99 (m_expression -> m_expression addition_operator term .)
    EQUALS          reduce using rule 99 (m_expression -> m_expression addition_operator term .)
    NOTEQUAL        reduce using rule 99 (m_expression -> m_expression addition_operator term .)
    GREATERTHAN     reduce using rule 99 (m_expression -> m_expression addition_operator term .)
    LESSTHAN        reduce using rule 99 (m_expression -> m_expression addition_operator term .)
    AND             reduce using rule 99 (m_expression -> m_expression addition_operator term .)
    OR              reduce using rule 99 (m_expression -> m_expression addition_operator term .)
    SEMICOLON       reduce using rule 99 (m_expression -> m_expression addition_operator term .)
    RBRACK          reduce using rule 99 (m_expression -> m_expression addition_operator term .)
    RPAREN          reduce using rule 99 (m_expression -> m_expression addition_operator term .)
    COMMA           reduce using rule 99 (m_expression -> m_expression addition_operator term .)
    FROM            reduce using rule 99 (m_expression -> m_expression addition_operator term .)
    TIMES           shift and go to state 159
    DIVIDE          shift and go to state 160

    multiplication_operator        shift and go to state 158

state 187

    (101) term -> term multiplication_operator factor .

    TIMES           reduce using rule 101 (term -> term multiplication_operator factor .)
    DIVIDE          reduce using rule 101 (term -> term multiplication_operator factor .)
    PLUS            reduce using rule 101 (term -> term multiplication_operator factor .)
    MINUS           reduce using rule 101 (term -> term multiplication_operator factor .)
    LESS            reduce using rule 101 (term -> term multiplication_operator factor .)
    GREATER         reduce using rule 101 (term -> term multiplication_operator factor .)
    EQUALS          reduce using rule 101 (term -> term multiplication_operator factor .)
    NOTEQUAL        reduce using rule 101 (term -> term multiplication_operator factor .)
    GREATERTHAN     reduce using rule 101 (term -> term multiplication_operator factor .)
    LESSTHAN        reduce using rule 101 (term -> term multiplication_operator factor .)
    AND             reduce using rule 101 (term -> term multiplication_operator factor .)
    OR              reduce using rule 101 (term -> term multiplication_operator factor .)
    SEMICOLON       reduce using rule 101 (term -> term multiplication_operator factor .)
    RBRACK          reduce using rule 101 (term -> term multiplication_operator factor .)
    RPAREN          reduce using rule 101 (term -> term multiplication_operator factor .)
    COMMA           reduce using rule 101 (term -> term multiplication_operator factor .)
    FROM            reduce using rule 101 (term -> term multiplication_operator factor .)


state 188

    (56) gen_key -> GENKEY LPAREN RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 213


state 189

    (57) encrypt -> ENCRYPT LPAREN ID COMMA . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 214


state 190

    (58) decrypt -> DECRYPT LPAREN ID COMMA . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 215


state 191

    (55) sha_256 -> SHA_256 LPAREN ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 216


state 192

    (54) random_salt -> RANDOM_SALT LPAREN CTEI RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 217


state 193

    (53) hmac -> HMAC LPAREN ID COMMA . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 218


state 194

    (52) ecdsa -> ECDSA LPAREN ID COMMA . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 219


state 195

    (51) ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 220


state 196

    (27) parameter -> simple_type . ID

    ID              shift and go to state 221


state 197

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations
    (24) parameters -> parameters . COMMA parameter
    (18) close_var_declaration -> . empty
    (127) empty -> .

    COMMA           shift and go to state 223
    RPAREN          reduce using rule 127 (empty -> .)

    close_var_declaration          shift and go to state 222
    empty                          shift and go to state 128

state 198

    (25) parameters -> parameter .

    COMMA           reduce using rule 25 (parameters -> parameter .)
    RPAREN          reduce using rule 25 (parameters -> parameter .)


state 199

    (26) parameters -> empty .

    COMMA           reduce using rule 26 (parameters -> empty .)
    RPAREN          reduce using rule 26 (parameters -> empty .)


state 200

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations
    (24) parameters -> parameters . COMMA parameter
    (18) close_var_declaration -> . empty
    (127) empty -> .

    COMMA           shift and go to state 223
    RPAREN          reduce using rule 127 (empty -> .)

    close_var_declaration          shift and go to state 224
    empty                          shift and go to state 128

state 201

    (23) variable -> ID LBRACK expression RBRACK LBRACK . expression RBRACK
    (86) expression -> . t_expression
    (87) expression -> . NOT t_expression
    (94) t_expression -> . g_expression
    (95) t_expression -> . t_expression boolean_operator g_expression
    (96) g_expression -> . m_expression
    (97) g_expression -> . g_expression comparison_operator m_expression
    (98) m_expression -> . term
    (99) m_expression -> . m_expression addition_operator term
    (100) term -> . factor
    (101) term -> . term multiplication_operator factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 103
    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115
    CTES            shift and go to state 116

    expression                     shift and go to state 225
    t_expression                   shift and go to state 102
    g_expression                   shift and go to state 104
    m_expression                   shift and go to state 105
    term                           shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 108
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 202

    (62) for -> FOR LPAREN ID for_1 ASSIGN . expression for_2 FROM expression RPAREN for_3 DO block for_4
    (86) expression -> . t_expression
    (87) expression -> . NOT t_expression
    (94) t_expression -> . g_expression
    (95) t_expression -> . t_expression boolean_operator g_expression
    (96) g_expression -> . m_expression
    (97) g_expression -> . g_expression comparison_operator m_expression
    (98) m_expression -> . term
    (99) m_expression -> . m_expression addition_operator term
    (100) term -> . factor
    (101) term -> . term multiplication_operator factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 103
    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115
    CTES            shift and go to state 116

    expression                     shift and go to state 226
    t_expression                   shift and go to state 102
    g_expression                   shift and go to state 104
    m_expression                   shift and go to state 105
    term                           shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 108
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 203

    (76) invocation -> ID invocation_1 LPAREN invocation_2 expressions . RPAREN invocation_5 SEMICOLON invocation_6
    (83) expressions -> expressions . COMMA invocation_4 expression invocation_3

    RPAREN          shift and go to state 227
    COMMA           shift and go to state 228


state 204

    (84) expressions -> expression . invocation_3
    (79) invocation_3 -> . empty
    (127) empty -> .

    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)

    invocation_3                   shift and go to state 229
    empty                          shift and go to state 230

state 205

    (85) expressions -> empty .

    RPAREN          reduce using rule 85 (expressions -> empty .)
    COMMA           reduce using rule 85 (expressions -> empty .)


state 206

    (61) do_while -> DO breadcrumb block WHILE LPAREN . expression RPAREN gotot SEMICOLON
    (86) expression -> . t_expression
    (87) expression -> . NOT t_expression
    (94) t_expression -> . g_expression
    (95) t_expression -> . t_expression boolean_operator g_expression
    (96) g_expression -> . m_expression
    (97) g_expression -> . g_expression comparison_operator m_expression
    (98) m_expression -> . term
    (99) m_expression -> . m_expression addition_operator term
    (100) term -> . factor
    (101) term -> . term multiplication_operator factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 103
    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115
    CTES            shift and go to state 116

    expression                     shift and go to state 231
    t_expression                   shift and go to state 102
    g_expression                   shift and go to state 104
    m_expression                   shift and go to state 105
    term                           shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 108
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 207

    (67) while -> WHILE breadcrumb LPAREN expression RPAREN . gotof block
    (73) gotof -> . empty
    (127) empty -> .

    LBRACE          reduce using rule 127 (empty -> .)

    gotof                          shift and go to state 232
    empty                          shift and go to state 209

state 208

    (70) if_else -> IF LPAREN expression RPAREN gotof . block ELSE goto block
    (69) if -> IF LPAREN expression RPAREN gotof . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 233

state 209

    (73) gotof -> empty .

    LBRACE          reduce using rule 73 (gotof -> empty .)


state 210

    (88) print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .

    FOR             reduce using rule 88 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    DO              reduce using rule 88 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    WHILE           reduce using rule 88 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    IF              reduce using rule 88 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ID              reduce using rule 88 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    PRINT           reduce using rule 88 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    READ            reduce using rule 88 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    RETURN          reduce using rule 88 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    GENKEY          reduce using rule 88 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ENCRYPT         reduce using rule 88 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    DECRYPT         reduce using rule 88 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    SHA_256         reduce using rule 88 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    RANDOM_SALT     reduce using rule 88 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    HMAC            reduce using rule 88 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ECDSA           reduce using rule 88 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ECDSAKEY        reduce using rule 88 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    RBRACE          reduce using rule 88 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)


state 211

    (90) print_arguments -> print_arguments COMMA print_argument .

    RPAREN          reduce using rule 90 (print_arguments -> print_arguments COMMA print_argument .)
    COMMA           reduce using rule 90 (print_arguments -> print_arguments COMMA print_argument .)


state 212

    (59) read -> READ LPAREN ID RPAREN SEMICOLON .

    FOR             reduce using rule 59 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    DO              reduce using rule 59 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 59 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    IF              reduce using rule 59 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    ID              reduce using rule 59 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    PRINT           reduce using rule 59 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    READ            reduce using rule 59 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    RETURN          reduce using rule 59 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    GENKEY          reduce using rule 59 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    ENCRYPT         reduce using rule 59 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    DECRYPT         reduce using rule 59 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    SHA_256         reduce using rule 59 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    RANDOM_SALT     reduce using rule 59 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    HMAC            reduce using rule 59 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    ECDSA           reduce using rule 59 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    ECDSAKEY        reduce using rule 59 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    RBRACE          reduce using rule 59 (read -> READ LPAREN ID RPAREN SEMICOLON .)


state 213

    (56) gen_key -> GENKEY LPAREN RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 234


state 214

    (57) encrypt -> ENCRYPT LPAREN ID COMMA ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 235


state 215

    (58) decrypt -> DECRYPT LPAREN ID COMMA ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 236


state 216

    (55) sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 237


state 217

    (54) random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 238


state 218

    (53) hmac -> HMAC LPAREN ID COMMA ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 239


state 219

    (52) ecdsa -> ECDSA LPAREN ID COMMA ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 240


state 220

    (51) ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 241


state 221

    (27) parameter -> simple_type ID .

    COMMA           reduce using rule 27 (parameter -> simple_type ID .)
    RPAREN          reduce using rule 27 (parameter -> simple_type ID .)


state 222

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations

    RPAREN          shift and go to state 242


state 223

    (24) parameters -> parameters COMMA . parameter
    (27) parameter -> . simple_type ID
    (117) simple_type -> . INT
    (118) simple_type -> . FLOAT
    (119) simple_type -> . CHAR
    (120) simple_type -> . BOOLEAN
    (121) simple_type -> . STRING

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    parameter                      shift and go to state 243
    simple_type                    shift and go to state 196

state 224

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations

    RPAREN          shift and go to state 244


state 225

    (23) variable -> ID LBRACK expression RBRACK LBRACK expression . RBRACK

    RBRACK          shift and go to state 245


state 226

    (62) for -> FOR LPAREN ID for_1 ASSIGN expression . for_2 FROM expression RPAREN for_3 DO block for_4
    (64) for_2 -> . empty
    (127) empty -> .

    FROM            reduce using rule 127 (empty -> .)

    for_2                          shift and go to state 246
    empty                          shift and go to state 247

state 227

    (76) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN . invocation_5 SEMICOLON invocation_6
    (81) invocation_5 -> . empty
    (127) empty -> .

    SEMICOLON       reduce using rule 127 (empty -> .)

    invocation_5                   shift and go to state 248
    empty                          shift and go to state 249

state 228

    (83) expressions -> expressions COMMA . invocation_4 expression invocation_3
    (80) invocation_4 -> . empty
    (127) empty -> .

    NOT             reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    CTEI            reduce using rule 127 (empty -> .)
    CTEF            reduce using rule 127 (empty -> .)
    CTEC            reduce using rule 127 (empty -> .)
    CTEB            reduce using rule 127 (empty -> .)
    CTES            reduce using rule 127 (empty -> .)

    invocation_4                   shift and go to state 250
    empty                          shift and go to state 251

state 229

    (84) expressions -> expression invocation_3 .

    RPAREN          reduce using rule 84 (expressions -> expression invocation_3 .)
    COMMA           reduce using rule 84 (expressions -> expression invocation_3 .)


state 230

    (79) invocation_3 -> empty .

    RPAREN          reduce using rule 79 (invocation_3 -> empty .)
    COMMA           reduce using rule 79 (invocation_3 -> empty .)


state 231

    (61) do_while -> DO breadcrumb block WHILE LPAREN expression . RPAREN gotot SEMICOLON

    RPAREN          shift and go to state 252


state 232

    (67) while -> WHILE breadcrumb LPAREN expression RPAREN gotof . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 253

state 233

    (70) if_else -> IF LPAREN expression RPAREN gotof block . ELSE goto block
    (69) if -> IF LPAREN expression RPAREN gotof block .

    ELSE            shift and go to state 254
    FOR             reduce using rule 69 (if -> IF LPAREN expression RPAREN gotof block .)
    DO              reduce using rule 69 (if -> IF LPAREN expression RPAREN gotof block .)
    WHILE           reduce using rule 69 (if -> IF LPAREN expression RPAREN gotof block .)
    IF              reduce using rule 69 (if -> IF LPAREN expression RPAREN gotof block .)
    ID              reduce using rule 69 (if -> IF LPAREN expression RPAREN gotof block .)
    PRINT           reduce using rule 69 (if -> IF LPAREN expression RPAREN gotof block .)
    READ            reduce using rule 69 (if -> IF LPAREN expression RPAREN gotof block .)
    RETURN          reduce using rule 69 (if -> IF LPAREN expression RPAREN gotof block .)
    GENKEY          reduce using rule 69 (if -> IF LPAREN expression RPAREN gotof block .)
    ENCRYPT         reduce using rule 69 (if -> IF LPAREN expression RPAREN gotof block .)
    DECRYPT         reduce using rule 69 (if -> IF LPAREN expression RPAREN gotof block .)
    SHA_256         reduce using rule 69 (if -> IF LPAREN expression RPAREN gotof block .)
    RANDOM_SALT     reduce using rule 69 (if -> IF LPAREN expression RPAREN gotof block .)
    HMAC            reduce using rule 69 (if -> IF LPAREN expression RPAREN gotof block .)
    ECDSA           reduce using rule 69 (if -> IF LPAREN expression RPAREN gotof block .)
    ECDSAKEY        reduce using rule 69 (if -> IF LPAREN expression RPAREN gotof block .)
    RBRACE          reduce using rule 69 (if -> IF LPAREN expression RPAREN gotof block .)


state 234

    (56) gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 56 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 56 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 56 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 56 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 56 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 56 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 56 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    RETURN          reduce using rule 56 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 56 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 56 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 56 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 56 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 56 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 56 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ECDSA           reduce using rule 56 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ECDSAKEY        reduce using rule 56 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 56 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)


state 235

    (57) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 255


state 236

    (58) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 256


state 237

    (55) sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 257


state 238

    (54) random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 258


state 239

    (53) hmac -> HMAC LPAREN ID COMMA ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 259


state 240

    (52) ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 260


state 241

    (51) ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 51 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 51 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 51 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 51 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 51 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 51 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 51 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    RETURN          reduce using rule 51 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 51 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 51 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 51 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 51 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 51 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 51 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ECDSA           reduce using rule 51 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ECDSAKEY        reduce using rule 51 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 51 (ecdsa_key -> ECDSAKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)


state 242

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (127) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 127 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 261
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 243

    (24) parameters -> parameters COMMA parameter .

    COMMA           reduce using rule 24 (parameters -> parameters COMMA parameter .)
    RPAREN          reduce using rule 24 (parameters -> parameters COMMA parameter .)


state 244

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (127) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 127 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 262
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 245

    (23) variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .

    COMMA           reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    TIMES           reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    PLUS            reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    MINUS           reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESS            reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATER         reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    EQUALS          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    AND             reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    OR              reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RBRACK          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RPAREN          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    FROM            reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)


state 246

    (62) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 . FROM expression RPAREN for_3 DO block for_4

    FROM            shift and go to state 263


state 247

    (64) for_2 -> empty .

    FROM            reduce using rule 64 (for_2 -> empty .)


state 248

    (76) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 . SEMICOLON invocation_6

    SEMICOLON       shift and go to state 264


state 249

    (81) invocation_5 -> empty .

    SEMICOLON       reduce using rule 81 (invocation_5 -> empty .)


state 250

    (83) expressions -> expressions COMMA invocation_4 . expression invocation_3
    (86) expression -> . t_expression
    (87) expression -> . NOT t_expression
    (94) t_expression -> . g_expression
    (95) t_expression -> . t_expression boolean_operator g_expression
    (96) g_expression -> . m_expression
    (97) g_expression -> . g_expression comparison_operator m_expression
    (98) m_expression -> . term
    (99) m_expression -> . m_expression addition_operator term
    (100) term -> . factor
    (101) term -> . term multiplication_operator factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 103
    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115
    CTES            shift and go to state 116

    expression                     shift and go to state 265
    t_expression                   shift and go to state 102
    g_expression                   shift and go to state 104
    m_expression                   shift and go to state 105
    term                           shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 108
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 251

    (80) invocation_4 -> empty .

    NOT             reduce using rule 80 (invocation_4 -> empty .)
    ID              reduce using rule 80 (invocation_4 -> empty .)
    CTEI            reduce using rule 80 (invocation_4 -> empty .)
    CTEF            reduce using rule 80 (invocation_4 -> empty .)
    CTEC            reduce using rule 80 (invocation_4 -> empty .)
    CTEB            reduce using rule 80 (invocation_4 -> empty .)
    CTES            reduce using rule 80 (invocation_4 -> empty .)


state 252

    (61) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN . gotot SEMICOLON
    (71) gotot -> . empty
    (127) empty -> .

    SEMICOLON       reduce using rule 127 (empty -> .)

    gotot                          shift and go to state 266
    empty                          shift and go to state 267

state 253

    (67) while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .

    FOR             reduce using rule 67 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    DO              reduce using rule 67 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    WHILE           reduce using rule 67 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    IF              reduce using rule 67 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    ID              reduce using rule 67 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    PRINT           reduce using rule 67 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    READ            reduce using rule 67 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    RETURN          reduce using rule 67 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    GENKEY          reduce using rule 67 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    ENCRYPT         reduce using rule 67 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    DECRYPT         reduce using rule 67 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    SHA_256         reduce using rule 67 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    RANDOM_SALT     reduce using rule 67 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    HMAC            reduce using rule 67 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    ECDSA           reduce using rule 67 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    ECDSAKEY        reduce using rule 67 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    RBRACE          reduce using rule 67 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)


state 254

    (70) if_else -> IF LPAREN expression RPAREN gotof block ELSE . goto block
    (72) goto -> . empty
    (127) empty -> .

    LBRACE          reduce using rule 127 (empty -> .)

    goto                           shift and go to state 268
    empty                          shift and go to state 269

state 255

    (57) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 270


state 256

    (58) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 271


state 257

    (55) sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 55 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 55 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 55 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 55 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 55 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 55 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 55 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    RETURN          reduce using rule 55 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 55 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 55 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 55 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 55 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 55 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 55 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSA           reduce using rule 55 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSAKEY        reduce using rule 55 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 55 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)


state 258

    (54) random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 54 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 54 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 54 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 54 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 54 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 54 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 54 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    RETURN          reduce using rule 54 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 54 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 54 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 54 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 54 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 54 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 54 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    ECDSA           reduce using rule 54 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    ECDSAKEY        reduce using rule 54 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 54 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)


state 259

    (53) hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 272


state 260

    (52) ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 273


state 261

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .

    LBRACE          reduce using rule 7 (function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .)


state 262

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .

    LBRACE          reduce using rule 8 (function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .)


state 263

    (62) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM . expression RPAREN for_3 DO block for_4
    (86) expression -> . t_expression
    (87) expression -> . NOT t_expression
    (94) t_expression -> . g_expression
    (95) t_expression -> . t_expression boolean_operator g_expression
    (96) g_expression -> . m_expression
    (97) g_expression -> . g_expression comparison_operator m_expression
    (98) m_expression -> . term
    (99) m_expression -> . m_expression addition_operator term
    (100) term -> . factor
    (101) term -> . term multiplication_operator factor
    (102) factor -> . variable
    (103) factor -> . cte
    (104) factor -> . invocation
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (122) cte -> . CTEI
    (123) cte -> . CTEF
    (124) cte -> . CTEC
    (125) cte -> . CTEB
    (126) cte -> . CTES
    (76) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 103
    ID              shift and go to state 111
    CTEI            shift and go to state 112
    CTEF            shift and go to state 113
    CTEC            shift and go to state 114
    CTEB            shift and go to state 115
    CTES            shift and go to state 116

    expression                     shift and go to state 274
    t_expression                   shift and go to state 102
    g_expression                   shift and go to state 104
    m_expression                   shift and go to state 105
    term                           shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 108
    cte                            shift and go to state 109
    invocation                     shift and go to state 110

state 264

    (76) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON . invocation_6
    (82) invocation_6 -> . empty
    (127) empty -> .

    FOR             reduce using rule 127 (empty -> .)
    DO              reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    PRINT           reduce using rule 127 (empty -> .)
    READ            reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    GENKEY          reduce using rule 127 (empty -> .)
    ENCRYPT         reduce using rule 127 (empty -> .)
    DECRYPT         reduce using rule 127 (empty -> .)
    SHA_256         reduce using rule 127 (empty -> .)
    RANDOM_SALT     reduce using rule 127 (empty -> .)
    HMAC            reduce using rule 127 (empty -> .)
    ECDSA           reduce using rule 127 (empty -> .)
    ECDSAKEY        reduce using rule 127 (empty -> .)
    RBRACE          reduce using rule 127 (empty -> .)
    TIMES           reduce using rule 127 (empty -> .)
    DIVIDE          reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    LESS            reduce using rule 127 (empty -> .)
    GREATER         reduce using rule 127 (empty -> .)
    EQUALS          reduce using rule 127 (empty -> .)
    NOTEQUAL        reduce using rule 127 (empty -> .)
    GREATERTHAN     reduce using rule 127 (empty -> .)
    LESSTHAN        reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    RBRACK          reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    FROM            reduce using rule 127 (empty -> .)

    invocation_6                   shift and go to state 275
    empty                          shift and go to state 276

state 265

    (83) expressions -> expressions COMMA invocation_4 expression . invocation_3
    (79) invocation_3 -> . empty
    (127) empty -> .

    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)

    invocation_3                   shift and go to state 277
    empty                          shift and go to state 230

state 266

    (61) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot . SEMICOLON

    SEMICOLON       shift and go to state 278


state 267

    (71) gotot -> empty .

    SEMICOLON       reduce using rule 71 (gotot -> empty .)


state 268

    (70) if_else -> IF LPAREN expression RPAREN gotof block ELSE goto . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 279

state 269

    (72) goto -> empty .

    LBRACE          reduce using rule 72 (goto -> empty .)


state 270

    (57) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 280


state 271

    (58) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 281


state 272

    (53) hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 282


state 273

    (52) ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 283


state 274

    (62) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression . RPAREN for_3 DO block for_4

    RPAREN          shift and go to state 284


state 275

    (76) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .

    FOR             reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DO              reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    WHILE           reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    IF              reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ID              reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PRINT           reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    READ            reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RETURN          reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GENKEY          reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ENCRYPT         reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DECRYPT         reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    SHA_256         reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RANDOM_SALT     reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    HMAC            reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ECDSA           reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ECDSAKEY        reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACE          reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    TIMES           reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DIVIDE          reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PLUS            reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    MINUS           reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESS            reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATER         reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    EQUALS          reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    NOTEQUAL        reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATERTHAN     reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESSTHAN        reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    AND             reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    OR              reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    SEMICOLON       reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACK          reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RPAREN          reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    COMMA           reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    FROM            reduce using rule 76 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)


state 276

    (82) invocation_6 -> empty .

    FOR             reduce using rule 82 (invocation_6 -> empty .)
    DO              reduce using rule 82 (invocation_6 -> empty .)
    WHILE           reduce using rule 82 (invocation_6 -> empty .)
    IF              reduce using rule 82 (invocation_6 -> empty .)
    ID              reduce using rule 82 (invocation_6 -> empty .)
    PRINT           reduce using rule 82 (invocation_6 -> empty .)
    READ            reduce using rule 82 (invocation_6 -> empty .)
    RETURN          reduce using rule 82 (invocation_6 -> empty .)
    GENKEY          reduce using rule 82 (invocation_6 -> empty .)
    ENCRYPT         reduce using rule 82 (invocation_6 -> empty .)
    DECRYPT         reduce using rule 82 (invocation_6 -> empty .)
    SHA_256         reduce using rule 82 (invocation_6 -> empty .)
    RANDOM_SALT     reduce using rule 82 (invocation_6 -> empty .)
    HMAC            reduce using rule 82 (invocation_6 -> empty .)
    ECDSA           reduce using rule 82 (invocation_6 -> empty .)
    ECDSAKEY        reduce using rule 82 (invocation_6 -> empty .)
    RBRACE          reduce using rule 82 (invocation_6 -> empty .)
    TIMES           reduce using rule 82 (invocation_6 -> empty .)
    DIVIDE          reduce using rule 82 (invocation_6 -> empty .)
    PLUS            reduce using rule 82 (invocation_6 -> empty .)
    MINUS           reduce using rule 82 (invocation_6 -> empty .)
    LESS            reduce using rule 82 (invocation_6 -> empty .)
    GREATER         reduce using rule 82 (invocation_6 -> empty .)
    EQUALS          reduce using rule 82 (invocation_6 -> empty .)
    NOTEQUAL        reduce using rule 82 (invocation_6 -> empty .)
    GREATERTHAN     reduce using rule 82 (invocation_6 -> empty .)
    LESSTHAN        reduce using rule 82 (invocation_6 -> empty .)
    AND             reduce using rule 82 (invocation_6 -> empty .)
    OR              reduce using rule 82 (invocation_6 -> empty .)
    SEMICOLON       reduce using rule 82 (invocation_6 -> empty .)
    RBRACK          reduce using rule 82 (invocation_6 -> empty .)
    RPAREN          reduce using rule 82 (invocation_6 -> empty .)
    COMMA           reduce using rule 82 (invocation_6 -> empty .)
    FROM            reduce using rule 82 (invocation_6 -> empty .)


state 277

    (83) expressions -> expressions COMMA invocation_4 expression invocation_3 .

    RPAREN          reduce using rule 83 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)
    COMMA           reduce using rule 83 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)


state 278

    (61) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .

    FOR             reduce using rule 61 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    DO              reduce using rule 61 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    WHILE           reduce using rule 61 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    IF              reduce using rule 61 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ID              reduce using rule 61 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    PRINT           reduce using rule 61 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    READ            reduce using rule 61 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    RETURN          reduce using rule 61 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    GENKEY          reduce using rule 61 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ENCRYPT         reduce using rule 61 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    DECRYPT         reduce using rule 61 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    SHA_256         reduce using rule 61 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    RANDOM_SALT     reduce using rule 61 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    HMAC            reduce using rule 61 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ECDSA           reduce using rule 61 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ECDSAKEY        reduce using rule 61 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    RBRACE          reduce using rule 61 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)


state 279

    (70) if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .

    FOR             reduce using rule 70 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    DO              reduce using rule 70 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    WHILE           reduce using rule 70 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    IF              reduce using rule 70 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    ID              reduce using rule 70 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    PRINT           reduce using rule 70 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    READ            reduce using rule 70 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    RETURN          reduce using rule 70 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    GENKEY          reduce using rule 70 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    ENCRYPT         reduce using rule 70 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    DECRYPT         reduce using rule 70 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    SHA_256         reduce using rule 70 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    RANDOM_SALT     reduce using rule 70 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    HMAC            reduce using rule 70 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    ECDSA           reduce using rule 70 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    ECDSAKEY        reduce using rule 70 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    RBRACE          reduce using rule 70 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)


state 280

    (57) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 57 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 57 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 57 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 57 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 57 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 57 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 57 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RETURN          reduce using rule 57 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 57 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 57 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 57 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 57 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 57 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 57 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSA           reduce using rule 57 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSAKEY        reduce using rule 57 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 57 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)


state 281

    (58) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 58 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 58 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 58 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 58 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 58 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 58 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 58 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RETURN          reduce using rule 58 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 58 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 58 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 58 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 58 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 58 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 58 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSA           reduce using rule 58 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSAKEY        reduce using rule 58 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 58 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)


state 282

    (53) hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 53 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 53 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 53 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 53 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 53 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 53 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 53 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RETURN          reduce using rule 53 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 53 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 53 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 53 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 53 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 53 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 53 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSA           reduce using rule 53 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSAKEY        reduce using rule 53 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 53 (hmac -> HMAC LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)


state 283

    (52) ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 52 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 52 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 52 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 52 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 52 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 52 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 52 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RETURN          reduce using rule 52 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 52 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 52 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 52 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 52 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 52 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    HMAC            reduce using rule 52 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSA           reduce using rule 52 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ECDSAKEY        reduce using rule 52 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 52 (ecdsa -> ECDSA LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)


state 284

    (62) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN . for_3 DO block for_4
    (65) for_3 -> . empty
    (127) empty -> .

    DO              reduce using rule 127 (empty -> .)

    for_3                          shift and go to state 285
    empty                          shift and go to state 286

state 285

    (62) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 . DO block for_4

    DO              shift and go to state 287


state 286

    (65) for_3 -> empty .

    DO              reduce using rule 65 (for_3 -> empty .)


state 287

    (62) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO . block for_4
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 288

state 288

    (62) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block . for_4
    (66) for_4 -> . empty
    (127) empty -> .

    FOR             reduce using rule 127 (empty -> .)
    DO              reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    PRINT           reduce using rule 127 (empty -> .)
    READ            reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    GENKEY          reduce using rule 127 (empty -> .)
    ENCRYPT         reduce using rule 127 (empty -> .)
    DECRYPT         reduce using rule 127 (empty -> .)
    SHA_256         reduce using rule 127 (empty -> .)
    RANDOM_SALT     reduce using rule 127 (empty -> .)
    HMAC            reduce using rule 127 (empty -> .)
    ECDSA           reduce using rule 127 (empty -> .)
    ECDSAKEY        reduce using rule 127 (empty -> .)
    RBRACE          reduce using rule 127 (empty -> .)

    for_4                          shift and go to state 289
    empty                          shift and go to state 290

state 289

    (62) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .

    FOR             reduce using rule 62 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    DO              reduce using rule 62 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    WHILE           reduce using rule 62 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    IF              reduce using rule 62 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    ID              reduce using rule 62 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    PRINT           reduce using rule 62 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    READ            reduce using rule 62 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    RETURN          reduce using rule 62 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    GENKEY          reduce using rule 62 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    ENCRYPT         reduce using rule 62 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    DECRYPT         reduce using rule 62 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    SHA_256         reduce using rule 62 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    RANDOM_SALT     reduce using rule 62 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    HMAC            reduce using rule 62 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    ECDSA           reduce using rule 62 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    ECDSAKEY        reduce using rule 62 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    RBRACE          reduce using rule 62 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)


state 290

    (66) for_4 -> empty .

    FOR             reduce using rule 66 (for_4 -> empty .)
    DO              reduce using rule 66 (for_4 -> empty .)
    WHILE           reduce using rule 66 (for_4 -> empty .)
    IF              reduce using rule 66 (for_4 -> empty .)
    ID              reduce using rule 66 (for_4 -> empty .)
    PRINT           reduce using rule 66 (for_4 -> empty .)
    READ            reduce using rule 66 (for_4 -> empty .)
    RETURN          reduce using rule 66 (for_4 -> empty .)
    GENKEY          reduce using rule 66 (for_4 -> empty .)
    ENCRYPT         reduce using rule 66 (for_4 -> empty .)
    DECRYPT         reduce using rule 66 (for_4 -> empty .)
    SHA_256         reduce using rule 66 (for_4 -> empty .)
    RANDOM_SALT     reduce using rule 66 (for_4 -> empty .)
    HMAC            reduce using rule 66 (for_4 -> empty .)
    ECDSA           reduce using rule 66 (for_4 -> empty .)
    ECDSAKEY        reduce using rule 66 (for_4 -> empty .)
    RBRACE          reduce using rule 66 (for_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 7 resolved as shift
WARNING: reduce/reduce conflict in state 140 resolved using rule (print_argument -> CTES)
WARNING: rejected rule (cte -> CTES) in state 140
