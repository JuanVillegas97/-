Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMENT
    THEN

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END
Rule 2     global_scope -> empty
Rule 3     functions -> functions function
Rule 4     functions -> function
Rule 5     functions -> empty
Rule 6     function -> FUNCTION function_signature block
Rule 7     function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
Rule 8     function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
Rule 9     return -> RETURN expressions SEMICOLON
Rule 10    function_1 -> empty
Rule 11    main -> MAIN LPAREN RPAREN main_scope var_declarations block
Rule 12    main_scope -> empty
Rule 13    var_declarations -> var_declaration_list
Rule 14    var_declarations -> empty
Rule 15    var_declaration_list -> var_declaration var_declarations
Rule 16    var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration
Rule 17    open_var_declaration -> empty
Rule 18    close_var_declaration -> empty
Rule 19    variables -> variable
Rule 20    variables -> variable COMMA variables
Rule 21    variable -> ID
Rule 22    variable -> ID LBRACK expression RBRACK
Rule 23    variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK
Rule 24    parameters -> parameters COMMA parameter
Rule 25    parameters -> parameter
Rule 26    parameters -> empty
Rule 27    parameter -> simple_type ID
Rule 28    block -> LBRACE block2 RBRACE
Rule 29    block2 -> block3
Rule 30    block2 -> empty
Rule 31    block3 -> statement block2
Rule 32    statement -> special_func
Rule 33    statement -> assingation
Rule 34    statement -> for
Rule 35    statement -> do_while
Rule 36    statement -> while
Rule 37    statement -> if_else
Rule 38    statement -> invocation
Rule 39    statement -> if
Rule 40    statement -> print
Rule 41    statement -> read
Rule 42    special_func -> gen_key
Rule 43    special_func -> encrypt
Rule 44    special_func -> decrypt
Rule 45    special_func -> sha_256
Rule 46    special_func -> random_salt
Rule 47    random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON
Rule 48    sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON
Rule 49    gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON
Rule 50    encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
Rule 51    decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
Rule 52    read -> READ LPAREN ID RPAREN SEMICOLON
Rule 53    assing_to_call -> variable ASSIGN invocation
Rule 54    do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
Rule 55    for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
Rule 56    for_1 -> empty
Rule 57    for_2 -> empty
Rule 58    for_3 -> empty
Rule 59    for_4 -> empty
Rule 60    while -> WHILE breadcrumb LPAREN expression RPAREN gotof block
Rule 61    breadcrumb -> empty
Rule 62    if -> IF LPAREN expression RPAREN gotof block
Rule 63    if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block
Rule 64    gotot -> empty
Rule 65    goto -> empty
Rule 66    gotof -> empty
Rule 67    variable_list -> variable
Rule 68    variable_list -> variable_list COMMA variable
Rule 69    invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
Rule 70    invocation_1 -> empty
Rule 71    invocation_2 -> empty
Rule 72    invocation_3 -> empty
Rule 73    invocation_4 -> empty
Rule 74    invocation_5 -> empty
Rule 75    invocation_6 -> empty
Rule 76    expressions -> expressions COMMA invocation_4 expression invocation_3
Rule 77    expressions -> expression invocation_3
Rule 78    expressions -> empty
Rule 79    expression -> t_expression
Rule 80    expression -> NOT t_expression
Rule 81    print -> PRINT LPAREN print_arguments RPAREN SEMICOLON
Rule 82    print_arguments -> print_argument
Rule 83    print_arguments -> print_arguments COMMA print_argument
Rule 84    print_argument -> CTES
Rule 85    print_argument -> expression
Rule 86    assingation -> variable ASSIGN expression SEMICOLON
Rule 87    t_expression -> g_expression
Rule 88    t_expression -> t_expression boolean_operator g_expression
Rule 89    g_expression -> m_expression
Rule 90    g_expression -> g_expression comparison_operator m_expression
Rule 91    m_expression -> term
Rule 92    m_expression -> m_expression addition_operator term
Rule 93    term -> factor
Rule 94    term -> term multiplication_operator factor
Rule 95    factor -> variable
Rule 96    factor -> cte
Rule 97    factor -> invocation
Rule 98    factor -> expression_parenthesis
Rule 99    expression_parenthesis -> LPAREN expression RPAREN
Rule 100   comparison_operator -> LESS
Rule 101   comparison_operator -> GREATER
Rule 102   comparison_operator -> EQUALS
Rule 103   comparison_operator -> NOTEQUAL
Rule 104   comparison_operator -> GREATERTHAN
Rule 105   comparison_operator -> LESSTHAN
Rule 106   addition_operator -> PLUS
Rule 107   addition_operator -> MINUS
Rule 108   boolean_operator -> AND
Rule 109   boolean_operator -> OR
Rule 110   multiplication_operator -> TIMES
Rule 111   multiplication_operator -> DIVIDE
Rule 112   simple_type -> INT
Rule 113   simple_type -> FLOAT
Rule 114   simple_type -> CHAR
Rule 115   simple_type -> BOOLEAN
Rule 116   simple_type -> STRING
Rule 117   cte -> CTEI
Rule 118   cte -> CTEF
Rule 119   cte -> CTEC
Rule 120   cte -> CTEB
Rule 121   cte -> CTES
Rule 122   empty -> <empty>

Terminals, with rules where they appear

AND                  : 108
ASSIGN               : 53 55 86
BOOLEAN              : 115
CHAR                 : 114
COLON                : 
COMMA                : 20 24 50 51 68 76 83
COMMENT              : 
CTEB                 : 120
CTEC                 : 119
CTEF                 : 118
CTEI                 : 47 117
CTES                 : 84 121
DECRYPT              : 51
DIVIDE               : 111
DO                   : 54 55
ELSE                 : 63
ENCRYPT              : 50
END                  : 1
EQUALS               : 102
FLOAT                : 113
FOR                  : 55
FROM                 : 55
FUNCTION             : 6
GENKEY               : 49
GREATER              : 101
GREATERTHAN          : 104
ID                   : 1 7 8 21 22 23 27 47 48 48 49 50 50 50 51 51 51 52 55 69
IF                   : 62 63
INT                  : 112
LBRACE               : 28
LBRACK               : 22 23 23
LESS                 : 100
LESSTHAN             : 105
LPAREN               : 7 8 11 47 48 49 50 51 52 54 55 60 62 63 69 81 99
MAIN                 : 11
MINUS                : 107
NOT                  : 80
NOTEQUAL             : 103
OR                   : 109
PLUS                 : 106
PRINT                : 81
PROGRAM              : 1
RANDOM_SALT          : 47
RBRACE               : 28
RBRACK               : 22 23 23
READ                 : 52
RETURN               : 9
RPAREN               : 7 8 11 47 48 49 50 51 52 54 55 60 62 63 69 81 99
SEMICOLON            : 1 9 16 47 48 49 50 51 52 54 69 81 86
SHA_256              : 48
SPECIAL              : 47 48 49 50 51
STRING               : 116
THEN                 : 
TIMES                : 110
VARIABLE             : 16
VOID                 : 8
WHILE                : 54 60
error                : 

Nonterminals, with rules where they appear

addition_operator    : 92
assing_to_call       : 
assingation          : 33
block                : 6 11 54 55 60 62 63 63
block2               : 28 31
block3               : 29
boolean_operator     : 88
breadcrumb           : 54 60
close_var_declaration : 7 8 16
comparison_operator  : 90
cte                  : 96
decrypt              : 44
do_while             : 35
empty                : 2 5 10 12 14 17 18 26 30 56 57 58 59 61 64 65 66 70 71 72 73 74 75 78
encrypt              : 43
expression           : 22 23 23 54 55 55 60 62 63 76 77 85 86 99
expression_parenthesis : 98
expressions          : 9 69 76
factor               : 93 94
for                  : 34
for_1                : 55
for_2                : 55
for_3                : 55
for_4                : 55
function             : 3 4
function_1           : 7 8
function_signature   : 6
functions            : 1 3
g_expression         : 87 88 90
gen_key              : 42
global_scope         : 1
goto                 : 63
gotof                : 60 62 63
gotot                : 54
if                   : 39
if_else              : 37
invocation           : 38 53 97
invocation_1         : 69
invocation_2         : 69
invocation_3         : 76 77
invocation_4         : 76
invocation_5         : 69
invocation_6         : 69
m_expression         : 89 90 92
main                 : 1
main_scope           : 11
multiplication_operator : 94
open_var_declaration : 7 8 16
parameter            : 24 25
parameters           : 7 8 24
print                : 40
print_argument       : 82 83
print_arguments      : 81 83
program              : 0
random_salt          : 46
read                 : 41
return               : 
sha_256              : 45
simple_type          : 7 16 27
special_func         : 32
statement            : 31
t_expression         : 79 80 88
term                 : 91 92 94
var_declaration      : 15
var_declaration_list : 13
var_declarations     : 1 7 8 11 15
variable             : 19 20 53 67 68 86 95
variable_list        : 68
variables            : 16 20
while                : 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON global_scope var_declarations functions main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON global_scope var_declarations functions main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON global_scope var_declarations functions main END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . global_scope var_declarations functions main END
    (2) global_scope -> . empty
    (122) empty -> .

    VARIABLE        reduce using rule 122 (empty -> .)
    FUNCTION        reduce using rule 122 (empty -> .)
    MAIN            reduce using rule 122 (empty -> .)

    global_scope                   shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON global_scope . var_declarations functions main END
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (122) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 122 (empty -> .)
    MAIN            reduce using rule 122 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 7
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 6

    (2) global_scope -> empty .

    VARIABLE        reduce using rule 2 (global_scope -> empty .)
    FUNCTION        reduce using rule 2 (global_scope -> empty .)
    MAIN            reduce using rule 2 (global_scope -> empty .)


state 7

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations . functions main END
    (3) functions -> . functions function
    (4) functions -> . function
    (5) functions -> . empty
    (6) function -> . FUNCTION function_signature block
    (122) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 122 (empty -> .)

  ! FUNCTION        [ reduce using rule 122 (empty -> .) ]

    functions                      shift and go to state 12
    function                       shift and go to state 13
    empty                          shift and go to state 14

state 8

    (13) var_declarations -> var_declaration_list .

    FUNCTION        reduce using rule 13 (var_declarations -> var_declaration_list .)
    MAIN            reduce using rule 13 (var_declarations -> var_declaration_list .)
    LBRACE          reduce using rule 13 (var_declarations -> var_declaration_list .)


state 9

    (14) var_declarations -> empty .

    FUNCTION        reduce using rule 14 (var_declarations -> empty .)
    MAIN            reduce using rule 14 (var_declarations -> empty .)
    LBRACE          reduce using rule 14 (var_declarations -> empty .)


state 10

    (15) var_declaration_list -> var_declaration . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (122) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    FUNCTION        reduce using rule 122 (empty -> .)
    MAIN            reduce using rule 122 (empty -> .)
    LBRACE          reduce using rule 122 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declaration                shift and go to state 10
    var_declarations               shift and go to state 16
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9

state 11

    (16) var_declaration -> VARIABLE . open_var_declaration simple_type variables SEMICOLON close_var_declaration
    (17) open_var_declaration -> . empty
    (122) empty -> .

    INT             reduce using rule 122 (empty -> .)
    FLOAT           reduce using rule 122 (empty -> .)
    CHAR            reduce using rule 122 (empty -> .)
    BOOLEAN         reduce using rule 122 (empty -> .)
    STRING          reduce using rule 122 (empty -> .)

    open_var_declaration           shift and go to state 17
    empty                          shift and go to state 18

state 12

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions . main END
    (3) functions -> functions . function
    (11) main -> . MAIN LPAREN RPAREN main_scope var_declarations block
    (6) function -> . FUNCTION function_signature block

    MAIN            shift and go to state 21
    FUNCTION        shift and go to state 15

    main                           shift and go to state 19
    function                       shift and go to state 20

state 13

    (4) functions -> function .

    MAIN            reduce using rule 4 (functions -> function .)
    FUNCTION        reduce using rule 4 (functions -> function .)


state 14

    (5) functions -> empty .

    MAIN            reduce using rule 5 (functions -> empty .)
    FUNCTION        reduce using rule 5 (functions -> empty .)


state 15

    (6) function -> FUNCTION . function_signature block
    (7) function_signature -> . simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (8) function_signature -> . VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (112) simple_type -> . INT
    (113) simple_type -> . FLOAT
    (114) simple_type -> . CHAR
    (115) simple_type -> . BOOLEAN
    (116) simple_type -> . STRING

    VOID            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    function_signature             shift and go to state 22
    simple_type                    shift and go to state 23

state 16

    (15) var_declaration_list -> var_declaration var_declarations .

    FUNCTION        reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)
    MAIN            reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)
    LBRACE          reduce using rule 15 (var_declaration_list -> var_declaration var_declarations .)


state 17

    (16) var_declaration -> VARIABLE open_var_declaration . simple_type variables SEMICOLON close_var_declaration
    (112) simple_type -> . INT
    (113) simple_type -> . FLOAT
    (114) simple_type -> . CHAR
    (115) simple_type -> . BOOLEAN
    (116) simple_type -> . STRING

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    simple_type                    shift and go to state 30

state 18

    (17) open_var_declaration -> empty .

    INT             reduce using rule 17 (open_var_declaration -> empty .)
    FLOAT           reduce using rule 17 (open_var_declaration -> empty .)
    CHAR            reduce using rule 17 (open_var_declaration -> empty .)
    BOOLEAN         reduce using rule 17 (open_var_declaration -> empty .)
    STRING          reduce using rule 17 (open_var_declaration -> empty .)
    COMMA           reduce using rule 17 (open_var_declaration -> empty .)
    RPAREN          reduce using rule 17 (open_var_declaration -> empty .)


state 19

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main . END

    END             shift and go to state 31


state 20

    (3) functions -> functions function .

    MAIN            reduce using rule 3 (functions -> functions function .)
    FUNCTION        reduce using rule 3 (functions -> functions function .)


state 21

    (11) main -> MAIN . LPAREN RPAREN main_scope var_declarations block

    LPAREN          shift and go to state 32


state 22

    (6) function -> FUNCTION function_signature . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 33

state 23

    (7) function_signature -> simple_type . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    ID              shift and go to state 35


state 24

    (8) function_signature -> VOID . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    ID              shift and go to state 36


state 25

    (112) simple_type -> INT .

    ID              reduce using rule 112 (simple_type -> INT .)


state 26

    (113) simple_type -> FLOAT .

    ID              reduce using rule 113 (simple_type -> FLOAT .)


state 27

    (114) simple_type -> CHAR .

    ID              reduce using rule 114 (simple_type -> CHAR .)


state 28

    (115) simple_type -> BOOLEAN .

    ID              reduce using rule 115 (simple_type -> BOOLEAN .)


state 29

    (116) simple_type -> STRING .

    ID              reduce using rule 116 (simple_type -> STRING .)


state 30

    (16) var_declaration -> VARIABLE open_var_declaration simple_type . variables SEMICOLON close_var_declaration
    (19) variables -> . variable
    (20) variables -> . variable COMMA variables
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 39

    variables                      shift and go to state 37
    variable                       shift and go to state 38

state 31

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .)


state 32

    (11) main -> MAIN LPAREN . RPAREN main_scope var_declarations block

    RPAREN          shift and go to state 40


state 33

    (6) function -> FUNCTION function_signature block .

    MAIN            reduce using rule 6 (function -> FUNCTION function_signature block .)
    FUNCTION        reduce using rule 6 (function -> FUNCTION function_signature block .)


state 34

    (28) block -> LBRACE . block2 RBRACE
    (29) block2 -> . block3
    (30) block2 -> . empty
    (31) block3 -> . statement block2
    (122) empty -> .
    (32) statement -> . special_func
    (33) statement -> . assingation
    (34) statement -> . for
    (35) statement -> . do_while
    (36) statement -> . while
    (37) statement -> . if_else
    (38) statement -> . invocation
    (39) statement -> . if
    (40) statement -> . print
    (41) statement -> . read
    (42) special_func -> . gen_key
    (43) special_func -> . encrypt
    (44) special_func -> . decrypt
    (45) special_func -> . sha_256
    (46) special_func -> . random_salt
    (86) assingation -> . variable ASSIGN expression SEMICOLON
    (55) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (54) do_while -> . DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (60) while -> . WHILE breadcrumb LPAREN expression RPAREN gotof block
    (63) if_else -> . IF LPAREN expression RPAREN gotof block ELSE goto block
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (62) if -> . IF LPAREN expression RPAREN gotof block
    (81) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (52) read -> . READ LPAREN ID RPAREN SEMICOLON
    (49) gen_key -> . GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON
    (50) encrypt -> . ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (51) decrypt -> . DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (48) sha_256 -> . SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON
    (47) random_salt -> . RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          reduce using rule 122 (empty -> .)
    FOR             shift and go to state 61
    DO              shift and go to state 63
    WHILE           shift and go to state 64
    IF              shift and go to state 65
    ID              shift and go to state 62
    PRINT           shift and go to state 66
    READ            shift and go to state 67
    GENKEY          shift and go to state 68
    ENCRYPT         shift and go to state 69
    DECRYPT         shift and go to state 70
    SHA_256         shift and go to state 71
    RANDOM_SALT     shift and go to state 72

    block2                         shift and go to state 41
    block3                         shift and go to state 42
    empty                          shift and go to state 43
    statement                      shift and go to state 44
    special_func                   shift and go to state 45
    assingation                    shift and go to state 46
    for                            shift and go to state 47
    do_while                       shift and go to state 48
    while                          shift and go to state 49
    if_else                        shift and go to state 50
    invocation                     shift and go to state 51
    if                             shift and go to state 52
    print                          shift and go to state 53
    read                           shift and go to state 54
    gen_key                        shift and go to state 55
    encrypt                        shift and go to state 56
    decrypt                        shift and go to state 57
    sha_256                        shift and go to state 58
    random_salt                    shift and go to state 59
    variable                       shift and go to state 60

state 35

    (7) function_signature -> simple_type ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (10) function_1 -> . empty
    (122) empty -> .

    LPAREN          reduce using rule 122 (empty -> .)

    function_1                     shift and go to state 73
    empty                          shift and go to state 74

state 36

    (8) function_signature -> VOID ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (10) function_1 -> . empty
    (122) empty -> .

    LPAREN          reduce using rule 122 (empty -> .)

    function_1                     shift and go to state 75
    empty                          shift and go to state 74

state 37

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables . SEMICOLON close_var_declaration

    SEMICOLON       shift and go to state 76


state 38

    (19) variables -> variable .
    (20) variables -> variable . COMMA variables

    SEMICOLON       reduce using rule 19 (variables -> variable .)
    COMMA           shift and go to state 77


state 39

    (21) variable -> ID .
    (22) variable -> ID . LBRACK expression RBRACK
    (23) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK

    COMMA           reduce using rule 21 (variable -> ID .)
    SEMICOLON       reduce using rule 21 (variable -> ID .)
    LBRACK          shift and go to state 78


state 40

    (11) main -> MAIN LPAREN RPAREN . main_scope var_declarations block
    (12) main_scope -> . empty
    (122) empty -> .

    VARIABLE        reduce using rule 122 (empty -> .)
    LBRACE          reduce using rule 122 (empty -> .)

    main_scope                     shift and go to state 79
    empty                          shift and go to state 80

state 41

    (28) block -> LBRACE block2 . RBRACE

    RBRACE          shift and go to state 81


state 42

    (29) block2 -> block3 .

    RBRACE          reduce using rule 29 (block2 -> block3 .)


state 43

    (30) block2 -> empty .

    RBRACE          reduce using rule 30 (block2 -> empty .)


state 44

    (31) block3 -> statement . block2
    (29) block2 -> . block3
    (30) block2 -> . empty
    (31) block3 -> . statement block2
    (122) empty -> .
    (32) statement -> . special_func
    (33) statement -> . assingation
    (34) statement -> . for
    (35) statement -> . do_while
    (36) statement -> . while
    (37) statement -> . if_else
    (38) statement -> . invocation
    (39) statement -> . if
    (40) statement -> . print
    (41) statement -> . read
    (42) special_func -> . gen_key
    (43) special_func -> . encrypt
    (44) special_func -> . decrypt
    (45) special_func -> . sha_256
    (46) special_func -> . random_salt
    (86) assingation -> . variable ASSIGN expression SEMICOLON
    (55) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (54) do_while -> . DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (60) while -> . WHILE breadcrumb LPAREN expression RPAREN gotof block
    (63) if_else -> . IF LPAREN expression RPAREN gotof block ELSE goto block
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (62) if -> . IF LPAREN expression RPAREN gotof block
    (81) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (52) read -> . READ LPAREN ID RPAREN SEMICOLON
    (49) gen_key -> . GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON
    (50) encrypt -> . ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (51) decrypt -> . DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON
    (48) sha_256 -> . SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON
    (47) random_salt -> . RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          reduce using rule 122 (empty -> .)
    FOR             shift and go to state 61
    DO              shift and go to state 63
    WHILE           shift and go to state 64
    IF              shift and go to state 65
    ID              shift and go to state 62
    PRINT           shift and go to state 66
    READ            shift and go to state 67
    GENKEY          shift and go to state 68
    ENCRYPT         shift and go to state 69
    DECRYPT         shift and go to state 70
    SHA_256         shift and go to state 71
    RANDOM_SALT     shift and go to state 72

    statement                      shift and go to state 44
    block2                         shift and go to state 82
    block3                         shift and go to state 42
    empty                          shift and go to state 43
    special_func                   shift and go to state 45
    assingation                    shift and go to state 46
    for                            shift and go to state 47
    do_while                       shift and go to state 48
    while                          shift and go to state 49
    if_else                        shift and go to state 50
    invocation                     shift and go to state 51
    if                             shift and go to state 52
    print                          shift and go to state 53
    read                           shift and go to state 54
    gen_key                        shift and go to state 55
    encrypt                        shift and go to state 56
    decrypt                        shift and go to state 57
    sha_256                        shift and go to state 58
    random_salt                    shift and go to state 59
    variable                       shift and go to state 60

state 45

    (32) statement -> special_func .

    FOR             reduce using rule 32 (statement -> special_func .)
    DO              reduce using rule 32 (statement -> special_func .)
    WHILE           reduce using rule 32 (statement -> special_func .)
    IF              reduce using rule 32 (statement -> special_func .)
    ID              reduce using rule 32 (statement -> special_func .)
    PRINT           reduce using rule 32 (statement -> special_func .)
    READ            reduce using rule 32 (statement -> special_func .)
    GENKEY          reduce using rule 32 (statement -> special_func .)
    ENCRYPT         reduce using rule 32 (statement -> special_func .)
    DECRYPT         reduce using rule 32 (statement -> special_func .)
    SHA_256         reduce using rule 32 (statement -> special_func .)
    RANDOM_SALT     reduce using rule 32 (statement -> special_func .)
    RBRACE          reduce using rule 32 (statement -> special_func .)


state 46

    (33) statement -> assingation .

    FOR             reduce using rule 33 (statement -> assingation .)
    DO              reduce using rule 33 (statement -> assingation .)
    WHILE           reduce using rule 33 (statement -> assingation .)
    IF              reduce using rule 33 (statement -> assingation .)
    ID              reduce using rule 33 (statement -> assingation .)
    PRINT           reduce using rule 33 (statement -> assingation .)
    READ            reduce using rule 33 (statement -> assingation .)
    GENKEY          reduce using rule 33 (statement -> assingation .)
    ENCRYPT         reduce using rule 33 (statement -> assingation .)
    DECRYPT         reduce using rule 33 (statement -> assingation .)
    SHA_256         reduce using rule 33 (statement -> assingation .)
    RANDOM_SALT     reduce using rule 33 (statement -> assingation .)
    RBRACE          reduce using rule 33 (statement -> assingation .)


state 47

    (34) statement -> for .

    FOR             reduce using rule 34 (statement -> for .)
    DO              reduce using rule 34 (statement -> for .)
    WHILE           reduce using rule 34 (statement -> for .)
    IF              reduce using rule 34 (statement -> for .)
    ID              reduce using rule 34 (statement -> for .)
    PRINT           reduce using rule 34 (statement -> for .)
    READ            reduce using rule 34 (statement -> for .)
    GENKEY          reduce using rule 34 (statement -> for .)
    ENCRYPT         reduce using rule 34 (statement -> for .)
    DECRYPT         reduce using rule 34 (statement -> for .)
    SHA_256         reduce using rule 34 (statement -> for .)
    RANDOM_SALT     reduce using rule 34 (statement -> for .)
    RBRACE          reduce using rule 34 (statement -> for .)


state 48

    (35) statement -> do_while .

    FOR             reduce using rule 35 (statement -> do_while .)
    DO              reduce using rule 35 (statement -> do_while .)
    WHILE           reduce using rule 35 (statement -> do_while .)
    IF              reduce using rule 35 (statement -> do_while .)
    ID              reduce using rule 35 (statement -> do_while .)
    PRINT           reduce using rule 35 (statement -> do_while .)
    READ            reduce using rule 35 (statement -> do_while .)
    GENKEY          reduce using rule 35 (statement -> do_while .)
    ENCRYPT         reduce using rule 35 (statement -> do_while .)
    DECRYPT         reduce using rule 35 (statement -> do_while .)
    SHA_256         reduce using rule 35 (statement -> do_while .)
    RANDOM_SALT     reduce using rule 35 (statement -> do_while .)
    RBRACE          reduce using rule 35 (statement -> do_while .)


state 49

    (36) statement -> while .

    FOR             reduce using rule 36 (statement -> while .)
    DO              reduce using rule 36 (statement -> while .)
    WHILE           reduce using rule 36 (statement -> while .)
    IF              reduce using rule 36 (statement -> while .)
    ID              reduce using rule 36 (statement -> while .)
    PRINT           reduce using rule 36 (statement -> while .)
    READ            reduce using rule 36 (statement -> while .)
    GENKEY          reduce using rule 36 (statement -> while .)
    ENCRYPT         reduce using rule 36 (statement -> while .)
    DECRYPT         reduce using rule 36 (statement -> while .)
    SHA_256         reduce using rule 36 (statement -> while .)
    RANDOM_SALT     reduce using rule 36 (statement -> while .)
    RBRACE          reduce using rule 36 (statement -> while .)


state 50

    (37) statement -> if_else .

    FOR             reduce using rule 37 (statement -> if_else .)
    DO              reduce using rule 37 (statement -> if_else .)
    WHILE           reduce using rule 37 (statement -> if_else .)
    IF              reduce using rule 37 (statement -> if_else .)
    ID              reduce using rule 37 (statement -> if_else .)
    PRINT           reduce using rule 37 (statement -> if_else .)
    READ            reduce using rule 37 (statement -> if_else .)
    GENKEY          reduce using rule 37 (statement -> if_else .)
    ENCRYPT         reduce using rule 37 (statement -> if_else .)
    DECRYPT         reduce using rule 37 (statement -> if_else .)
    SHA_256         reduce using rule 37 (statement -> if_else .)
    RANDOM_SALT     reduce using rule 37 (statement -> if_else .)
    RBRACE          reduce using rule 37 (statement -> if_else .)


state 51

    (38) statement -> invocation .

    FOR             reduce using rule 38 (statement -> invocation .)
    DO              reduce using rule 38 (statement -> invocation .)
    WHILE           reduce using rule 38 (statement -> invocation .)
    IF              reduce using rule 38 (statement -> invocation .)
    ID              reduce using rule 38 (statement -> invocation .)
    PRINT           reduce using rule 38 (statement -> invocation .)
    READ            reduce using rule 38 (statement -> invocation .)
    GENKEY          reduce using rule 38 (statement -> invocation .)
    ENCRYPT         reduce using rule 38 (statement -> invocation .)
    DECRYPT         reduce using rule 38 (statement -> invocation .)
    SHA_256         reduce using rule 38 (statement -> invocation .)
    RANDOM_SALT     reduce using rule 38 (statement -> invocation .)
    RBRACE          reduce using rule 38 (statement -> invocation .)


state 52

    (39) statement -> if .

    FOR             reduce using rule 39 (statement -> if .)
    DO              reduce using rule 39 (statement -> if .)
    WHILE           reduce using rule 39 (statement -> if .)
    IF              reduce using rule 39 (statement -> if .)
    ID              reduce using rule 39 (statement -> if .)
    PRINT           reduce using rule 39 (statement -> if .)
    READ            reduce using rule 39 (statement -> if .)
    GENKEY          reduce using rule 39 (statement -> if .)
    ENCRYPT         reduce using rule 39 (statement -> if .)
    DECRYPT         reduce using rule 39 (statement -> if .)
    SHA_256         reduce using rule 39 (statement -> if .)
    RANDOM_SALT     reduce using rule 39 (statement -> if .)
    RBRACE          reduce using rule 39 (statement -> if .)


state 53

    (40) statement -> print .

    FOR             reduce using rule 40 (statement -> print .)
    DO              reduce using rule 40 (statement -> print .)
    WHILE           reduce using rule 40 (statement -> print .)
    IF              reduce using rule 40 (statement -> print .)
    ID              reduce using rule 40 (statement -> print .)
    PRINT           reduce using rule 40 (statement -> print .)
    READ            reduce using rule 40 (statement -> print .)
    GENKEY          reduce using rule 40 (statement -> print .)
    ENCRYPT         reduce using rule 40 (statement -> print .)
    DECRYPT         reduce using rule 40 (statement -> print .)
    SHA_256         reduce using rule 40 (statement -> print .)
    RANDOM_SALT     reduce using rule 40 (statement -> print .)
    RBRACE          reduce using rule 40 (statement -> print .)


state 54

    (41) statement -> read .

    FOR             reduce using rule 41 (statement -> read .)
    DO              reduce using rule 41 (statement -> read .)
    WHILE           reduce using rule 41 (statement -> read .)
    IF              reduce using rule 41 (statement -> read .)
    ID              reduce using rule 41 (statement -> read .)
    PRINT           reduce using rule 41 (statement -> read .)
    READ            reduce using rule 41 (statement -> read .)
    GENKEY          reduce using rule 41 (statement -> read .)
    ENCRYPT         reduce using rule 41 (statement -> read .)
    DECRYPT         reduce using rule 41 (statement -> read .)
    SHA_256         reduce using rule 41 (statement -> read .)
    RANDOM_SALT     reduce using rule 41 (statement -> read .)
    RBRACE          reduce using rule 41 (statement -> read .)


state 55

    (42) special_func -> gen_key .

    FOR             reduce using rule 42 (special_func -> gen_key .)
    DO              reduce using rule 42 (special_func -> gen_key .)
    WHILE           reduce using rule 42 (special_func -> gen_key .)
    IF              reduce using rule 42 (special_func -> gen_key .)
    ID              reduce using rule 42 (special_func -> gen_key .)
    PRINT           reduce using rule 42 (special_func -> gen_key .)
    READ            reduce using rule 42 (special_func -> gen_key .)
    GENKEY          reduce using rule 42 (special_func -> gen_key .)
    ENCRYPT         reduce using rule 42 (special_func -> gen_key .)
    DECRYPT         reduce using rule 42 (special_func -> gen_key .)
    SHA_256         reduce using rule 42 (special_func -> gen_key .)
    RANDOM_SALT     reduce using rule 42 (special_func -> gen_key .)
    RBRACE          reduce using rule 42 (special_func -> gen_key .)


state 56

    (43) special_func -> encrypt .

    FOR             reduce using rule 43 (special_func -> encrypt .)
    DO              reduce using rule 43 (special_func -> encrypt .)
    WHILE           reduce using rule 43 (special_func -> encrypt .)
    IF              reduce using rule 43 (special_func -> encrypt .)
    ID              reduce using rule 43 (special_func -> encrypt .)
    PRINT           reduce using rule 43 (special_func -> encrypt .)
    READ            reduce using rule 43 (special_func -> encrypt .)
    GENKEY          reduce using rule 43 (special_func -> encrypt .)
    ENCRYPT         reduce using rule 43 (special_func -> encrypt .)
    DECRYPT         reduce using rule 43 (special_func -> encrypt .)
    SHA_256         reduce using rule 43 (special_func -> encrypt .)
    RANDOM_SALT     reduce using rule 43 (special_func -> encrypt .)
    RBRACE          reduce using rule 43 (special_func -> encrypt .)


state 57

    (44) special_func -> decrypt .

    FOR             reduce using rule 44 (special_func -> decrypt .)
    DO              reduce using rule 44 (special_func -> decrypt .)
    WHILE           reduce using rule 44 (special_func -> decrypt .)
    IF              reduce using rule 44 (special_func -> decrypt .)
    ID              reduce using rule 44 (special_func -> decrypt .)
    PRINT           reduce using rule 44 (special_func -> decrypt .)
    READ            reduce using rule 44 (special_func -> decrypt .)
    GENKEY          reduce using rule 44 (special_func -> decrypt .)
    ENCRYPT         reduce using rule 44 (special_func -> decrypt .)
    DECRYPT         reduce using rule 44 (special_func -> decrypt .)
    SHA_256         reduce using rule 44 (special_func -> decrypt .)
    RANDOM_SALT     reduce using rule 44 (special_func -> decrypt .)
    RBRACE          reduce using rule 44 (special_func -> decrypt .)


state 58

    (45) special_func -> sha_256 .

    FOR             reduce using rule 45 (special_func -> sha_256 .)
    DO              reduce using rule 45 (special_func -> sha_256 .)
    WHILE           reduce using rule 45 (special_func -> sha_256 .)
    IF              reduce using rule 45 (special_func -> sha_256 .)
    ID              reduce using rule 45 (special_func -> sha_256 .)
    PRINT           reduce using rule 45 (special_func -> sha_256 .)
    READ            reduce using rule 45 (special_func -> sha_256 .)
    GENKEY          reduce using rule 45 (special_func -> sha_256 .)
    ENCRYPT         reduce using rule 45 (special_func -> sha_256 .)
    DECRYPT         reduce using rule 45 (special_func -> sha_256 .)
    SHA_256         reduce using rule 45 (special_func -> sha_256 .)
    RANDOM_SALT     reduce using rule 45 (special_func -> sha_256 .)
    RBRACE          reduce using rule 45 (special_func -> sha_256 .)


state 59

    (46) special_func -> random_salt .

    FOR             reduce using rule 46 (special_func -> random_salt .)
    DO              reduce using rule 46 (special_func -> random_salt .)
    WHILE           reduce using rule 46 (special_func -> random_salt .)
    IF              reduce using rule 46 (special_func -> random_salt .)
    ID              reduce using rule 46 (special_func -> random_salt .)
    PRINT           reduce using rule 46 (special_func -> random_salt .)
    READ            reduce using rule 46 (special_func -> random_salt .)
    GENKEY          reduce using rule 46 (special_func -> random_salt .)
    ENCRYPT         reduce using rule 46 (special_func -> random_salt .)
    DECRYPT         reduce using rule 46 (special_func -> random_salt .)
    SHA_256         reduce using rule 46 (special_func -> random_salt .)
    RANDOM_SALT     reduce using rule 46 (special_func -> random_salt .)
    RBRACE          reduce using rule 46 (special_func -> random_salt .)


state 60

    (86) assingation -> variable . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 83


state 61

    (55) for -> FOR . LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    LPAREN          shift and go to state 84


state 62

    (69) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (21) variable -> ID .
    (22) variable -> ID . LBRACK expression RBRACK
    (23) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (70) invocation_1 -> . empty
    (122) empty -> .

    ASSIGN          reduce using rule 21 (variable -> ID .)
    LBRACK          shift and go to state 78
    LPAREN          reduce using rule 122 (empty -> .)

    invocation_1                   shift and go to state 85
    empty                          shift and go to state 86

state 63

    (54) do_while -> DO . breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (61) breadcrumb -> . empty
    (122) empty -> .

    LBRACE          reduce using rule 122 (empty -> .)

    breadcrumb                     shift and go to state 87
    empty                          shift and go to state 88

state 64

    (60) while -> WHILE . breadcrumb LPAREN expression RPAREN gotof block
    (61) breadcrumb -> . empty
    (122) empty -> .

    LPAREN          reduce using rule 122 (empty -> .)

    breadcrumb                     shift and go to state 89
    empty                          shift and go to state 88

state 65

    (63) if_else -> IF . LPAREN expression RPAREN gotof block ELSE goto block
    (62) if -> IF . LPAREN expression RPAREN gotof block

    LPAREN          shift and go to state 90


state 66

    (81) print -> PRINT . LPAREN print_arguments RPAREN SEMICOLON

    LPAREN          shift and go to state 91


state 67

    (52) read -> READ . LPAREN ID RPAREN SEMICOLON

    LPAREN          shift and go to state 92


state 68

    (49) gen_key -> GENKEY . LPAREN RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 93


state 69

    (50) encrypt -> ENCRYPT . LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 94


state 70

    (51) decrypt -> DECRYPT . LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 95


state 71

    (48) sha_256 -> SHA_256 . LPAREN ID RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 96


state 72

    (47) random_salt -> RANDOM_SALT . LPAREN CTEI RPAREN SPECIAL ID SEMICOLON

    LPAREN          shift and go to state 97


state 73

    (7) function_signature -> simple_type ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    LPAREN          shift and go to state 98


state 74

    (10) function_1 -> empty .

    LPAREN          reduce using rule 10 (function_1 -> empty .)


state 75

    (8) function_signature -> VOID ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations

    LPAREN          shift and go to state 99


state 76

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON . close_var_declaration
    (18) close_var_declaration -> . empty
    (122) empty -> .

    VARIABLE        reduce using rule 122 (empty -> .)
    FUNCTION        reduce using rule 122 (empty -> .)
    MAIN            reduce using rule 122 (empty -> .)
    LBRACE          reduce using rule 122 (empty -> .)

    close_var_declaration          shift and go to state 100
    empty                          shift and go to state 101

state 77

    (20) variables -> variable COMMA . variables
    (19) variables -> . variable
    (20) variables -> . variable COMMA variables
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 39

    variable                       shift and go to state 38
    variables                      shift and go to state 102

state 78

    (22) variable -> ID LBRACK . expression RBRACK
    (23) variable -> ID LBRACK . expression RBRACK LBRACK expression RBRACK
    (79) expression -> . t_expression
    (80) expression -> . NOT t_expression
    (87) t_expression -> . g_expression
    (88) t_expression -> . t_expression boolean_operator g_expression
    (89) g_expression -> . m_expression
    (90) g_expression -> . g_expression comparison_operator m_expression
    (91) m_expression -> . term
    (92) m_expression -> . m_expression addition_operator term
    (93) term -> . factor
    (94) term -> . term multiplication_operator factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 106
    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    CTES            shift and go to state 119
    LPAREN          shift and go to state 120

    expression                     shift and go to state 104
    t_expression                   shift and go to state 105
    g_expression                   shift and go to state 107
    m_expression                   shift and go to state 108
    term                           shift and go to state 109
    factor                         shift and go to state 110
    variable                       shift and go to state 111
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 79

    (11) main -> MAIN LPAREN RPAREN main_scope . var_declarations block
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (122) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 122 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 121
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 80

    (12) main_scope -> empty .

    VARIABLE        reduce using rule 12 (main_scope -> empty .)
    LBRACE          reduce using rule 12 (main_scope -> empty .)


state 81

    (28) block -> LBRACE block2 RBRACE .

    MAIN            reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    FUNCTION        reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    WHILE           reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    END             reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    ELSE            reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    FOR             reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    DO              reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    IF              reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    ID              reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    PRINT           reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    READ            reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    GENKEY          reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    ENCRYPT         reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    DECRYPT         reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    SHA_256         reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    RANDOM_SALT     reduce using rule 28 (block -> LBRACE block2 RBRACE .)
    RBRACE          reduce using rule 28 (block -> LBRACE block2 RBRACE .)


state 82

    (31) block3 -> statement block2 .

    RBRACE          reduce using rule 31 (block3 -> statement block2 .)


state 83

    (86) assingation -> variable ASSIGN . expression SEMICOLON
    (79) expression -> . t_expression
    (80) expression -> . NOT t_expression
    (87) t_expression -> . g_expression
    (88) t_expression -> . t_expression boolean_operator g_expression
    (89) g_expression -> . m_expression
    (90) g_expression -> . g_expression comparison_operator m_expression
    (91) m_expression -> . term
    (92) m_expression -> . m_expression addition_operator term
    (93) term -> . factor
    (94) term -> . term multiplication_operator factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 106
    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    CTES            shift and go to state 119
    LPAREN          shift and go to state 120

    variable                       shift and go to state 111
    expression                     shift and go to state 122
    t_expression                   shift and go to state 105
    g_expression                   shift and go to state 107
    m_expression                   shift and go to state 108
    term                           shift and go to state 109
    factor                         shift and go to state 110
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 84

    (55) for -> FOR LPAREN . ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    ID              shift and go to state 123


state 85

    (69) invocation -> ID invocation_1 . LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    LPAREN          shift and go to state 124


state 86

    (70) invocation_1 -> empty .

    LPAREN          reduce using rule 70 (invocation_1 -> empty .)


state 87

    (54) do_while -> DO breadcrumb . block WHILE LPAREN expression RPAREN gotot SEMICOLON
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 125

state 88

    (61) breadcrumb -> empty .

    LBRACE          reduce using rule 61 (breadcrumb -> empty .)
    LPAREN          reduce using rule 61 (breadcrumb -> empty .)


state 89

    (60) while -> WHILE breadcrumb . LPAREN expression RPAREN gotof block

    LPAREN          shift and go to state 126


state 90

    (63) if_else -> IF LPAREN . expression RPAREN gotof block ELSE goto block
    (62) if -> IF LPAREN . expression RPAREN gotof block
    (79) expression -> . t_expression
    (80) expression -> . NOT t_expression
    (87) t_expression -> . g_expression
    (88) t_expression -> . t_expression boolean_operator g_expression
    (89) g_expression -> . m_expression
    (90) g_expression -> . g_expression comparison_operator m_expression
    (91) m_expression -> . term
    (92) m_expression -> . m_expression addition_operator term
    (93) term -> . factor
    (94) term -> . term multiplication_operator factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 106
    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    CTES            shift and go to state 119
    LPAREN          shift and go to state 120

    expression                     shift and go to state 127
    t_expression                   shift and go to state 105
    g_expression                   shift and go to state 107
    m_expression                   shift and go to state 108
    term                           shift and go to state 109
    factor                         shift and go to state 110
    variable                       shift and go to state 111
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 91

    (81) print -> PRINT LPAREN . print_arguments RPAREN SEMICOLON
    (82) print_arguments -> . print_argument
    (83) print_arguments -> . print_arguments COMMA print_argument
    (84) print_argument -> . CTES
    (85) print_argument -> . expression
    (79) expression -> . t_expression
    (80) expression -> . NOT t_expression
    (87) t_expression -> . g_expression
    (88) t_expression -> . t_expression boolean_operator g_expression
    (89) g_expression -> . m_expression
    (90) g_expression -> . g_expression comparison_operator m_expression
    (91) m_expression -> . term
    (92) m_expression -> . m_expression addition_operator term
    (93) term -> . factor
    (94) term -> . term multiplication_operator factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    CTES            shift and go to state 130
    NOT             shift and go to state 106
    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    LPAREN          shift and go to state 120

    print_arguments                shift and go to state 128
    print_argument                 shift and go to state 129
    expression                     shift and go to state 131
    t_expression                   shift and go to state 105
    g_expression                   shift and go to state 107
    m_expression                   shift and go to state 108
    term                           shift and go to state 109
    factor                         shift and go to state 110
    variable                       shift and go to state 111
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 92

    (52) read -> READ LPAREN . ID RPAREN SEMICOLON

    ID              shift and go to state 132


state 93

    (49) gen_key -> GENKEY LPAREN . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 133


state 94

    (50) encrypt -> ENCRYPT LPAREN . ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 134


state 95

    (51) decrypt -> DECRYPT LPAREN . ID COMMA ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 135


state 96

    (48) sha_256 -> SHA_256 LPAREN . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 136


state 97

    (47) random_salt -> RANDOM_SALT LPAREN . CTEI RPAREN SPECIAL ID SEMICOLON

    CTEI            shift and go to state 137


state 98

    (7) function_signature -> simple_type ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (17) open_var_declaration -> . empty
    (122) empty -> .

    INT             reduce using rule 122 (empty -> .)
    FLOAT           reduce using rule 122 (empty -> .)
    CHAR            reduce using rule 122 (empty -> .)
    BOOLEAN         reduce using rule 122 (empty -> .)
    STRING          reduce using rule 122 (empty -> .)
    COMMA           reduce using rule 122 (empty -> .)
    RPAREN          reduce using rule 122 (empty -> .)

    open_var_declaration           shift and go to state 138
    empty                          shift and go to state 18

state 99

    (8) function_signature -> VOID ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations
    (17) open_var_declaration -> . empty
    (122) empty -> .

    INT             reduce using rule 122 (empty -> .)
    FLOAT           reduce using rule 122 (empty -> .)
    CHAR            reduce using rule 122 (empty -> .)
    BOOLEAN         reduce using rule 122 (empty -> .)
    STRING          reduce using rule 122 (empty -> .)
    COMMA           reduce using rule 122 (empty -> .)
    RPAREN          reduce using rule 122 (empty -> .)

    open_var_declaration           shift and go to state 139
    empty                          shift and go to state 18

state 100

    (16) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .

    VARIABLE        reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    FUNCTION        reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    MAIN            reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    LBRACE          reduce using rule 16 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)


state 101

    (18) close_var_declaration -> empty .

    VARIABLE        reduce using rule 18 (close_var_declaration -> empty .)
    FUNCTION        reduce using rule 18 (close_var_declaration -> empty .)
    MAIN            reduce using rule 18 (close_var_declaration -> empty .)
    LBRACE          reduce using rule 18 (close_var_declaration -> empty .)
    RPAREN          reduce using rule 18 (close_var_declaration -> empty .)


state 102

    (20) variables -> variable COMMA variables .

    SEMICOLON       reduce using rule 20 (variables -> variable COMMA variables .)


state 103

    (21) variable -> ID .
    (22) variable -> ID . LBRACK expression RBRACK
    (23) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (69) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (70) invocation_1 -> . empty
    (122) empty -> .

    TIMES           reduce using rule 21 (variable -> ID .)
    DIVIDE          reduce using rule 21 (variable -> ID .)
    PLUS            reduce using rule 21 (variable -> ID .)
    MINUS           reduce using rule 21 (variable -> ID .)
    LESS            reduce using rule 21 (variable -> ID .)
    GREATER         reduce using rule 21 (variable -> ID .)
    EQUALS          reduce using rule 21 (variable -> ID .)
    NOTEQUAL        reduce using rule 21 (variable -> ID .)
    GREATERTHAN     reduce using rule 21 (variable -> ID .)
    LESSTHAN        reduce using rule 21 (variable -> ID .)
    AND             reduce using rule 21 (variable -> ID .)
    OR              reduce using rule 21 (variable -> ID .)
    RBRACK          reduce using rule 21 (variable -> ID .)
    SEMICOLON       reduce using rule 21 (variable -> ID .)
    RPAREN          reduce using rule 21 (variable -> ID .)
    COMMA           reduce using rule 21 (variable -> ID .)
    FROM            reduce using rule 21 (variable -> ID .)
    LBRACK          shift and go to state 78
    LPAREN          reduce using rule 122 (empty -> .)

    invocation_1                   shift and go to state 85
    empty                          shift and go to state 86

state 104

    (22) variable -> ID LBRACK expression . RBRACK
    (23) variable -> ID LBRACK expression . RBRACK LBRACK expression RBRACK

    RBRACK          shift and go to state 140


state 105

    (79) expression -> t_expression .
    (88) t_expression -> t_expression . boolean_operator g_expression
    (108) boolean_operator -> . AND
    (109) boolean_operator -> . OR

    RBRACK          reduce using rule 79 (expression -> t_expression .)
    SEMICOLON       reduce using rule 79 (expression -> t_expression .)
    RPAREN          reduce using rule 79 (expression -> t_expression .)
    COMMA           reduce using rule 79 (expression -> t_expression .)
    FROM            reduce using rule 79 (expression -> t_expression .)
    AND             shift and go to state 142
    OR              shift and go to state 143

    boolean_operator               shift and go to state 141

state 106

    (80) expression -> NOT . t_expression
    (87) t_expression -> . g_expression
    (88) t_expression -> . t_expression boolean_operator g_expression
    (89) g_expression -> . m_expression
    (90) g_expression -> . g_expression comparison_operator m_expression
    (91) m_expression -> . term
    (92) m_expression -> . m_expression addition_operator term
    (93) term -> . factor
    (94) term -> . term multiplication_operator factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    CTES            shift and go to state 119
    LPAREN          shift and go to state 120

    t_expression                   shift and go to state 144
    g_expression                   shift and go to state 107
    m_expression                   shift and go to state 108
    term                           shift and go to state 109
    factor                         shift and go to state 110
    variable                       shift and go to state 111
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 107

    (87) t_expression -> g_expression .
    (90) g_expression -> g_expression . comparison_operator m_expression
    (100) comparison_operator -> . LESS
    (101) comparison_operator -> . GREATER
    (102) comparison_operator -> . EQUALS
    (103) comparison_operator -> . NOTEQUAL
    (104) comparison_operator -> . GREATERTHAN
    (105) comparison_operator -> . LESSTHAN

    AND             reduce using rule 87 (t_expression -> g_expression .)
    OR              reduce using rule 87 (t_expression -> g_expression .)
    RBRACK          reduce using rule 87 (t_expression -> g_expression .)
    SEMICOLON       reduce using rule 87 (t_expression -> g_expression .)
    RPAREN          reduce using rule 87 (t_expression -> g_expression .)
    COMMA           reduce using rule 87 (t_expression -> g_expression .)
    FROM            reduce using rule 87 (t_expression -> g_expression .)
    LESS            shift and go to state 146
    GREATER         shift and go to state 147
    EQUALS          shift and go to state 148
    NOTEQUAL        shift and go to state 149
    GREATERTHAN     shift and go to state 150
    LESSTHAN        shift and go to state 151

    comparison_operator            shift and go to state 145

state 108

    (89) g_expression -> m_expression .
    (92) m_expression -> m_expression . addition_operator term
    (106) addition_operator -> . PLUS
    (107) addition_operator -> . MINUS

    LESS            reduce using rule 89 (g_expression -> m_expression .)
    GREATER         reduce using rule 89 (g_expression -> m_expression .)
    EQUALS          reduce using rule 89 (g_expression -> m_expression .)
    NOTEQUAL        reduce using rule 89 (g_expression -> m_expression .)
    GREATERTHAN     reduce using rule 89 (g_expression -> m_expression .)
    LESSTHAN        reduce using rule 89 (g_expression -> m_expression .)
    AND             reduce using rule 89 (g_expression -> m_expression .)
    OR              reduce using rule 89 (g_expression -> m_expression .)
    RBRACK          reduce using rule 89 (g_expression -> m_expression .)
    SEMICOLON       reduce using rule 89 (g_expression -> m_expression .)
    RPAREN          reduce using rule 89 (g_expression -> m_expression .)
    COMMA           reduce using rule 89 (g_expression -> m_expression .)
    FROM            reduce using rule 89 (g_expression -> m_expression .)
    PLUS            shift and go to state 153
    MINUS           shift and go to state 154

    addition_operator              shift and go to state 152

state 109

    (91) m_expression -> term .
    (94) term -> term . multiplication_operator factor
    (110) multiplication_operator -> . TIMES
    (111) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 91 (m_expression -> term .)
    MINUS           reduce using rule 91 (m_expression -> term .)
    LESS            reduce using rule 91 (m_expression -> term .)
    GREATER         reduce using rule 91 (m_expression -> term .)
    EQUALS          reduce using rule 91 (m_expression -> term .)
    NOTEQUAL        reduce using rule 91 (m_expression -> term .)
    GREATERTHAN     reduce using rule 91 (m_expression -> term .)
    LESSTHAN        reduce using rule 91 (m_expression -> term .)
    AND             reduce using rule 91 (m_expression -> term .)
    OR              reduce using rule 91 (m_expression -> term .)
    RBRACK          reduce using rule 91 (m_expression -> term .)
    SEMICOLON       reduce using rule 91 (m_expression -> term .)
    RPAREN          reduce using rule 91 (m_expression -> term .)
    COMMA           reduce using rule 91 (m_expression -> term .)
    FROM            reduce using rule 91 (m_expression -> term .)
    TIMES           shift and go to state 156
    DIVIDE          shift and go to state 157

    multiplication_operator        shift and go to state 155

state 110

    (93) term -> factor .

    TIMES           reduce using rule 93 (term -> factor .)
    DIVIDE          reduce using rule 93 (term -> factor .)
    PLUS            reduce using rule 93 (term -> factor .)
    MINUS           reduce using rule 93 (term -> factor .)
    LESS            reduce using rule 93 (term -> factor .)
    GREATER         reduce using rule 93 (term -> factor .)
    EQUALS          reduce using rule 93 (term -> factor .)
    NOTEQUAL        reduce using rule 93 (term -> factor .)
    GREATERTHAN     reduce using rule 93 (term -> factor .)
    LESSTHAN        reduce using rule 93 (term -> factor .)
    AND             reduce using rule 93 (term -> factor .)
    OR              reduce using rule 93 (term -> factor .)
    RBRACK          reduce using rule 93 (term -> factor .)
    SEMICOLON       reduce using rule 93 (term -> factor .)
    RPAREN          reduce using rule 93 (term -> factor .)
    COMMA           reduce using rule 93 (term -> factor .)
    FROM            reduce using rule 93 (term -> factor .)


state 111

    (95) factor -> variable .

    TIMES           reduce using rule 95 (factor -> variable .)
    DIVIDE          reduce using rule 95 (factor -> variable .)
    PLUS            reduce using rule 95 (factor -> variable .)
    MINUS           reduce using rule 95 (factor -> variable .)
    LESS            reduce using rule 95 (factor -> variable .)
    GREATER         reduce using rule 95 (factor -> variable .)
    EQUALS          reduce using rule 95 (factor -> variable .)
    NOTEQUAL        reduce using rule 95 (factor -> variable .)
    GREATERTHAN     reduce using rule 95 (factor -> variable .)
    LESSTHAN        reduce using rule 95 (factor -> variable .)
    AND             reduce using rule 95 (factor -> variable .)
    OR              reduce using rule 95 (factor -> variable .)
    RBRACK          reduce using rule 95 (factor -> variable .)
    SEMICOLON       reduce using rule 95 (factor -> variable .)
    RPAREN          reduce using rule 95 (factor -> variable .)
    COMMA           reduce using rule 95 (factor -> variable .)
    FROM            reduce using rule 95 (factor -> variable .)


state 112

    (96) factor -> cte .

    TIMES           reduce using rule 96 (factor -> cte .)
    DIVIDE          reduce using rule 96 (factor -> cte .)
    PLUS            reduce using rule 96 (factor -> cte .)
    MINUS           reduce using rule 96 (factor -> cte .)
    LESS            reduce using rule 96 (factor -> cte .)
    GREATER         reduce using rule 96 (factor -> cte .)
    EQUALS          reduce using rule 96 (factor -> cte .)
    NOTEQUAL        reduce using rule 96 (factor -> cte .)
    GREATERTHAN     reduce using rule 96 (factor -> cte .)
    LESSTHAN        reduce using rule 96 (factor -> cte .)
    AND             reduce using rule 96 (factor -> cte .)
    OR              reduce using rule 96 (factor -> cte .)
    RBRACK          reduce using rule 96 (factor -> cte .)
    SEMICOLON       reduce using rule 96 (factor -> cte .)
    RPAREN          reduce using rule 96 (factor -> cte .)
    COMMA           reduce using rule 96 (factor -> cte .)
    FROM            reduce using rule 96 (factor -> cte .)


state 113

    (97) factor -> invocation .

    TIMES           reduce using rule 97 (factor -> invocation .)
    DIVIDE          reduce using rule 97 (factor -> invocation .)
    PLUS            reduce using rule 97 (factor -> invocation .)
    MINUS           reduce using rule 97 (factor -> invocation .)
    LESS            reduce using rule 97 (factor -> invocation .)
    GREATER         reduce using rule 97 (factor -> invocation .)
    EQUALS          reduce using rule 97 (factor -> invocation .)
    NOTEQUAL        reduce using rule 97 (factor -> invocation .)
    GREATERTHAN     reduce using rule 97 (factor -> invocation .)
    LESSTHAN        reduce using rule 97 (factor -> invocation .)
    AND             reduce using rule 97 (factor -> invocation .)
    OR              reduce using rule 97 (factor -> invocation .)
    RBRACK          reduce using rule 97 (factor -> invocation .)
    SEMICOLON       reduce using rule 97 (factor -> invocation .)
    RPAREN          reduce using rule 97 (factor -> invocation .)
    COMMA           reduce using rule 97 (factor -> invocation .)
    FROM            reduce using rule 97 (factor -> invocation .)


state 114

    (98) factor -> expression_parenthesis .

    TIMES           reduce using rule 98 (factor -> expression_parenthesis .)
    DIVIDE          reduce using rule 98 (factor -> expression_parenthesis .)
    PLUS            reduce using rule 98 (factor -> expression_parenthesis .)
    MINUS           reduce using rule 98 (factor -> expression_parenthesis .)
    LESS            reduce using rule 98 (factor -> expression_parenthesis .)
    GREATER         reduce using rule 98 (factor -> expression_parenthesis .)
    EQUALS          reduce using rule 98 (factor -> expression_parenthesis .)
    NOTEQUAL        reduce using rule 98 (factor -> expression_parenthesis .)
    GREATERTHAN     reduce using rule 98 (factor -> expression_parenthesis .)
    LESSTHAN        reduce using rule 98 (factor -> expression_parenthesis .)
    AND             reduce using rule 98 (factor -> expression_parenthesis .)
    OR              reduce using rule 98 (factor -> expression_parenthesis .)
    RBRACK          reduce using rule 98 (factor -> expression_parenthesis .)
    SEMICOLON       reduce using rule 98 (factor -> expression_parenthesis .)
    RPAREN          reduce using rule 98 (factor -> expression_parenthesis .)
    COMMA           reduce using rule 98 (factor -> expression_parenthesis .)
    FROM            reduce using rule 98 (factor -> expression_parenthesis .)


state 115

    (117) cte -> CTEI .

    TIMES           reduce using rule 117 (cte -> CTEI .)
    DIVIDE          reduce using rule 117 (cte -> CTEI .)
    PLUS            reduce using rule 117 (cte -> CTEI .)
    MINUS           reduce using rule 117 (cte -> CTEI .)
    LESS            reduce using rule 117 (cte -> CTEI .)
    GREATER         reduce using rule 117 (cte -> CTEI .)
    EQUALS          reduce using rule 117 (cte -> CTEI .)
    NOTEQUAL        reduce using rule 117 (cte -> CTEI .)
    GREATERTHAN     reduce using rule 117 (cte -> CTEI .)
    LESSTHAN        reduce using rule 117 (cte -> CTEI .)
    AND             reduce using rule 117 (cte -> CTEI .)
    OR              reduce using rule 117 (cte -> CTEI .)
    RBRACK          reduce using rule 117 (cte -> CTEI .)
    SEMICOLON       reduce using rule 117 (cte -> CTEI .)
    RPAREN          reduce using rule 117 (cte -> CTEI .)
    COMMA           reduce using rule 117 (cte -> CTEI .)
    FROM            reduce using rule 117 (cte -> CTEI .)


state 116

    (118) cte -> CTEF .

    TIMES           reduce using rule 118 (cte -> CTEF .)
    DIVIDE          reduce using rule 118 (cte -> CTEF .)
    PLUS            reduce using rule 118 (cte -> CTEF .)
    MINUS           reduce using rule 118 (cte -> CTEF .)
    LESS            reduce using rule 118 (cte -> CTEF .)
    GREATER         reduce using rule 118 (cte -> CTEF .)
    EQUALS          reduce using rule 118 (cte -> CTEF .)
    NOTEQUAL        reduce using rule 118 (cte -> CTEF .)
    GREATERTHAN     reduce using rule 118 (cte -> CTEF .)
    LESSTHAN        reduce using rule 118 (cte -> CTEF .)
    AND             reduce using rule 118 (cte -> CTEF .)
    OR              reduce using rule 118 (cte -> CTEF .)
    RBRACK          reduce using rule 118 (cte -> CTEF .)
    SEMICOLON       reduce using rule 118 (cte -> CTEF .)
    RPAREN          reduce using rule 118 (cte -> CTEF .)
    COMMA           reduce using rule 118 (cte -> CTEF .)
    FROM            reduce using rule 118 (cte -> CTEF .)


state 117

    (119) cte -> CTEC .

    TIMES           reduce using rule 119 (cte -> CTEC .)
    DIVIDE          reduce using rule 119 (cte -> CTEC .)
    PLUS            reduce using rule 119 (cte -> CTEC .)
    MINUS           reduce using rule 119 (cte -> CTEC .)
    LESS            reduce using rule 119 (cte -> CTEC .)
    GREATER         reduce using rule 119 (cte -> CTEC .)
    EQUALS          reduce using rule 119 (cte -> CTEC .)
    NOTEQUAL        reduce using rule 119 (cte -> CTEC .)
    GREATERTHAN     reduce using rule 119 (cte -> CTEC .)
    LESSTHAN        reduce using rule 119 (cte -> CTEC .)
    AND             reduce using rule 119 (cte -> CTEC .)
    OR              reduce using rule 119 (cte -> CTEC .)
    RBRACK          reduce using rule 119 (cte -> CTEC .)
    SEMICOLON       reduce using rule 119 (cte -> CTEC .)
    RPAREN          reduce using rule 119 (cte -> CTEC .)
    COMMA           reduce using rule 119 (cte -> CTEC .)
    FROM            reduce using rule 119 (cte -> CTEC .)


state 118

    (120) cte -> CTEB .

    TIMES           reduce using rule 120 (cte -> CTEB .)
    DIVIDE          reduce using rule 120 (cte -> CTEB .)
    PLUS            reduce using rule 120 (cte -> CTEB .)
    MINUS           reduce using rule 120 (cte -> CTEB .)
    LESS            reduce using rule 120 (cte -> CTEB .)
    GREATER         reduce using rule 120 (cte -> CTEB .)
    EQUALS          reduce using rule 120 (cte -> CTEB .)
    NOTEQUAL        reduce using rule 120 (cte -> CTEB .)
    GREATERTHAN     reduce using rule 120 (cte -> CTEB .)
    LESSTHAN        reduce using rule 120 (cte -> CTEB .)
    AND             reduce using rule 120 (cte -> CTEB .)
    OR              reduce using rule 120 (cte -> CTEB .)
    RBRACK          reduce using rule 120 (cte -> CTEB .)
    SEMICOLON       reduce using rule 120 (cte -> CTEB .)
    RPAREN          reduce using rule 120 (cte -> CTEB .)
    COMMA           reduce using rule 120 (cte -> CTEB .)
    FROM            reduce using rule 120 (cte -> CTEB .)


state 119

    (121) cte -> CTES .

    TIMES           reduce using rule 121 (cte -> CTES .)
    DIVIDE          reduce using rule 121 (cte -> CTES .)
    PLUS            reduce using rule 121 (cte -> CTES .)
    MINUS           reduce using rule 121 (cte -> CTES .)
    LESS            reduce using rule 121 (cte -> CTES .)
    GREATER         reduce using rule 121 (cte -> CTES .)
    EQUALS          reduce using rule 121 (cte -> CTES .)
    NOTEQUAL        reduce using rule 121 (cte -> CTES .)
    GREATERTHAN     reduce using rule 121 (cte -> CTES .)
    LESSTHAN        reduce using rule 121 (cte -> CTES .)
    AND             reduce using rule 121 (cte -> CTES .)
    OR              reduce using rule 121 (cte -> CTES .)
    RBRACK          reduce using rule 121 (cte -> CTES .)
    SEMICOLON       reduce using rule 121 (cte -> CTES .)
    RPAREN          reduce using rule 121 (cte -> CTES .)
    COMMA           reduce using rule 121 (cte -> CTES .)
    FROM            reduce using rule 121 (cte -> CTES .)


state 120

    (99) expression_parenthesis -> LPAREN . expression RPAREN
    (79) expression -> . t_expression
    (80) expression -> . NOT t_expression
    (87) t_expression -> . g_expression
    (88) t_expression -> . t_expression boolean_operator g_expression
    (89) g_expression -> . m_expression
    (90) g_expression -> . g_expression comparison_operator m_expression
    (91) m_expression -> . term
    (92) m_expression -> . m_expression addition_operator term
    (93) term -> . factor
    (94) term -> . term multiplication_operator factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 106
    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    CTES            shift and go to state 119
    LPAREN          shift and go to state 120

    expression                     shift and go to state 158
    t_expression                   shift and go to state 105
    g_expression                   shift and go to state 107
    m_expression                   shift and go to state 108
    term                           shift and go to state 109
    factor                         shift and go to state 110
    variable                       shift and go to state 111
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 121

    (11) main -> MAIN LPAREN RPAREN main_scope var_declarations . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 159

state 122

    (86) assingation -> variable ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 160


state 123

    (55) for -> FOR LPAREN ID . for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4
    (56) for_1 -> . empty
    (122) empty -> .

    ASSIGN          reduce using rule 122 (empty -> .)

    for_1                          shift and go to state 161
    empty                          shift and go to state 162

state 124

    (69) invocation -> ID invocation_1 LPAREN . invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (71) invocation_2 -> . empty
    (122) empty -> .

    NOT             reduce using rule 122 (empty -> .)
    ID              reduce using rule 122 (empty -> .)
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)
    CTEC            reduce using rule 122 (empty -> .)
    CTEB            reduce using rule 122 (empty -> .)
    CTES            reduce using rule 122 (empty -> .)
    LPAREN          reduce using rule 122 (empty -> .)
    RPAREN          reduce using rule 122 (empty -> .)
    COMMA           reduce using rule 122 (empty -> .)

    invocation_2                   shift and go to state 163
    empty                          shift and go to state 164

state 125

    (54) do_while -> DO breadcrumb block . WHILE LPAREN expression RPAREN gotot SEMICOLON

    WHILE           shift and go to state 165


state 126

    (60) while -> WHILE breadcrumb LPAREN . expression RPAREN gotof block
    (79) expression -> . t_expression
    (80) expression -> . NOT t_expression
    (87) t_expression -> . g_expression
    (88) t_expression -> . t_expression boolean_operator g_expression
    (89) g_expression -> . m_expression
    (90) g_expression -> . g_expression comparison_operator m_expression
    (91) m_expression -> . term
    (92) m_expression -> . m_expression addition_operator term
    (93) term -> . factor
    (94) term -> . term multiplication_operator factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 106
    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    CTES            shift and go to state 119
    LPAREN          shift and go to state 120

    expression                     shift and go to state 166
    t_expression                   shift and go to state 105
    g_expression                   shift and go to state 107
    m_expression                   shift and go to state 108
    term                           shift and go to state 109
    factor                         shift and go to state 110
    variable                       shift and go to state 111
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 127

    (63) if_else -> IF LPAREN expression . RPAREN gotof block ELSE goto block
    (62) if -> IF LPAREN expression . RPAREN gotof block

    RPAREN          shift and go to state 167


state 128

    (81) print -> PRINT LPAREN print_arguments . RPAREN SEMICOLON
    (83) print_arguments -> print_arguments . COMMA print_argument

    RPAREN          shift and go to state 168
    COMMA           shift and go to state 169


state 129

    (82) print_arguments -> print_argument .

    RPAREN          reduce using rule 82 (print_arguments -> print_argument .)
    COMMA           reduce using rule 82 (print_arguments -> print_argument .)


state 130

    (84) print_argument -> CTES .
    (121) cte -> CTES .

  ! reduce/reduce conflict for RPAREN resolved using rule 84 (print_argument -> CTES .)
  ! reduce/reduce conflict for COMMA resolved using rule 84 (print_argument -> CTES .)
    RPAREN          reduce using rule 84 (print_argument -> CTES .)
    COMMA           reduce using rule 84 (print_argument -> CTES .)
    TIMES           reduce using rule 121 (cte -> CTES .)
    DIVIDE          reduce using rule 121 (cte -> CTES .)
    PLUS            reduce using rule 121 (cte -> CTES .)
    MINUS           reduce using rule 121 (cte -> CTES .)
    LESS            reduce using rule 121 (cte -> CTES .)
    GREATER         reduce using rule 121 (cte -> CTES .)
    EQUALS          reduce using rule 121 (cte -> CTES .)
    NOTEQUAL        reduce using rule 121 (cte -> CTES .)
    GREATERTHAN     reduce using rule 121 (cte -> CTES .)
    LESSTHAN        reduce using rule 121 (cte -> CTES .)
    AND             reduce using rule 121 (cte -> CTES .)
    OR              reduce using rule 121 (cte -> CTES .)

  ! RPAREN          [ reduce using rule 121 (cte -> CTES .) ]
  ! COMMA           [ reduce using rule 121 (cte -> CTES .) ]


state 131

    (85) print_argument -> expression .

    RPAREN          reduce using rule 85 (print_argument -> expression .)
    COMMA           reduce using rule 85 (print_argument -> expression .)


state 132

    (52) read -> READ LPAREN ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 170


state 133

    (49) gen_key -> GENKEY LPAREN RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 171


state 134

    (50) encrypt -> ENCRYPT LPAREN ID . COMMA ID RPAREN SPECIAL ID SEMICOLON

    COMMA           shift and go to state 172


state 135

    (51) decrypt -> DECRYPT LPAREN ID . COMMA ID RPAREN SPECIAL ID SEMICOLON

    COMMA           shift and go to state 173


state 136

    (48) sha_256 -> SHA_256 LPAREN ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 174


state 137

    (47) random_salt -> RANDOM_SALT LPAREN CTEI . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 175


state 138

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations
    (24) parameters -> . parameters COMMA parameter
    (25) parameters -> . parameter
    (26) parameters -> . empty
    (27) parameter -> . simple_type ID
    (122) empty -> .
    (112) simple_type -> . INT
    (113) simple_type -> . FLOAT
    (114) simple_type -> . CHAR
    (115) simple_type -> . BOOLEAN
    (116) simple_type -> . STRING

    COMMA           reduce using rule 122 (empty -> .)
    RPAREN          reduce using rule 122 (empty -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    simple_type                    shift and go to state 176
    parameters                     shift and go to state 177
    parameter                      shift and go to state 178
    empty                          shift and go to state 179

state 139

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations
    (24) parameters -> . parameters COMMA parameter
    (25) parameters -> . parameter
    (26) parameters -> . empty
    (27) parameter -> . simple_type ID
    (122) empty -> .
    (112) simple_type -> . INT
    (113) simple_type -> . FLOAT
    (114) simple_type -> . CHAR
    (115) simple_type -> . BOOLEAN
    (116) simple_type -> . STRING

    COMMA           reduce using rule 122 (empty -> .)
    RPAREN          reduce using rule 122 (empty -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    parameters                     shift and go to state 180
    parameter                      shift and go to state 178
    empty                          shift and go to state 179
    simple_type                    shift and go to state 176

state 140

    (22) variable -> ID LBRACK expression RBRACK .
    (23) variable -> ID LBRACK expression RBRACK . LBRACK expression RBRACK

    COMMA           reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    TIMES           reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    PLUS            reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    MINUS           reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    LESS            reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    GREATER         reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    EQUALS          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    AND             reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    OR              reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    RBRACK          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    RPAREN          reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    FROM            reduce using rule 22 (variable -> ID LBRACK expression RBRACK .)
    LBRACK          shift and go to state 181


state 141

    (88) t_expression -> t_expression boolean_operator . g_expression
    (89) g_expression -> . m_expression
    (90) g_expression -> . g_expression comparison_operator m_expression
    (91) m_expression -> . term
    (92) m_expression -> . m_expression addition_operator term
    (93) term -> . factor
    (94) term -> . term multiplication_operator factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    CTES            shift and go to state 119
    LPAREN          shift and go to state 120

    g_expression                   shift and go to state 182
    m_expression                   shift and go to state 108
    term                           shift and go to state 109
    factor                         shift and go to state 110
    variable                       shift and go to state 111
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 142

    (108) boolean_operator -> AND .

    ID              reduce using rule 108 (boolean_operator -> AND .)
    CTEI            reduce using rule 108 (boolean_operator -> AND .)
    CTEF            reduce using rule 108 (boolean_operator -> AND .)
    CTEC            reduce using rule 108 (boolean_operator -> AND .)
    CTEB            reduce using rule 108 (boolean_operator -> AND .)
    CTES            reduce using rule 108 (boolean_operator -> AND .)
    LPAREN          reduce using rule 108 (boolean_operator -> AND .)


state 143

    (109) boolean_operator -> OR .

    ID              reduce using rule 109 (boolean_operator -> OR .)
    CTEI            reduce using rule 109 (boolean_operator -> OR .)
    CTEF            reduce using rule 109 (boolean_operator -> OR .)
    CTEC            reduce using rule 109 (boolean_operator -> OR .)
    CTEB            reduce using rule 109 (boolean_operator -> OR .)
    CTES            reduce using rule 109 (boolean_operator -> OR .)
    LPAREN          reduce using rule 109 (boolean_operator -> OR .)


state 144

    (80) expression -> NOT t_expression .
    (88) t_expression -> t_expression . boolean_operator g_expression
    (108) boolean_operator -> . AND
    (109) boolean_operator -> . OR

    RBRACK          reduce using rule 80 (expression -> NOT t_expression .)
    SEMICOLON       reduce using rule 80 (expression -> NOT t_expression .)
    RPAREN          reduce using rule 80 (expression -> NOT t_expression .)
    COMMA           reduce using rule 80 (expression -> NOT t_expression .)
    FROM            reduce using rule 80 (expression -> NOT t_expression .)
    AND             shift and go to state 142
    OR              shift and go to state 143

    boolean_operator               shift and go to state 141

state 145

    (90) g_expression -> g_expression comparison_operator . m_expression
    (91) m_expression -> . term
    (92) m_expression -> . m_expression addition_operator term
    (93) term -> . factor
    (94) term -> . term multiplication_operator factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    CTES            shift and go to state 119
    LPAREN          shift and go to state 120

    m_expression                   shift and go to state 183
    term                           shift and go to state 109
    factor                         shift and go to state 110
    variable                       shift and go to state 111
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 146

    (100) comparison_operator -> LESS .

    ID              reduce using rule 100 (comparison_operator -> LESS .)
    CTEI            reduce using rule 100 (comparison_operator -> LESS .)
    CTEF            reduce using rule 100 (comparison_operator -> LESS .)
    CTEC            reduce using rule 100 (comparison_operator -> LESS .)
    CTEB            reduce using rule 100 (comparison_operator -> LESS .)
    CTES            reduce using rule 100 (comparison_operator -> LESS .)
    LPAREN          reduce using rule 100 (comparison_operator -> LESS .)


state 147

    (101) comparison_operator -> GREATER .

    ID              reduce using rule 101 (comparison_operator -> GREATER .)
    CTEI            reduce using rule 101 (comparison_operator -> GREATER .)
    CTEF            reduce using rule 101 (comparison_operator -> GREATER .)
    CTEC            reduce using rule 101 (comparison_operator -> GREATER .)
    CTEB            reduce using rule 101 (comparison_operator -> GREATER .)
    CTES            reduce using rule 101 (comparison_operator -> GREATER .)
    LPAREN          reduce using rule 101 (comparison_operator -> GREATER .)


state 148

    (102) comparison_operator -> EQUALS .

    ID              reduce using rule 102 (comparison_operator -> EQUALS .)
    CTEI            reduce using rule 102 (comparison_operator -> EQUALS .)
    CTEF            reduce using rule 102 (comparison_operator -> EQUALS .)
    CTEC            reduce using rule 102 (comparison_operator -> EQUALS .)
    CTEB            reduce using rule 102 (comparison_operator -> EQUALS .)
    CTES            reduce using rule 102 (comparison_operator -> EQUALS .)
    LPAREN          reduce using rule 102 (comparison_operator -> EQUALS .)


state 149

    (103) comparison_operator -> NOTEQUAL .

    ID              reduce using rule 103 (comparison_operator -> NOTEQUAL .)
    CTEI            reduce using rule 103 (comparison_operator -> NOTEQUAL .)
    CTEF            reduce using rule 103 (comparison_operator -> NOTEQUAL .)
    CTEC            reduce using rule 103 (comparison_operator -> NOTEQUAL .)
    CTEB            reduce using rule 103 (comparison_operator -> NOTEQUAL .)
    CTES            reduce using rule 103 (comparison_operator -> NOTEQUAL .)
    LPAREN          reduce using rule 103 (comparison_operator -> NOTEQUAL .)


state 150

    (104) comparison_operator -> GREATERTHAN .

    ID              reduce using rule 104 (comparison_operator -> GREATERTHAN .)
    CTEI            reduce using rule 104 (comparison_operator -> GREATERTHAN .)
    CTEF            reduce using rule 104 (comparison_operator -> GREATERTHAN .)
    CTEC            reduce using rule 104 (comparison_operator -> GREATERTHAN .)
    CTEB            reduce using rule 104 (comparison_operator -> GREATERTHAN .)
    CTES            reduce using rule 104 (comparison_operator -> GREATERTHAN .)
    LPAREN          reduce using rule 104 (comparison_operator -> GREATERTHAN .)


state 151

    (105) comparison_operator -> LESSTHAN .

    ID              reduce using rule 105 (comparison_operator -> LESSTHAN .)
    CTEI            reduce using rule 105 (comparison_operator -> LESSTHAN .)
    CTEF            reduce using rule 105 (comparison_operator -> LESSTHAN .)
    CTEC            reduce using rule 105 (comparison_operator -> LESSTHAN .)
    CTEB            reduce using rule 105 (comparison_operator -> LESSTHAN .)
    CTES            reduce using rule 105 (comparison_operator -> LESSTHAN .)
    LPAREN          reduce using rule 105 (comparison_operator -> LESSTHAN .)


state 152

    (92) m_expression -> m_expression addition_operator . term
    (93) term -> . factor
    (94) term -> . term multiplication_operator factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    CTES            shift and go to state 119
    LPAREN          shift and go to state 120

    term                           shift and go to state 184
    factor                         shift and go to state 110
    variable                       shift and go to state 111
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 153

    (106) addition_operator -> PLUS .

    ID              reduce using rule 106 (addition_operator -> PLUS .)
    CTEI            reduce using rule 106 (addition_operator -> PLUS .)
    CTEF            reduce using rule 106 (addition_operator -> PLUS .)
    CTEC            reduce using rule 106 (addition_operator -> PLUS .)
    CTEB            reduce using rule 106 (addition_operator -> PLUS .)
    CTES            reduce using rule 106 (addition_operator -> PLUS .)
    LPAREN          reduce using rule 106 (addition_operator -> PLUS .)


state 154

    (107) addition_operator -> MINUS .

    ID              reduce using rule 107 (addition_operator -> MINUS .)
    CTEI            reduce using rule 107 (addition_operator -> MINUS .)
    CTEF            reduce using rule 107 (addition_operator -> MINUS .)
    CTEC            reduce using rule 107 (addition_operator -> MINUS .)
    CTEB            reduce using rule 107 (addition_operator -> MINUS .)
    CTES            reduce using rule 107 (addition_operator -> MINUS .)
    LPAREN          reduce using rule 107 (addition_operator -> MINUS .)


state 155

    (94) term -> term multiplication_operator . factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    CTES            shift and go to state 119
    LPAREN          shift and go to state 120

    factor                         shift and go to state 185
    variable                       shift and go to state 111
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 156

    (110) multiplication_operator -> TIMES .

    ID              reduce using rule 110 (multiplication_operator -> TIMES .)
    CTEI            reduce using rule 110 (multiplication_operator -> TIMES .)
    CTEF            reduce using rule 110 (multiplication_operator -> TIMES .)
    CTEC            reduce using rule 110 (multiplication_operator -> TIMES .)
    CTEB            reduce using rule 110 (multiplication_operator -> TIMES .)
    CTES            reduce using rule 110 (multiplication_operator -> TIMES .)
    LPAREN          reduce using rule 110 (multiplication_operator -> TIMES .)


state 157

    (111) multiplication_operator -> DIVIDE .

    ID              reduce using rule 111 (multiplication_operator -> DIVIDE .)
    CTEI            reduce using rule 111 (multiplication_operator -> DIVIDE .)
    CTEF            reduce using rule 111 (multiplication_operator -> DIVIDE .)
    CTEC            reduce using rule 111 (multiplication_operator -> DIVIDE .)
    CTEB            reduce using rule 111 (multiplication_operator -> DIVIDE .)
    CTES            reduce using rule 111 (multiplication_operator -> DIVIDE .)
    LPAREN          reduce using rule 111 (multiplication_operator -> DIVIDE .)


state 158

    (99) expression_parenthesis -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 186


state 159

    (11) main -> MAIN LPAREN RPAREN main_scope var_declarations block .

    END             reduce using rule 11 (main -> MAIN LPAREN RPAREN main_scope var_declarations block .)


state 160

    (86) assingation -> variable ASSIGN expression SEMICOLON .

    FOR             reduce using rule 86 (assingation -> variable ASSIGN expression SEMICOLON .)
    DO              reduce using rule 86 (assingation -> variable ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 86 (assingation -> variable ASSIGN expression SEMICOLON .)
    IF              reduce using rule 86 (assingation -> variable ASSIGN expression SEMICOLON .)
    ID              reduce using rule 86 (assingation -> variable ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 86 (assingation -> variable ASSIGN expression SEMICOLON .)
    READ            reduce using rule 86 (assingation -> variable ASSIGN expression SEMICOLON .)
    GENKEY          reduce using rule 86 (assingation -> variable ASSIGN expression SEMICOLON .)
    ENCRYPT         reduce using rule 86 (assingation -> variable ASSIGN expression SEMICOLON .)
    DECRYPT         reduce using rule 86 (assingation -> variable ASSIGN expression SEMICOLON .)
    SHA_256         reduce using rule 86 (assingation -> variable ASSIGN expression SEMICOLON .)
    RANDOM_SALT     reduce using rule 86 (assingation -> variable ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 86 (assingation -> variable ASSIGN expression SEMICOLON .)


state 161

    (55) for -> FOR LPAREN ID for_1 . ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4

    ASSIGN          shift and go to state 187


state 162

    (56) for_1 -> empty .

    ASSIGN          reduce using rule 56 (for_1 -> empty .)


state 163

    (69) invocation -> ID invocation_1 LPAREN invocation_2 . expressions RPAREN invocation_5 SEMICOLON invocation_6
    (76) expressions -> . expressions COMMA invocation_4 expression invocation_3
    (77) expressions -> . expression invocation_3
    (78) expressions -> . empty
    (79) expression -> . t_expression
    (80) expression -> . NOT t_expression
    (122) empty -> .
    (87) t_expression -> . g_expression
    (88) t_expression -> . t_expression boolean_operator g_expression
    (89) g_expression -> . m_expression
    (90) g_expression -> . g_expression comparison_operator m_expression
    (91) m_expression -> . term
    (92) m_expression -> . m_expression addition_operator term
    (93) term -> . factor
    (94) term -> . term multiplication_operator factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 106
    RPAREN          reduce using rule 122 (empty -> .)
    COMMA           reduce using rule 122 (empty -> .)
    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    CTES            shift and go to state 119
    LPAREN          shift and go to state 120

    expressions                    shift and go to state 188
    expression                     shift and go to state 189
    empty                          shift and go to state 190
    t_expression                   shift and go to state 105
    g_expression                   shift and go to state 107
    m_expression                   shift and go to state 108
    term                           shift and go to state 109
    factor                         shift and go to state 110
    variable                       shift and go to state 111
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 164

    (71) invocation_2 -> empty .

    NOT             reduce using rule 71 (invocation_2 -> empty .)
    ID              reduce using rule 71 (invocation_2 -> empty .)
    CTEI            reduce using rule 71 (invocation_2 -> empty .)
    CTEF            reduce using rule 71 (invocation_2 -> empty .)
    CTEC            reduce using rule 71 (invocation_2 -> empty .)
    CTEB            reduce using rule 71 (invocation_2 -> empty .)
    CTES            reduce using rule 71 (invocation_2 -> empty .)
    LPAREN          reduce using rule 71 (invocation_2 -> empty .)
    RPAREN          reduce using rule 71 (invocation_2 -> empty .)
    COMMA           reduce using rule 71 (invocation_2 -> empty .)


state 165

    (54) do_while -> DO breadcrumb block WHILE . LPAREN expression RPAREN gotot SEMICOLON

    LPAREN          shift and go to state 191


state 166

    (60) while -> WHILE breadcrumb LPAREN expression . RPAREN gotof block

    RPAREN          shift and go to state 192


state 167

    (63) if_else -> IF LPAREN expression RPAREN . gotof block ELSE goto block
    (62) if -> IF LPAREN expression RPAREN . gotof block
    (66) gotof -> . empty
    (122) empty -> .

    LBRACE          reduce using rule 122 (empty -> .)

    gotof                          shift and go to state 193
    empty                          shift and go to state 194

state 168

    (81) print -> PRINT LPAREN print_arguments RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 195


state 169

    (83) print_arguments -> print_arguments COMMA . print_argument
    (84) print_argument -> . CTES
    (85) print_argument -> . expression
    (79) expression -> . t_expression
    (80) expression -> . NOT t_expression
    (87) t_expression -> . g_expression
    (88) t_expression -> . t_expression boolean_operator g_expression
    (89) g_expression -> . m_expression
    (90) g_expression -> . g_expression comparison_operator m_expression
    (91) m_expression -> . term
    (92) m_expression -> . m_expression addition_operator term
    (93) term -> . factor
    (94) term -> . term multiplication_operator factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    CTES            shift and go to state 130
    NOT             shift and go to state 106
    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    LPAREN          shift and go to state 120

    print_argument                 shift and go to state 196
    expression                     shift and go to state 131
    t_expression                   shift and go to state 105
    g_expression                   shift and go to state 107
    m_expression                   shift and go to state 108
    term                           shift and go to state 109
    factor                         shift and go to state 110
    variable                       shift and go to state 111
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 170

    (52) read -> READ LPAREN ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 197


state 171

    (49) gen_key -> GENKEY LPAREN RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 198


state 172

    (50) encrypt -> ENCRYPT LPAREN ID COMMA . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 199


state 173

    (51) decrypt -> DECRYPT LPAREN ID COMMA . ID RPAREN SPECIAL ID SEMICOLON

    ID              shift and go to state 200


state 174

    (48) sha_256 -> SHA_256 LPAREN ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 201


state 175

    (47) random_salt -> RANDOM_SALT LPAREN CTEI RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 202


state 176

    (27) parameter -> simple_type . ID

    ID              shift and go to state 203


state 177

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations
    (24) parameters -> parameters . COMMA parameter
    (18) close_var_declaration -> . empty
    (122) empty -> .

    COMMA           shift and go to state 205
    RPAREN          reduce using rule 122 (empty -> .)

    close_var_declaration          shift and go to state 204
    empty                          shift and go to state 101

state 178

    (25) parameters -> parameter .

    COMMA           reduce using rule 25 (parameters -> parameter .)
    RPAREN          reduce using rule 25 (parameters -> parameter .)


state 179

    (26) parameters -> empty .

    COMMA           reduce using rule 26 (parameters -> empty .)
    RPAREN          reduce using rule 26 (parameters -> empty .)


state 180

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations
    (24) parameters -> parameters . COMMA parameter
    (18) close_var_declaration -> . empty
    (122) empty -> .

    COMMA           shift and go to state 205
    RPAREN          reduce using rule 122 (empty -> .)

    close_var_declaration          shift and go to state 206
    empty                          shift and go to state 101

state 181

    (23) variable -> ID LBRACK expression RBRACK LBRACK . expression RBRACK
    (79) expression -> . t_expression
    (80) expression -> . NOT t_expression
    (87) t_expression -> . g_expression
    (88) t_expression -> . t_expression boolean_operator g_expression
    (89) g_expression -> . m_expression
    (90) g_expression -> . g_expression comparison_operator m_expression
    (91) m_expression -> . term
    (92) m_expression -> . m_expression addition_operator term
    (93) term -> . factor
    (94) term -> . term multiplication_operator factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 106
    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    CTES            shift and go to state 119
    LPAREN          shift and go to state 120

    expression                     shift and go to state 207
    t_expression                   shift and go to state 105
    g_expression                   shift and go to state 107
    m_expression                   shift and go to state 108
    term                           shift and go to state 109
    factor                         shift and go to state 110
    variable                       shift and go to state 111
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 182

    (88) t_expression -> t_expression boolean_operator g_expression .
    (90) g_expression -> g_expression . comparison_operator m_expression
    (100) comparison_operator -> . LESS
    (101) comparison_operator -> . GREATER
    (102) comparison_operator -> . EQUALS
    (103) comparison_operator -> . NOTEQUAL
    (104) comparison_operator -> . GREATERTHAN
    (105) comparison_operator -> . LESSTHAN

    AND             reduce using rule 88 (t_expression -> t_expression boolean_operator g_expression .)
    OR              reduce using rule 88 (t_expression -> t_expression boolean_operator g_expression .)
    RBRACK          reduce using rule 88 (t_expression -> t_expression boolean_operator g_expression .)
    SEMICOLON       reduce using rule 88 (t_expression -> t_expression boolean_operator g_expression .)
    RPAREN          reduce using rule 88 (t_expression -> t_expression boolean_operator g_expression .)
    COMMA           reduce using rule 88 (t_expression -> t_expression boolean_operator g_expression .)
    FROM            reduce using rule 88 (t_expression -> t_expression boolean_operator g_expression .)
    LESS            shift and go to state 146
    GREATER         shift and go to state 147
    EQUALS          shift and go to state 148
    NOTEQUAL        shift and go to state 149
    GREATERTHAN     shift and go to state 150
    LESSTHAN        shift and go to state 151

    comparison_operator            shift and go to state 145

state 183

    (90) g_expression -> g_expression comparison_operator m_expression .
    (92) m_expression -> m_expression . addition_operator term
    (106) addition_operator -> . PLUS
    (107) addition_operator -> . MINUS

    LESS            reduce using rule 90 (g_expression -> g_expression comparison_operator m_expression .)
    GREATER         reduce using rule 90 (g_expression -> g_expression comparison_operator m_expression .)
    EQUALS          reduce using rule 90 (g_expression -> g_expression comparison_operator m_expression .)
    NOTEQUAL        reduce using rule 90 (g_expression -> g_expression comparison_operator m_expression .)
    GREATERTHAN     reduce using rule 90 (g_expression -> g_expression comparison_operator m_expression .)
    LESSTHAN        reduce using rule 90 (g_expression -> g_expression comparison_operator m_expression .)
    AND             reduce using rule 90 (g_expression -> g_expression comparison_operator m_expression .)
    OR              reduce using rule 90 (g_expression -> g_expression comparison_operator m_expression .)
    RBRACK          reduce using rule 90 (g_expression -> g_expression comparison_operator m_expression .)
    SEMICOLON       reduce using rule 90 (g_expression -> g_expression comparison_operator m_expression .)
    RPAREN          reduce using rule 90 (g_expression -> g_expression comparison_operator m_expression .)
    COMMA           reduce using rule 90 (g_expression -> g_expression comparison_operator m_expression .)
    FROM            reduce using rule 90 (g_expression -> g_expression comparison_operator m_expression .)
    PLUS            shift and go to state 153
    MINUS           shift and go to state 154

    addition_operator              shift and go to state 152

state 184

    (92) m_expression -> m_expression addition_operator term .
    (94) term -> term . multiplication_operator factor
    (110) multiplication_operator -> . TIMES
    (111) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 92 (m_expression -> m_expression addition_operator term .)
    MINUS           reduce using rule 92 (m_expression -> m_expression addition_operator term .)
    LESS            reduce using rule 92 (m_expression -> m_expression addition_operator term .)
    GREATER         reduce using rule 92 (m_expression -> m_expression addition_operator term .)
    EQUALS          reduce using rule 92 (m_expression -> m_expression addition_operator term .)
    NOTEQUAL        reduce using rule 92 (m_expression -> m_expression addition_operator term .)
    GREATERTHAN     reduce using rule 92 (m_expression -> m_expression addition_operator term .)
    LESSTHAN        reduce using rule 92 (m_expression -> m_expression addition_operator term .)
    AND             reduce using rule 92 (m_expression -> m_expression addition_operator term .)
    OR              reduce using rule 92 (m_expression -> m_expression addition_operator term .)
    RBRACK          reduce using rule 92 (m_expression -> m_expression addition_operator term .)
    SEMICOLON       reduce using rule 92 (m_expression -> m_expression addition_operator term .)
    RPAREN          reduce using rule 92 (m_expression -> m_expression addition_operator term .)
    COMMA           reduce using rule 92 (m_expression -> m_expression addition_operator term .)
    FROM            reduce using rule 92 (m_expression -> m_expression addition_operator term .)
    TIMES           shift and go to state 156
    DIVIDE          shift and go to state 157

    multiplication_operator        shift and go to state 155

state 185

    (94) term -> term multiplication_operator factor .

    TIMES           reduce using rule 94 (term -> term multiplication_operator factor .)
    DIVIDE          reduce using rule 94 (term -> term multiplication_operator factor .)
    PLUS            reduce using rule 94 (term -> term multiplication_operator factor .)
    MINUS           reduce using rule 94 (term -> term multiplication_operator factor .)
    LESS            reduce using rule 94 (term -> term multiplication_operator factor .)
    GREATER         reduce using rule 94 (term -> term multiplication_operator factor .)
    EQUALS          reduce using rule 94 (term -> term multiplication_operator factor .)
    NOTEQUAL        reduce using rule 94 (term -> term multiplication_operator factor .)
    GREATERTHAN     reduce using rule 94 (term -> term multiplication_operator factor .)
    LESSTHAN        reduce using rule 94 (term -> term multiplication_operator factor .)
    AND             reduce using rule 94 (term -> term multiplication_operator factor .)
    OR              reduce using rule 94 (term -> term multiplication_operator factor .)
    RBRACK          reduce using rule 94 (term -> term multiplication_operator factor .)
    SEMICOLON       reduce using rule 94 (term -> term multiplication_operator factor .)
    RPAREN          reduce using rule 94 (term -> term multiplication_operator factor .)
    COMMA           reduce using rule 94 (term -> term multiplication_operator factor .)
    FROM            reduce using rule 94 (term -> term multiplication_operator factor .)


state 186

    (99) expression_parenthesis -> LPAREN expression RPAREN .

    TIMES           reduce using rule 99 (expression_parenthesis -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 99 (expression_parenthesis -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 99 (expression_parenthesis -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 99 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESS            reduce using rule 99 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 99 (expression_parenthesis -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 99 (expression_parenthesis -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 99 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 99 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 99 (expression_parenthesis -> LPAREN expression RPAREN .)
    AND             reduce using rule 99 (expression_parenthesis -> LPAREN expression RPAREN .)
    OR              reduce using rule 99 (expression_parenthesis -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 99 (expression_parenthesis -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 99 (expression_parenthesis -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 99 (expression_parenthesis -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 99 (expression_parenthesis -> LPAREN expression RPAREN .)
    FROM            reduce using rule 99 (expression_parenthesis -> LPAREN expression RPAREN .)


state 187

    (55) for -> FOR LPAREN ID for_1 ASSIGN . expression for_2 FROM expression RPAREN for_3 DO block for_4
    (79) expression -> . t_expression
    (80) expression -> . NOT t_expression
    (87) t_expression -> . g_expression
    (88) t_expression -> . t_expression boolean_operator g_expression
    (89) g_expression -> . m_expression
    (90) g_expression -> . g_expression comparison_operator m_expression
    (91) m_expression -> . term
    (92) m_expression -> . m_expression addition_operator term
    (93) term -> . factor
    (94) term -> . term multiplication_operator factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 106
    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    CTES            shift and go to state 119
    LPAREN          shift and go to state 120

    expression                     shift and go to state 208
    t_expression                   shift and go to state 105
    g_expression                   shift and go to state 107
    m_expression                   shift and go to state 108
    term                           shift and go to state 109
    factor                         shift and go to state 110
    variable                       shift and go to state 111
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 188

    (69) invocation -> ID invocation_1 LPAREN invocation_2 expressions . RPAREN invocation_5 SEMICOLON invocation_6
    (76) expressions -> expressions . COMMA invocation_4 expression invocation_3

    RPAREN          shift and go to state 209
    COMMA           shift and go to state 210


state 189

    (77) expressions -> expression . invocation_3
    (72) invocation_3 -> . empty
    (122) empty -> .

    RPAREN          reduce using rule 122 (empty -> .)
    COMMA           reduce using rule 122 (empty -> .)

    invocation_3                   shift and go to state 211
    empty                          shift and go to state 212

state 190

    (78) expressions -> empty .

    RPAREN          reduce using rule 78 (expressions -> empty .)
    COMMA           reduce using rule 78 (expressions -> empty .)


state 191

    (54) do_while -> DO breadcrumb block WHILE LPAREN . expression RPAREN gotot SEMICOLON
    (79) expression -> . t_expression
    (80) expression -> . NOT t_expression
    (87) t_expression -> . g_expression
    (88) t_expression -> . t_expression boolean_operator g_expression
    (89) g_expression -> . m_expression
    (90) g_expression -> . g_expression comparison_operator m_expression
    (91) m_expression -> . term
    (92) m_expression -> . m_expression addition_operator term
    (93) term -> . factor
    (94) term -> . term multiplication_operator factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 106
    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    CTES            shift and go to state 119
    LPAREN          shift and go to state 120

    expression                     shift and go to state 213
    t_expression                   shift and go to state 105
    g_expression                   shift and go to state 107
    m_expression                   shift and go to state 108
    term                           shift and go to state 109
    factor                         shift and go to state 110
    variable                       shift and go to state 111
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 192

    (60) while -> WHILE breadcrumb LPAREN expression RPAREN . gotof block
    (66) gotof -> . empty
    (122) empty -> .

    LBRACE          reduce using rule 122 (empty -> .)

    gotof                          shift and go to state 214
    empty                          shift and go to state 194

state 193

    (63) if_else -> IF LPAREN expression RPAREN gotof . block ELSE goto block
    (62) if -> IF LPAREN expression RPAREN gotof . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 215

state 194

    (66) gotof -> empty .

    LBRACE          reduce using rule 66 (gotof -> empty .)


state 195

    (81) print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .

    FOR             reduce using rule 81 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    DO              reduce using rule 81 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    WHILE           reduce using rule 81 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    IF              reduce using rule 81 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ID              reduce using rule 81 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    PRINT           reduce using rule 81 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    READ            reduce using rule 81 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    GENKEY          reduce using rule 81 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ENCRYPT         reduce using rule 81 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    DECRYPT         reduce using rule 81 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    SHA_256         reduce using rule 81 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    RANDOM_SALT     reduce using rule 81 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    RBRACE          reduce using rule 81 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)


state 196

    (83) print_arguments -> print_arguments COMMA print_argument .

    RPAREN          reduce using rule 83 (print_arguments -> print_arguments COMMA print_argument .)
    COMMA           reduce using rule 83 (print_arguments -> print_arguments COMMA print_argument .)


state 197

    (52) read -> READ LPAREN ID RPAREN SEMICOLON .

    FOR             reduce using rule 52 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    DO              reduce using rule 52 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 52 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    IF              reduce using rule 52 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    ID              reduce using rule 52 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    PRINT           reduce using rule 52 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    READ            reduce using rule 52 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    GENKEY          reduce using rule 52 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    ENCRYPT         reduce using rule 52 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    DECRYPT         reduce using rule 52 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    SHA_256         reduce using rule 52 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    RANDOM_SALT     reduce using rule 52 (read -> READ LPAREN ID RPAREN SEMICOLON .)
    RBRACE          reduce using rule 52 (read -> READ LPAREN ID RPAREN SEMICOLON .)


state 198

    (49) gen_key -> GENKEY LPAREN RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 216


state 199

    (50) encrypt -> ENCRYPT LPAREN ID COMMA ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 217


state 200

    (51) decrypt -> DECRYPT LPAREN ID COMMA ID . RPAREN SPECIAL ID SEMICOLON

    RPAREN          shift and go to state 218


state 201

    (48) sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 219


state 202

    (47) random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 220


state 203

    (27) parameter -> simple_type ID .

    COMMA           reduce using rule 27 (parameter -> simple_type ID .)
    RPAREN          reduce using rule 27 (parameter -> simple_type ID .)


state 204

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations

    RPAREN          shift and go to state 221


state 205

    (24) parameters -> parameters COMMA . parameter
    (27) parameter -> . simple_type ID
    (112) simple_type -> . INT
    (113) simple_type -> . FLOAT
    (114) simple_type -> . CHAR
    (115) simple_type -> . BOOLEAN
    (116) simple_type -> . STRING

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOLEAN         shift and go to state 28
    STRING          shift and go to state 29

    parameter                      shift and go to state 222
    simple_type                    shift and go to state 176

state 206

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations

    RPAREN          shift and go to state 223


state 207

    (23) variable -> ID LBRACK expression RBRACK LBRACK expression . RBRACK

    RBRACK          shift and go to state 224


state 208

    (55) for -> FOR LPAREN ID for_1 ASSIGN expression . for_2 FROM expression RPAREN for_3 DO block for_4
    (57) for_2 -> . empty
    (122) empty -> .

    FROM            reduce using rule 122 (empty -> .)

    for_2                          shift and go to state 225
    empty                          shift and go to state 226

state 209

    (69) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN . invocation_5 SEMICOLON invocation_6
    (74) invocation_5 -> . empty
    (122) empty -> .

    SEMICOLON       reduce using rule 122 (empty -> .)

    invocation_5                   shift and go to state 227
    empty                          shift and go to state 228

state 210

    (76) expressions -> expressions COMMA . invocation_4 expression invocation_3
    (73) invocation_4 -> . empty
    (122) empty -> .

    NOT             reduce using rule 122 (empty -> .)
    ID              reduce using rule 122 (empty -> .)
    CTEI            reduce using rule 122 (empty -> .)
    CTEF            reduce using rule 122 (empty -> .)
    CTEC            reduce using rule 122 (empty -> .)
    CTEB            reduce using rule 122 (empty -> .)
    CTES            reduce using rule 122 (empty -> .)
    LPAREN          reduce using rule 122 (empty -> .)

    invocation_4                   shift and go to state 229
    empty                          shift and go to state 230

state 211

    (77) expressions -> expression invocation_3 .

    RPAREN          reduce using rule 77 (expressions -> expression invocation_3 .)
    COMMA           reduce using rule 77 (expressions -> expression invocation_3 .)


state 212

    (72) invocation_3 -> empty .

    RPAREN          reduce using rule 72 (invocation_3 -> empty .)
    COMMA           reduce using rule 72 (invocation_3 -> empty .)


state 213

    (54) do_while -> DO breadcrumb block WHILE LPAREN expression . RPAREN gotot SEMICOLON

    RPAREN          shift and go to state 231


state 214

    (60) while -> WHILE breadcrumb LPAREN expression RPAREN gotof . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 232

state 215

    (63) if_else -> IF LPAREN expression RPAREN gotof block . ELSE goto block
    (62) if -> IF LPAREN expression RPAREN gotof block .

    ELSE            shift and go to state 233
    FOR             reduce using rule 62 (if -> IF LPAREN expression RPAREN gotof block .)
    DO              reduce using rule 62 (if -> IF LPAREN expression RPAREN gotof block .)
    WHILE           reduce using rule 62 (if -> IF LPAREN expression RPAREN gotof block .)
    IF              reduce using rule 62 (if -> IF LPAREN expression RPAREN gotof block .)
    ID              reduce using rule 62 (if -> IF LPAREN expression RPAREN gotof block .)
    PRINT           reduce using rule 62 (if -> IF LPAREN expression RPAREN gotof block .)
    READ            reduce using rule 62 (if -> IF LPAREN expression RPAREN gotof block .)
    GENKEY          reduce using rule 62 (if -> IF LPAREN expression RPAREN gotof block .)
    ENCRYPT         reduce using rule 62 (if -> IF LPAREN expression RPAREN gotof block .)
    DECRYPT         reduce using rule 62 (if -> IF LPAREN expression RPAREN gotof block .)
    SHA_256         reduce using rule 62 (if -> IF LPAREN expression RPAREN gotof block .)
    RANDOM_SALT     reduce using rule 62 (if -> IF LPAREN expression RPAREN gotof block .)
    RBRACE          reduce using rule 62 (if -> IF LPAREN expression RPAREN gotof block .)


state 216

    (49) gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 49 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 49 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 49 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 49 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 49 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 49 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 49 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 49 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 49 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 49 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 49 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 49 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 49 (gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON .)


state 217

    (50) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 234


state 218

    (51) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN . SPECIAL ID SEMICOLON

    SPECIAL         shift and go to state 235


state 219

    (48) sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 236


state 220

    (47) random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 237


state 221

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (122) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 122 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 238
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 222

    (24) parameters -> parameters COMMA parameter .

    COMMA           reduce using rule 24 (parameters -> parameters COMMA parameter .)
    RPAREN          reduce using rule 24 (parameters -> parameters COMMA parameter .)


state 223

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations
    (13) var_declarations -> . var_declaration_list
    (14) var_declarations -> . empty
    (15) var_declaration_list -> . var_declaration var_declarations
    (122) empty -> .
    (16) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration

    LBRACE          reduce using rule 122 (empty -> .)
    VARIABLE        shift and go to state 11

    var_declarations               shift and go to state 239
    var_declaration_list           shift and go to state 8
    empty                          shift and go to state 9
    var_declaration                shift and go to state 10

state 224

    (23) variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .

    COMMA           reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    TIMES           reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    PLUS            reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    MINUS           reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESS            reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATER         reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    EQUALS          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    AND             reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    OR              reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RBRACK          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RPAREN          reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    FROM            reduce using rule 23 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)


state 225

    (55) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 . FROM expression RPAREN for_3 DO block for_4

    FROM            shift and go to state 240


state 226

    (57) for_2 -> empty .

    FROM            reduce using rule 57 (for_2 -> empty .)


state 227

    (69) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 . SEMICOLON invocation_6

    SEMICOLON       shift and go to state 241


state 228

    (74) invocation_5 -> empty .

    SEMICOLON       reduce using rule 74 (invocation_5 -> empty .)


state 229

    (76) expressions -> expressions COMMA invocation_4 . expression invocation_3
    (79) expression -> . t_expression
    (80) expression -> . NOT t_expression
    (87) t_expression -> . g_expression
    (88) t_expression -> . t_expression boolean_operator g_expression
    (89) g_expression -> . m_expression
    (90) g_expression -> . g_expression comparison_operator m_expression
    (91) m_expression -> . term
    (92) m_expression -> . m_expression addition_operator term
    (93) term -> . factor
    (94) term -> . term multiplication_operator factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 106
    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    CTES            shift and go to state 119
    LPAREN          shift and go to state 120

    expression                     shift and go to state 242
    t_expression                   shift and go to state 105
    g_expression                   shift and go to state 107
    m_expression                   shift and go to state 108
    term                           shift and go to state 109
    factor                         shift and go to state 110
    variable                       shift and go to state 111
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 230

    (73) invocation_4 -> empty .

    NOT             reduce using rule 73 (invocation_4 -> empty .)
    ID              reduce using rule 73 (invocation_4 -> empty .)
    CTEI            reduce using rule 73 (invocation_4 -> empty .)
    CTEF            reduce using rule 73 (invocation_4 -> empty .)
    CTEC            reduce using rule 73 (invocation_4 -> empty .)
    CTEB            reduce using rule 73 (invocation_4 -> empty .)
    CTES            reduce using rule 73 (invocation_4 -> empty .)
    LPAREN          reduce using rule 73 (invocation_4 -> empty .)


state 231

    (54) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN . gotot SEMICOLON
    (64) gotot -> . empty
    (122) empty -> .

    SEMICOLON       reduce using rule 122 (empty -> .)

    gotot                          shift and go to state 243
    empty                          shift and go to state 244

state 232

    (60) while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .

    FOR             reduce using rule 60 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    DO              reduce using rule 60 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    WHILE           reduce using rule 60 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    IF              reduce using rule 60 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    ID              reduce using rule 60 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    PRINT           reduce using rule 60 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    READ            reduce using rule 60 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    GENKEY          reduce using rule 60 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    ENCRYPT         reduce using rule 60 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    DECRYPT         reduce using rule 60 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    SHA_256         reduce using rule 60 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    RANDOM_SALT     reduce using rule 60 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)
    RBRACE          reduce using rule 60 (while -> WHILE breadcrumb LPAREN expression RPAREN gotof block .)


state 233

    (63) if_else -> IF LPAREN expression RPAREN gotof block ELSE . goto block
    (65) goto -> . empty
    (122) empty -> .

    LBRACE          reduce using rule 122 (empty -> .)

    goto                           shift and go to state 245
    empty                          shift and go to state 246

state 234

    (50) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 247


state 235

    (51) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL . ID SEMICOLON

    ID              shift and go to state 248


state 236

    (48) sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 48 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 48 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 48 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 48 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 48 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 48 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 48 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 48 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 48 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 48 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 48 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 48 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 48 (sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON .)


state 237

    (47) random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 47 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 47 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 47 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 47 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 47 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 47 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 47 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 47 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 47 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 47 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 47 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 47 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 47 (random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON .)


state 238

    (7) function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .

    LBRACE          reduce using rule 7 (function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .)


state 239

    (8) function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .

    LBRACE          reduce using rule 8 (function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations .)


state 240

    (55) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM . expression RPAREN for_3 DO block for_4
    (79) expression -> . t_expression
    (80) expression -> . NOT t_expression
    (87) t_expression -> . g_expression
    (88) t_expression -> . t_expression boolean_operator g_expression
    (89) g_expression -> . m_expression
    (90) g_expression -> . g_expression comparison_operator m_expression
    (91) m_expression -> . term
    (92) m_expression -> . m_expression addition_operator term
    (93) term -> . factor
    (94) term -> . term multiplication_operator factor
    (95) factor -> . variable
    (96) factor -> . cte
    (97) factor -> . invocation
    (98) factor -> . expression_parenthesis
    (21) variable -> . ID
    (22) variable -> . ID LBRACK expression RBRACK
    (23) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (117) cte -> . CTEI
    (118) cte -> . CTEF
    (119) cte -> . CTEC
    (120) cte -> . CTEB
    (121) cte -> . CTES
    (69) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (99) expression_parenthesis -> . LPAREN expression RPAREN

    NOT             shift and go to state 106
    ID              shift and go to state 103
    CTEI            shift and go to state 115
    CTEF            shift and go to state 116
    CTEC            shift and go to state 117
    CTEB            shift and go to state 118
    CTES            shift and go to state 119
    LPAREN          shift and go to state 120

    expression                     shift and go to state 249
    t_expression                   shift and go to state 105
    g_expression                   shift and go to state 107
    m_expression                   shift and go to state 108
    term                           shift and go to state 109
    factor                         shift and go to state 110
    variable                       shift and go to state 111
    cte                            shift and go to state 112
    invocation                     shift and go to state 113
    expression_parenthesis         shift and go to state 114

state 241

    (69) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON . invocation_6
    (75) invocation_6 -> . empty
    (122) empty -> .

    FOR             reduce using rule 122 (empty -> .)
    DO              reduce using rule 122 (empty -> .)
    WHILE           reduce using rule 122 (empty -> .)
    IF              reduce using rule 122 (empty -> .)
    ID              reduce using rule 122 (empty -> .)
    PRINT           reduce using rule 122 (empty -> .)
    READ            reduce using rule 122 (empty -> .)
    GENKEY          reduce using rule 122 (empty -> .)
    ENCRYPT         reduce using rule 122 (empty -> .)
    DECRYPT         reduce using rule 122 (empty -> .)
    SHA_256         reduce using rule 122 (empty -> .)
    RANDOM_SALT     reduce using rule 122 (empty -> .)
    RBRACE          reduce using rule 122 (empty -> .)
    TIMES           reduce using rule 122 (empty -> .)
    DIVIDE          reduce using rule 122 (empty -> .)
    PLUS            reduce using rule 122 (empty -> .)
    MINUS           reduce using rule 122 (empty -> .)
    LESS            reduce using rule 122 (empty -> .)
    GREATER         reduce using rule 122 (empty -> .)
    EQUALS          reduce using rule 122 (empty -> .)
    NOTEQUAL        reduce using rule 122 (empty -> .)
    GREATERTHAN     reduce using rule 122 (empty -> .)
    LESSTHAN        reduce using rule 122 (empty -> .)
    AND             reduce using rule 122 (empty -> .)
    OR              reduce using rule 122 (empty -> .)
    RBRACK          reduce using rule 122 (empty -> .)
    SEMICOLON       reduce using rule 122 (empty -> .)
    RPAREN          reduce using rule 122 (empty -> .)
    COMMA           reduce using rule 122 (empty -> .)
    FROM            reduce using rule 122 (empty -> .)

    invocation_6                   shift and go to state 250
    empty                          shift and go to state 251

state 242

    (76) expressions -> expressions COMMA invocation_4 expression . invocation_3
    (72) invocation_3 -> . empty
    (122) empty -> .

    RPAREN          reduce using rule 122 (empty -> .)
    COMMA           reduce using rule 122 (empty -> .)

    invocation_3                   shift and go to state 252
    empty                          shift and go to state 212

state 243

    (54) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot . SEMICOLON

    SEMICOLON       shift and go to state 253


state 244

    (64) gotot -> empty .

    SEMICOLON       reduce using rule 64 (gotot -> empty .)


state 245

    (63) if_else -> IF LPAREN expression RPAREN gotof block ELSE goto . block
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 254

state 246

    (65) goto -> empty .

    LBRACE          reduce using rule 65 (goto -> empty .)


state 247

    (50) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 255


state 248

    (51) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID . SEMICOLON

    SEMICOLON       shift and go to state 256


state 249

    (55) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression . RPAREN for_3 DO block for_4

    RPAREN          shift and go to state 257


state 250

    (69) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .

    FOR             reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DO              reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    WHILE           reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    IF              reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ID              reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PRINT           reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    READ            reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GENKEY          reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ENCRYPT         reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DECRYPT         reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    SHA_256         reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RANDOM_SALT     reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACE          reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    TIMES           reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DIVIDE          reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PLUS            reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    MINUS           reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESS            reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATER         reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    EQUALS          reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    NOTEQUAL        reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATERTHAN     reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESSTHAN        reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    AND             reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    OR              reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACK          reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    SEMICOLON       reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RPAREN          reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    COMMA           reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    FROM            reduce using rule 69 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)


state 251

    (75) invocation_6 -> empty .

    FOR             reduce using rule 75 (invocation_6 -> empty .)
    DO              reduce using rule 75 (invocation_6 -> empty .)
    WHILE           reduce using rule 75 (invocation_6 -> empty .)
    IF              reduce using rule 75 (invocation_6 -> empty .)
    ID              reduce using rule 75 (invocation_6 -> empty .)
    PRINT           reduce using rule 75 (invocation_6 -> empty .)
    READ            reduce using rule 75 (invocation_6 -> empty .)
    GENKEY          reduce using rule 75 (invocation_6 -> empty .)
    ENCRYPT         reduce using rule 75 (invocation_6 -> empty .)
    DECRYPT         reduce using rule 75 (invocation_6 -> empty .)
    SHA_256         reduce using rule 75 (invocation_6 -> empty .)
    RANDOM_SALT     reduce using rule 75 (invocation_6 -> empty .)
    RBRACE          reduce using rule 75 (invocation_6 -> empty .)
    TIMES           reduce using rule 75 (invocation_6 -> empty .)
    DIVIDE          reduce using rule 75 (invocation_6 -> empty .)
    PLUS            reduce using rule 75 (invocation_6 -> empty .)
    MINUS           reduce using rule 75 (invocation_6 -> empty .)
    LESS            reduce using rule 75 (invocation_6 -> empty .)
    GREATER         reduce using rule 75 (invocation_6 -> empty .)
    EQUALS          reduce using rule 75 (invocation_6 -> empty .)
    NOTEQUAL        reduce using rule 75 (invocation_6 -> empty .)
    GREATERTHAN     reduce using rule 75 (invocation_6 -> empty .)
    LESSTHAN        reduce using rule 75 (invocation_6 -> empty .)
    AND             reduce using rule 75 (invocation_6 -> empty .)
    OR              reduce using rule 75 (invocation_6 -> empty .)
    RBRACK          reduce using rule 75 (invocation_6 -> empty .)
    SEMICOLON       reduce using rule 75 (invocation_6 -> empty .)
    RPAREN          reduce using rule 75 (invocation_6 -> empty .)
    COMMA           reduce using rule 75 (invocation_6 -> empty .)
    FROM            reduce using rule 75 (invocation_6 -> empty .)


state 252

    (76) expressions -> expressions COMMA invocation_4 expression invocation_3 .

    RPAREN          reduce using rule 76 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)
    COMMA           reduce using rule 76 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)


state 253

    (54) do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .

    FOR             reduce using rule 54 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    DO              reduce using rule 54 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    WHILE           reduce using rule 54 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    IF              reduce using rule 54 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ID              reduce using rule 54 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    PRINT           reduce using rule 54 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    READ            reduce using rule 54 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    GENKEY          reduce using rule 54 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ENCRYPT         reduce using rule 54 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    DECRYPT         reduce using rule 54 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    SHA_256         reduce using rule 54 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    RANDOM_SALT     reduce using rule 54 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    RBRACE          reduce using rule 54 (do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON .)


state 254

    (63) if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .

    FOR             reduce using rule 63 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    DO              reduce using rule 63 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    WHILE           reduce using rule 63 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    IF              reduce using rule 63 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    ID              reduce using rule 63 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    PRINT           reduce using rule 63 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    READ            reduce using rule 63 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    GENKEY          reduce using rule 63 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    ENCRYPT         reduce using rule 63 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    DECRYPT         reduce using rule 63 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    SHA_256         reduce using rule 63 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    RANDOM_SALT     reduce using rule 63 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)
    RBRACE          reduce using rule 63 (if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block .)


state 255

    (50) encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 50 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 50 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 50 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 50 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 50 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 50 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 50 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 50 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 50 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 50 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 50 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 50 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 50 (encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)


state 256

    (51) decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .

    FOR             reduce using rule 51 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DO              reduce using rule 51 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    WHILE           reduce using rule 51 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    IF              reduce using rule 51 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ID              reduce using rule 51 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    PRINT           reduce using rule 51 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    READ            reduce using rule 51 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    GENKEY          reduce using rule 51 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    ENCRYPT         reduce using rule 51 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    DECRYPT         reduce using rule 51 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    SHA_256         reduce using rule 51 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RANDOM_SALT     reduce using rule 51 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)
    RBRACE          reduce using rule 51 (decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON .)


state 257

    (55) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN . for_3 DO block for_4
    (58) for_3 -> . empty
    (122) empty -> .

    DO              reduce using rule 122 (empty -> .)

    for_3                          shift and go to state 258
    empty                          shift and go to state 259

state 258

    (55) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 . DO block for_4

    DO              shift and go to state 260


state 259

    (58) for_3 -> empty .

    DO              reduce using rule 58 (for_3 -> empty .)


state 260

    (55) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO . block for_4
    (28) block -> . LBRACE block2 RBRACE

    LBRACE          shift and go to state 34

    block                          shift and go to state 261

state 261

    (55) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block . for_4
    (59) for_4 -> . empty
    (122) empty -> .

    FOR             reduce using rule 122 (empty -> .)
    DO              reduce using rule 122 (empty -> .)
    WHILE           reduce using rule 122 (empty -> .)
    IF              reduce using rule 122 (empty -> .)
    ID              reduce using rule 122 (empty -> .)
    PRINT           reduce using rule 122 (empty -> .)
    READ            reduce using rule 122 (empty -> .)
    GENKEY          reduce using rule 122 (empty -> .)
    ENCRYPT         reduce using rule 122 (empty -> .)
    DECRYPT         reduce using rule 122 (empty -> .)
    SHA_256         reduce using rule 122 (empty -> .)
    RANDOM_SALT     reduce using rule 122 (empty -> .)
    RBRACE          reduce using rule 122 (empty -> .)

    for_4                          shift and go to state 262
    empty                          shift and go to state 263

state 262

    (55) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .

    FOR             reduce using rule 55 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    DO              reduce using rule 55 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    WHILE           reduce using rule 55 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    IF              reduce using rule 55 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    ID              reduce using rule 55 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    PRINT           reduce using rule 55 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    READ            reduce using rule 55 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    GENKEY          reduce using rule 55 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    ENCRYPT         reduce using rule 55 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    DECRYPT         reduce using rule 55 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    SHA_256         reduce using rule 55 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    RANDOM_SALT     reduce using rule 55 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)
    RBRACE          reduce using rule 55 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4 .)


state 263

    (59) for_4 -> empty .

    FOR             reduce using rule 59 (for_4 -> empty .)
    DO              reduce using rule 59 (for_4 -> empty .)
    WHILE           reduce using rule 59 (for_4 -> empty .)
    IF              reduce using rule 59 (for_4 -> empty .)
    ID              reduce using rule 59 (for_4 -> empty .)
    PRINT           reduce using rule 59 (for_4 -> empty .)
    READ            reduce using rule 59 (for_4 -> empty .)
    GENKEY          reduce using rule 59 (for_4 -> empty .)
    ENCRYPT         reduce using rule 59 (for_4 -> empty .)
    DECRYPT         reduce using rule 59 (for_4 -> empty .)
    SHA_256         reduce using rule 59 (for_4 -> empty .)
    RANDOM_SALT     reduce using rule 59 (for_4 -> empty .)
    RBRACE          reduce using rule 59 (for_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 7 resolved as shift
WARNING: reduce/reduce conflict in state 130 resolved using rule (print_argument -> CTES)
WARNING: rejected rule (cte -> CTES) in state 130
