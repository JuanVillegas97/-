Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMENT
    FALSE
    STRING
    THEN
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END
Rule 2     global_scope -> empty
Rule 3     functions -> functions function
Rule 4     functions -> function
Rule 5     functions -> empty
Rule 6     function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
Rule 7     function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
Rule 8     function_1 -> empty
Rule 9     main -> MAIN LPAREN RPAREN main_scope var_declarations LBRACE statements RBRACE
Rule 10    main_scope -> empty
Rule 11    var_declarations -> var_declaration var_declarations
Rule 12    var_declarations -> var_declaration
Rule 13    var_declarations -> empty
Rule 14    var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration
Rule 15    open_var_declaration -> empty
Rule 16    close_var_declaration -> empty
Rule 17    variables -> variable
Rule 18    variables -> variable COMMA variables
Rule 19    variable -> ID
Rule 20    variable -> ID LBRACK expression RBRACK
Rule 21    variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK
Rule 22    parameters -> parameters COMMA parameter
Rule 23    parameters -> parameter
Rule 24    parameters -> empty
Rule 25    parameter -> simple_type ID
Rule 26    statements -> statements statement
Rule 27    statements -> statement
Rule 28    statements -> empty
Rule 29    statement -> read
Rule 30    statement -> for
Rule 31    statement -> do_while
Rule 32    statement -> while
Rule 33    statement -> if_else
Rule 34    statement -> invocation
Rule 35    statement -> if
Rule 36    statement -> assingation
Rule 37    statement -> return
Rule 38    statement -> print
Rule 39    do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
Rule 40    for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
Rule 41    for_1 -> empty
Rule 42    for_2 -> empty
Rule 43    for_3 -> empty
Rule 44    for_4 -> empty
Rule 45    while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
Rule 46    breadcrumb -> empty
Rule 47    if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
Rule 48    open_temporal_boolean -> empty
Rule 49    close_temporal_boolean -> empty
Rule 50    if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
Rule 51    gotot -> empty
Rule 52    goto -> empty
Rule 53    gotof -> empty
Rule 54    return -> RETURN expression SEMICOLON
Rule 55    read -> READ LPAREN variable_list RPAREN SEMICOLON
Rule 56    variable_list -> variable
Rule 57    variable_list -> variable_list COMMA variable
Rule 58    invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
Rule 59    invocation_1 -> empty
Rule 60    invocation_2 -> empty
Rule 61    invocation_3 -> empty
Rule 62    invocation_4 -> empty
Rule 63    invocation_5 -> empty
Rule 64    invocation_6 -> empty
Rule 65    expressions -> expressions COMMA invocation_4 expression invocation_3
Rule 66    expressions -> expression invocation_3
Rule 67    expressions -> empty
Rule 68    print -> PRINT LPAREN print_arguments RPAREN SEMICOLON
Rule 69    print_arguments -> print_argument
Rule 70    print_arguments -> print_arguments COMMA print_argument
Rule 71    print_argument -> CTES
Rule 72    print_argument -> expression
Rule 73    assingation -> variable ASSIGN expression SEMICOLON
Rule 74    expression -> t_expression
Rule 75    expression -> NOT t_expression
Rule 76    t_expression -> g_expression
Rule 77    t_expression -> t_expression boolean_operator g_expression
Rule 78    g_expression -> m_expression
Rule 79    g_expression -> g_expression comparison_operator m_expression
Rule 80    m_expression -> term
Rule 81    m_expression -> m_expression addition_operator term
Rule 82    term -> factor
Rule 83    term -> term multiplication_operator factor
Rule 84    factor -> variable
Rule 85    factor -> cte
Rule 86    factor -> expression_parenthesis
Rule 87    factor -> invocation
Rule 88    expression_parenthesis -> LPAREN expression RPAREN
Rule 89    comparison_operator -> LESS
Rule 90    comparison_operator -> GREATER
Rule 91    comparison_operator -> EQUALS
Rule 92    comparison_operator -> NOTEQUAL
Rule 93    comparison_operator -> GREATERTHAN
Rule 94    comparison_operator -> LESSTHAN
Rule 95    addition_operator -> PLUS
Rule 96    addition_operator -> MINUS
Rule 97    boolean_operator -> AND
Rule 98    boolean_operator -> OR
Rule 99    multiplication_operator -> TIMES
Rule 100   multiplication_operator -> DIVIDE
Rule 101   simple_type -> INT
Rule 102   simple_type -> FLOAT
Rule 103   simple_type -> CHAR
Rule 104   simple_type -> BOOLEAN
Rule 105   cte -> CTEI
Rule 106   cte -> CTEF
Rule 107   cte -> CTEC
Rule 108   cte -> CTEB
Rule 109   empty -> <empty>

Terminals, with rules where they appear

AND                  : 97
ASSIGN               : 40 73
BOOLEAN              : 104
CHAR                 : 103
COLON                : 
COMMA                : 18 22 57 65 70
COMMENT              : 
CTEB                 : 108
CTEC                 : 107
CTEF                 : 106
CTEI                 : 105
CTES                 : 71
DIVIDE               : 100
DO                   : 39 40
ELSE                 : 50
END                  : 1
EQUALS               : 91
FALSE                : 
FLOAT                : 102
FOR                  : 40
FROM                 : 40
FUNCTION             : 6 7
GREATER              : 90
GREATERTHAN          : 93
ID                   : 1 6 7 19 20 21 25 40 58
IF                   : 47 50
INT                  : 101
LBRACE               : 6 7 9 39 40 45 47 50 50
LBRACK               : 20 21 21
LESS                 : 89
LESSTHAN             : 94
LPAREN               : 6 7 9 39 40 45 47 50 55 58 68 88
MAIN                 : 9
MINUS                : 96
NOT                  : 75
NOTEQUAL             : 92
OR                   : 98
PLUS                 : 95
PRINT                : 68
PROGRAM              : 1
RBRACE               : 6 7 9 39 40 45 47 50 50
RBRACK               : 20 21 21
READ                 : 55
RETURN               : 54
RPAREN               : 6 7 9 39 40 45 47 50 55 58 68 88
SEMICOLON            : 1 14 39 54 55 58 68 73
STRING               : 
THEN                 : 
TIMES                : 99
TRUE                 : 
VARIABLE             : 14
VOID                 : 7
WHILE                : 39 45
error                : 

Nonterminals, with rules where they appear

addition_operator    : 81
assingation          : 36
boolean_operator     : 77
breadcrumb           : 39 45
close_temporal_boolean : 45 47 50
close_var_declaration : 6 7 14
comparison_operator  : 79
cte                  : 85
do_while             : 31
empty                : 2 5 8 10 13 15 16 24 28 41 42 43 44 46 48 49 51 52 53 59 60 61 62 63 64 67
expression           : 20 21 21 39 40 40 45 47 50 54 65 66 72 73 88
expression_parenthesis : 86
expressions          : 58 65
factor               : 82 83
for                  : 30
for_1                : 40
for_2                : 40
for_3                : 40
for_4                : 40
function             : 3 4
function_1           : 6 7
functions            : 1 3
g_expression         : 76 77 79
global_scope         : 1
goto                 : 50
gotof                : 45 47 50
gotot                : 39
if                   : 35
if_else              : 33
invocation           : 34 87
invocation_1         : 58
invocation_2         : 58
invocation_3         : 65 66
invocation_4         : 65
invocation_5         : 58
invocation_6         : 58
m_expression         : 78 79 81
main                 : 1
main_scope           : 9
multiplication_operator : 83
open_temporal_boolean : 45 47 50
open_var_declaration : 6 7 14
parameter            : 22 23
parameters           : 6 7 22
print                : 38
print_argument       : 69 70
print_arguments      : 68 70
program              : 0
read                 : 29
return               : 37
simple_type          : 6 14 25
statement            : 26 27
statements           : 6 7 9 26 39 40 45 47 50 50
t_expression         : 74 75 77
term                 : 80 81 83
var_declaration      : 11 12
var_declarations     : 1 6 7 9 11
variable             : 17 18 56 57 73 84
variable_list        : 55 57
variables            : 14 18
while                : 32

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON global_scope var_declarations functions main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON global_scope var_declarations functions main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON global_scope var_declarations functions main END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . global_scope var_declarations functions main END
    (2) global_scope -> . empty
    (109) empty -> .

    VARIABLE        reduce using rule 109 (empty -> .)
    FUNCTION        reduce using rule 109 (empty -> .)
    MAIN            reduce using rule 109 (empty -> .)

    global_scope                   shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON global_scope . var_declarations functions main END
    (11) var_declarations -> . var_declaration var_declarations
    (12) var_declarations -> . var_declaration
    (13) var_declarations -> . empty
    (14) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration
    (109) empty -> .

    VARIABLE        shift and go to state 10
    FUNCTION        reduce using rule 109 (empty -> .)
    MAIN            reduce using rule 109 (empty -> .)

    var_declarations               shift and go to state 7
    var_declaration                shift and go to state 8
    empty                          shift and go to state 9

state 6

    (2) global_scope -> empty .

    VARIABLE        reduce using rule 2 (global_scope -> empty .)
    FUNCTION        reduce using rule 2 (global_scope -> empty .)
    MAIN            reduce using rule 2 (global_scope -> empty .)


state 7

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations . functions main END
    (3) functions -> . functions function
    (4) functions -> . function
    (5) functions -> . empty
    (6) function -> . FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (7) function -> . FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (109) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 14
    MAIN            reduce using rule 109 (empty -> .)

  ! FUNCTION        [ reduce using rule 109 (empty -> .) ]

    functions                      shift and go to state 11
    function                       shift and go to state 12
    empty                          shift and go to state 13

state 8

    (11) var_declarations -> var_declaration . var_declarations
    (12) var_declarations -> var_declaration .
    (11) var_declarations -> . var_declaration var_declarations
    (12) var_declarations -> . var_declaration
    (13) var_declarations -> . empty
    (14) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration
    (109) empty -> .

  ! reduce/reduce conflict for FUNCTION resolved using rule 12 (var_declarations -> var_declaration .)
  ! reduce/reduce conflict for MAIN resolved using rule 12 (var_declarations -> var_declaration .)
  ! reduce/reduce conflict for LBRACE resolved using rule 12 (var_declarations -> var_declaration .)
    FUNCTION        reduce using rule 12 (var_declarations -> var_declaration .)
    MAIN            reduce using rule 12 (var_declarations -> var_declaration .)
    LBRACE          reduce using rule 12 (var_declarations -> var_declaration .)
    VARIABLE        shift and go to state 10

  ! FUNCTION        [ reduce using rule 109 (empty -> .) ]
  ! MAIN            [ reduce using rule 109 (empty -> .) ]
  ! LBRACE          [ reduce using rule 109 (empty -> .) ]

    var_declaration                shift and go to state 8
    var_declarations               shift and go to state 15
    empty                          shift and go to state 9

state 9

    (13) var_declarations -> empty .

    FUNCTION        reduce using rule 13 (var_declarations -> empty .)
    MAIN            reduce using rule 13 (var_declarations -> empty .)
    LBRACE          reduce using rule 13 (var_declarations -> empty .)


state 10

    (14) var_declaration -> VARIABLE . open_var_declaration simple_type variables SEMICOLON close_var_declaration
    (15) open_var_declaration -> . empty
    (109) empty -> .

    INT             reduce using rule 109 (empty -> .)
    FLOAT           reduce using rule 109 (empty -> .)
    CHAR            reduce using rule 109 (empty -> .)
    BOOLEAN         reduce using rule 109 (empty -> .)

    open_var_declaration           shift and go to state 16
    empty                          shift and go to state 17

state 11

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions . main END
    (3) functions -> functions . function
    (9) main -> . MAIN LPAREN RPAREN main_scope var_declarations LBRACE statements RBRACE
    (6) function -> . FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (7) function -> . FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE

    MAIN            shift and go to state 20
    FUNCTION        shift and go to state 14

    main                           shift and go to state 18
    function                       shift and go to state 19

state 12

    (4) functions -> function .

    MAIN            reduce using rule 4 (functions -> function .)
    FUNCTION        reduce using rule 4 (functions -> function .)


state 13

    (5) functions -> empty .

    MAIN            reduce using rule 5 (functions -> empty .)
    FUNCTION        reduce using rule 5 (functions -> empty .)


state 14

    (6) function -> FUNCTION . simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (7) function -> FUNCTION . VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (101) simple_type -> . INT
    (102) simple_type -> . FLOAT
    (103) simple_type -> . CHAR
    (104) simple_type -> . BOOLEAN

    VOID            shift and go to state 22
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25
    BOOLEAN         shift and go to state 26

    simple_type                    shift and go to state 21

state 15

    (11) var_declarations -> var_declaration var_declarations .

    FUNCTION        reduce using rule 11 (var_declarations -> var_declaration var_declarations .)
    MAIN            reduce using rule 11 (var_declarations -> var_declaration var_declarations .)
    LBRACE          reduce using rule 11 (var_declarations -> var_declaration var_declarations .)


state 16

    (14) var_declaration -> VARIABLE open_var_declaration . simple_type variables SEMICOLON close_var_declaration
    (101) simple_type -> . INT
    (102) simple_type -> . FLOAT
    (103) simple_type -> . CHAR
    (104) simple_type -> . BOOLEAN

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25
    BOOLEAN         shift and go to state 26

    simple_type                    shift and go to state 27

state 17

    (15) open_var_declaration -> empty .

    INT             reduce using rule 15 (open_var_declaration -> empty .)
    FLOAT           reduce using rule 15 (open_var_declaration -> empty .)
    CHAR            reduce using rule 15 (open_var_declaration -> empty .)
    BOOLEAN         reduce using rule 15 (open_var_declaration -> empty .)
    COMMA           reduce using rule 15 (open_var_declaration -> empty .)
    RPAREN          reduce using rule 15 (open_var_declaration -> empty .)


state 18

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main . END

    END             shift and go to state 28


state 19

    (3) functions -> functions function .

    MAIN            reduce using rule 3 (functions -> functions function .)
    FUNCTION        reduce using rule 3 (functions -> functions function .)


state 20

    (9) main -> MAIN . LPAREN RPAREN main_scope var_declarations LBRACE statements RBRACE

    LPAREN          shift and go to state 29


state 21

    (6) function -> FUNCTION simple_type . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE

    ID              shift and go to state 30


state 22

    (7) function -> FUNCTION VOID . ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE

    ID              shift and go to state 31


state 23

    (101) simple_type -> INT .

    ID              reduce using rule 101 (simple_type -> INT .)


state 24

    (102) simple_type -> FLOAT .

    ID              reduce using rule 102 (simple_type -> FLOAT .)


state 25

    (103) simple_type -> CHAR .

    ID              reduce using rule 103 (simple_type -> CHAR .)


state 26

    (104) simple_type -> BOOLEAN .

    ID              reduce using rule 104 (simple_type -> BOOLEAN .)


state 27

    (14) var_declaration -> VARIABLE open_var_declaration simple_type . variables SEMICOLON close_var_declaration
    (17) variables -> . variable
    (18) variables -> . variable COMMA variables
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 34

    variables                      shift and go to state 32
    variable                       shift and go to state 33

state 28

    (1) program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END .)


state 29

    (9) main -> MAIN LPAREN . RPAREN main_scope var_declarations LBRACE statements RBRACE

    RPAREN          shift and go to state 35


state 30

    (6) function -> FUNCTION simple_type ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (8) function_1 -> . empty
    (109) empty -> .

    LPAREN          reduce using rule 109 (empty -> .)

    function_1                     shift and go to state 36
    empty                          shift and go to state 37

state 31

    (7) function -> FUNCTION VOID ID . function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (8) function_1 -> . empty
    (109) empty -> .

    LPAREN          reduce using rule 109 (empty -> .)

    function_1                     shift and go to state 38
    empty                          shift and go to state 37

state 32

    (14) var_declaration -> VARIABLE open_var_declaration simple_type variables . SEMICOLON close_var_declaration

    SEMICOLON       shift and go to state 39


state 33

    (17) variables -> variable .
    (18) variables -> variable . COMMA variables

    SEMICOLON       reduce using rule 17 (variables -> variable .)
    COMMA           shift and go to state 40


state 34

    (19) variable -> ID .
    (20) variable -> ID . LBRACK expression RBRACK
    (21) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK

    COMMA           reduce using rule 19 (variable -> ID .)
    SEMICOLON       reduce using rule 19 (variable -> ID .)
    RPAREN          reduce using rule 19 (variable -> ID .)
    LBRACK          shift and go to state 41


state 35

    (9) main -> MAIN LPAREN RPAREN . main_scope var_declarations LBRACE statements RBRACE
    (10) main_scope -> . empty
    (109) empty -> .

    VARIABLE        reduce using rule 109 (empty -> .)
    LBRACE          reduce using rule 109 (empty -> .)

    main_scope                     shift and go to state 42
    empty                          shift and go to state 43

state 36

    (6) function -> FUNCTION simple_type ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE

    LPAREN          shift and go to state 44


state 37

    (8) function_1 -> empty .

    LPAREN          reduce using rule 8 (function_1 -> empty .)


state 38

    (7) function -> FUNCTION VOID ID function_1 . LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE

    LPAREN          shift and go to state 45


state 39

    (14) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON . close_var_declaration
    (16) close_var_declaration -> . empty
    (109) empty -> .

    VARIABLE        reduce using rule 109 (empty -> .)
    FUNCTION        reduce using rule 109 (empty -> .)
    MAIN            reduce using rule 109 (empty -> .)
    LBRACE          reduce using rule 109 (empty -> .)

    close_var_declaration          shift and go to state 46
    empty                          shift and go to state 47

state 40

    (18) variables -> variable COMMA . variables
    (17) variables -> . variable
    (18) variables -> . variable COMMA variables
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 34

    variable                       shift and go to state 33
    variables                      shift and go to state 48

state 41

    (20) variable -> ID LBRACK . expression RBRACK
    (21) variable -> ID LBRACK . expression RBRACK LBRACK expression RBRACK
    (74) expression -> . t_expression
    (75) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 52
    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    expression                     shift and go to state 50
    t_expression                   shift and go to state 51
    g_expression                   shift and go to state 53
    m_expression                   shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 42

    (9) main -> MAIN LPAREN RPAREN main_scope . var_declarations LBRACE statements RBRACE
    (11) var_declarations -> . var_declaration var_declarations
    (12) var_declarations -> . var_declaration
    (13) var_declarations -> . empty
    (14) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration
    (109) empty -> .

    VARIABLE        shift and go to state 10
    LBRACE          reduce using rule 109 (empty -> .)

    var_declarations               shift and go to state 66
    var_declaration                shift and go to state 8
    empty                          shift and go to state 9

state 43

    (10) main_scope -> empty .

    VARIABLE        reduce using rule 10 (main_scope -> empty .)
    LBRACE          reduce using rule 10 (main_scope -> empty .)


state 44

    (6) function -> FUNCTION simple_type ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (15) open_var_declaration -> . empty
    (109) empty -> .

    INT             reduce using rule 109 (empty -> .)
    FLOAT           reduce using rule 109 (empty -> .)
    CHAR            reduce using rule 109 (empty -> .)
    BOOLEAN         reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)
    RPAREN          reduce using rule 109 (empty -> .)

    open_var_declaration           shift and go to state 67
    empty                          shift and go to state 17

state 45

    (7) function -> FUNCTION VOID ID function_1 LPAREN . open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (15) open_var_declaration -> . empty
    (109) empty -> .

    INT             reduce using rule 109 (empty -> .)
    FLOAT           reduce using rule 109 (empty -> .)
    CHAR            reduce using rule 109 (empty -> .)
    BOOLEAN         reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)
    RPAREN          reduce using rule 109 (empty -> .)

    open_var_declaration           shift and go to state 68
    empty                          shift and go to state 17

state 46

    (14) var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .

    VARIABLE        reduce using rule 14 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    FUNCTION        reduce using rule 14 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    MAIN            reduce using rule 14 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)
    LBRACE          reduce using rule 14 (var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration .)


state 47

    (16) close_var_declaration -> empty .

    VARIABLE        reduce using rule 16 (close_var_declaration -> empty .)
    FUNCTION        reduce using rule 16 (close_var_declaration -> empty .)
    MAIN            reduce using rule 16 (close_var_declaration -> empty .)
    LBRACE          reduce using rule 16 (close_var_declaration -> empty .)
    RPAREN          reduce using rule 16 (close_var_declaration -> empty .)


state 48

    (18) variables -> variable COMMA variables .

    SEMICOLON       reduce using rule 18 (variables -> variable COMMA variables .)


state 49

    (19) variable -> ID .
    (20) variable -> ID . LBRACK expression RBRACK
    (21) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (58) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (59) invocation_1 -> . empty
    (109) empty -> .

    TIMES           reduce using rule 19 (variable -> ID .)
    DIVIDE          reduce using rule 19 (variable -> ID .)
    PLUS            reduce using rule 19 (variable -> ID .)
    MINUS           reduce using rule 19 (variable -> ID .)
    LESS            reduce using rule 19 (variable -> ID .)
    GREATER         reduce using rule 19 (variable -> ID .)
    EQUALS          reduce using rule 19 (variable -> ID .)
    NOTEQUAL        reduce using rule 19 (variable -> ID .)
    GREATERTHAN     reduce using rule 19 (variable -> ID .)
    LESSTHAN        reduce using rule 19 (variable -> ID .)
    AND             reduce using rule 19 (variable -> ID .)
    OR              reduce using rule 19 (variable -> ID .)
    RBRACK          reduce using rule 19 (variable -> ID .)
    RPAREN          reduce using rule 19 (variable -> ID .)
    SEMICOLON       reduce using rule 19 (variable -> ID .)
    COMMA           reduce using rule 19 (variable -> ID .)
    FROM            reduce using rule 19 (variable -> ID .)
    LBRACK          shift and go to state 41
    LPAREN          reduce using rule 109 (empty -> .)

    invocation_1                   shift and go to state 69
    empty                          shift and go to state 70

state 50

    (20) variable -> ID LBRACK expression . RBRACK
    (21) variable -> ID LBRACK expression . RBRACK LBRACK expression RBRACK

    RBRACK          shift and go to state 71


state 51

    (74) expression -> t_expression .
    (77) t_expression -> t_expression . boolean_operator g_expression
    (97) boolean_operator -> . AND
    (98) boolean_operator -> . OR

    RBRACK          reduce using rule 74 (expression -> t_expression .)
    RPAREN          reduce using rule 74 (expression -> t_expression .)
    SEMICOLON       reduce using rule 74 (expression -> t_expression .)
    COMMA           reduce using rule 74 (expression -> t_expression .)
    FROM            reduce using rule 74 (expression -> t_expression .)
    AND             shift and go to state 73
    OR              shift and go to state 74

    boolean_operator               shift and go to state 72

state 52

    (75) expression -> NOT . t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    t_expression                   shift and go to state 75
    g_expression                   shift and go to state 53
    m_expression                   shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 53

    (76) t_expression -> g_expression .
    (79) g_expression -> g_expression . comparison_operator m_expression
    (89) comparison_operator -> . LESS
    (90) comparison_operator -> . GREATER
    (91) comparison_operator -> . EQUALS
    (92) comparison_operator -> . NOTEQUAL
    (93) comparison_operator -> . GREATERTHAN
    (94) comparison_operator -> . LESSTHAN

    AND             reduce using rule 76 (t_expression -> g_expression .)
    OR              reduce using rule 76 (t_expression -> g_expression .)
    RBRACK          reduce using rule 76 (t_expression -> g_expression .)
    RPAREN          reduce using rule 76 (t_expression -> g_expression .)
    SEMICOLON       reduce using rule 76 (t_expression -> g_expression .)
    COMMA           reduce using rule 76 (t_expression -> g_expression .)
    FROM            reduce using rule 76 (t_expression -> g_expression .)
    LESS            shift and go to state 77
    GREATER         shift and go to state 78
    EQUALS          shift and go to state 79
    NOTEQUAL        shift and go to state 80
    GREATERTHAN     shift and go to state 81
    LESSTHAN        shift and go to state 82

    comparison_operator            shift and go to state 76

state 54

    (78) g_expression -> m_expression .
    (81) m_expression -> m_expression . addition_operator term
    (95) addition_operator -> . PLUS
    (96) addition_operator -> . MINUS

    LESS            reduce using rule 78 (g_expression -> m_expression .)
    GREATER         reduce using rule 78 (g_expression -> m_expression .)
    EQUALS          reduce using rule 78 (g_expression -> m_expression .)
    NOTEQUAL        reduce using rule 78 (g_expression -> m_expression .)
    GREATERTHAN     reduce using rule 78 (g_expression -> m_expression .)
    LESSTHAN        reduce using rule 78 (g_expression -> m_expression .)
    AND             reduce using rule 78 (g_expression -> m_expression .)
    OR              reduce using rule 78 (g_expression -> m_expression .)
    RBRACK          reduce using rule 78 (g_expression -> m_expression .)
    RPAREN          reduce using rule 78 (g_expression -> m_expression .)
    SEMICOLON       reduce using rule 78 (g_expression -> m_expression .)
    COMMA           reduce using rule 78 (g_expression -> m_expression .)
    FROM            reduce using rule 78 (g_expression -> m_expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85

    addition_operator              shift and go to state 83

state 55

    (80) m_expression -> term .
    (83) term -> term . multiplication_operator factor
    (99) multiplication_operator -> . TIMES
    (100) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 80 (m_expression -> term .)
    MINUS           reduce using rule 80 (m_expression -> term .)
    LESS            reduce using rule 80 (m_expression -> term .)
    GREATER         reduce using rule 80 (m_expression -> term .)
    EQUALS          reduce using rule 80 (m_expression -> term .)
    NOTEQUAL        reduce using rule 80 (m_expression -> term .)
    GREATERTHAN     reduce using rule 80 (m_expression -> term .)
    LESSTHAN        reduce using rule 80 (m_expression -> term .)
    AND             reduce using rule 80 (m_expression -> term .)
    OR              reduce using rule 80 (m_expression -> term .)
    RBRACK          reduce using rule 80 (m_expression -> term .)
    RPAREN          reduce using rule 80 (m_expression -> term .)
    SEMICOLON       reduce using rule 80 (m_expression -> term .)
    COMMA           reduce using rule 80 (m_expression -> term .)
    FROM            reduce using rule 80 (m_expression -> term .)
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88

    multiplication_operator        shift and go to state 86

state 56

    (82) term -> factor .

    TIMES           reduce using rule 82 (term -> factor .)
    DIVIDE          reduce using rule 82 (term -> factor .)
    PLUS            reduce using rule 82 (term -> factor .)
    MINUS           reduce using rule 82 (term -> factor .)
    LESS            reduce using rule 82 (term -> factor .)
    GREATER         reduce using rule 82 (term -> factor .)
    EQUALS          reduce using rule 82 (term -> factor .)
    NOTEQUAL        reduce using rule 82 (term -> factor .)
    GREATERTHAN     reduce using rule 82 (term -> factor .)
    LESSTHAN        reduce using rule 82 (term -> factor .)
    AND             reduce using rule 82 (term -> factor .)
    OR              reduce using rule 82 (term -> factor .)
    RBRACK          reduce using rule 82 (term -> factor .)
    RPAREN          reduce using rule 82 (term -> factor .)
    SEMICOLON       reduce using rule 82 (term -> factor .)
    COMMA           reduce using rule 82 (term -> factor .)
    FROM            reduce using rule 82 (term -> factor .)


state 57

    (84) factor -> variable .

    TIMES           reduce using rule 84 (factor -> variable .)
    DIVIDE          reduce using rule 84 (factor -> variable .)
    PLUS            reduce using rule 84 (factor -> variable .)
    MINUS           reduce using rule 84 (factor -> variable .)
    LESS            reduce using rule 84 (factor -> variable .)
    GREATER         reduce using rule 84 (factor -> variable .)
    EQUALS          reduce using rule 84 (factor -> variable .)
    NOTEQUAL        reduce using rule 84 (factor -> variable .)
    GREATERTHAN     reduce using rule 84 (factor -> variable .)
    LESSTHAN        reduce using rule 84 (factor -> variable .)
    AND             reduce using rule 84 (factor -> variable .)
    OR              reduce using rule 84 (factor -> variable .)
    RBRACK          reduce using rule 84 (factor -> variable .)
    RPAREN          reduce using rule 84 (factor -> variable .)
    SEMICOLON       reduce using rule 84 (factor -> variable .)
    COMMA           reduce using rule 84 (factor -> variable .)
    FROM            reduce using rule 84 (factor -> variable .)


state 58

    (85) factor -> cte .

    TIMES           reduce using rule 85 (factor -> cte .)
    DIVIDE          reduce using rule 85 (factor -> cte .)
    PLUS            reduce using rule 85 (factor -> cte .)
    MINUS           reduce using rule 85 (factor -> cte .)
    LESS            reduce using rule 85 (factor -> cte .)
    GREATER         reduce using rule 85 (factor -> cte .)
    EQUALS          reduce using rule 85 (factor -> cte .)
    NOTEQUAL        reduce using rule 85 (factor -> cte .)
    GREATERTHAN     reduce using rule 85 (factor -> cte .)
    LESSTHAN        reduce using rule 85 (factor -> cte .)
    AND             reduce using rule 85 (factor -> cte .)
    OR              reduce using rule 85 (factor -> cte .)
    RBRACK          reduce using rule 85 (factor -> cte .)
    RPAREN          reduce using rule 85 (factor -> cte .)
    SEMICOLON       reduce using rule 85 (factor -> cte .)
    COMMA           reduce using rule 85 (factor -> cte .)
    FROM            reduce using rule 85 (factor -> cte .)


state 59

    (86) factor -> expression_parenthesis .

    TIMES           reduce using rule 86 (factor -> expression_parenthesis .)
    DIVIDE          reduce using rule 86 (factor -> expression_parenthesis .)
    PLUS            reduce using rule 86 (factor -> expression_parenthesis .)
    MINUS           reduce using rule 86 (factor -> expression_parenthesis .)
    LESS            reduce using rule 86 (factor -> expression_parenthesis .)
    GREATER         reduce using rule 86 (factor -> expression_parenthesis .)
    EQUALS          reduce using rule 86 (factor -> expression_parenthesis .)
    NOTEQUAL        reduce using rule 86 (factor -> expression_parenthesis .)
    GREATERTHAN     reduce using rule 86 (factor -> expression_parenthesis .)
    LESSTHAN        reduce using rule 86 (factor -> expression_parenthesis .)
    AND             reduce using rule 86 (factor -> expression_parenthesis .)
    OR              reduce using rule 86 (factor -> expression_parenthesis .)
    RBRACK          reduce using rule 86 (factor -> expression_parenthesis .)
    RPAREN          reduce using rule 86 (factor -> expression_parenthesis .)
    SEMICOLON       reduce using rule 86 (factor -> expression_parenthesis .)
    COMMA           reduce using rule 86 (factor -> expression_parenthesis .)
    FROM            reduce using rule 86 (factor -> expression_parenthesis .)


state 60

    (87) factor -> invocation .

    TIMES           reduce using rule 87 (factor -> invocation .)
    DIVIDE          reduce using rule 87 (factor -> invocation .)
    PLUS            reduce using rule 87 (factor -> invocation .)
    MINUS           reduce using rule 87 (factor -> invocation .)
    LESS            reduce using rule 87 (factor -> invocation .)
    GREATER         reduce using rule 87 (factor -> invocation .)
    EQUALS          reduce using rule 87 (factor -> invocation .)
    NOTEQUAL        reduce using rule 87 (factor -> invocation .)
    GREATERTHAN     reduce using rule 87 (factor -> invocation .)
    LESSTHAN        reduce using rule 87 (factor -> invocation .)
    AND             reduce using rule 87 (factor -> invocation .)
    OR              reduce using rule 87 (factor -> invocation .)
    RBRACK          reduce using rule 87 (factor -> invocation .)
    RPAREN          reduce using rule 87 (factor -> invocation .)
    SEMICOLON       reduce using rule 87 (factor -> invocation .)
    COMMA           reduce using rule 87 (factor -> invocation .)
    FROM            reduce using rule 87 (factor -> invocation .)


state 61

    (105) cte -> CTEI .

    TIMES           reduce using rule 105 (cte -> CTEI .)
    DIVIDE          reduce using rule 105 (cte -> CTEI .)
    PLUS            reduce using rule 105 (cte -> CTEI .)
    MINUS           reduce using rule 105 (cte -> CTEI .)
    LESS            reduce using rule 105 (cte -> CTEI .)
    GREATER         reduce using rule 105 (cte -> CTEI .)
    EQUALS          reduce using rule 105 (cte -> CTEI .)
    NOTEQUAL        reduce using rule 105 (cte -> CTEI .)
    GREATERTHAN     reduce using rule 105 (cte -> CTEI .)
    LESSTHAN        reduce using rule 105 (cte -> CTEI .)
    AND             reduce using rule 105 (cte -> CTEI .)
    OR              reduce using rule 105 (cte -> CTEI .)
    RBRACK          reduce using rule 105 (cte -> CTEI .)
    RPAREN          reduce using rule 105 (cte -> CTEI .)
    SEMICOLON       reduce using rule 105 (cte -> CTEI .)
    COMMA           reduce using rule 105 (cte -> CTEI .)
    FROM            reduce using rule 105 (cte -> CTEI .)


state 62

    (106) cte -> CTEF .

    TIMES           reduce using rule 106 (cte -> CTEF .)
    DIVIDE          reduce using rule 106 (cte -> CTEF .)
    PLUS            reduce using rule 106 (cte -> CTEF .)
    MINUS           reduce using rule 106 (cte -> CTEF .)
    LESS            reduce using rule 106 (cte -> CTEF .)
    GREATER         reduce using rule 106 (cte -> CTEF .)
    EQUALS          reduce using rule 106 (cte -> CTEF .)
    NOTEQUAL        reduce using rule 106 (cte -> CTEF .)
    GREATERTHAN     reduce using rule 106 (cte -> CTEF .)
    LESSTHAN        reduce using rule 106 (cte -> CTEF .)
    AND             reduce using rule 106 (cte -> CTEF .)
    OR              reduce using rule 106 (cte -> CTEF .)
    RBRACK          reduce using rule 106 (cte -> CTEF .)
    RPAREN          reduce using rule 106 (cte -> CTEF .)
    SEMICOLON       reduce using rule 106 (cte -> CTEF .)
    COMMA           reduce using rule 106 (cte -> CTEF .)
    FROM            reduce using rule 106 (cte -> CTEF .)


state 63

    (107) cte -> CTEC .

    TIMES           reduce using rule 107 (cte -> CTEC .)
    DIVIDE          reduce using rule 107 (cte -> CTEC .)
    PLUS            reduce using rule 107 (cte -> CTEC .)
    MINUS           reduce using rule 107 (cte -> CTEC .)
    LESS            reduce using rule 107 (cte -> CTEC .)
    GREATER         reduce using rule 107 (cte -> CTEC .)
    EQUALS          reduce using rule 107 (cte -> CTEC .)
    NOTEQUAL        reduce using rule 107 (cte -> CTEC .)
    GREATERTHAN     reduce using rule 107 (cte -> CTEC .)
    LESSTHAN        reduce using rule 107 (cte -> CTEC .)
    AND             reduce using rule 107 (cte -> CTEC .)
    OR              reduce using rule 107 (cte -> CTEC .)
    RBRACK          reduce using rule 107 (cte -> CTEC .)
    RPAREN          reduce using rule 107 (cte -> CTEC .)
    SEMICOLON       reduce using rule 107 (cte -> CTEC .)
    COMMA           reduce using rule 107 (cte -> CTEC .)
    FROM            reduce using rule 107 (cte -> CTEC .)


state 64

    (108) cte -> CTEB .

    TIMES           reduce using rule 108 (cte -> CTEB .)
    DIVIDE          reduce using rule 108 (cte -> CTEB .)
    PLUS            reduce using rule 108 (cte -> CTEB .)
    MINUS           reduce using rule 108 (cte -> CTEB .)
    LESS            reduce using rule 108 (cte -> CTEB .)
    GREATER         reduce using rule 108 (cte -> CTEB .)
    EQUALS          reduce using rule 108 (cte -> CTEB .)
    NOTEQUAL        reduce using rule 108 (cte -> CTEB .)
    GREATERTHAN     reduce using rule 108 (cte -> CTEB .)
    LESSTHAN        reduce using rule 108 (cte -> CTEB .)
    AND             reduce using rule 108 (cte -> CTEB .)
    OR              reduce using rule 108 (cte -> CTEB .)
    RBRACK          reduce using rule 108 (cte -> CTEB .)
    RPAREN          reduce using rule 108 (cte -> CTEB .)
    SEMICOLON       reduce using rule 108 (cte -> CTEB .)
    COMMA           reduce using rule 108 (cte -> CTEB .)
    FROM            reduce using rule 108 (cte -> CTEB .)


state 65

    (88) expression_parenthesis -> LPAREN . expression RPAREN
    (74) expression -> . t_expression
    (75) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 52
    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    expression                     shift and go to state 89
    t_expression                   shift and go to state 51
    g_expression                   shift and go to state 53
    m_expression                   shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 66

    (9) main -> MAIN LPAREN RPAREN main_scope var_declarations . LBRACE statements RBRACE

    LBRACE          shift and go to state 90


state 67

    (6) function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (22) parameters -> . parameters COMMA parameter
    (23) parameters -> . parameter
    (24) parameters -> . empty
    (25) parameter -> . simple_type ID
    (109) empty -> .
    (101) simple_type -> . INT
    (102) simple_type -> . FLOAT
    (103) simple_type -> . CHAR
    (104) simple_type -> . BOOLEAN

    COMMA           reduce using rule 109 (empty -> .)
    RPAREN          reduce using rule 109 (empty -> .)
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25
    BOOLEAN         shift and go to state 26

    simple_type                    shift and go to state 91
    parameters                     shift and go to state 92
    parameter                      shift and go to state 93
    empty                          shift and go to state 94

state 68

    (7) function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration . parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (22) parameters -> . parameters COMMA parameter
    (23) parameters -> . parameter
    (24) parameters -> . empty
    (25) parameter -> . simple_type ID
    (109) empty -> .
    (101) simple_type -> . INT
    (102) simple_type -> . FLOAT
    (103) simple_type -> . CHAR
    (104) simple_type -> . BOOLEAN

    COMMA           reduce using rule 109 (empty -> .)
    RPAREN          reduce using rule 109 (empty -> .)
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25
    BOOLEAN         shift and go to state 26

    parameters                     shift and go to state 95
    parameter                      shift and go to state 93
    empty                          shift and go to state 94
    simple_type                    shift and go to state 91

state 69

    (58) invocation -> ID invocation_1 . LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    LPAREN          shift and go to state 96


state 70

    (59) invocation_1 -> empty .

    LPAREN          reduce using rule 59 (invocation_1 -> empty .)


state 71

    (20) variable -> ID LBRACK expression RBRACK .
    (21) variable -> ID LBRACK expression RBRACK . LBRACK expression RBRACK

    COMMA           reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    TIMES           reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    PLUS            reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    MINUS           reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    LESS            reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    GREATER         reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    EQUALS          reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    AND             reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    OR              reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    RBRACK          reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    RPAREN          reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    FROM            reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 20 (variable -> ID LBRACK expression RBRACK .)
    LBRACK          shift and go to state 97


state 72

    (77) t_expression -> t_expression boolean_operator . g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    g_expression                   shift and go to state 98
    m_expression                   shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 73

    (97) boolean_operator -> AND .

    ID              reduce using rule 97 (boolean_operator -> AND .)
    CTEI            reduce using rule 97 (boolean_operator -> AND .)
    CTEF            reduce using rule 97 (boolean_operator -> AND .)
    CTEC            reduce using rule 97 (boolean_operator -> AND .)
    CTEB            reduce using rule 97 (boolean_operator -> AND .)
    LPAREN          reduce using rule 97 (boolean_operator -> AND .)


state 74

    (98) boolean_operator -> OR .

    ID              reduce using rule 98 (boolean_operator -> OR .)
    CTEI            reduce using rule 98 (boolean_operator -> OR .)
    CTEF            reduce using rule 98 (boolean_operator -> OR .)
    CTEC            reduce using rule 98 (boolean_operator -> OR .)
    CTEB            reduce using rule 98 (boolean_operator -> OR .)
    LPAREN          reduce using rule 98 (boolean_operator -> OR .)


state 75

    (75) expression -> NOT t_expression .
    (77) t_expression -> t_expression . boolean_operator g_expression
    (97) boolean_operator -> . AND
    (98) boolean_operator -> . OR

    RBRACK          reduce using rule 75 (expression -> NOT t_expression .)
    RPAREN          reduce using rule 75 (expression -> NOT t_expression .)
    SEMICOLON       reduce using rule 75 (expression -> NOT t_expression .)
    COMMA           reduce using rule 75 (expression -> NOT t_expression .)
    FROM            reduce using rule 75 (expression -> NOT t_expression .)
    AND             shift and go to state 73
    OR              shift and go to state 74

    boolean_operator               shift and go to state 72

state 76

    (79) g_expression -> g_expression comparison_operator . m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    m_expression                   shift and go to state 99
    term                           shift and go to state 55
    factor                         shift and go to state 56
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 77

    (89) comparison_operator -> LESS .

    ID              reduce using rule 89 (comparison_operator -> LESS .)
    CTEI            reduce using rule 89 (comparison_operator -> LESS .)
    CTEF            reduce using rule 89 (comparison_operator -> LESS .)
    CTEC            reduce using rule 89 (comparison_operator -> LESS .)
    CTEB            reduce using rule 89 (comparison_operator -> LESS .)
    LPAREN          reduce using rule 89 (comparison_operator -> LESS .)


state 78

    (90) comparison_operator -> GREATER .

    ID              reduce using rule 90 (comparison_operator -> GREATER .)
    CTEI            reduce using rule 90 (comparison_operator -> GREATER .)
    CTEF            reduce using rule 90 (comparison_operator -> GREATER .)
    CTEC            reduce using rule 90 (comparison_operator -> GREATER .)
    CTEB            reduce using rule 90 (comparison_operator -> GREATER .)
    LPAREN          reduce using rule 90 (comparison_operator -> GREATER .)


state 79

    (91) comparison_operator -> EQUALS .

    ID              reduce using rule 91 (comparison_operator -> EQUALS .)
    CTEI            reduce using rule 91 (comparison_operator -> EQUALS .)
    CTEF            reduce using rule 91 (comparison_operator -> EQUALS .)
    CTEC            reduce using rule 91 (comparison_operator -> EQUALS .)
    CTEB            reduce using rule 91 (comparison_operator -> EQUALS .)
    LPAREN          reduce using rule 91 (comparison_operator -> EQUALS .)


state 80

    (92) comparison_operator -> NOTEQUAL .

    ID              reduce using rule 92 (comparison_operator -> NOTEQUAL .)
    CTEI            reduce using rule 92 (comparison_operator -> NOTEQUAL .)
    CTEF            reduce using rule 92 (comparison_operator -> NOTEQUAL .)
    CTEC            reduce using rule 92 (comparison_operator -> NOTEQUAL .)
    CTEB            reduce using rule 92 (comparison_operator -> NOTEQUAL .)
    LPAREN          reduce using rule 92 (comparison_operator -> NOTEQUAL .)


state 81

    (93) comparison_operator -> GREATERTHAN .

    ID              reduce using rule 93 (comparison_operator -> GREATERTHAN .)
    CTEI            reduce using rule 93 (comparison_operator -> GREATERTHAN .)
    CTEF            reduce using rule 93 (comparison_operator -> GREATERTHAN .)
    CTEC            reduce using rule 93 (comparison_operator -> GREATERTHAN .)
    CTEB            reduce using rule 93 (comparison_operator -> GREATERTHAN .)
    LPAREN          reduce using rule 93 (comparison_operator -> GREATERTHAN .)


state 82

    (94) comparison_operator -> LESSTHAN .

    ID              reduce using rule 94 (comparison_operator -> LESSTHAN .)
    CTEI            reduce using rule 94 (comparison_operator -> LESSTHAN .)
    CTEF            reduce using rule 94 (comparison_operator -> LESSTHAN .)
    CTEC            reduce using rule 94 (comparison_operator -> LESSTHAN .)
    CTEB            reduce using rule 94 (comparison_operator -> LESSTHAN .)
    LPAREN          reduce using rule 94 (comparison_operator -> LESSTHAN .)


state 83

    (81) m_expression -> m_expression addition_operator . term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    term                           shift and go to state 100
    factor                         shift and go to state 56
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 84

    (95) addition_operator -> PLUS .

    ID              reduce using rule 95 (addition_operator -> PLUS .)
    CTEI            reduce using rule 95 (addition_operator -> PLUS .)
    CTEF            reduce using rule 95 (addition_operator -> PLUS .)
    CTEC            reduce using rule 95 (addition_operator -> PLUS .)
    CTEB            reduce using rule 95 (addition_operator -> PLUS .)
    LPAREN          reduce using rule 95 (addition_operator -> PLUS .)


state 85

    (96) addition_operator -> MINUS .

    ID              reduce using rule 96 (addition_operator -> MINUS .)
    CTEI            reduce using rule 96 (addition_operator -> MINUS .)
    CTEF            reduce using rule 96 (addition_operator -> MINUS .)
    CTEC            reduce using rule 96 (addition_operator -> MINUS .)
    CTEB            reduce using rule 96 (addition_operator -> MINUS .)
    LPAREN          reduce using rule 96 (addition_operator -> MINUS .)


state 86

    (83) term -> term multiplication_operator . factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    factor                         shift and go to state 101
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 87

    (99) multiplication_operator -> TIMES .

    ID              reduce using rule 99 (multiplication_operator -> TIMES .)
    CTEI            reduce using rule 99 (multiplication_operator -> TIMES .)
    CTEF            reduce using rule 99 (multiplication_operator -> TIMES .)
    CTEC            reduce using rule 99 (multiplication_operator -> TIMES .)
    CTEB            reduce using rule 99 (multiplication_operator -> TIMES .)
    LPAREN          reduce using rule 99 (multiplication_operator -> TIMES .)


state 88

    (100) multiplication_operator -> DIVIDE .

    ID              reduce using rule 100 (multiplication_operator -> DIVIDE .)
    CTEI            reduce using rule 100 (multiplication_operator -> DIVIDE .)
    CTEF            reduce using rule 100 (multiplication_operator -> DIVIDE .)
    CTEC            reduce using rule 100 (multiplication_operator -> DIVIDE .)
    CTEB            reduce using rule 100 (multiplication_operator -> DIVIDE .)
    LPAREN          reduce using rule 100 (multiplication_operator -> DIVIDE .)


state 89

    (88) expression_parenthesis -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 102


state 90

    (9) main -> MAIN LPAREN RPAREN main_scope var_declarations LBRACE . statements RBRACE
    (26) statements -> . statements statement
    (27) statements -> . statement
    (28) statements -> . empty
    (29) statement -> . read
    (30) statement -> . for
    (31) statement -> . do_while
    (32) statement -> . while
    (33) statement -> . if_else
    (34) statement -> . invocation
    (35) statement -> . if
    (36) statement -> . assingation
    (37) statement -> . return
    (38) statement -> . print
    (109) empty -> .
    (55) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (40) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (39) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (45) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (47) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) assingation -> . variable ASSIGN expression SEMICOLON
    (54) return -> . RETURN expression SEMICOLON
    (68) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 109 (empty -> .)
    READ            shift and go to state 116
    FOR             shift and go to state 117
    DO              shift and go to state 119
    WHILE           shift and go to state 120
    IF              shift and go to state 121
    ID              shift and go to state 118
    RETURN          shift and go to state 123
    PRINT           shift and go to state 124

  ! READ            [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! DO              [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! ID              [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]

    statements                     shift and go to state 103
    statement                      shift and go to state 104
    empty                          shift and go to state 105
    read                           shift and go to state 106
    for                            shift and go to state 107
    do_while                       shift and go to state 108
    while                          shift and go to state 109
    if_else                        shift and go to state 110
    invocation                     shift and go to state 111
    if                             shift and go to state 112
    assingation                    shift and go to state 113
    return                         shift and go to state 114
    print                          shift and go to state 115
    variable                       shift and go to state 122

state 91

    (25) parameter -> simple_type . ID

    ID              shift and go to state 125


state 92

    (6) function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (22) parameters -> parameters . COMMA parameter
    (16) close_var_declaration -> . empty
    (109) empty -> .

    COMMA           shift and go to state 127
    RPAREN          reduce using rule 109 (empty -> .)

    close_var_declaration          shift and go to state 126
    empty                          shift and go to state 47

state 93

    (23) parameters -> parameter .

    COMMA           reduce using rule 23 (parameters -> parameter .)
    RPAREN          reduce using rule 23 (parameters -> parameter .)


state 94

    (24) parameters -> empty .

    COMMA           reduce using rule 24 (parameters -> empty .)
    RPAREN          reduce using rule 24 (parameters -> empty .)


state 95

    (7) function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters . close_var_declaration RPAREN var_declarations LBRACE statements RBRACE
    (22) parameters -> parameters . COMMA parameter
    (16) close_var_declaration -> . empty
    (109) empty -> .

    COMMA           shift and go to state 127
    RPAREN          reduce using rule 109 (empty -> .)

    close_var_declaration          shift and go to state 128
    empty                          shift and go to state 47

state 96

    (58) invocation -> ID invocation_1 LPAREN . invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (60) invocation_2 -> . empty
    (109) empty -> .

    NOT             reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    CTEI            reduce using rule 109 (empty -> .)
    CTEF            reduce using rule 109 (empty -> .)
    CTEC            reduce using rule 109 (empty -> .)
    CTEB            reduce using rule 109 (empty -> .)
    LPAREN          reduce using rule 109 (empty -> .)
    RPAREN          reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)

    invocation_2                   shift and go to state 129
    empty                          shift and go to state 130

state 97

    (21) variable -> ID LBRACK expression RBRACK LBRACK . expression RBRACK
    (74) expression -> . t_expression
    (75) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 52
    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    expression                     shift and go to state 131
    t_expression                   shift and go to state 51
    g_expression                   shift and go to state 53
    m_expression                   shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 98

    (77) t_expression -> t_expression boolean_operator g_expression .
    (79) g_expression -> g_expression . comparison_operator m_expression
    (89) comparison_operator -> . LESS
    (90) comparison_operator -> . GREATER
    (91) comparison_operator -> . EQUALS
    (92) comparison_operator -> . NOTEQUAL
    (93) comparison_operator -> . GREATERTHAN
    (94) comparison_operator -> . LESSTHAN

    AND             reduce using rule 77 (t_expression -> t_expression boolean_operator g_expression .)
    OR              reduce using rule 77 (t_expression -> t_expression boolean_operator g_expression .)
    RBRACK          reduce using rule 77 (t_expression -> t_expression boolean_operator g_expression .)
    RPAREN          reduce using rule 77 (t_expression -> t_expression boolean_operator g_expression .)
    SEMICOLON       reduce using rule 77 (t_expression -> t_expression boolean_operator g_expression .)
    COMMA           reduce using rule 77 (t_expression -> t_expression boolean_operator g_expression .)
    FROM            reduce using rule 77 (t_expression -> t_expression boolean_operator g_expression .)
    LESS            shift and go to state 77
    GREATER         shift and go to state 78
    EQUALS          shift and go to state 79
    NOTEQUAL        shift and go to state 80
    GREATERTHAN     shift and go to state 81
    LESSTHAN        shift and go to state 82

    comparison_operator            shift and go to state 76

state 99

    (79) g_expression -> g_expression comparison_operator m_expression .
    (81) m_expression -> m_expression . addition_operator term
    (95) addition_operator -> . PLUS
    (96) addition_operator -> . MINUS

    LESS            reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    GREATER         reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    EQUALS          reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    NOTEQUAL        reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    GREATERTHAN     reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    LESSTHAN        reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    AND             reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    OR              reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    RBRACK          reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    RPAREN          reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    SEMICOLON       reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    COMMA           reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    FROM            reduce using rule 79 (g_expression -> g_expression comparison_operator m_expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85

    addition_operator              shift and go to state 83

state 100

    (81) m_expression -> m_expression addition_operator term .
    (83) term -> term . multiplication_operator factor
    (99) multiplication_operator -> . TIMES
    (100) multiplication_operator -> . DIVIDE

    PLUS            reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    MINUS           reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    LESS            reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    GREATER         reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    EQUALS          reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    NOTEQUAL        reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    GREATERTHAN     reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    LESSTHAN        reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    AND             reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    OR              reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    RBRACK          reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    RPAREN          reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    SEMICOLON       reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    COMMA           reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    FROM            reduce using rule 81 (m_expression -> m_expression addition_operator term .)
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88

    multiplication_operator        shift and go to state 86

state 101

    (83) term -> term multiplication_operator factor .

    TIMES           reduce using rule 83 (term -> term multiplication_operator factor .)
    DIVIDE          reduce using rule 83 (term -> term multiplication_operator factor .)
    PLUS            reduce using rule 83 (term -> term multiplication_operator factor .)
    MINUS           reduce using rule 83 (term -> term multiplication_operator factor .)
    LESS            reduce using rule 83 (term -> term multiplication_operator factor .)
    GREATER         reduce using rule 83 (term -> term multiplication_operator factor .)
    EQUALS          reduce using rule 83 (term -> term multiplication_operator factor .)
    NOTEQUAL        reduce using rule 83 (term -> term multiplication_operator factor .)
    GREATERTHAN     reduce using rule 83 (term -> term multiplication_operator factor .)
    LESSTHAN        reduce using rule 83 (term -> term multiplication_operator factor .)
    AND             reduce using rule 83 (term -> term multiplication_operator factor .)
    OR              reduce using rule 83 (term -> term multiplication_operator factor .)
    RBRACK          reduce using rule 83 (term -> term multiplication_operator factor .)
    RPAREN          reduce using rule 83 (term -> term multiplication_operator factor .)
    SEMICOLON       reduce using rule 83 (term -> term multiplication_operator factor .)
    COMMA           reduce using rule 83 (term -> term multiplication_operator factor .)
    FROM            reduce using rule 83 (term -> term multiplication_operator factor .)


state 102

    (88) expression_parenthesis -> LPAREN expression RPAREN .

    TIMES           reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESS            reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    AND             reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    OR              reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)
    FROM            reduce using rule 88 (expression_parenthesis -> LPAREN expression RPAREN .)


state 103

    (9) main -> MAIN LPAREN RPAREN main_scope var_declarations LBRACE statements . RBRACE
    (26) statements -> statements . statement
    (29) statement -> . read
    (30) statement -> . for
    (31) statement -> . do_while
    (32) statement -> . while
    (33) statement -> . if_else
    (34) statement -> . invocation
    (35) statement -> . if
    (36) statement -> . assingation
    (37) statement -> . return
    (38) statement -> . print
    (55) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (40) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (39) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (45) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (47) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) assingation -> . variable ASSIGN expression SEMICOLON
    (54) return -> . RETURN expression SEMICOLON
    (68) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 132
    READ            shift and go to state 116
    FOR             shift and go to state 117
    DO              shift and go to state 119
    WHILE           shift and go to state 120
    IF              shift and go to state 121
    ID              shift and go to state 118
    RETURN          shift and go to state 123
    PRINT           shift and go to state 124

    statement                      shift and go to state 133
    read                           shift and go to state 106
    for                            shift and go to state 107
    do_while                       shift and go to state 108
    while                          shift and go to state 109
    if_else                        shift and go to state 110
    invocation                     shift and go to state 111
    if                             shift and go to state 112
    assingation                    shift and go to state 113
    return                         shift and go to state 114
    print                          shift and go to state 115
    variable                       shift and go to state 122

state 104

    (27) statements -> statement .

    RBRACE          reduce using rule 27 (statements -> statement .)
    READ            reduce using rule 27 (statements -> statement .)
    FOR             reduce using rule 27 (statements -> statement .)
    DO              reduce using rule 27 (statements -> statement .)
    WHILE           reduce using rule 27 (statements -> statement .)
    IF              reduce using rule 27 (statements -> statement .)
    ID              reduce using rule 27 (statements -> statement .)
    RETURN          reduce using rule 27 (statements -> statement .)
    PRINT           reduce using rule 27 (statements -> statement .)


state 105

    (28) statements -> empty .

    RBRACE          reduce using rule 28 (statements -> empty .)
    READ            reduce using rule 28 (statements -> empty .)
    FOR             reduce using rule 28 (statements -> empty .)
    DO              reduce using rule 28 (statements -> empty .)
    WHILE           reduce using rule 28 (statements -> empty .)
    IF              reduce using rule 28 (statements -> empty .)
    ID              reduce using rule 28 (statements -> empty .)
    RETURN          reduce using rule 28 (statements -> empty .)
    PRINT           reduce using rule 28 (statements -> empty .)


state 106

    (29) statement -> read .

    RBRACE          reduce using rule 29 (statement -> read .)
    READ            reduce using rule 29 (statement -> read .)
    FOR             reduce using rule 29 (statement -> read .)
    DO              reduce using rule 29 (statement -> read .)
    WHILE           reduce using rule 29 (statement -> read .)
    IF              reduce using rule 29 (statement -> read .)
    ID              reduce using rule 29 (statement -> read .)
    RETURN          reduce using rule 29 (statement -> read .)
    PRINT           reduce using rule 29 (statement -> read .)


state 107

    (30) statement -> for .

    RBRACE          reduce using rule 30 (statement -> for .)
    READ            reduce using rule 30 (statement -> for .)
    FOR             reduce using rule 30 (statement -> for .)
    DO              reduce using rule 30 (statement -> for .)
    WHILE           reduce using rule 30 (statement -> for .)
    IF              reduce using rule 30 (statement -> for .)
    ID              reduce using rule 30 (statement -> for .)
    RETURN          reduce using rule 30 (statement -> for .)
    PRINT           reduce using rule 30 (statement -> for .)


state 108

    (31) statement -> do_while .

    RBRACE          reduce using rule 31 (statement -> do_while .)
    READ            reduce using rule 31 (statement -> do_while .)
    FOR             reduce using rule 31 (statement -> do_while .)
    DO              reduce using rule 31 (statement -> do_while .)
    WHILE           reduce using rule 31 (statement -> do_while .)
    IF              reduce using rule 31 (statement -> do_while .)
    ID              reduce using rule 31 (statement -> do_while .)
    RETURN          reduce using rule 31 (statement -> do_while .)
    PRINT           reduce using rule 31 (statement -> do_while .)


state 109

    (32) statement -> while .

    RBRACE          reduce using rule 32 (statement -> while .)
    READ            reduce using rule 32 (statement -> while .)
    FOR             reduce using rule 32 (statement -> while .)
    DO              reduce using rule 32 (statement -> while .)
    WHILE           reduce using rule 32 (statement -> while .)
    IF              reduce using rule 32 (statement -> while .)
    ID              reduce using rule 32 (statement -> while .)
    RETURN          reduce using rule 32 (statement -> while .)
    PRINT           reduce using rule 32 (statement -> while .)


state 110

    (33) statement -> if_else .

    RBRACE          reduce using rule 33 (statement -> if_else .)
    READ            reduce using rule 33 (statement -> if_else .)
    FOR             reduce using rule 33 (statement -> if_else .)
    DO              reduce using rule 33 (statement -> if_else .)
    WHILE           reduce using rule 33 (statement -> if_else .)
    IF              reduce using rule 33 (statement -> if_else .)
    ID              reduce using rule 33 (statement -> if_else .)
    RETURN          reduce using rule 33 (statement -> if_else .)
    PRINT           reduce using rule 33 (statement -> if_else .)


state 111

    (34) statement -> invocation .

    RBRACE          reduce using rule 34 (statement -> invocation .)
    READ            reduce using rule 34 (statement -> invocation .)
    FOR             reduce using rule 34 (statement -> invocation .)
    DO              reduce using rule 34 (statement -> invocation .)
    WHILE           reduce using rule 34 (statement -> invocation .)
    IF              reduce using rule 34 (statement -> invocation .)
    ID              reduce using rule 34 (statement -> invocation .)
    RETURN          reduce using rule 34 (statement -> invocation .)
    PRINT           reduce using rule 34 (statement -> invocation .)


state 112

    (35) statement -> if .

    RBRACE          reduce using rule 35 (statement -> if .)
    READ            reduce using rule 35 (statement -> if .)
    FOR             reduce using rule 35 (statement -> if .)
    DO              reduce using rule 35 (statement -> if .)
    WHILE           reduce using rule 35 (statement -> if .)
    IF              reduce using rule 35 (statement -> if .)
    ID              reduce using rule 35 (statement -> if .)
    RETURN          reduce using rule 35 (statement -> if .)
    PRINT           reduce using rule 35 (statement -> if .)


state 113

    (36) statement -> assingation .

    RBRACE          reduce using rule 36 (statement -> assingation .)
    READ            reduce using rule 36 (statement -> assingation .)
    FOR             reduce using rule 36 (statement -> assingation .)
    DO              reduce using rule 36 (statement -> assingation .)
    WHILE           reduce using rule 36 (statement -> assingation .)
    IF              reduce using rule 36 (statement -> assingation .)
    ID              reduce using rule 36 (statement -> assingation .)
    RETURN          reduce using rule 36 (statement -> assingation .)
    PRINT           reduce using rule 36 (statement -> assingation .)


state 114

    (37) statement -> return .

    RBRACE          reduce using rule 37 (statement -> return .)
    READ            reduce using rule 37 (statement -> return .)
    FOR             reduce using rule 37 (statement -> return .)
    DO              reduce using rule 37 (statement -> return .)
    WHILE           reduce using rule 37 (statement -> return .)
    IF              reduce using rule 37 (statement -> return .)
    ID              reduce using rule 37 (statement -> return .)
    RETURN          reduce using rule 37 (statement -> return .)
    PRINT           reduce using rule 37 (statement -> return .)


state 115

    (38) statement -> print .

    RBRACE          reduce using rule 38 (statement -> print .)
    READ            reduce using rule 38 (statement -> print .)
    FOR             reduce using rule 38 (statement -> print .)
    DO              reduce using rule 38 (statement -> print .)
    WHILE           reduce using rule 38 (statement -> print .)
    IF              reduce using rule 38 (statement -> print .)
    ID              reduce using rule 38 (statement -> print .)
    RETURN          reduce using rule 38 (statement -> print .)
    PRINT           reduce using rule 38 (statement -> print .)


state 116

    (55) read -> READ . LPAREN variable_list RPAREN SEMICOLON

    LPAREN          shift and go to state 134


state 117

    (40) for -> FOR . LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4

    LPAREN          shift and go to state 135


state 118

    (58) invocation -> ID . invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (19) variable -> ID .
    (20) variable -> ID . LBRACK expression RBRACK
    (21) variable -> ID . LBRACK expression RBRACK LBRACK expression RBRACK
    (59) invocation_1 -> . empty
    (109) empty -> .

    ASSIGN          reduce using rule 19 (variable -> ID .)
    LBRACK          shift and go to state 41
    LPAREN          reduce using rule 109 (empty -> .)

    invocation_1                   shift and go to state 69
    empty                          shift and go to state 70

state 119

    (39) do_while -> DO . breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (46) breadcrumb -> . empty
    (109) empty -> .

    LBRACE          reduce using rule 109 (empty -> .)

    breadcrumb                     shift and go to state 136
    empty                          shift and go to state 137

state 120

    (45) while -> WHILE . breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (46) breadcrumb -> . empty
    (109) empty -> .

    LPAREN          reduce using rule 109 (empty -> .)

    breadcrumb                     shift and go to state 138
    empty                          shift and go to state 137

state 121

    (50) if_else -> IF . LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (47) if -> IF . LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE

    LPAREN          shift and go to state 139


state 122

    (73) assingation -> variable . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 140


state 123

    (54) return -> RETURN . expression SEMICOLON
    (74) expression -> . t_expression
    (75) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 52
    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    expression                     shift and go to state 141
    t_expression                   shift and go to state 51
    g_expression                   shift and go to state 53
    m_expression                   shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 124

    (68) print -> PRINT . LPAREN print_arguments RPAREN SEMICOLON

    LPAREN          shift and go to state 142


state 125

    (25) parameter -> simple_type ID .

    COMMA           reduce using rule 25 (parameter -> simple_type ID .)
    RPAREN          reduce using rule 25 (parameter -> simple_type ID .)


state 126

    (6) function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations LBRACE statements RBRACE

    RPAREN          shift and go to state 143


state 127

    (22) parameters -> parameters COMMA . parameter
    (25) parameter -> . simple_type ID
    (101) simple_type -> . INT
    (102) simple_type -> . FLOAT
    (103) simple_type -> . CHAR
    (104) simple_type -> . BOOLEAN

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25
    BOOLEAN         shift and go to state 26

    parameter                      shift and go to state 144
    simple_type                    shift and go to state 91

state 128

    (7) function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration . RPAREN var_declarations LBRACE statements RBRACE

    RPAREN          shift and go to state 145


state 129

    (58) invocation -> ID invocation_1 LPAREN invocation_2 . expressions RPAREN invocation_5 SEMICOLON invocation_6
    (65) expressions -> . expressions COMMA invocation_4 expression invocation_3
    (66) expressions -> . expression invocation_3
    (67) expressions -> . empty
    (74) expression -> . t_expression
    (75) expression -> . NOT t_expression
    (109) empty -> .
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 52
    RPAREN          reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)
    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    expressions                    shift and go to state 146
    expression                     shift and go to state 147
    empty                          shift and go to state 148
    t_expression                   shift and go to state 51
    g_expression                   shift and go to state 53
    m_expression                   shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 130

    (60) invocation_2 -> empty .

    NOT             reduce using rule 60 (invocation_2 -> empty .)
    ID              reduce using rule 60 (invocation_2 -> empty .)
    CTEI            reduce using rule 60 (invocation_2 -> empty .)
    CTEF            reduce using rule 60 (invocation_2 -> empty .)
    CTEC            reduce using rule 60 (invocation_2 -> empty .)
    CTEB            reduce using rule 60 (invocation_2 -> empty .)
    LPAREN          reduce using rule 60 (invocation_2 -> empty .)
    RPAREN          reduce using rule 60 (invocation_2 -> empty .)
    COMMA           reduce using rule 60 (invocation_2 -> empty .)


state 131

    (21) variable -> ID LBRACK expression RBRACK LBRACK expression . RBRACK

    RBRACK          shift and go to state 149


state 132

    (9) main -> MAIN LPAREN RPAREN main_scope var_declarations LBRACE statements RBRACE .

    END             reduce using rule 9 (main -> MAIN LPAREN RPAREN main_scope var_declarations LBRACE statements RBRACE .)


state 133

    (26) statements -> statements statement .

    RBRACE          reduce using rule 26 (statements -> statements statement .)
    READ            reduce using rule 26 (statements -> statements statement .)
    FOR             reduce using rule 26 (statements -> statements statement .)
    DO              reduce using rule 26 (statements -> statements statement .)
    WHILE           reduce using rule 26 (statements -> statements statement .)
    IF              reduce using rule 26 (statements -> statements statement .)
    ID              reduce using rule 26 (statements -> statements statement .)
    RETURN          reduce using rule 26 (statements -> statements statement .)
    PRINT           reduce using rule 26 (statements -> statements statement .)


state 134

    (55) read -> READ LPAREN . variable_list RPAREN SEMICOLON
    (56) variable_list -> . variable
    (57) variable_list -> . variable_list COMMA variable
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 34

    variable_list                  shift and go to state 150
    variable                       shift and go to state 151

state 135

    (40) for -> FOR LPAREN . ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4

    ID              shift and go to state 152


state 136

    (39) do_while -> DO breadcrumb . LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON

    LBRACE          shift and go to state 153


state 137

    (46) breadcrumb -> empty .

    LBRACE          reduce using rule 46 (breadcrumb -> empty .)
    LPAREN          reduce using rule 46 (breadcrumb -> empty .)


state 138

    (45) while -> WHILE breadcrumb . LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE

    LPAREN          shift and go to state 154


state 139

    (50) if_else -> IF LPAREN . open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (47) if -> IF LPAREN . open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (48) open_temporal_boolean -> . empty
    (109) empty -> .

    NOT             reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    CTEI            reduce using rule 109 (empty -> .)
    CTEF            reduce using rule 109 (empty -> .)
    CTEC            reduce using rule 109 (empty -> .)
    CTEB            reduce using rule 109 (empty -> .)
    LPAREN          reduce using rule 109 (empty -> .)

    open_temporal_boolean          shift and go to state 155
    empty                          shift and go to state 156

state 140

    (73) assingation -> variable ASSIGN . expression SEMICOLON
    (74) expression -> . t_expression
    (75) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 52
    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    variable                       shift and go to state 57
    expression                     shift and go to state 157
    t_expression                   shift and go to state 51
    g_expression                   shift and go to state 53
    m_expression                   shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 141

    (54) return -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 158


state 142

    (68) print -> PRINT LPAREN . print_arguments RPAREN SEMICOLON
    (69) print_arguments -> . print_argument
    (70) print_arguments -> . print_arguments COMMA print_argument
    (71) print_argument -> . CTES
    (72) print_argument -> . expression
    (74) expression -> . t_expression
    (75) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    CTES            shift and go to state 161
    NOT             shift and go to state 52
    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    print_arguments                shift and go to state 159
    print_argument                 shift and go to state 160
    expression                     shift and go to state 162
    t_expression                   shift and go to state 51
    g_expression                   shift and go to state 53
    m_expression                   shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 143

    (6) function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations LBRACE statements RBRACE
    (11) var_declarations -> . var_declaration var_declarations
    (12) var_declarations -> . var_declaration
    (13) var_declarations -> . empty
    (14) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration
    (109) empty -> .

    VARIABLE        shift and go to state 10
    LBRACE          reduce using rule 109 (empty -> .)

    var_declarations               shift and go to state 163
    var_declaration                shift and go to state 8
    empty                          shift and go to state 9

state 144

    (22) parameters -> parameters COMMA parameter .

    COMMA           reduce using rule 22 (parameters -> parameters COMMA parameter .)
    RPAREN          reduce using rule 22 (parameters -> parameters COMMA parameter .)


state 145

    (7) function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN . var_declarations LBRACE statements RBRACE
    (11) var_declarations -> . var_declaration var_declarations
    (12) var_declarations -> . var_declaration
    (13) var_declarations -> . empty
    (14) var_declaration -> . VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration
    (109) empty -> .

    VARIABLE        shift and go to state 10
    LBRACE          reduce using rule 109 (empty -> .)

    var_declarations               shift and go to state 164
    var_declaration                shift and go to state 8
    empty                          shift and go to state 9

state 146

    (58) invocation -> ID invocation_1 LPAREN invocation_2 expressions . RPAREN invocation_5 SEMICOLON invocation_6
    (65) expressions -> expressions . COMMA invocation_4 expression invocation_3

    RPAREN          shift and go to state 165
    COMMA           shift and go to state 166


state 147

    (66) expressions -> expression . invocation_3
    (61) invocation_3 -> . empty
    (109) empty -> .

    RPAREN          reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)

    invocation_3                   shift and go to state 167
    empty                          shift and go to state 168

state 148

    (67) expressions -> empty .

    RPAREN          reduce using rule 67 (expressions -> empty .)
    COMMA           reduce using rule 67 (expressions -> empty .)


state 149

    (21) variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .

    COMMA           reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    SEMICOLON       reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    TIMES           reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    PLUS            reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    MINUS           reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESS            reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATER         reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    EQUALS          reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    NOTEQUAL        reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    GREATERTHAN     reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    LESSTHAN        reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    AND             reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    OR              reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RBRACK          reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    RPAREN          reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    FROM            reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)
    ASSIGN          reduce using rule 21 (variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK .)


state 150

    (55) read -> READ LPAREN variable_list . RPAREN SEMICOLON
    (57) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 169
    COMMA           shift and go to state 170


state 151

    (56) variable_list -> variable .

    RPAREN          reduce using rule 56 (variable_list -> variable .)
    COMMA           reduce using rule 56 (variable_list -> variable .)


state 152

    (40) for -> FOR LPAREN ID . for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (41) for_1 -> . empty
    (109) empty -> .

    ASSIGN          reduce using rule 109 (empty -> .)

    for_1                          shift and go to state 171
    empty                          shift and go to state 172

state 153

    (39) do_while -> DO breadcrumb LBRACE . statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (26) statements -> . statements statement
    (27) statements -> . statement
    (28) statements -> . empty
    (29) statement -> . read
    (30) statement -> . for
    (31) statement -> . do_while
    (32) statement -> . while
    (33) statement -> . if_else
    (34) statement -> . invocation
    (35) statement -> . if
    (36) statement -> . assingation
    (37) statement -> . return
    (38) statement -> . print
    (109) empty -> .
    (55) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (40) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (39) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (45) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (47) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) assingation -> . variable ASSIGN expression SEMICOLON
    (54) return -> . RETURN expression SEMICOLON
    (68) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 109 (empty -> .)
    READ            shift and go to state 116
    FOR             shift and go to state 117
    DO              shift and go to state 119
    WHILE           shift and go to state 120
    IF              shift and go to state 121
    ID              shift and go to state 118
    RETURN          shift and go to state 123
    PRINT           shift and go to state 124

  ! READ            [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! DO              [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! ID              [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]

    statements                     shift and go to state 173
    statement                      shift and go to state 104
    empty                          shift and go to state 105
    read                           shift and go to state 106
    for                            shift and go to state 107
    do_while                       shift and go to state 108
    while                          shift and go to state 109
    if_else                        shift and go to state 110
    invocation                     shift and go to state 111
    if                             shift and go to state 112
    assingation                    shift and go to state 113
    return                         shift and go to state 114
    print                          shift and go to state 115
    variable                       shift and go to state 122

state 154

    (45) while -> WHILE breadcrumb LPAREN . open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (48) open_temporal_boolean -> . empty
    (109) empty -> .

    NOT             reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    CTEI            reduce using rule 109 (empty -> .)
    CTEF            reduce using rule 109 (empty -> .)
    CTEC            reduce using rule 109 (empty -> .)
    CTEB            reduce using rule 109 (empty -> .)
    LPAREN          reduce using rule 109 (empty -> .)

    open_temporal_boolean          shift and go to state 174
    empty                          shift and go to state 156

state 155

    (50) if_else -> IF LPAREN open_temporal_boolean . expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (47) if -> IF LPAREN open_temporal_boolean . expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) expression -> . t_expression
    (75) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 52
    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    expression                     shift and go to state 175
    t_expression                   shift and go to state 51
    g_expression                   shift and go to state 53
    m_expression                   shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 156

    (48) open_temporal_boolean -> empty .

    NOT             reduce using rule 48 (open_temporal_boolean -> empty .)
    ID              reduce using rule 48 (open_temporal_boolean -> empty .)
    CTEI            reduce using rule 48 (open_temporal_boolean -> empty .)
    CTEF            reduce using rule 48 (open_temporal_boolean -> empty .)
    CTEC            reduce using rule 48 (open_temporal_boolean -> empty .)
    CTEB            reduce using rule 48 (open_temporal_boolean -> empty .)
    LPAREN          reduce using rule 48 (open_temporal_boolean -> empty .)


state 157

    (73) assingation -> variable ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 176


state 158

    (54) return -> RETURN expression SEMICOLON .

    RBRACE          reduce using rule 54 (return -> RETURN expression SEMICOLON .)
    READ            reduce using rule 54 (return -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 54 (return -> RETURN expression SEMICOLON .)
    DO              reduce using rule 54 (return -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 54 (return -> RETURN expression SEMICOLON .)
    IF              reduce using rule 54 (return -> RETURN expression SEMICOLON .)
    ID              reduce using rule 54 (return -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 54 (return -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 54 (return -> RETURN expression SEMICOLON .)


state 159

    (68) print -> PRINT LPAREN print_arguments . RPAREN SEMICOLON
    (70) print_arguments -> print_arguments . COMMA print_argument

    RPAREN          shift and go to state 177
    COMMA           shift and go to state 178


state 160

    (69) print_arguments -> print_argument .

    RPAREN          reduce using rule 69 (print_arguments -> print_argument .)
    COMMA           reduce using rule 69 (print_arguments -> print_argument .)


state 161

    (71) print_argument -> CTES .

    RPAREN          reduce using rule 71 (print_argument -> CTES .)
    COMMA           reduce using rule 71 (print_argument -> CTES .)


state 162

    (72) print_argument -> expression .

    RPAREN          reduce using rule 72 (print_argument -> expression .)
    COMMA           reduce using rule 72 (print_argument -> expression .)


state 163

    (6) function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations . LBRACE statements RBRACE

    LBRACE          shift and go to state 179


state 164

    (7) function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations . LBRACE statements RBRACE

    LBRACE          shift and go to state 180


state 165

    (58) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN . invocation_5 SEMICOLON invocation_6
    (63) invocation_5 -> . empty
    (109) empty -> .

    SEMICOLON       reduce using rule 109 (empty -> .)

    invocation_5                   shift and go to state 181
    empty                          shift and go to state 182

state 166

    (65) expressions -> expressions COMMA . invocation_4 expression invocation_3
    (62) invocation_4 -> . empty
    (109) empty -> .

    NOT             reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    CTEI            reduce using rule 109 (empty -> .)
    CTEF            reduce using rule 109 (empty -> .)
    CTEC            reduce using rule 109 (empty -> .)
    CTEB            reduce using rule 109 (empty -> .)
    LPAREN          reduce using rule 109 (empty -> .)

    invocation_4                   shift and go to state 183
    empty                          shift and go to state 184

state 167

    (66) expressions -> expression invocation_3 .

    RPAREN          reduce using rule 66 (expressions -> expression invocation_3 .)
    COMMA           reduce using rule 66 (expressions -> expression invocation_3 .)


state 168

    (61) invocation_3 -> empty .

    RPAREN          reduce using rule 61 (invocation_3 -> empty .)
    COMMA           reduce using rule 61 (invocation_3 -> empty .)


state 169

    (55) read -> READ LPAREN variable_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 185


state 170

    (57) variable_list -> variable_list COMMA . variable
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    ID              shift and go to state 34

    variable                       shift and go to state 186

state 171

    (40) for -> FOR LPAREN ID for_1 . ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4

    ASSIGN          shift and go to state 187


state 172

    (41) for_1 -> empty .

    ASSIGN          reduce using rule 41 (for_1 -> empty .)


state 173

    (39) do_while -> DO breadcrumb LBRACE statements . RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (26) statements -> statements . statement
    (29) statement -> . read
    (30) statement -> . for
    (31) statement -> . do_while
    (32) statement -> . while
    (33) statement -> . if_else
    (34) statement -> . invocation
    (35) statement -> . if
    (36) statement -> . assingation
    (37) statement -> . return
    (38) statement -> . print
    (55) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (40) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (39) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (45) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (47) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) assingation -> . variable ASSIGN expression SEMICOLON
    (54) return -> . RETURN expression SEMICOLON
    (68) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 188
    READ            shift and go to state 116
    FOR             shift and go to state 117
    DO              shift and go to state 119
    WHILE           shift and go to state 120
    IF              shift and go to state 121
    ID              shift and go to state 118
    RETURN          shift and go to state 123
    PRINT           shift and go to state 124

    statement                      shift and go to state 133
    read                           shift and go to state 106
    for                            shift and go to state 107
    do_while                       shift and go to state 108
    while                          shift and go to state 109
    if_else                        shift and go to state 110
    invocation                     shift and go to state 111
    if                             shift and go to state 112
    assingation                    shift and go to state 113
    return                         shift and go to state 114
    print                          shift and go to state 115
    variable                       shift and go to state 122

state 174

    (45) while -> WHILE breadcrumb LPAREN open_temporal_boolean . expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (74) expression -> . t_expression
    (75) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 52
    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    expression                     shift and go to state 189
    t_expression                   shift and go to state 51
    g_expression                   shift and go to state 53
    m_expression                   shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 175

    (50) if_else -> IF LPAREN open_temporal_boolean expression . close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (47) if -> IF LPAREN open_temporal_boolean expression . close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (49) close_temporal_boolean -> . empty
    (109) empty -> .

    RPAREN          reduce using rule 109 (empty -> .)

    close_temporal_boolean         shift and go to state 190
    empty                          shift and go to state 191

state 176

    (73) assingation -> variable ASSIGN expression SEMICOLON .

    RBRACE          reduce using rule 73 (assingation -> variable ASSIGN expression SEMICOLON .)
    READ            reduce using rule 73 (assingation -> variable ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 73 (assingation -> variable ASSIGN expression SEMICOLON .)
    DO              reduce using rule 73 (assingation -> variable ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 73 (assingation -> variable ASSIGN expression SEMICOLON .)
    IF              reduce using rule 73 (assingation -> variable ASSIGN expression SEMICOLON .)
    ID              reduce using rule 73 (assingation -> variable ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 73 (assingation -> variable ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 73 (assingation -> variable ASSIGN expression SEMICOLON .)


state 177

    (68) print -> PRINT LPAREN print_arguments RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 192


state 178

    (70) print_arguments -> print_arguments COMMA . print_argument
    (71) print_argument -> . CTES
    (72) print_argument -> . expression
    (74) expression -> . t_expression
    (75) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    CTES            shift and go to state 161
    NOT             shift and go to state 52
    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    print_argument                 shift and go to state 193
    expression                     shift and go to state 162
    t_expression                   shift and go to state 51
    g_expression                   shift and go to state 53
    m_expression                   shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 179

    (6) function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE . statements RBRACE
    (26) statements -> . statements statement
    (27) statements -> . statement
    (28) statements -> . empty
    (29) statement -> . read
    (30) statement -> . for
    (31) statement -> . do_while
    (32) statement -> . while
    (33) statement -> . if_else
    (34) statement -> . invocation
    (35) statement -> . if
    (36) statement -> . assingation
    (37) statement -> . return
    (38) statement -> . print
    (109) empty -> .
    (55) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (40) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (39) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (45) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (47) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) assingation -> . variable ASSIGN expression SEMICOLON
    (54) return -> . RETURN expression SEMICOLON
    (68) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 109 (empty -> .)
    READ            shift and go to state 116
    FOR             shift and go to state 117
    DO              shift and go to state 119
    WHILE           shift and go to state 120
    IF              shift and go to state 121
    ID              shift and go to state 118
    RETURN          shift and go to state 123
    PRINT           shift and go to state 124

  ! READ            [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! DO              [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! ID              [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]

    statements                     shift and go to state 194
    statement                      shift and go to state 104
    empty                          shift and go to state 105
    read                           shift and go to state 106
    for                            shift and go to state 107
    do_while                       shift and go to state 108
    while                          shift and go to state 109
    if_else                        shift and go to state 110
    invocation                     shift and go to state 111
    if                             shift and go to state 112
    assingation                    shift and go to state 113
    return                         shift and go to state 114
    print                          shift and go to state 115
    variable                       shift and go to state 122

state 180

    (7) function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE . statements RBRACE
    (26) statements -> . statements statement
    (27) statements -> . statement
    (28) statements -> . empty
    (29) statement -> . read
    (30) statement -> . for
    (31) statement -> . do_while
    (32) statement -> . while
    (33) statement -> . if_else
    (34) statement -> . invocation
    (35) statement -> . if
    (36) statement -> . assingation
    (37) statement -> . return
    (38) statement -> . print
    (109) empty -> .
    (55) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (40) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (39) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (45) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (47) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) assingation -> . variable ASSIGN expression SEMICOLON
    (54) return -> . RETURN expression SEMICOLON
    (68) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 109 (empty -> .)
    READ            shift and go to state 116
    FOR             shift and go to state 117
    DO              shift and go to state 119
    WHILE           shift and go to state 120
    IF              shift and go to state 121
    ID              shift and go to state 118
    RETURN          shift and go to state 123
    PRINT           shift and go to state 124

  ! READ            [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! DO              [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! ID              [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]

    statements                     shift and go to state 195
    statement                      shift and go to state 104
    empty                          shift and go to state 105
    read                           shift and go to state 106
    for                            shift and go to state 107
    do_while                       shift and go to state 108
    while                          shift and go to state 109
    if_else                        shift and go to state 110
    invocation                     shift and go to state 111
    if                             shift and go to state 112
    assingation                    shift and go to state 113
    return                         shift and go to state 114
    print                          shift and go to state 115
    variable                       shift and go to state 122

state 181

    (58) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 . SEMICOLON invocation_6

    SEMICOLON       shift and go to state 196


state 182

    (63) invocation_5 -> empty .

    SEMICOLON       reduce using rule 63 (invocation_5 -> empty .)


state 183

    (65) expressions -> expressions COMMA invocation_4 . expression invocation_3
    (74) expression -> . t_expression
    (75) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 52
    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    expression                     shift and go to state 197
    t_expression                   shift and go to state 51
    g_expression                   shift and go to state 53
    m_expression                   shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 184

    (62) invocation_4 -> empty .

    NOT             reduce using rule 62 (invocation_4 -> empty .)
    ID              reduce using rule 62 (invocation_4 -> empty .)
    CTEI            reduce using rule 62 (invocation_4 -> empty .)
    CTEF            reduce using rule 62 (invocation_4 -> empty .)
    CTEC            reduce using rule 62 (invocation_4 -> empty .)
    CTEB            reduce using rule 62 (invocation_4 -> empty .)
    LPAREN          reduce using rule 62 (invocation_4 -> empty .)


state 185

    (55) read -> READ LPAREN variable_list RPAREN SEMICOLON .

    RBRACE          reduce using rule 55 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    READ            reduce using rule 55 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    FOR             reduce using rule 55 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    DO              reduce using rule 55 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    WHILE           reduce using rule 55 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    IF              reduce using rule 55 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    ID              reduce using rule 55 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    RETURN          reduce using rule 55 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)
    PRINT           reduce using rule 55 (read -> READ LPAREN variable_list RPAREN SEMICOLON .)


state 186

    (57) variable_list -> variable_list COMMA variable .

    RPAREN          reduce using rule 57 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 57 (variable_list -> variable_list COMMA variable .)


state 187

    (40) for -> FOR LPAREN ID for_1 ASSIGN . expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (74) expression -> . t_expression
    (75) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 52
    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    expression                     shift and go to state 198
    t_expression                   shift and go to state 51
    g_expression                   shift and go to state 53
    m_expression                   shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 188

    (39) do_while -> DO breadcrumb LBRACE statements RBRACE . WHILE LPAREN expression RPAREN gotot SEMICOLON

    WHILE           shift and go to state 199


state 189

    (45) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression . close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (49) close_temporal_boolean -> . empty
    (109) empty -> .

    RPAREN          reduce using rule 109 (empty -> .)

    close_temporal_boolean         shift and go to state 200
    empty                          shift and go to state 191

state 190

    (50) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean . RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (47) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean . RPAREN gotof LBRACE statements RBRACE

    RPAREN          shift and go to state 201


state 191

    (49) close_temporal_boolean -> empty .

    RPAREN          reduce using rule 49 (close_temporal_boolean -> empty .)


state 192

    (68) print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .

    RBRACE          reduce using rule 68 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    READ            reduce using rule 68 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    FOR             reduce using rule 68 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    DO              reduce using rule 68 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    WHILE           reduce using rule 68 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    IF              reduce using rule 68 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    ID              reduce using rule 68 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    RETURN          reduce using rule 68 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)
    PRINT           reduce using rule 68 (print -> PRINT LPAREN print_arguments RPAREN SEMICOLON .)


state 193

    (70) print_arguments -> print_arguments COMMA print_argument .

    RPAREN          reduce using rule 70 (print_arguments -> print_arguments COMMA print_argument .)
    COMMA           reduce using rule 70 (print_arguments -> print_arguments COMMA print_argument .)


state 194

    (6) function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements . RBRACE
    (26) statements -> statements . statement
    (29) statement -> . read
    (30) statement -> . for
    (31) statement -> . do_while
    (32) statement -> . while
    (33) statement -> . if_else
    (34) statement -> . invocation
    (35) statement -> . if
    (36) statement -> . assingation
    (37) statement -> . return
    (38) statement -> . print
    (55) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (40) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (39) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (45) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (47) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) assingation -> . variable ASSIGN expression SEMICOLON
    (54) return -> . RETURN expression SEMICOLON
    (68) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 202
    READ            shift and go to state 116
    FOR             shift and go to state 117
    DO              shift and go to state 119
    WHILE           shift and go to state 120
    IF              shift and go to state 121
    ID              shift and go to state 118
    RETURN          shift and go to state 123
    PRINT           shift and go to state 124

    statement                      shift and go to state 133
    read                           shift and go to state 106
    for                            shift and go to state 107
    do_while                       shift and go to state 108
    while                          shift and go to state 109
    if_else                        shift and go to state 110
    invocation                     shift and go to state 111
    if                             shift and go to state 112
    assingation                    shift and go to state 113
    return                         shift and go to state 114
    print                          shift and go to state 115
    variable                       shift and go to state 122

state 195

    (7) function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements . RBRACE
    (26) statements -> statements . statement
    (29) statement -> . read
    (30) statement -> . for
    (31) statement -> . do_while
    (32) statement -> . while
    (33) statement -> . if_else
    (34) statement -> . invocation
    (35) statement -> . if
    (36) statement -> . assingation
    (37) statement -> . return
    (38) statement -> . print
    (55) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (40) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (39) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (45) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (47) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) assingation -> . variable ASSIGN expression SEMICOLON
    (54) return -> . RETURN expression SEMICOLON
    (68) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 203
    READ            shift and go to state 116
    FOR             shift and go to state 117
    DO              shift and go to state 119
    WHILE           shift and go to state 120
    IF              shift and go to state 121
    ID              shift and go to state 118
    RETURN          shift and go to state 123
    PRINT           shift and go to state 124

    statement                      shift and go to state 133
    read                           shift and go to state 106
    for                            shift and go to state 107
    do_while                       shift and go to state 108
    while                          shift and go to state 109
    if_else                        shift and go to state 110
    invocation                     shift and go to state 111
    if                             shift and go to state 112
    assingation                    shift and go to state 113
    return                         shift and go to state 114
    print                          shift and go to state 115
    variable                       shift and go to state 122

state 196

    (58) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON . invocation_6
    (64) invocation_6 -> . empty
    (109) empty -> .

    TIMES           reduce using rule 109 (empty -> .)
    DIVIDE          reduce using rule 109 (empty -> .)
    PLUS            reduce using rule 109 (empty -> .)
    MINUS           reduce using rule 109 (empty -> .)
    LESS            reduce using rule 109 (empty -> .)
    GREATER         reduce using rule 109 (empty -> .)
    EQUALS          reduce using rule 109 (empty -> .)
    NOTEQUAL        reduce using rule 109 (empty -> .)
    GREATERTHAN     reduce using rule 109 (empty -> .)
    LESSTHAN        reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    RBRACK          reduce using rule 109 (empty -> .)
    RPAREN          reduce using rule 109 (empty -> .)
    SEMICOLON       reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)
    FROM            reduce using rule 109 (empty -> .)
    RBRACE          reduce using rule 109 (empty -> .)
    READ            reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    DO              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)

    invocation_6                   shift and go to state 204
    empty                          shift and go to state 205

state 197

    (65) expressions -> expressions COMMA invocation_4 expression . invocation_3
    (61) invocation_3 -> . empty
    (109) empty -> .

    RPAREN          reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)

    invocation_3                   shift and go to state 206
    empty                          shift and go to state 168

state 198

    (40) for -> FOR LPAREN ID for_1 ASSIGN expression . for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (42) for_2 -> . empty
    (109) empty -> .

    FROM            reduce using rule 109 (empty -> .)

    for_2                          shift and go to state 207
    empty                          shift and go to state 208

state 199

    (39) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE . LPAREN expression RPAREN gotot SEMICOLON

    LPAREN          shift and go to state 209


state 200

    (45) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean . RPAREN gotof LBRACE statements RBRACE

    RPAREN          shift and go to state 210


state 201

    (50) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN . gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (47) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN . gotof LBRACE statements RBRACE
    (53) gotof -> . empty
    (109) empty -> .

    LBRACE          reduce using rule 109 (empty -> .)

    gotof                          shift and go to state 211
    empty                          shift and go to state 212

state 202

    (6) function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE .

    MAIN            reduce using rule 6 (function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 6 (function -> FUNCTION simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE .)


state 203

    (7) function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE .

    MAIN            reduce using rule 7 (function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 7 (function -> FUNCTION VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE .)


state 204

    (58) invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .

    TIMES           reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DIVIDE          reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PLUS            reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    MINUS           reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESS            reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATER         reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    EQUALS          reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    NOTEQUAL        reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    GREATERTHAN     reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    LESSTHAN        reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    AND             reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    OR              reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACK          reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RPAREN          reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    SEMICOLON       reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    COMMA           reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    FROM            reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RBRACE          reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    READ            reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    FOR             reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    DO              reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    WHILE           reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    IF              reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    ID              reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    RETURN          reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)
    PRINT           reduce using rule 58 (invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 .)


state 205

    (64) invocation_6 -> empty .

    TIMES           reduce using rule 64 (invocation_6 -> empty .)
    DIVIDE          reduce using rule 64 (invocation_6 -> empty .)
    PLUS            reduce using rule 64 (invocation_6 -> empty .)
    MINUS           reduce using rule 64 (invocation_6 -> empty .)
    LESS            reduce using rule 64 (invocation_6 -> empty .)
    GREATER         reduce using rule 64 (invocation_6 -> empty .)
    EQUALS          reduce using rule 64 (invocation_6 -> empty .)
    NOTEQUAL        reduce using rule 64 (invocation_6 -> empty .)
    GREATERTHAN     reduce using rule 64 (invocation_6 -> empty .)
    LESSTHAN        reduce using rule 64 (invocation_6 -> empty .)
    AND             reduce using rule 64 (invocation_6 -> empty .)
    OR              reduce using rule 64 (invocation_6 -> empty .)
    RBRACK          reduce using rule 64 (invocation_6 -> empty .)
    RPAREN          reduce using rule 64 (invocation_6 -> empty .)
    SEMICOLON       reduce using rule 64 (invocation_6 -> empty .)
    COMMA           reduce using rule 64 (invocation_6 -> empty .)
    FROM            reduce using rule 64 (invocation_6 -> empty .)
    RBRACE          reduce using rule 64 (invocation_6 -> empty .)
    READ            reduce using rule 64 (invocation_6 -> empty .)
    FOR             reduce using rule 64 (invocation_6 -> empty .)
    DO              reduce using rule 64 (invocation_6 -> empty .)
    WHILE           reduce using rule 64 (invocation_6 -> empty .)
    IF              reduce using rule 64 (invocation_6 -> empty .)
    ID              reduce using rule 64 (invocation_6 -> empty .)
    RETURN          reduce using rule 64 (invocation_6 -> empty .)
    PRINT           reduce using rule 64 (invocation_6 -> empty .)


state 206

    (65) expressions -> expressions COMMA invocation_4 expression invocation_3 .

    RPAREN          reduce using rule 65 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)
    COMMA           reduce using rule 65 (expressions -> expressions COMMA invocation_4 expression invocation_3 .)


state 207

    (40) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 . FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4

    FROM            shift and go to state 213


state 208

    (42) for_2 -> empty .

    FROM            reduce using rule 42 (for_2 -> empty .)


state 209

    (39) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN . expression RPAREN gotot SEMICOLON
    (74) expression -> . t_expression
    (75) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 52
    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    expression                     shift and go to state 214
    t_expression                   shift and go to state 51
    g_expression                   shift and go to state 53
    m_expression                   shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 210

    (45) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN . gotof LBRACE statements RBRACE
    (53) gotof -> . empty
    (109) empty -> .

    LBRACE          reduce using rule 109 (empty -> .)

    gotof                          shift and go to state 215
    empty                          shift and go to state 212

state 211

    (50) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof . LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (47) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof . LBRACE statements RBRACE

    LBRACE          shift and go to state 216


state 212

    (53) gotof -> empty .

    LBRACE          reduce using rule 53 (gotof -> empty .)


state 213

    (40) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM . expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (74) expression -> . t_expression
    (75) expression -> . NOT t_expression
    (76) t_expression -> . g_expression
    (77) t_expression -> . t_expression boolean_operator g_expression
    (78) g_expression -> . m_expression
    (79) g_expression -> . g_expression comparison_operator m_expression
    (80) m_expression -> . term
    (81) m_expression -> . m_expression addition_operator term
    (82) term -> . factor
    (83) term -> . term multiplication_operator factor
    (84) factor -> . variable
    (85) factor -> . cte
    (86) factor -> . expression_parenthesis
    (87) factor -> . invocation
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK
    (105) cte -> . CTEI
    (106) cte -> . CTEF
    (107) cte -> . CTEC
    (108) cte -> . CTEB
    (88) expression_parenthesis -> . LPAREN expression RPAREN
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6

    NOT             shift and go to state 52
    ID              shift and go to state 49
    CTEI            shift and go to state 61
    CTEF            shift and go to state 62
    CTEC            shift and go to state 63
    CTEB            shift and go to state 64
    LPAREN          shift and go to state 65

    expression                     shift and go to state 217
    t_expression                   shift and go to state 51
    g_expression                   shift and go to state 53
    m_expression                   shift and go to state 54
    term                           shift and go to state 55
    factor                         shift and go to state 56
    variable                       shift and go to state 57
    cte                            shift and go to state 58
    expression_parenthesis         shift and go to state 59
    invocation                     shift and go to state 60

state 214

    (39) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression . RPAREN gotot SEMICOLON

    RPAREN          shift and go to state 218


state 215

    (45) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof . LBRACE statements RBRACE

    LBRACE          shift and go to state 219


state 216

    (50) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE . statements RBRACE ELSE goto LBRACE statements RBRACE
    (47) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE . statements RBRACE
    (26) statements -> . statements statement
    (27) statements -> . statement
    (28) statements -> . empty
    (29) statement -> . read
    (30) statement -> . for
    (31) statement -> . do_while
    (32) statement -> . while
    (33) statement -> . if_else
    (34) statement -> . invocation
    (35) statement -> . if
    (36) statement -> . assingation
    (37) statement -> . return
    (38) statement -> . print
    (109) empty -> .
    (55) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (40) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (39) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (45) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (47) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) assingation -> . variable ASSIGN expression SEMICOLON
    (54) return -> . RETURN expression SEMICOLON
    (68) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 109 (empty -> .)
    READ            shift and go to state 116
    FOR             shift and go to state 117
    DO              shift and go to state 119
    WHILE           shift and go to state 120
    IF              shift and go to state 121
    ID              shift and go to state 118
    RETURN          shift and go to state 123
    PRINT           shift and go to state 124

  ! READ            [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! DO              [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! ID              [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]

    statements                     shift and go to state 220
    statement                      shift and go to state 104
    empty                          shift and go to state 105
    read                           shift and go to state 106
    for                            shift and go to state 107
    do_while                       shift and go to state 108
    while                          shift and go to state 109
    if_else                        shift and go to state 110
    invocation                     shift and go to state 111
    if                             shift and go to state 112
    assingation                    shift and go to state 113
    return                         shift and go to state 114
    print                          shift and go to state 115
    variable                       shift and go to state 122

state 217

    (40) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression . RPAREN for_3 DO LBRACE statements RBRACE for_4

    RPAREN          shift and go to state 221


state 218

    (39) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN . gotot SEMICOLON
    (51) gotot -> . empty
    (109) empty -> .

    SEMICOLON       reduce using rule 109 (empty -> .)

    gotot                          shift and go to state 222
    empty                          shift and go to state 223

state 219

    (45) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE . statements RBRACE
    (26) statements -> . statements statement
    (27) statements -> . statement
    (28) statements -> . empty
    (29) statement -> . read
    (30) statement -> . for
    (31) statement -> . do_while
    (32) statement -> . while
    (33) statement -> . if_else
    (34) statement -> . invocation
    (35) statement -> . if
    (36) statement -> . assingation
    (37) statement -> . return
    (38) statement -> . print
    (109) empty -> .
    (55) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (40) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (39) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (45) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (47) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) assingation -> . variable ASSIGN expression SEMICOLON
    (54) return -> . RETURN expression SEMICOLON
    (68) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 109 (empty -> .)
    READ            shift and go to state 116
    FOR             shift and go to state 117
    DO              shift and go to state 119
    WHILE           shift and go to state 120
    IF              shift and go to state 121
    ID              shift and go to state 118
    RETURN          shift and go to state 123
    PRINT           shift and go to state 124

  ! READ            [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! DO              [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! ID              [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]

    statements                     shift and go to state 224
    statement                      shift and go to state 104
    empty                          shift and go to state 105
    read                           shift and go to state 106
    for                            shift and go to state 107
    do_while                       shift and go to state 108
    while                          shift and go to state 109
    if_else                        shift and go to state 110
    invocation                     shift and go to state 111
    if                             shift and go to state 112
    assingation                    shift and go to state 113
    return                         shift and go to state 114
    print                          shift and go to state 115
    variable                       shift and go to state 122

state 220

    (50) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements . RBRACE ELSE goto LBRACE statements RBRACE
    (47) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements . RBRACE
    (26) statements -> statements . statement
    (29) statement -> . read
    (30) statement -> . for
    (31) statement -> . do_while
    (32) statement -> . while
    (33) statement -> . if_else
    (34) statement -> . invocation
    (35) statement -> . if
    (36) statement -> . assingation
    (37) statement -> . return
    (38) statement -> . print
    (55) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (40) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (39) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (45) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (47) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) assingation -> . variable ASSIGN expression SEMICOLON
    (54) return -> . RETURN expression SEMICOLON
    (68) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 225
    READ            shift and go to state 116
    FOR             shift and go to state 117
    DO              shift and go to state 119
    WHILE           shift and go to state 120
    IF              shift and go to state 121
    ID              shift and go to state 118
    RETURN          shift and go to state 123
    PRINT           shift and go to state 124

    statement                      shift and go to state 133
    read                           shift and go to state 106
    for                            shift and go to state 107
    do_while                       shift and go to state 108
    while                          shift and go to state 109
    if_else                        shift and go to state 110
    invocation                     shift and go to state 111
    if                             shift and go to state 112
    assingation                    shift and go to state 113
    return                         shift and go to state 114
    print                          shift and go to state 115
    variable                       shift and go to state 122

state 221

    (40) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN . for_3 DO LBRACE statements RBRACE for_4
    (43) for_3 -> . empty
    (109) empty -> .

    DO              reduce using rule 109 (empty -> .)

    for_3                          shift and go to state 226
    empty                          shift and go to state 227

state 222

    (39) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot . SEMICOLON

    SEMICOLON       shift and go to state 228


state 223

    (51) gotot -> empty .

    SEMICOLON       reduce using rule 51 (gotot -> empty .)


state 224

    (45) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements . RBRACE
    (26) statements -> statements . statement
    (29) statement -> . read
    (30) statement -> . for
    (31) statement -> . do_while
    (32) statement -> . while
    (33) statement -> . if_else
    (34) statement -> . invocation
    (35) statement -> . if
    (36) statement -> . assingation
    (37) statement -> . return
    (38) statement -> . print
    (55) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (40) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (39) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (45) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (47) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) assingation -> . variable ASSIGN expression SEMICOLON
    (54) return -> . RETURN expression SEMICOLON
    (68) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 229
    READ            shift and go to state 116
    FOR             shift and go to state 117
    DO              shift and go to state 119
    WHILE           shift and go to state 120
    IF              shift and go to state 121
    ID              shift and go to state 118
    RETURN          shift and go to state 123
    PRINT           shift and go to state 124

    statement                      shift and go to state 133
    read                           shift and go to state 106
    for                            shift and go to state 107
    do_while                       shift and go to state 108
    while                          shift and go to state 109
    if_else                        shift and go to state 110
    invocation                     shift and go to state 111
    if                             shift and go to state 112
    assingation                    shift and go to state 113
    return                         shift and go to state 114
    print                          shift and go to state 115
    variable                       shift and go to state 122

state 225

    (50) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE . ELSE goto LBRACE statements RBRACE
    (47) if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .

    ELSE            shift and go to state 230
    RBRACE          reduce using rule 47 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    READ            reduce using rule 47 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    FOR             reduce using rule 47 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    DO              reduce using rule 47 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    WHILE           reduce using rule 47 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    IF              reduce using rule 47 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    ID              reduce using rule 47 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    RETURN          reduce using rule 47 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    PRINT           reduce using rule 47 (if -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)


state 226

    (40) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 . DO LBRACE statements RBRACE for_4

    DO              shift and go to state 231


state 227

    (43) for_3 -> empty .

    DO              reduce using rule 43 (for_3 -> empty .)


state 228

    (39) do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .

    RBRACE          reduce using rule 39 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    READ            reduce using rule 39 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    FOR             reduce using rule 39 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    DO              reduce using rule 39 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    WHILE           reduce using rule 39 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    IF              reduce using rule 39 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    ID              reduce using rule 39 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    RETURN          reduce using rule 39 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)
    PRINT           reduce using rule 39 (do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON .)


state 229

    (45) while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .

    RBRACE          reduce using rule 45 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    READ            reduce using rule 45 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    FOR             reduce using rule 45 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    DO              reduce using rule 45 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    WHILE           reduce using rule 45 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    IF              reduce using rule 45 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    ID              reduce using rule 45 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    RETURN          reduce using rule 45 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)
    PRINT           reduce using rule 45 (while -> WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE .)


state 230

    (50) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE . goto LBRACE statements RBRACE
    (52) goto -> . empty
    (109) empty -> .

    LBRACE          reduce using rule 109 (empty -> .)

    goto                           shift and go to state 232
    empty                          shift and go to state 233

state 231

    (40) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO . LBRACE statements RBRACE for_4

    LBRACE          shift and go to state 234


state 232

    (50) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto . LBRACE statements RBRACE

    LBRACE          shift and go to state 235


state 233

    (52) goto -> empty .

    LBRACE          reduce using rule 52 (goto -> empty .)


state 234

    (40) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE . statements RBRACE for_4
    (26) statements -> . statements statement
    (27) statements -> . statement
    (28) statements -> . empty
    (29) statement -> . read
    (30) statement -> . for
    (31) statement -> . do_while
    (32) statement -> . while
    (33) statement -> . if_else
    (34) statement -> . invocation
    (35) statement -> . if
    (36) statement -> . assingation
    (37) statement -> . return
    (38) statement -> . print
    (109) empty -> .
    (55) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (40) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (39) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (45) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (47) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) assingation -> . variable ASSIGN expression SEMICOLON
    (54) return -> . RETURN expression SEMICOLON
    (68) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 109 (empty -> .)
    READ            shift and go to state 116
    FOR             shift and go to state 117
    DO              shift and go to state 119
    WHILE           shift and go to state 120
    IF              shift and go to state 121
    ID              shift and go to state 118
    RETURN          shift and go to state 123
    PRINT           shift and go to state 124

  ! READ            [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! DO              [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! ID              [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]

    statements                     shift and go to state 236
    statement                      shift and go to state 104
    empty                          shift and go to state 105
    read                           shift and go to state 106
    for                            shift and go to state 107
    do_while                       shift and go to state 108
    while                          shift and go to state 109
    if_else                        shift and go to state 110
    invocation                     shift and go to state 111
    if                             shift and go to state 112
    assingation                    shift and go to state 113
    return                         shift and go to state 114
    print                          shift and go to state 115
    variable                       shift and go to state 122

state 235

    (50) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE . statements RBRACE
    (26) statements -> . statements statement
    (27) statements -> . statement
    (28) statements -> . empty
    (29) statement -> . read
    (30) statement -> . for
    (31) statement -> . do_while
    (32) statement -> . while
    (33) statement -> . if_else
    (34) statement -> . invocation
    (35) statement -> . if
    (36) statement -> . assingation
    (37) statement -> . return
    (38) statement -> . print
    (109) empty -> .
    (55) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (40) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (39) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (45) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (47) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) assingation -> . variable ASSIGN expression SEMICOLON
    (54) return -> . RETURN expression SEMICOLON
    (68) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACE          reduce using rule 109 (empty -> .)
    READ            shift and go to state 116
    FOR             shift and go to state 117
    DO              shift and go to state 119
    WHILE           shift and go to state 120
    IF              shift and go to state 121
    ID              shift and go to state 118
    RETURN          shift and go to state 123
    PRINT           shift and go to state 124

  ! READ            [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! DO              [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! ID              [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]

    statements                     shift and go to state 237
    statement                      shift and go to state 104
    empty                          shift and go to state 105
    read                           shift and go to state 106
    for                            shift and go to state 107
    do_while                       shift and go to state 108
    while                          shift and go to state 109
    if_else                        shift and go to state 110
    invocation                     shift and go to state 111
    if                             shift and go to state 112
    assingation                    shift and go to state 113
    return                         shift and go to state 114
    print                          shift and go to state 115
    variable                       shift and go to state 122

state 236

    (40) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements . RBRACE for_4
    (26) statements -> statements . statement
    (29) statement -> . read
    (30) statement -> . for
    (31) statement -> . do_while
    (32) statement -> . while
    (33) statement -> . if_else
    (34) statement -> . invocation
    (35) statement -> . if
    (36) statement -> . assingation
    (37) statement -> . return
    (38) statement -> . print
    (55) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (40) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (39) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (45) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (47) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) assingation -> . variable ASSIGN expression SEMICOLON
    (54) return -> . RETURN expression SEMICOLON
    (68) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 238
    READ            shift and go to state 116
    FOR             shift and go to state 117
    DO              shift and go to state 119
    WHILE           shift and go to state 120
    IF              shift and go to state 121
    ID              shift and go to state 118
    RETURN          shift and go to state 123
    PRINT           shift and go to state 124

    statement                      shift and go to state 133
    read                           shift and go to state 106
    for                            shift and go to state 107
    do_while                       shift and go to state 108
    while                          shift and go to state 109
    if_else                        shift and go to state 110
    invocation                     shift and go to state 111
    if                             shift and go to state 112
    assingation                    shift and go to state 113
    return                         shift and go to state 114
    print                          shift and go to state 115
    variable                       shift and go to state 122

state 237

    (50) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements . RBRACE
    (26) statements -> statements . statement
    (29) statement -> . read
    (30) statement -> . for
    (31) statement -> . do_while
    (32) statement -> . while
    (33) statement -> . if_else
    (34) statement -> . invocation
    (35) statement -> . if
    (36) statement -> . assingation
    (37) statement -> . return
    (38) statement -> . print
    (55) read -> . READ LPAREN variable_list RPAREN SEMICOLON
    (40) for -> . FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4
    (39) do_while -> . DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON
    (45) while -> . WHILE breadcrumb LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (50) if_else -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE
    (58) invocation -> . ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6
    (47) if -> . IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE
    (73) assingation -> . variable ASSIGN expression SEMICOLON
    (54) return -> . RETURN expression SEMICOLON
    (68) print -> . PRINT LPAREN print_arguments RPAREN SEMICOLON
    (19) variable -> . ID
    (20) variable -> . ID LBRACK expression RBRACK
    (21) variable -> . ID LBRACK expression RBRACK LBRACK expression RBRACK

    RBRACE          shift and go to state 239
    READ            shift and go to state 116
    FOR             shift and go to state 117
    DO              shift and go to state 119
    WHILE           shift and go to state 120
    IF              shift and go to state 121
    ID              shift and go to state 118
    RETURN          shift and go to state 123
    PRINT           shift and go to state 124

    statement                      shift and go to state 133
    read                           shift and go to state 106
    for                            shift and go to state 107
    do_while                       shift and go to state 108
    while                          shift and go to state 109
    if_else                        shift and go to state 110
    invocation                     shift and go to state 111
    if                             shift and go to state 112
    assingation                    shift and go to state 113
    return                         shift and go to state 114
    print                          shift and go to state 115
    variable                       shift and go to state 122

state 238

    (40) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE . for_4
    (44) for_4 -> . empty
    (109) empty -> .

    RBRACE          reduce using rule 109 (empty -> .)
    READ            reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    DO              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)
    PRINT           reduce using rule 109 (empty -> .)

    for_4                          shift and go to state 240
    empty                          shift and go to state 241

state 239

    (50) if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .

    RBRACE          reduce using rule 50 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    READ            reduce using rule 50 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    FOR             reduce using rule 50 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    DO              reduce using rule 50 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    WHILE           reduce using rule 50 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    IF              reduce using rule 50 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    ID              reduce using rule 50 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    RETURN          reduce using rule 50 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)
    PRINT           reduce using rule 50 (if_else -> IF LPAREN open_temporal_boolean expression close_temporal_boolean RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE .)


state 240

    (40) for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .

    RBRACE          reduce using rule 40 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    READ            reduce using rule 40 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    FOR             reduce using rule 40 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    DO              reduce using rule 40 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    WHILE           reduce using rule 40 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    IF              reduce using rule 40 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    ID              reduce using rule 40 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    RETURN          reduce using rule 40 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)
    PRINT           reduce using rule 40 (for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO LBRACE statements RBRACE for_4 .)


state 241

    (44) for_4 -> empty .

    RBRACE          reduce using rule 44 (for_4 -> empty .)
    READ            reduce using rule 44 (for_4 -> empty .)
    FOR             reduce using rule 44 (for_4 -> empty .)
    DO              reduce using rule 44 (for_4 -> empty .)
    WHILE           reduce using rule 44 (for_4 -> empty .)
    IF              reduce using rule 44 (for_4 -> empty .)
    ID              reduce using rule 44 (for_4 -> empty .)
    RETURN          reduce using rule 44 (for_4 -> empty .)
    PRINT           reduce using rule 44 (for_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 7 resolved as shift
WARNING: shift/reduce conflict for READ in state 90 resolved as shift
WARNING: shift/reduce conflict for FOR in state 90 resolved as shift
WARNING: shift/reduce conflict for DO in state 90 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 90 resolved as shift
WARNING: shift/reduce conflict for IF in state 90 resolved as shift
WARNING: shift/reduce conflict for ID in state 90 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 90 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 90 resolved as shift
WARNING: shift/reduce conflict for READ in state 153 resolved as shift
WARNING: shift/reduce conflict for FOR in state 153 resolved as shift
WARNING: shift/reduce conflict for DO in state 153 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 153 resolved as shift
WARNING: shift/reduce conflict for IF in state 153 resolved as shift
WARNING: shift/reduce conflict for ID in state 153 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 153 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 153 resolved as shift
WARNING: shift/reduce conflict for READ in state 179 resolved as shift
WARNING: shift/reduce conflict for FOR in state 179 resolved as shift
WARNING: shift/reduce conflict for DO in state 179 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 179 resolved as shift
WARNING: shift/reduce conflict for IF in state 179 resolved as shift
WARNING: shift/reduce conflict for ID in state 179 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 179 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 179 resolved as shift
WARNING: shift/reduce conflict for READ in state 180 resolved as shift
WARNING: shift/reduce conflict for FOR in state 180 resolved as shift
WARNING: shift/reduce conflict for DO in state 180 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 180 resolved as shift
WARNING: shift/reduce conflict for IF in state 180 resolved as shift
WARNING: shift/reduce conflict for ID in state 180 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 180 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 180 resolved as shift
WARNING: shift/reduce conflict for READ in state 216 resolved as shift
WARNING: shift/reduce conflict for FOR in state 216 resolved as shift
WARNING: shift/reduce conflict for DO in state 216 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 216 resolved as shift
WARNING: shift/reduce conflict for IF in state 216 resolved as shift
WARNING: shift/reduce conflict for ID in state 216 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 216 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 216 resolved as shift
WARNING: shift/reduce conflict for READ in state 219 resolved as shift
WARNING: shift/reduce conflict for FOR in state 219 resolved as shift
WARNING: shift/reduce conflict for DO in state 219 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 219 resolved as shift
WARNING: shift/reduce conflict for IF in state 219 resolved as shift
WARNING: shift/reduce conflict for ID in state 219 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 219 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 219 resolved as shift
WARNING: shift/reduce conflict for READ in state 234 resolved as shift
WARNING: shift/reduce conflict for FOR in state 234 resolved as shift
WARNING: shift/reduce conflict for DO in state 234 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 234 resolved as shift
WARNING: shift/reduce conflict for IF in state 234 resolved as shift
WARNING: shift/reduce conflict for ID in state 234 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 234 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 234 resolved as shift
WARNING: shift/reduce conflict for READ in state 235 resolved as shift
WARNING: shift/reduce conflict for FOR in state 235 resolved as shift
WARNING: shift/reduce conflict for DO in state 235 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 235 resolved as shift
WARNING: shift/reduce conflict for IF in state 235 resolved as shift
WARNING: shift/reduce conflict for ID in state 235 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 235 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 235 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (var_declarations -> var_declaration)
WARNING: rejected rule (empty -> <empty>) in state 8
