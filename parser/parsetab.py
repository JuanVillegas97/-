
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDnonassocEQUALSNOTEQUALnonassocLESSGREATERleftPLUSMINUSleftTIMESDIVIDEAND ASSIGN BOOLEAN CHAR COLON COMMA COMMENT CTEB CTEC CTEF CTEI CTES DIVIDE ELSE END EQUALS FALSE FLOAT FUNCTION GREATER ID IF INT LBRACE LBRACK LESS LPAREN MAIN MINUS NOTEQUAL OR PLUS PRINT PROGRAM RBRACE RBRACK READ RETURN RPAREN SEMICOLON STRING THEN TIMES TRUE VARIABLE VOID WHILE\n    program : PROGRAM ID SEMICOLON var_declarations functions MAIN LPAREN RPAREN var_declarations LBRACE statements RBRACE END\n    \n    var_declarations : var_declarations var_declaration \n                    | var_declaration\n                    | empty\n    \n    var_declaration : VARIABLE simple_type variables SEMICOLON\n    \n    variables : variable COMMA variables\n            | variable\n    \n    variable : ID\n            | ID LBRACK expression RBRACK\n            | ID LBRACK expression RBRACK LBRACK expression RBRACK\n    \n    functions : functions function\n                    | function\n                    | empty\n\n    \n    function : FUNCTION simple_type ID LPAREN parameters RPAREN var_declarations LBRACE statements statement RBRACE\n            |  FUNCTION VOID ID LPAREN parameters RPAREN var_declarations LBRACE statements RBRACE\n    \n    parameters : parameters  COMMA parameter\n    | parameter\n    | empty\n    \n    parameter : simple_type ID \n    \n    statements : statements statement\n    | statement\n    | empty\n    \n    statement : assingation\n    | invocation\n    | if\n    | read\n    | return\n    | print\n    \n    print : PRINT LPAREN expression RPAREN SEMICOLON\n    print : PRINT LPAREN CTES RPAREN SEMICOLON\n    \n    if : IF LPAREN expression RPAREN LBRACE statements RBRACE \n        | IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE \n    \n    return : RETURN expression SEMICOLON\n    \n    read : READ LPAREN variable RPAREN SEMICOLON\n    \n    assingation : variable ASSIGN expression SEMICOLON\n    \n    invocation : ID LPAREN expressions RPAREN SEMICOLON\n    \n    expressions : expressions COMMA expression  \n                | expression\n                | empty\n    \n    expression : t_expression \n                | t_expression ASSIGN t_expression\n    \n    t_expression : g_expression \n                | g_expression boolean_operator g_expression\n    \n    g_expression : m_expression \n                | m_expression comparison_operator m_expression\n    \n    m_expression : term \n                | term addition_operator term\n    \n    term : factor \n        | factor multiplication_operator factor\n    \n    factor : variable\n            | cte\n            | LPAREN expression RPAREN \n            | invocation\n    \n    comparison_operator : LESS\n                        | GREATER\n                        | EQUALS\n                        | NOTEQUAL\n    \n    addition_operator : PLUS\n                    | MINUS\n    \n    boolean_operator : AND\n                    | OR\n    \n    multiplication_operator : TIMES\n                            | DIVIDE\n    \n    simple_type : INT\n                | FLOAT\n                | CHAR\n                | STRING\n                | BOOLEAN\n    \n    cte : CTEI\n        | CTEF\n        | CTEC\n        | CTES\n        | CTEB\n    \n    empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,125,],[0,-1,]),'ID':([2,14,15,16,17,18,19,22,23,31,32,46,54,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,85,93,94,95,96,97,98,99,100,101,105,111,114,115,116,117,119,120,121,122,129,132,133,134,139,141,142,143,144,146,147,149,150,151,],[3,26,-64,-65,-66,-67,-68,28,29,26,37,37,78,37,37,37,-60,-61,37,-54,-55,-56,-57,37,-58,-59,37,-62,-63,92,37,92,-21,-22,-23,-24,-25,-26,-27,-28,37,37,-20,37,37,26,37,92,92,-36,-33,92,92,-35,-20,92,-34,-29,-30,92,-31,92,92,-32,]),'SEMICOLON':([3,24,25,26,36,37,39,40,41,42,43,44,45,47,48,49,50,51,52,60,86,87,88,89,90,91,110,118,122,124,126,136,137,138,],[4,30,-7,-8,-6,-8,-40,-42,-44,-46,-48,-50,-51,-53,-69,-70,-71,-72,-73,-9,-41,-43,-45,-47,-49,-52,122,129,-36,-10,134,142,143,144,]),'VARIABLE':([4,5,6,7,10,30,33,53,79,81,107,109,],[8,8,-3,-4,-2,-5,8,8,8,8,8,8,]),'FUNCTION':([4,5,6,7,9,10,11,12,21,30,140,145,],[-74,13,-3,-4,13,-2,-12,-13,-11,-5,-15,-14,]),'MAIN':([4,5,6,7,9,10,11,12,21,30,140,145,],[-74,-74,-3,-4,20,-2,-12,-13,-11,-5,-15,-14,]),'LBRACE':([6,7,10,30,33,53,79,81,107,109,135,148,],[-3,-4,-2,-5,-74,77,-74,-74,120,121,141,149,]),'INT':([8,13,34,35,80,],[15,15,15,15,15,]),'FLOAT':([8,13,34,35,80,],[16,16,16,16,16,]),'CHAR':([8,13,34,35,80,],[17,17,17,17,17,]),'STRING':([8,13,34,35,80,],[18,18,18,18,18,]),'BOOLEAN':([8,13,34,35,80,],[19,19,19,19,19,]),'VOID':([13,],[23,]),'LPAREN':([20,28,29,32,37,46,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85,92,103,104,105,106,111,115,116,119,],[27,34,35,46,59,46,46,46,46,-60,-61,46,-54,-55,-56,-57,46,-58,-59,46,-62,-63,46,59,116,117,46,119,46,46,46,46,]),'COMMA':([25,26,34,35,37,39,40,41,42,43,44,45,47,48,49,50,51,52,55,56,57,58,59,60,78,82,83,84,86,87,88,89,90,91,108,122,123,124,],[31,-8,-74,-74,-8,-40,-42,-44,-46,-48,-50,-51,-53,-69,-70,-71,-72,-73,80,-17,-18,80,-74,-9,-19,111,-38,-39,-41,-43,-45,-47,-49,-52,-16,-36,-37,-10,]),'RPAREN':([26,27,34,35,37,39,40,41,42,43,44,45,47,48,49,50,51,52,55,56,57,58,59,60,76,78,82,83,84,86,87,88,89,90,91,108,122,123,124,127,128,130,131,],[-8,33,-74,-74,-8,-40,-42,-44,-46,-48,-50,-51,-53,-69,-70,-71,-72,-73,79,-17,-18,81,-74,-9,91,-19,110,-38,-39,-41,-43,-45,-47,-49,-52,-16,-36,-37,-10,135,136,137,138,]),'LBRACK':([26,37,60,92,],[32,32,85,32,]),'CTEI':([32,46,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85,105,111,115,116,119,],[48,48,48,48,48,-60,-61,48,-54,-55,-56,-57,48,-58,-59,48,-62,-63,48,48,48,48,48,48,]),'CTEF':([32,46,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85,105,111,115,116,119,],[49,49,49,49,49,-60,-61,49,-54,-55,-56,-57,49,-58,-59,49,-62,-63,49,49,49,49,49,49,]),'CTEC':([32,46,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85,105,111,115,116,119,],[50,50,50,50,50,-60,-61,50,-54,-55,-56,-57,50,-58,-59,50,-62,-63,50,50,50,50,50,50,]),'CTES':([32,46,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85,105,111,115,116,119,],[51,51,51,51,51,-60,-61,51,-54,-55,-56,-57,51,-58,-59,51,-62,-63,51,51,51,51,51,131,]),'CTEB':([32,46,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85,105,111,115,116,119,],[52,52,52,52,52,-60,-61,52,-54,-55,-56,-57,52,-58,-59,52,-62,-63,52,52,52,52,52,52,]),'TIMES':([37,43,44,45,47,48,49,50,51,52,60,91,122,124,131,],[-8,74,-50,-51,-53,-69,-70,-71,-72,-73,-9,-52,-36,-10,-72,]),'DIVIDE':([37,43,44,45,47,48,49,50,51,52,60,91,122,124,131,],[-8,75,-50,-51,-53,-69,-70,-71,-72,-73,-9,-52,-36,-10,-72,]),'PLUS':([37,42,43,44,45,47,48,49,50,51,52,60,90,91,122,124,131,],[-8,71,-48,-50,-51,-53,-69,-70,-71,-72,-73,-9,-49,-52,-36,-10,-72,]),'MINUS':([37,42,43,44,45,47,48,49,50,51,52,60,90,91,122,124,131,],[-8,72,-48,-50,-51,-53,-69,-70,-71,-72,-73,-9,-49,-52,-36,-10,-72,]),'LESS':([37,41,42,43,44,45,47,48,49,50,51,52,60,89,90,91,122,124,131,],[-8,66,-46,-48,-50,-51,-53,-69,-70,-71,-72,-73,-9,-47,-49,-52,-36,-10,-72,]),'GREATER':([37,41,42,43,44,45,47,48,49,50,51,52,60,89,90,91,122,124,131,],[-8,67,-46,-48,-50,-51,-53,-69,-70,-71,-72,-73,-9,-47,-49,-52,-36,-10,-72,]),'EQUALS':([37,41,42,43,44,45,47,48,49,50,51,52,60,89,90,91,122,124,131,],[-8,68,-46,-48,-50,-51,-53,-69,-70,-71,-72,-73,-9,-47,-49,-52,-36,-10,-72,]),'NOTEQUAL':([37,41,42,43,44,45,47,48,49,50,51,52,60,89,90,91,122,124,131,],[-8,69,-46,-48,-50,-51,-53,-69,-70,-71,-72,-73,-9,-47,-49,-52,-36,-10,-72,]),'AND':([37,40,41,42,43,44,45,47,48,49,50,51,52,60,88,89,90,91,122,124,131,],[-8,63,-44,-46,-48,-50,-51,-53,-69,-70,-71,-72,-73,-9,-45,-47,-49,-52,-36,-10,-72,]),'OR':([37,40,41,42,43,44,45,47,48,49,50,51,52,60,88,89,90,91,122,124,131,],[-8,64,-44,-46,-48,-50,-51,-53,-69,-70,-71,-72,-73,-9,-45,-47,-49,-52,-36,-10,-72,]),'ASSIGN':([37,39,40,41,42,43,44,45,47,48,49,50,51,52,60,87,88,89,90,91,92,102,122,124,131,],[-8,61,-42,-44,-46,-48,-50,-51,-53,-69,-70,-71,-72,-73,-9,-43,-45,-47,-49,-52,-8,115,-36,-10,-72,]),'RBRACK':([37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,60,86,87,88,89,90,91,112,122,124,],[-8,60,-40,-42,-44,-46,-48,-50,-51,-53,-69,-70,-71,-72,-73,-9,-41,-43,-45,-47,-49,-52,124,-36,-10,]),'RBRACE':([77,93,94,95,96,97,98,99,100,101,114,121,122,129,133,134,139,141,142,143,144,146,147,149,150,151,],[-74,113,-21,-22,-23,-24,-25,-26,-27,-28,-20,-74,-36,-33,140,-35,145,-74,-34,-29,-30,147,-31,-74,151,-32,]),'IF':([77,93,94,95,96,97,98,99,100,101,114,120,121,122,129,132,133,134,139,141,142,143,144,146,147,149,150,151,],[103,103,-21,-22,-23,-24,-25,-26,-27,-28,-20,103,103,-36,-33,103,103,-35,-20,103,-34,-29,-30,103,-31,103,103,-32,]),'READ':([77,93,94,95,96,97,98,99,100,101,114,120,121,122,129,132,133,134,139,141,142,143,144,146,147,149,150,151,],[104,104,-21,-22,-23,-24,-25,-26,-27,-28,-20,104,104,-36,-33,104,104,-35,-20,104,-34,-29,-30,104,-31,104,104,-32,]),'RETURN':([77,93,94,95,96,97,98,99,100,101,114,120,121,122,129,132,133,134,139,141,142,143,144,146,147,149,150,151,],[105,105,-21,-22,-23,-24,-25,-26,-27,-28,-20,105,105,-36,-33,105,105,-35,-20,105,-34,-29,-30,105,-31,105,105,-32,]),'PRINT':([77,93,94,95,96,97,98,99,100,101,114,120,121,122,129,132,133,134,139,141,142,143,144,146,147,149,150,151,],[106,106,-21,-22,-23,-24,-25,-26,-27,-28,-20,106,106,-36,-33,106,106,-35,-20,106,-34,-29,-30,106,-31,106,106,-32,]),'END':([113,],[125,]),'ELSE':([147,],[148,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'var_declarations':([4,33,79,81,],[5,53,107,109,]),'var_declaration':([4,5,33,53,79,81,107,109,],[6,10,6,10,6,6,10,10,]),'empty':([4,5,33,34,35,59,77,79,81,120,121,141,149,],[7,12,7,57,57,84,95,7,7,95,95,95,95,]),'functions':([5,],[9,]),'function':([5,9,],[11,21,]),'simple_type':([8,13,34,35,80,],[14,22,54,54,54,]),'variables':([14,31,],[24,36,]),'variable':([14,31,32,46,59,61,62,65,70,73,77,85,93,105,111,115,116,117,119,120,121,132,133,141,146,149,150,],[25,25,44,44,44,44,44,44,44,44,102,44,102,44,44,44,44,128,44,102,102,102,102,102,102,102,102,]),'expression':([32,46,59,85,105,111,115,116,119,],[38,76,83,112,118,123,126,127,130,]),'t_expression':([32,46,59,61,85,105,111,115,116,119,],[39,39,39,86,39,39,39,39,39,39,]),'g_expression':([32,46,59,61,62,85,105,111,115,116,119,],[40,40,40,40,87,40,40,40,40,40,40,]),'m_expression':([32,46,59,61,62,65,85,105,111,115,116,119,],[41,41,41,41,41,88,41,41,41,41,41,41,]),'term':([32,46,59,61,62,65,70,85,105,111,115,116,119,],[42,42,42,42,42,42,89,42,42,42,42,42,42,]),'factor':([32,46,59,61,62,65,70,73,85,105,111,115,116,119,],[43,43,43,43,43,43,43,90,43,43,43,43,43,43,]),'cte':([32,46,59,61,62,65,70,73,85,105,111,115,116,119,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'invocation':([32,46,59,61,62,65,70,73,77,85,93,105,111,115,116,119,120,121,132,133,141,146,149,150,],[47,47,47,47,47,47,47,47,97,47,97,47,47,47,47,47,97,97,97,97,97,97,97,97,]),'parameters':([34,35,],[55,58,]),'parameter':([34,35,80,],[56,56,108,]),'boolean_operator':([40,],[62,]),'comparison_operator':([41,],[65,]),'addition_operator':([42,],[70,]),'multiplication_operator':([43,],[73,]),'expressions':([59,],[82,]),'statements':([77,120,121,141,149,],[93,132,133,146,150,]),'statement':([77,93,120,121,132,133,141,146,149,150,],[94,114,94,94,139,114,94,114,94,114,]),'assingation':([77,93,120,121,132,133,141,146,149,150,],[96,96,96,96,96,96,96,96,96,96,]),'if':([77,93,120,121,132,133,141,146,149,150,],[98,98,98,98,98,98,98,98,98,98,]),'read':([77,93,120,121,132,133,141,146,149,150,],[99,99,99,99,99,99,99,99,99,99,]),'return':([77,93,120,121,132,133,141,146,149,150,],[100,100,100,100,100,100,100,100,100,100,]),'print':([77,93,120,121,132,133,141,146,149,150,],[101,101,101,101,101,101,101,101,101,101,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON var_declarations functions MAIN LPAREN RPAREN var_declarations LBRACE statements RBRACE END','program',13,'p_program','grammar.py',9),
  ('var_declarations -> var_declarations var_declaration','var_declarations',2,'p_var_declarations','grammar.py',15),
  ('var_declarations -> var_declaration','var_declarations',1,'p_var_declarations','grammar.py',16),
  ('var_declarations -> empty','var_declarations',1,'p_var_declarations','grammar.py',17),
  ('var_declaration -> VARIABLE simple_type variables SEMICOLON','var_declaration',4,'p_var_declaration','grammar.py',23),
  ('variables -> variable COMMA variables','variables',3,'p_variables','grammar.py',32),
  ('variables -> variable','variables',1,'p_variables','grammar.py',33),
  ('variable -> ID','variable',1,'p_variable','grammar.py',41),
  ('variable -> ID LBRACK expression RBRACK','variable',4,'p_variable','grammar.py',42),
  ('variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK','variable',7,'p_variable','grammar.py',43),
  ('functions -> functions function','functions',2,'p_functions','grammar.py',48),
  ('functions -> function','functions',1,'p_functions','grammar.py',49),
  ('functions -> empty','functions',1,'p_functions','grammar.py',50),
  ('function -> FUNCTION simple_type ID LPAREN parameters RPAREN var_declarations LBRACE statements statement RBRACE','function',11,'p_function','grammar.py',58),
  ('function -> FUNCTION VOID ID LPAREN parameters RPAREN var_declarations LBRACE statements RBRACE','function',10,'p_function','grammar.py',59),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','grammar.py',72),
  ('parameters -> parameter','parameters',1,'p_parameters','grammar.py',73),
  ('parameters -> empty','parameters',1,'p_parameters','grammar.py',74),
  ('parameter -> simple_type ID','parameter',2,'p_parameter','grammar.py',79),
  ('statements -> statements statement','statements',2,'p_statements','grammar.py',84),
  ('statements -> statement','statements',1,'p_statements','grammar.py',85),
  ('statements -> empty','statements',1,'p_statements','grammar.py',86),
  ('statement -> assingation','statement',1,'p_statement','grammar.py',91),
  ('statement -> invocation','statement',1,'p_statement','grammar.py',92),
  ('statement -> if','statement',1,'p_statement','grammar.py',93),
  ('statement -> read','statement',1,'p_statement','grammar.py',94),
  ('statement -> return','statement',1,'p_statement','grammar.py',95),
  ('statement -> print','statement',1,'p_statement','grammar.py',96),
  ('print -> PRINT LPAREN expression RPAREN SEMICOLON','print',5,'p_print','grammar.py',101),
  ('print -> PRINT LPAREN CTES RPAREN SEMICOLON','print',5,'p_print','grammar.py',102),
  ('if -> IF LPAREN expression RPAREN LBRACE statements RBRACE','if',7,'p_if','grammar.py',107),
  ('if -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE','if',11,'p_if','grammar.py',108),
  ('return -> RETURN expression SEMICOLON','return',3,'p_return','grammar.py',115),
  ('read -> READ LPAREN variable RPAREN SEMICOLON','read',5,'p_read','grammar.py',120),
  ('assingation -> variable ASSIGN expression SEMICOLON','assingation',4,'p_assingation','grammar.py',125),
  ('invocation -> ID LPAREN expressions RPAREN SEMICOLON','invocation',5,'p_invocation','grammar.py',131),
  ('expressions -> expressions COMMA expression','expressions',3,'p_expressions','grammar.py',136),
  ('expressions -> expression','expressions',1,'p_expressions','grammar.py',137),
  ('expressions -> empty','expressions',1,'p_expressions','grammar.py',138),
  ('expression -> t_expression','expression',1,'p_expression','grammar.py',143),
  ('expression -> t_expression ASSIGN t_expression','expression',3,'p_expression','grammar.py',144),
  ('t_expression -> g_expression','t_expression',1,'p_t_expression','grammar.py',149),
  ('t_expression -> g_expression boolean_operator g_expression','t_expression',3,'p_t_expression','grammar.py',150),
  ('g_expression -> m_expression','g_expression',1,'p_g_expression','grammar.py',155),
  ('g_expression -> m_expression comparison_operator m_expression','g_expression',3,'p_g_expression','grammar.py',156),
  ('m_expression -> term','m_expression',1,'p_m_expression','grammar.py',161),
  ('m_expression -> term addition_operator term','m_expression',3,'p_m_expression','grammar.py',162),
  ('term -> factor','term',1,'p_term','grammar.py',167),
  ('term -> factor multiplication_operator factor','term',3,'p_term','grammar.py',168),
  ('factor -> variable','factor',1,'p_factor','grammar.py',173),
  ('factor -> cte','factor',1,'p_factor','grammar.py',174),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','grammar.py',175),
  ('factor -> invocation','factor',1,'p_factor','grammar.py',176),
  ('comparison_operator -> LESS','comparison_operator',1,'p_comparison_operator','grammar.py',181),
  ('comparison_operator -> GREATER','comparison_operator',1,'p_comparison_operator','grammar.py',182),
  ('comparison_operator -> EQUALS','comparison_operator',1,'p_comparison_operator','grammar.py',183),
  ('comparison_operator -> NOTEQUAL','comparison_operator',1,'p_comparison_operator','grammar.py',184),
  ('addition_operator -> PLUS','addition_operator',1,'p_addition_operator','grammar.py',200),
  ('addition_operator -> MINUS','addition_operator',1,'p_addition_operator','grammar.py',201),
  ('boolean_operator -> AND','boolean_operator',1,'p_boolean_operator','grammar.py',206),
  ('boolean_operator -> OR','boolean_operator',1,'p_boolean_operator','grammar.py',207),
  ('multiplication_operator -> TIMES','multiplication_operator',1,'p_multiplication_operator','grammar.py',212),
  ('multiplication_operator -> DIVIDE','multiplication_operator',1,'p_multiplication_operator','grammar.py',213),
  ('simple_type -> INT','simple_type',1,'p_simple_type','grammar.py',218),
  ('simple_type -> FLOAT','simple_type',1,'p_simple_type','grammar.py',219),
  ('simple_type -> CHAR','simple_type',1,'p_simple_type','grammar.py',220),
  ('simple_type -> STRING','simple_type',1,'p_simple_type','grammar.py',221),
  ('simple_type -> BOOLEAN','simple_type',1,'p_simple_type','grammar.py',222),
  ('cte -> CTEI','cte',1,'p_cte','grammar.py',229),
  ('cte -> CTEF','cte',1,'p_cte','grammar.py',230),
  ('cte -> CTEC','cte',1,'p_cte','grammar.py',231),
  ('cte -> CTES','cte',1,'p_cte','grammar.py',232),
  ('cte -> CTEB','cte',1,'p_cte','grammar.py',233),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',239),
]
