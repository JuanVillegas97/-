
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLESSGREATEREQUALSNOTEQUALLESSTHANGREATERTHANleftPLUSMINUSleftTIMESDIVIDErightASSIGNAND ASSIGN BOOLEAN CHAR COLON COMMA COMMENT CTEB CTEC CTEF CTEI CTES DECRYPT DIVIDE DO ELSE ENCRYPT END EQUALS FLOAT FOR FROM FUNCTION GENKEY GREATER GREATERTHAN ID IF INT LBRACE LBRACK LESS LESSTHAN LPAREN MAIN MINUS NOT NOTEQUAL OR PLUS PRINT PROGRAM RANDOM_SALT RBRACE RBRACK READ RETURN RPAREN SEMICOLON SHA_256 SPECIAL STRING THEN TIMES VARIABLE VOID WHILE\n    program : PROGRAM ID SEMICOLON global_scope var_declarations functions main END\n    \n    global_scope : empty\n    \n    functions : functions function\n                    | function\n                    | empty\n    \n    function : FUNCTION function_signature block\n    \n    function_signature : simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations\n                    | VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations\n    \n    return : RETURN expressions SEMICOLON\n    \n    function_1 : empty\n    \n    main : MAIN LPAREN RPAREN main_scope var_declarations block\n    \n    main_scope : empty\n    \n    var_declarations : var_declaration_list\n                    | empty\n    \n    var_declaration_list : var_declaration var_declarations\n    \n    var_declaration : VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration\n    \n    open_var_declaration : empty\n    \n    close_var_declaration : empty\n    \n    variables : variable \n            | variable COMMA variables\n    \n    variable : ID\n            | ID LBRACK expression RBRACK\n            | ID LBRACK expression RBRACK LBRACK expression RBRACK\n    \n    parameters : parameters  COMMA parameter\n    | parameter\n    | empty\n    \n    parameter : simple_type ID \n    \n    block : LBRACE block2 RBRACE\n    \n    block2 : block3\n           | empty\n    \n    block3 : statement block2\n    \n    statement : special_func \n    | assingation\n    | for\n    | do_while\n    | while\n    | if_else\n    | invocation\n    | if\n    | print\n    | read \n    \n    special_func : gen_key\n                | encrypt\n                | decrypt\n                | sha_256\n                | random_salt\n    \n    random_salt : RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON\n    \n    sha_256 : SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON\n    \n    gen_key : GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON\n    \n    encrypt : ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON\n    \n    decrypt : DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON\n    \n    read : READ LPAREN ID RPAREN SEMICOLON\n    \n    assing_to_call : variable ASSIGN invocation\n    \n    do_while : DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON \n    \n    for : FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4\n    \n    for_1 : empty\n    \n    for_2 : empty\n    \n    for_3 : empty\n    \n    for_4 : empty\n    \n    while : WHILE breadcrumb LPAREN expression RPAREN gotof block\n    \n    breadcrumb : empty\n    \n    if : IF LPAREN expression  RPAREN gotof block\n    \n    if_else : IF LPAREN  expression  RPAREN  gotof block  ELSE goto block\n    \n    gotot : empty\n    \n    goto : empty\n    \n    gotof : empty\n    \n    variable_list : variable\n                  | variable_list COMMA variable\n    \n    invocation : ID invocation_1 LPAREN  invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6 \n    \n    invocation_1 : empty\n    \n    invocation_2 : empty\n    \n    invocation_3 : empty\n    \n    invocation_4 : empty\n    \n    invocation_5 : empty\n    \n    invocation_6 : empty\n    \n    expressions : expressions COMMA invocation_4 expression invocation_3\n                | expression invocation_3\n                | empty\n    \n    expression : t_expression \n                | NOT t_expression\n    \n    print : PRINT LPAREN print_arguments RPAREN SEMICOLON\n    \n    print_arguments : print_argument\n                    | print_arguments COMMA print_argument\n    \n    print_argument : CTES\n                    | expression\n    \n    assingation : variable ASSIGN expression SEMICOLON\n    \n    t_expression : g_expression \n                | t_expression boolean_operator g_expression\n    \n    g_expression : m_expression \n                | g_expression comparison_operator m_expression\n    \n    m_expression : term \n                |  m_expression addition_operator term\n    \n    term : factor \n        |  term multiplication_operator factor\n    \n    factor : variable\n            | cte\n            | invocation\n            | expression_parenthesis\n    \n    expression_parenthesis : LPAREN expression RPAREN \n    \n    comparison_operator : LESS\n                        | GREATER\n                        | EQUALS\n                        | NOTEQUAL\n                        | GREATERTHAN\n                        | LESSTHAN\n    \n    addition_operator : PLUS\n                    | MINUS\n    \n    boolean_operator : AND\n                    | OR\n    \n    multiplication_operator : TIMES\n                            | DIVIDE\n    \n    simple_type : INT\n                | FLOAT\n                | CHAR\n                | BOOLEAN\n                | STRING\n    \n    cte : CTEI\n        | CTEF\n        | CTEC\n        | CTEB\n        | CTES\n    \n    empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,31,],[0,-1,]),'ID':([2,23,24,25,26,27,28,29,30,34,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,77,78,81,83,84,90,91,92,94,95,96,106,120,124,126,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,160,163,164,169,171,172,173,176,181,187,191,195,197,201,202,210,215,216,229,230,232,234,235,236,237,240,241,250,251,253,254,255,256,261,262,263,],[3,35,36,-112,-113,-114,-115,-116,39,62,62,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,39,103,-28,103,123,103,103,132,134,135,136,103,103,-122,103,103,-108,-109,103,-100,-101,-102,-103,-104,-105,103,-106,-107,103,-110,-111,-86,103,-71,103,198,199,200,203,103,103,103,-81,-52,219,220,-122,-62,-49,103,-73,-60,247,248,-48,-47,103,-122,-69,-75,-54,-63,-50,-51,-122,-55,-59,]),'SEMICOLON':([3,37,38,39,102,103,105,107,108,109,110,111,112,113,114,115,116,117,118,119,122,140,144,168,170,182,183,184,185,186,198,209,219,220,224,227,228,231,241,243,244,247,248,250,251,],[4,76,-19,-21,-20,-21,-79,-87,-89,-91,-93,-95,-96,-97,-98,-117,-118,-119,-120,-121,160,-22,-80,195,197,-88,-90,-92,-94,-99,216,-122,236,237,-23,241,-74,-122,-122,253,-64,255,256,-69,-75,]),'VARIABLE':([4,5,6,10,40,76,79,80,100,101,221,223,],[-122,11,-2,11,-122,-122,11,-12,-16,-18,11,11,]),'FUNCTION':([4,5,6,7,8,9,10,12,13,14,16,20,33,76,81,100,101,],[-122,-122,-2,15,-13,-14,-122,15,-4,-5,-15,-3,-6,-122,-28,-16,-18,]),'MAIN':([4,5,6,7,8,9,10,12,13,14,16,20,33,76,81,100,101,],[-122,-122,-2,-122,-13,-14,-122,21,-4,-5,-15,-3,-6,-122,-28,-16,-18,]),'LBRACE':([8,9,10,16,22,40,63,76,79,80,87,88,100,101,121,167,192,193,194,214,221,223,233,238,239,245,246,260,],[-13,-14,-122,-15,34,-122,-122,-122,-122,-12,34,-61,-16,-18,34,-122,-122,34,-66,34,-122,-122,-122,-7,-8,34,-65,34,]),'INT':([11,15,17,18,98,99,138,139,205,],[-122,25,25,-17,-122,-122,25,25,25,]),'FLOAT':([11,15,17,18,98,99,138,139,205,],[-122,26,26,-17,-122,-122,26,26,26,]),'CHAR':([11,15,17,18,98,99,138,139,205,],[-122,27,27,-17,-122,-122,27,27,27,]),'BOOLEAN':([11,15,17,18,98,99,138,139,205,],[-122,28,28,-17,-122,-122,28,28,28,]),'STRING':([11,15,17,18,98,99,138,139,205,],[-122,29,29,-17,-122,-122,29,29,29,]),'VOID':([15,],[24,]),'COMMA':([18,38,39,98,99,103,105,107,108,109,110,111,112,113,114,115,116,117,118,119,124,128,129,130,131,134,135,138,139,140,144,163,164,177,178,179,180,182,183,184,185,186,188,189,190,196,203,211,212,222,224,241,242,250,251,252,],[-17,77,-21,-122,-122,-21,-79,-87,-89,-91,-93,-95,-96,-97,-98,-117,-118,-119,-120,-121,-122,169,-82,-84,-85,172,173,-122,-122,-22,-80,-122,-71,205,-25,-26,205,-88,-90,-92,-94,-99,210,-122,-78,-83,-27,-77,-72,-24,-23,-122,-122,-69,-75,-76,]),'RPAREN':([18,32,93,98,99,101,103,105,107,108,109,110,111,112,113,114,115,116,117,118,119,124,127,128,129,130,131,132,136,137,138,139,140,144,158,163,164,166,177,178,179,180,182,183,184,185,186,188,189,190,196,199,200,203,204,206,211,212,213,222,224,241,242,249,250,251,252,],[-17,40,133,-122,-122,-18,-21,-79,-87,-89,-91,-93,-95,-96,-97,-98,-117,-118,-119,-120,-121,-122,167,168,-82,-84,-85,170,174,175,-122,-122,-22,-80,186,-122,-71,192,-122,-25,-26,-122,-88,-90,-92,-94,-99,209,-122,-78,-83,217,218,-27,221,223,-77,-72,231,-24,-23,-122,-122,257,-69,-75,-76,]),'END':([19,81,159,],[31,-28,-11,]),'LPAREN':([21,35,36,61,62,64,65,66,67,68,69,70,71,72,73,74,75,78,83,85,86,88,89,90,91,103,106,120,124,126,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,163,164,165,169,181,187,191,210,229,230,240,],[32,-122,-122,84,-122,-122,90,91,92,93,94,95,96,97,98,-10,99,120,120,124,-70,-61,126,120,120,-122,120,120,-122,120,120,-108,-109,120,-100,-101,-102,-103,-104,-105,120,-106,-107,120,-110,-111,120,-71,191,120,120,120,120,-122,120,-73,120,]),'RBRACE':([34,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,81,82,160,195,197,215,216,232,236,237,241,250,251,253,254,255,256,261,262,263,],[-122,81,-29,-30,-122,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-28,-31,-86,-81,-52,-62,-49,-60,-48,-47,-122,-69,-75,-54,-63,-50,-51,-122,-55,-59,]),'FOR':([34,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,81,160,195,197,215,216,232,236,237,241,250,251,253,254,255,256,261,262,263,],[61,61,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-28,-86,-81,-52,-62,-49,-60,-48,-47,-122,-69,-75,-54,-63,-50,-51,-122,-55,-59,]),'DO':([34,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,81,160,195,197,215,216,232,236,237,241,250,251,253,254,255,256,257,258,259,261,262,263,],[63,63,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-28,-86,-81,-52,-62,-49,-60,-48,-47,-122,-69,-75,-54,-63,-50,-51,-122,260,-58,-122,-55,-59,]),'WHILE':([34,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,81,125,160,195,197,215,216,232,236,237,241,250,251,253,254,255,256,261,262,263,],[64,64,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-28,165,-86,-81,-52,-62,-49,-60,-48,-47,-122,-69,-75,-54,-63,-50,-51,-122,-55,-59,]),'IF':([34,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,81,160,195,197,215,216,232,236,237,241,250,251,253,254,255,256,261,262,263,],[65,65,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-28,-86,-81,-52,-62,-49,-60,-48,-47,-122,-69,-75,-54,-63,-50,-51,-122,-55,-59,]),'PRINT':([34,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,81,160,195,197,215,216,232,236,237,241,250,251,253,254,255,256,261,262,263,],[66,66,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-28,-86,-81,-52,-62,-49,-60,-48,-47,-122,-69,-75,-54,-63,-50,-51,-122,-55,-59,]),'READ':([34,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,81,160,195,197,215,216,232,236,237,241,250,251,253,254,255,256,261,262,263,],[67,67,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-28,-86,-81,-52,-62,-49,-60,-48,-47,-122,-69,-75,-54,-63,-50,-51,-122,-55,-59,]),'GENKEY':([34,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,81,160,195,197,215,216,232,236,237,241,250,251,253,254,255,256,261,262,263,],[68,68,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-28,-86,-81,-52,-62,-49,-60,-48,-47,-122,-69,-75,-54,-63,-50,-51,-122,-55,-59,]),'ENCRYPT':([34,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,81,160,195,197,215,216,232,236,237,241,250,251,253,254,255,256,261,262,263,],[69,69,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-28,-86,-81,-52,-62,-49,-60,-48,-47,-122,-69,-75,-54,-63,-50,-51,-122,-55,-59,]),'DECRYPT':([34,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,81,160,195,197,215,216,232,236,237,241,250,251,253,254,255,256,261,262,263,],[70,70,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-28,-86,-81,-52,-62,-49,-60,-48,-47,-122,-69,-75,-54,-63,-50,-51,-122,-55,-59,]),'SHA_256':([34,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,81,160,195,197,215,216,232,236,237,241,250,251,253,254,255,256,261,262,263,],[71,71,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-28,-86,-81,-52,-62,-49,-60,-48,-47,-122,-69,-75,-54,-63,-50,-51,-122,-55,-59,]),'RANDOM_SALT':([34,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,81,160,195,197,215,216,232,236,237,241,250,251,253,254,255,256,261,262,263,],[72,72,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-28,-86,-81,-52,-62,-49,-60,-48,-47,-122,-69,-75,-54,-63,-50,-51,-122,-55,-59,]),'LBRACK':([39,62,103,140,],[78,78,78,181,]),'ASSIGN':([60,62,123,140,161,162,224,],[83,-21,-122,-22,187,-56,-23,]),'NOT':([78,83,90,91,120,124,126,163,164,169,181,187,191,210,229,230,240,],[106,106,106,106,106,-122,106,106,-71,106,106,106,106,-122,106,-73,106,]),'CTEI':([78,83,90,91,97,106,120,124,126,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,163,164,169,181,187,191,210,229,230,240,],[115,115,115,115,137,115,115,-122,115,115,-108,-109,115,-100,-101,-102,-103,-104,-105,115,-106,-107,115,-110,-111,115,-71,115,115,115,115,-122,115,-73,115,]),'CTEF':([78,83,90,91,106,120,124,126,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,163,164,169,181,187,191,210,229,230,240,],[116,116,116,116,116,116,-122,116,116,-108,-109,116,-100,-101,-102,-103,-104,-105,116,-106,-107,116,-110,-111,116,-71,116,116,116,116,-122,116,-73,116,]),'CTEC':([78,83,90,91,106,120,124,126,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,163,164,169,181,187,191,210,229,230,240,],[117,117,117,117,117,117,-122,117,117,-108,-109,117,-100,-101,-102,-103,-104,-105,117,-106,-107,117,-110,-111,117,-71,117,117,117,117,-122,117,-73,117,]),'CTEB':([78,83,90,91,106,120,124,126,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,163,164,169,181,187,191,210,229,230,240,],[118,118,118,118,118,118,-122,118,118,-108,-109,118,-100,-101,-102,-103,-104,-105,118,-106,-107,118,-110,-111,118,-71,118,118,118,118,-122,118,-73,118,]),'CTES':([78,83,90,91,106,120,124,126,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,163,164,169,181,187,191,210,229,230,240,],[119,119,119,130,119,119,-122,119,119,-108,-109,119,-100,-101,-102,-103,-104,-105,119,-106,-107,119,-110,-111,119,-71,130,119,119,119,-122,119,-73,119,]),'ELSE':([81,215,],[-28,233,]),'TIMES':([103,109,110,111,112,113,114,115,116,117,118,119,130,140,184,185,186,224,241,250,251,],[-21,156,-93,-95,-96,-97,-98,-117,-118,-119,-120,-121,-121,-22,156,-94,-99,-23,-122,-69,-75,]),'DIVIDE':([103,109,110,111,112,113,114,115,116,117,118,119,130,140,184,185,186,224,241,250,251,],[-21,157,-93,-95,-96,-97,-98,-117,-118,-119,-120,-121,-121,-22,157,-94,-99,-23,-122,-69,-75,]),'PLUS':([103,108,109,110,111,112,113,114,115,116,117,118,119,130,140,183,184,185,186,224,241,250,251,],[-21,153,-91,-93,-95,-96,-97,-98,-117,-118,-119,-120,-121,-121,-22,153,-92,-94,-99,-23,-122,-69,-75,]),'MINUS':([103,108,109,110,111,112,113,114,115,116,117,118,119,130,140,183,184,185,186,224,241,250,251,],[-21,154,-91,-93,-95,-96,-97,-98,-117,-118,-119,-120,-121,-121,-22,154,-92,-94,-99,-23,-122,-69,-75,]),'LESS':([103,107,108,109,110,111,112,113,114,115,116,117,118,119,130,140,182,183,184,185,186,224,241,250,251,],[-21,146,-89,-91,-93,-95,-96,-97,-98,-117,-118,-119,-120,-121,-121,-22,146,-90,-92,-94,-99,-23,-122,-69,-75,]),'GREATER':([103,107,108,109,110,111,112,113,114,115,116,117,118,119,130,140,182,183,184,185,186,224,241,250,251,],[-21,147,-89,-91,-93,-95,-96,-97,-98,-117,-118,-119,-120,-121,-121,-22,147,-90,-92,-94,-99,-23,-122,-69,-75,]),'EQUALS':([103,107,108,109,110,111,112,113,114,115,116,117,118,119,130,140,182,183,184,185,186,224,241,250,251,],[-21,148,-89,-91,-93,-95,-96,-97,-98,-117,-118,-119,-120,-121,-121,-22,148,-90,-92,-94,-99,-23,-122,-69,-75,]),'NOTEQUAL':([103,107,108,109,110,111,112,113,114,115,116,117,118,119,130,140,182,183,184,185,186,224,241,250,251,],[-21,149,-89,-91,-93,-95,-96,-97,-98,-117,-118,-119,-120,-121,-121,-22,149,-90,-92,-94,-99,-23,-122,-69,-75,]),'GREATERTHAN':([103,107,108,109,110,111,112,113,114,115,116,117,118,119,130,140,182,183,184,185,186,224,241,250,251,],[-21,150,-89,-91,-93,-95,-96,-97,-98,-117,-118,-119,-120,-121,-121,-22,150,-90,-92,-94,-99,-23,-122,-69,-75,]),'LESSTHAN':([103,107,108,109,110,111,112,113,114,115,116,117,118,119,130,140,182,183,184,185,186,224,241,250,251,],[-21,151,-89,-91,-93,-95,-96,-97,-98,-117,-118,-119,-120,-121,-121,-22,151,-90,-92,-94,-99,-23,-122,-69,-75,]),'AND':([103,105,107,108,109,110,111,112,113,114,115,116,117,118,119,130,140,144,182,183,184,185,186,224,241,250,251,],[-21,142,-87,-89,-91,-93,-95,-96,-97,-98,-117,-118,-119,-120,-121,-121,-22,142,-88,-90,-92,-94,-99,-23,-122,-69,-75,]),'OR':([103,105,107,108,109,110,111,112,113,114,115,116,117,118,119,130,140,144,182,183,184,185,186,224,241,250,251,],[-21,143,-87,-89,-91,-93,-95,-96,-97,-98,-117,-118,-119,-120,-121,-121,-22,143,-88,-90,-92,-94,-99,-23,-122,-69,-75,]),'RBRACK':([103,104,105,107,108,109,110,111,112,113,114,115,116,117,118,119,140,144,182,183,184,185,186,207,224,241,250,251,],[-21,140,-79,-87,-89,-91,-93,-95,-96,-97,-98,-117,-118,-119,-120,-121,-22,-80,-88,-90,-92,-94,-99,224,-23,-122,-69,-75,]),'FROM':([103,105,107,108,109,110,111,112,113,114,115,116,117,118,119,140,144,182,183,184,185,186,208,224,225,226,241,250,251,],[-21,-79,-87,-89,-91,-93,-95,-96,-97,-98,-117,-118,-119,-120,-121,-22,-80,-88,-90,-92,-94,-99,-122,-23,240,-57,-122,-69,-75,]),'SPECIAL':([133,174,175,217,218,],[171,201,202,234,235,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_scope':([4,],[5,]),'empty':([4,5,7,10,11,34,35,36,40,44,62,63,64,76,79,98,99,103,123,124,138,139,163,167,177,180,189,192,208,209,210,221,223,231,233,241,242,257,261,],[6,9,14,9,18,43,74,74,80,43,86,88,88,101,9,18,18,86,162,164,179,179,190,194,101,101,212,194,226,228,230,9,9,244,246,251,212,259,263,]),'var_declarations':([5,10,79,221,223,],[7,16,121,238,239,]),'var_declaration_list':([5,10,79,221,223,],[8,8,8,8,8,]),'var_declaration':([5,10,79,221,223,],[10,10,10,10,10,]),'functions':([7,],[12,]),'function':([7,12,],[13,20,]),'open_var_declaration':([11,98,99,],[17,138,139,]),'main':([12,],[19,]),'function_signature':([15,],[22,]),'simple_type':([15,17,138,139,205,],[23,30,176,176,176,]),'block':([22,87,121,193,214,245,260,],[33,125,159,215,232,254,261,]),'variables':([30,77,],[37,102,]),'variable':([30,34,44,77,78,83,90,91,106,120,126,141,145,152,155,163,169,181,187,191,229,240,],[38,60,60,38,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'block2':([34,44,],[41,82,]),'block3':([34,44,],[42,42,]),'statement':([34,44,],[44,44,]),'special_func':([34,44,],[45,45,]),'assingation':([34,44,],[46,46,]),'for':([34,44,],[47,47,]),'do_while':([34,44,],[48,48,]),'while':([34,44,],[49,49,]),'if_else':([34,44,],[50,50,]),'invocation':([34,44,78,83,90,91,106,120,126,141,145,152,155,163,169,181,187,191,229,240,],[51,51,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'if':([34,44,],[52,52,]),'print':([34,44,],[53,53,]),'read':([34,44,],[54,54,]),'gen_key':([34,44,],[55,55,]),'encrypt':([34,44,],[56,56,]),'decrypt':([34,44,],[57,57,]),'sha_256':([34,44,],[58,58,]),'random_salt':([34,44,],[59,59,]),'function_1':([35,36,],[73,75,]),'main_scope':([40,],[79,]),'invocation_1':([62,103,],[85,85,]),'breadcrumb':([63,64,],[87,89,]),'close_var_declaration':([76,177,180,],[100,204,206,]),'expression':([78,83,90,91,120,126,163,169,181,187,191,229,240,],[104,122,127,131,158,166,189,131,207,208,213,242,249,]),'t_expression':([78,83,90,91,106,120,126,163,169,181,187,191,229,240,],[105,105,105,105,144,105,105,105,105,105,105,105,105,105,]),'g_expression':([78,83,90,91,106,120,126,141,163,169,181,187,191,229,240,],[107,107,107,107,107,107,107,182,107,107,107,107,107,107,107,]),'m_expression':([78,83,90,91,106,120,126,141,145,163,169,181,187,191,229,240,],[108,108,108,108,108,108,108,108,183,108,108,108,108,108,108,108,]),'term':([78,83,90,91,106,120,126,141,145,152,163,169,181,187,191,229,240,],[109,109,109,109,109,109,109,109,109,184,109,109,109,109,109,109,109,]),'factor':([78,83,90,91,106,120,126,141,145,152,155,163,169,181,187,191,229,240,],[110,110,110,110,110,110,110,110,110,110,185,110,110,110,110,110,110,110,]),'cte':([78,83,90,91,106,120,126,141,145,152,155,163,169,181,187,191,229,240,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'expression_parenthesis':([78,83,90,91,106,120,126,141,145,152,155,163,169,181,187,191,229,240,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'print_arguments':([91,],[128,]),'print_argument':([91,169,],[129,196,]),'boolean_operator':([105,144,],[141,141,]),'comparison_operator':([107,182,],[145,145,]),'addition_operator':([108,183,],[152,152,]),'multiplication_operator':([109,184,],[155,155,]),'for_1':([123,],[161,]),'invocation_2':([124,],[163,]),'parameters':([138,139,],[177,180,]),'parameter':([138,139,205,],[178,178,222,]),'expressions':([163,],[188,]),'gotof':([167,192,],[193,214,]),'invocation_3':([189,242,],[211,252,]),'for_2':([208,],[225,]),'invocation_5':([209,],[227,]),'invocation_4':([210,],[229,]),'gotot':([231,],[243,]),'goto':([233,],[245,]),'invocation_6':([241,],[250,]),'for_3':([257,],[258,]),'for_4':([261,],[262,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END','program',8,'p_program','grammar.py',29),
  ('global_scope -> empty','global_scope',1,'p_global_scope','grammar.py',35),
  ('functions -> functions function','functions',2,'p_functions','grammar.py',51),
  ('functions -> function','functions',1,'p_functions','grammar.py',52),
  ('functions -> empty','functions',1,'p_functions','grammar.py',53),
  ('function -> FUNCTION function_signature block','function',3,'p_function','grammar.py',58),
  ('function_signature -> simple_type ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations','function_signature',9,'p_function_signature','grammar.py',71),
  ('function_signature -> VOID ID function_1 LPAREN open_var_declaration parameters close_var_declaration RPAREN var_declarations','function_signature',9,'p_function_signature','grammar.py',72),
  ('return -> RETURN expressions SEMICOLON','return',3,'p_return','grammar.py',79),
  ('function_1 -> empty','function_1',1,'p_function_1','grammar.py',92),
  ('main -> MAIN LPAREN RPAREN main_scope var_declarations block','main',6,'p_main','grammar.py',111),
  ('main_scope -> empty','main_scope',1,'p_main_scope','grammar.py',121),
  ('var_declarations -> var_declaration_list','var_declarations',1,'p_var_declarations','grammar.py',134),
  ('var_declarations -> empty','var_declarations',1,'p_var_declarations','grammar.py',135),
  ('var_declaration_list -> var_declaration var_declarations','var_declaration_list',2,'p_var_declaration_list','grammar.py',141),
  ('var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration','var_declaration',6,'p_var_declaration','grammar.py',149),
  ('open_var_declaration -> empty','open_var_declaration',1,'p_open_var_declaration','grammar.py',159),
  ('close_var_declaration -> empty','close_var_declaration',1,'p_close_var_declaration','grammar.py',165),
  ('variables -> variable','variables',1,'p_variables','grammar.py',172),
  ('variables -> variable COMMA variables','variables',3,'p_variables','grammar.py',173),
  ('variable -> ID','variable',1,'p_variable','grammar.py',186),
  ('variable -> ID LBRACK expression RBRACK','variable',4,'p_variable','grammar.py',187),
  ('variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK','variable',7,'p_variable','grammar.py',188),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','grammar.py',197),
  ('parameters -> parameter','parameters',1,'p_parameters','grammar.py',198),
  ('parameters -> empty','parameters',1,'p_parameters','grammar.py',199),
  ('parameter -> simple_type ID','parameter',2,'p_parameter','grammar.py',205),
  ('block -> LBRACE block2 RBRACE','block',3,'p_block','grammar.py',219),
  ('block2 -> block3','block2',1,'p_block2','grammar.py',225),
  ('block2 -> empty','block2',1,'p_block2','grammar.py',226),
  ('block3 -> statement block2','block3',2,'p_block3','grammar.py',232),
  ('statement -> special_func','statement',1,'p_statement','grammar.py',240),
  ('statement -> assingation','statement',1,'p_statement','grammar.py',241),
  ('statement -> for','statement',1,'p_statement','grammar.py',242),
  ('statement -> do_while','statement',1,'p_statement','grammar.py',243),
  ('statement -> while','statement',1,'p_statement','grammar.py',244),
  ('statement -> if_else','statement',1,'p_statement','grammar.py',245),
  ('statement -> invocation','statement',1,'p_statement','grammar.py',246),
  ('statement -> if','statement',1,'p_statement','grammar.py',247),
  ('statement -> print','statement',1,'p_statement','grammar.py',248),
  ('statement -> read','statement',1,'p_statement','grammar.py',249),
  ('special_func -> gen_key','special_func',1,'p_special_func','grammar.py',257),
  ('special_func -> encrypt','special_func',1,'p_special_func','grammar.py',258),
  ('special_func -> decrypt','special_func',1,'p_special_func','grammar.py',259),
  ('special_func -> sha_256','special_func',1,'p_special_func','grammar.py',260),
  ('special_func -> random_salt','special_func',1,'p_special_func','grammar.py',261),
  ('random_salt -> RANDOM_SALT LPAREN CTEI RPAREN SPECIAL ID SEMICOLON','random_salt',7,'p_random_salt','grammar.py',266),
  ('sha_256 -> SHA_256 LPAREN ID RPAREN SPECIAL ID SEMICOLON','sha_256',7,'p_sha_256','grammar.py',271),
  ('gen_key -> GENKEY LPAREN RPAREN SPECIAL ID SEMICOLON','gen_key',6,'p_gen_key','grammar.py',290),
  ('encrypt -> ENCRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON','encrypt',9,'p_encrypt','grammar.py',306),
  ('decrypt -> DECRYPT LPAREN ID COMMA ID RPAREN SPECIAL ID SEMICOLON','decrypt',9,'p_decrypt','grammar.py',327),
  ('read -> READ LPAREN ID RPAREN SEMICOLON','read',5,'p_read','grammar.py',348),
  ('assing_to_call -> variable ASSIGN invocation','assing_to_call',3,'p_assing_to_call','grammar.py',360),
  ('do_while -> DO breadcrumb block WHILE LPAREN expression RPAREN gotot SEMICOLON','do_while',9,'p_do_while','grammar.py',366),
  ('for -> FOR LPAREN ID for_1 ASSIGN expression for_2 FROM expression RPAREN for_3 DO block for_4','for',14,'p_for','grammar.py',371),
  ('for_1 -> empty','for_1',1,'p_for_1','grammar.py',376),
  ('for_2 -> empty','for_2',1,'p_for_2','grammar.py',389),
  ('for_3 -> empty','for_3',1,'p_for_3','grammar.py',417),
  ('for_4 -> empty','for_4',1,'p_for_4','grammar.py',453),
  ('while -> WHILE breadcrumb LPAREN expression RPAREN gotof block','while',7,'p_while','grammar.py',497),
  ('breadcrumb -> empty','breadcrumb',1,'p_breadcrumb','grammar.py',503),
  ('if -> IF LPAREN expression RPAREN gotof block','if',6,'p_if','grammar.py',509),
  ('if_else -> IF LPAREN expression RPAREN gotof block ELSE goto block','if_else',9,'p_if_else','grammar.py',516),
  ('gotot -> empty','gotot',1,'p_gotot','grammar.py',523),
  ('goto -> empty','goto',1,'p_goto','grammar.py',529),
  ('gotof -> empty','gotof',1,'p_gotof','grammar.py',535),
  ('variable_list -> variable','variable_list',1,'p_variable_list','grammar.py',545),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','grammar.py',546),
  ('invocation -> ID invocation_1 LPAREN invocation_2 expressions RPAREN invocation_5 SEMICOLON invocation_6','invocation',9,'p_invocation','grammar.py',556),
  ('invocation_1 -> empty','invocation_1',1,'p_invocation_1','grammar.py',564),
  ('invocation_2 -> empty','invocation_2',1,'p_invocation_2','grammar.py',572),
  ('invocation_3 -> empty','invocation_3',1,'p_invocation_3','grammar.py',580),
  ('invocation_4 -> empty','invocation_4',1,'p_invocation_4','grammar.py',588),
  ('invocation_5 -> empty','invocation_5',1,'p_invocation_5','grammar.py',596),
  ('invocation_6 -> empty','invocation_6',1,'p_invocation_6','grammar.py',602),
  ('expressions -> expressions COMMA invocation_4 expression invocation_3','expressions',5,'p_expressions','grammar.py',610),
  ('expressions -> expression invocation_3','expressions',2,'p_expressions','grammar.py',611),
  ('expressions -> empty','expressions',1,'p_expressions','grammar.py',612),
  ('expression -> t_expression','expression',1,'p_expression','grammar.py',617),
  ('expression -> NOT t_expression','expression',2,'p_expression','grammar.py',618),
  ('print -> PRINT LPAREN print_arguments RPAREN SEMICOLON','print',5,'p_print','grammar.py',630),
  ('print_arguments -> print_argument','print_arguments',1,'p_print_arguments','grammar.py',637),
  ('print_arguments -> print_arguments COMMA print_argument','print_arguments',3,'p_print_arguments','grammar.py',638),
  ('print_argument -> CTES','print_argument',1,'p_print_argument','grammar.py',650),
  ('print_argument -> expression','print_argument',1,'p_print_argument','grammar.py',651),
  ('assingation -> variable ASSIGN expression SEMICOLON','assingation',4,'p_assingation','grammar.py',677),
  ('t_expression -> g_expression','t_expression',1,'p_t_expression','grammar.py',691),
  ('t_expression -> t_expression boolean_operator g_expression','t_expression',3,'p_t_expression','grammar.py',692),
  ('g_expression -> m_expression','g_expression',1,'p_g_expression','grammar.py',702),
  ('g_expression -> g_expression comparison_operator m_expression','g_expression',3,'p_g_expression','grammar.py',703),
  ('m_expression -> term','m_expression',1,'p_m_expression','grammar.py',713),
  ('m_expression -> m_expression addition_operator term','m_expression',3,'p_m_expression','grammar.py',714),
  ('term -> factor','term',1,'p_term','grammar.py',724),
  ('term -> term multiplication_operator factor','term',3,'p_term','grammar.py',725),
  ('factor -> variable','factor',1,'p_factor','grammar.py',735),
  ('factor -> cte','factor',1,'p_factor','grammar.py',736),
  ('factor -> invocation','factor',1,'p_factor','grammar.py',737),
  ('factor -> expression_parenthesis','factor',1,'p_factor','grammar.py',738),
  ('expression_parenthesis -> LPAREN expression RPAREN','expression_parenthesis',3,'p_expression_parenthesis','grammar.py',749),
  ('comparison_operator -> LESS','comparison_operator',1,'p_comparison_operator','grammar.py',756),
  ('comparison_operator -> GREATER','comparison_operator',1,'p_comparison_operator','grammar.py',757),
  ('comparison_operator -> EQUALS','comparison_operator',1,'p_comparison_operator','grammar.py',758),
  ('comparison_operator -> NOTEQUAL','comparison_operator',1,'p_comparison_operator','grammar.py',759),
  ('comparison_operator -> GREATERTHAN','comparison_operator',1,'p_comparison_operator','grammar.py',760),
  ('comparison_operator -> LESSTHAN','comparison_operator',1,'p_comparison_operator','grammar.py',761),
  ('addition_operator -> PLUS','addition_operator',1,'p_addition_operator','grammar.py',767),
  ('addition_operator -> MINUS','addition_operator',1,'p_addition_operator','grammar.py',768),
  ('boolean_operator -> AND','boolean_operator',1,'p_boolean_operator','grammar.py',774),
  ('boolean_operator -> OR','boolean_operator',1,'p_boolean_operator','grammar.py',775),
  ('multiplication_operator -> TIMES','multiplication_operator',1,'p_multiplication_operator','grammar.py',781),
  ('multiplication_operator -> DIVIDE','multiplication_operator',1,'p_multiplication_operator','grammar.py',782),
  ('simple_type -> INT','simple_type',1,'p_simple_type','grammar.py',788),
  ('simple_type -> FLOAT','simple_type',1,'p_simple_type','grammar.py',789),
  ('simple_type -> CHAR','simple_type',1,'p_simple_type','grammar.py',790),
  ('simple_type -> BOOLEAN','simple_type',1,'p_simple_type','grammar.py',791),
  ('simple_type -> STRING','simple_type',1,'p_simple_type','grammar.py',792),
  ('cte -> CTEI','cte',1,'p_cte','grammar.py',798),
  ('cte -> CTEF','cte',1,'p_cte','grammar.py',799),
  ('cte -> CTEC','cte',1,'p_cte','grammar.py',800),
  ('cte -> CTEB','cte',1,'p_cte','grammar.py',801),
  ('cte -> CTES','cte',1,'p_cte','grammar.py',802),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',810),
]
