
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLESSGREATEREQUALSNOTEQUALLESSTHANGREATERTHANleftPLUSMINUSleftTIMESDIVIDErightASSIGNAND ASSIGN BOOLEAN CHAR COLON COMMA COMMENT CTEB CTEC CTEF CTEI CTES DIVIDE DO ELSE END EQUALS FALSE FLOAT FUNCTION GREATER GREATERTHAN ID IF INT LBRACE LBRACK LESS LESSTHAN LPAREN MAIN MINUS NOT NOTEQUAL OR PLUS PRINT PROGRAM RBRACE RBRACK READ RETURN RPAREN SEMICOLON STRING THEN TIMES TRUE VARIABLE VOID WHILE\n    program : PROGRAM ID SEMICOLON global_scope var_declarations functions main END\n    \n    global_scope : empty\n    \n    functions : functions function\n                    | function\n                    | empty\n    \n    function : FUNCTION simple_type ID LPAREN function_scope open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE\n            |  FUNCTION VOID ID LPAREN function_scope open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE\n    \n    function_scope : empty\n    \n    main : MAIN LPAREN RPAREN main_scope var_declarations LBRACE statements RBRACE\n    \n    main_scope : empty\n    \n    var_declarations : var_declaration var_declarations \n                    | var_declaration\n                    | empty\n    \n    var_declaration : VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration\n    \n    open_var_declaration : empty\n    \n    close_var_declaration : empty\n    \n    variables : variable \n            | variable COMMA variables\n    \n    variable : ID\n            | ID LBRACK expression RBRACK\n            | ID LBRACK expression RBRACK LBRACK expression RBRACK\n    \n    parameters : parameters  COMMA parameter\n    | parameter\n    | empty\n    \n    parameter : simple_type ID \n    \n    statements : statements statement\n    | statement\n    | empty\n    \n    statement : read \n    | do_while\n    | while\n    | if_else\n    | invocation\n    | if\n    | assingation\n    | return\n    | print\n    \n    do_while : DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON \n    \n    while : WHILE breadcrumb LPAREN expression RPAREN gotof LBRACE statements RBRACE\n    \n    breadcrumb : empty\n    \n    if : IF LPAREN expression RPAREN gotof LBRACE statements RBRACE\n    \n    if_else : IF LPAREN expression RPAREN  gotof LBRACE statements RBRACE  ELSE goto LBRACE statements RBRACE\n    \n    gotot : empty\n    \n    goto : empty\n    \n    gotof : empty\n    \n    return : RETURN expression SEMICOLON\n    \n    read : READ LPAREN variable_list RPAREN SEMICOLON\n    \n    variable_list : variable\n                  | variable_list COMMA variable\n    \n    invocation : ID LPAREN expressions RPAREN SEMICOLON\n    \n    expressions : expressions COMMA expression  \n                | expression\n                | empty\n    \n    print : PRINT LPAREN print_arguments RPAREN SEMICOLON\n    \n    print_arguments : print_argument\n                    | print_arguments COMMA print_argument\n    \n    print_argument : CTES\n                   | expression\n    \n    assingation : variable ASSIGN expression SEMICOLON\n    \n    expression : t_expression \n                | NOT t_expression\n    \n    t_expression : g_expression \n                | t_expression boolean_operator g_expression\n    \n    g_expression : m_expression \n                | g_expression comparison_operator m_expression\n    \n    m_expression : term \n                |  m_expression addition_operator term\n    \n    term : factor \n        |  term multiplication_operator factor\n    \n    factor : variable\n            | cte\n            | expression_parenthesis\n            | invocation\n    \n    expression_parenthesis : LPAREN expression RPAREN \n    \n    comparison_operator : LESS\n                        | GREATER\n                        | EQUALS\n                        | NOTEQUAL\n                        | GREATERTHAN\n                        | LESSTHAN\n    \n    addition_operator : PLUS\n                    | MINUS\n    \n    boolean_operator : AND\n                    | OR\n    \n    multiplication_operator : TIMES\n                            | DIVIDE\n    \n    simple_type : INT\n                | FLOAT\n                | CHAR\n                | STRING\n                | BOOLEAN\n    \n    cte : CTEI\n        | CTEF\n        | CTEC\n        | CTES\n        | CTEB\n    \n    empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,29,],[0,-1,]),'ID':([2,21,22,23,24,25,26,27,28,40,41,53,67,71,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,100,106,107,108,109,110,111,112,113,114,115,116,117,124,131,134,135,139,140,142,146,151,152,155,163,164,167,169,170,171,172,178,180,181,184,187,188,189,191,192,194,200,201,202,203,],[3,31,32,-87,-88,-89,-90,-91,35,35,50,50,50,50,50,-83,-84,50,-75,-76,-77,-78,-79,-80,50,-81,-82,50,-85,-86,122,126,50,122,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,50,50,-26,35,50,50,50,-50,122,50,-46,35,122,-59,50,122,122,-47,-54,122,122,122,50,122,122,122,-41,-39,-38,122,122,-42,]),'SEMICOLON':([3,33,34,35,49,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,72,76,101,102,103,104,105,130,141,146,148,154,162,168,193,196,197,],[4,39,-17,-19,-18,-19,-60,-62,-64,-66,-68,-70,-71,-72,-73,-92,-93,-94,-95,-96,-20,-61,-63,-65,-67,-69,-74,146,155,-50,-21,167,172,178,-97,200,-43,]),'VARIABLE':([4,5,6,8,36,39,42,43,47,48,143,145,],[-97,10,-2,10,-97,-97,10,-10,-14,-16,10,10,]),'FUNCTION':([4,5,6,7,8,9,11,12,13,15,19,39,47,48,185,186,],[-97,-97,-2,14,-12,-13,14,-4,-5,-11,-3,-97,-14,-16,-6,-7,]),'MAIN':([4,5,6,7,8,9,11,12,13,15,19,39,47,48,185,186,],[-97,-97,-2,-97,-12,-13,20,-4,-5,-11,-3,-97,-14,-16,-6,-7,]),'LBRACE':([8,9,15,36,39,42,43,47,48,68,119,136,137,143,145,160,161,166,175,176,177,183,195,198,199,],[-12,-13,-11,-97,-97,-97,-10,-14,-16,91,-97,151,-40,-97,-97,170,171,-97,-97,184,-45,188,-97,201,-44,]),'INT':([10,14,16,17,37,38,44,45,46,69,70,128,],[-97,23,23,-15,-97,-97,-97,-8,-97,23,23,23,]),'FLOAT':([10,14,16,17,37,38,44,45,46,69,70,128,],[-97,24,24,-15,-97,-97,-97,-8,-97,24,24,24,]),'CHAR':([10,14,16,17,37,38,44,45,46,69,70,128,],[-97,25,25,-15,-97,-97,-97,-8,-97,25,25,25,]),'STRING':([10,14,16,17,37,38,44,45,46,69,70,128,],[-97,26,26,-15,-97,-97,-97,-8,-97,26,26,26,]),'BOOLEAN':([10,14,16,17,37,38,44,45,46,69,70,128,],[-97,27,27,-15,-97,-97,-97,-8,-97,27,27,27,]),'VOID':([14,],[22,]),'COMMA':([17,34,35,37,38,44,45,46,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,76,93,94,95,96,97,98,99,101,102,103,104,105,126,144,146,147,148,149,150,156,157,158,159,173,179,],[-15,40,-19,-97,-97,-97,-8,-97,-19,-60,-62,-64,-66,-68,-70,-71,-72,-73,-92,-93,-94,-95,-96,-97,-97,-97,-20,-61,128,-23,-24,128,131,-52,-53,-63,-65,-67,-69,-74,-25,-22,-50,-51,-21,163,-48,169,-55,-57,-58,-49,-56,]),'RPAREN':([17,30,35,37,38,44,45,46,48,50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,76,90,93,94,95,96,97,98,99,101,102,103,104,105,126,127,129,144,146,147,148,149,150,153,156,157,158,159,165,173,179,190,],[-15,36,-19,-97,-97,-97,-8,-97,-16,-19,-60,-62,-64,-66,-68,-70,-71,-72,-73,-92,-93,-94,-95,-96,-97,-97,-97,-20,-61,105,-97,-23,-24,-97,130,-52,-53,-63,-65,-67,-69,-74,-25,143,145,-22,-50,-51,-21,162,-48,166,168,-55,-57,-58,175,-49,-56,193,]),'END':([18,133,],[29,-9,]),'LPAREN':([20,31,32,41,50,53,67,71,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,100,118,120,121,122,124,125,131,137,138,139,140,142,152,169,182,187,],[30,37,38,67,71,67,67,67,67,-83,-84,67,-75,-76,-77,-78,-79,-80,67,-81,-82,67,-85,-86,67,135,-97,139,71,67,142,67,-40,152,67,67,67,67,67,187,67,]),'LBRACK':([35,50,72,122,],[41,41,100,41,]),'NOT':([41,67,71,100,124,131,139,140,142,152,169,187,],[53,53,53,53,53,53,53,53,53,53,53,53,]),'CTEI':([41,53,67,71,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,100,124,131,139,140,142,152,169,187,],[62,62,62,62,62,-83,-84,62,-75,-76,-77,-78,-79,-80,62,-81,-82,62,-85,-86,62,62,62,62,62,62,62,62,62,]),'CTEF':([41,53,67,71,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,100,124,131,139,140,142,152,169,187,],[63,63,63,63,63,-83,-84,63,-75,-76,-77,-78,-79,-80,63,-81,-82,63,-85,-86,63,63,63,63,63,63,63,63,63,]),'CTEC':([41,53,67,71,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,100,124,131,139,140,142,152,169,187,],[64,64,64,64,64,-83,-84,64,-75,-76,-77,-78,-79,-80,64,-81,-82,64,-85,-86,64,64,64,64,64,64,64,64,64,]),'CTES':([41,53,67,71,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,100,124,131,139,140,142,152,169,187,],[65,65,65,65,65,-83,-84,65,-75,-76,-77,-78,-79,-80,65,-81,-82,65,-85,-86,65,65,65,65,65,158,65,158,65,]),'CTEB':([41,53,67,71,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,100,124,131,139,140,142,152,169,187,],[66,66,66,66,66,-83,-84,66,-75,-76,-77,-78,-79,-80,66,-81,-82,66,-85,-86,66,66,66,66,66,66,66,66,66,]),'TIMES':([50,56,57,58,59,60,61,62,63,64,65,66,72,103,104,105,146,148,158,],[-19,88,-68,-70,-71,-72,-73,-92,-93,-94,-95,-96,-20,88,-69,-74,-50,-21,-95,]),'DIVIDE':([50,56,57,58,59,60,61,62,63,64,65,66,72,103,104,105,146,148,158,],[-19,89,-68,-70,-71,-72,-73,-92,-93,-94,-95,-96,-20,89,-69,-74,-50,-21,-95,]),'PLUS':([50,55,56,57,58,59,60,61,62,63,64,65,66,72,102,103,104,105,146,148,158,],[-19,85,-66,-68,-70,-71,-72,-73,-92,-93,-94,-95,-96,-20,85,-67,-69,-74,-50,-21,-95,]),'MINUS':([50,55,56,57,58,59,60,61,62,63,64,65,66,72,102,103,104,105,146,148,158,],[-19,86,-66,-68,-70,-71,-72,-73,-92,-93,-94,-95,-96,-20,86,-67,-69,-74,-50,-21,-95,]),'LESS':([50,54,55,56,57,58,59,60,61,62,63,64,65,66,72,101,102,103,104,105,146,148,158,],[-19,78,-64,-66,-68,-70,-71,-72,-73,-92,-93,-94,-95,-96,-20,78,-65,-67,-69,-74,-50,-21,-95,]),'GREATER':([50,54,55,56,57,58,59,60,61,62,63,64,65,66,72,101,102,103,104,105,146,148,158,],[-19,79,-64,-66,-68,-70,-71,-72,-73,-92,-93,-94,-95,-96,-20,79,-65,-67,-69,-74,-50,-21,-95,]),'EQUALS':([50,54,55,56,57,58,59,60,61,62,63,64,65,66,72,101,102,103,104,105,146,148,158,],[-19,80,-64,-66,-68,-70,-71,-72,-73,-92,-93,-94,-95,-96,-20,80,-65,-67,-69,-74,-50,-21,-95,]),'NOTEQUAL':([50,54,55,56,57,58,59,60,61,62,63,64,65,66,72,101,102,103,104,105,146,148,158,],[-19,81,-64,-66,-68,-70,-71,-72,-73,-92,-93,-94,-95,-96,-20,81,-65,-67,-69,-74,-50,-21,-95,]),'GREATERTHAN':([50,54,55,56,57,58,59,60,61,62,63,64,65,66,72,101,102,103,104,105,146,148,158,],[-19,82,-64,-66,-68,-70,-71,-72,-73,-92,-93,-94,-95,-96,-20,82,-65,-67,-69,-74,-50,-21,-95,]),'LESSTHAN':([50,54,55,56,57,58,59,60,61,62,63,64,65,66,72,101,102,103,104,105,146,148,158,],[-19,83,-64,-66,-68,-70,-71,-72,-73,-92,-93,-94,-95,-96,-20,83,-65,-67,-69,-74,-50,-21,-95,]),'AND':([50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,72,76,101,102,103,104,105,146,148,158,],[-19,74,-62,-64,-66,-68,-70,-71,-72,-73,-92,-93,-94,-95,-96,-20,74,-63,-65,-67,-69,-74,-50,-21,-95,]),'OR':([50,52,54,55,56,57,58,59,60,61,62,63,64,65,66,72,76,101,102,103,104,105,146,148,158,],[-19,75,-62,-64,-66,-68,-70,-71,-72,-73,-92,-93,-94,-95,-96,-20,75,-63,-65,-67,-69,-74,-50,-21,-95,]),'RBRACK':([50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,72,76,101,102,103,104,105,132,146,148,],[-19,72,-60,-62,-64,-66,-68,-70,-71,-72,-73,-92,-93,-94,-95,-96,-20,-61,-63,-65,-67,-69,-74,148,-50,-21,]),'ASSIGN':([72,122,123,148,],[-20,-19,140,-21,]),'RBRACE':([91,106,107,108,109,110,111,112,113,114,115,116,117,134,146,151,155,164,167,170,171,172,178,180,181,184,188,189,191,192,194,200,201,202,203,],[-97,133,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-26,-50,-97,-46,174,-59,-97,-97,-47,-54,185,186,-97,-97,192,194,-41,-39,-38,-97,203,-42,]),'READ':([91,106,107,108,109,110,111,112,113,114,115,116,117,134,146,151,155,164,167,170,171,172,178,180,181,184,188,189,191,192,194,200,201,202,203,],[118,118,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-26,-50,118,-46,118,-59,118,118,-47,-54,118,118,118,118,118,118,-41,-39,-38,118,118,-42,]),'DO':([91,106,107,108,109,110,111,112,113,114,115,116,117,134,146,151,155,164,167,170,171,172,178,180,181,184,188,189,191,192,194,200,201,202,203,],[119,119,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-26,-50,119,-46,119,-59,119,119,-47,-54,119,119,119,119,119,119,-41,-39,-38,119,119,-42,]),'WHILE':([91,106,107,108,109,110,111,112,113,114,115,116,117,134,146,151,155,164,167,170,171,172,174,178,180,181,184,188,189,191,192,194,200,201,202,203,],[120,120,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-26,-50,120,-46,120,-59,120,120,-47,182,-54,120,120,120,120,120,120,-41,-39,-38,120,120,-42,]),'IF':([91,106,107,108,109,110,111,112,113,114,115,116,117,134,146,151,155,164,167,170,171,172,178,180,181,184,188,189,191,192,194,200,201,202,203,],[121,121,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-26,-50,121,-46,121,-59,121,121,-47,-54,121,121,121,121,121,121,-41,-39,-38,121,121,-42,]),'RETURN':([91,106,107,108,109,110,111,112,113,114,115,116,117,134,146,151,155,164,167,170,171,172,178,180,181,184,188,189,191,192,194,200,201,202,203,],[124,124,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-26,-50,124,-46,124,-59,124,124,-47,-54,124,124,124,124,124,124,-41,-39,-38,124,124,-42,]),'PRINT':([91,106,107,108,109,110,111,112,113,114,115,116,117,134,146,151,155,164,167,170,171,172,178,180,181,184,188,189,191,192,194,200,201,202,203,],[125,125,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-26,-50,125,-46,125,-59,125,125,-47,-54,125,125,125,125,125,125,-41,-39,-38,125,125,-42,]),'ELSE':([192,],[195,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_scope':([4,],[5,]),'empty':([4,5,7,8,10,36,37,38,39,42,44,46,69,70,71,91,93,96,119,120,143,145,151,166,170,171,175,184,188,193,195,201,],[6,9,13,9,17,43,45,45,48,9,17,17,95,95,99,108,48,48,137,137,9,9,108,177,108,108,177,108,108,197,199,108,]),'var_declarations':([5,8,42,143,145,],[7,15,68,160,161,]),'var_declaration':([5,8,42,143,145,],[8,8,8,8,8,]),'functions':([7,],[11,]),'function':([7,11,],[12,19,]),'open_var_declaration':([10,44,46,],[16,69,70,]),'main':([11,],[18,]),'simple_type':([14,16,69,70,128,],[21,28,92,92,92,]),'variables':([28,40,],[33,49,]),'variable':([28,40,41,53,67,71,73,77,84,87,91,100,106,124,131,135,139,140,142,151,152,163,164,169,170,171,180,181,184,187,188,189,191,201,202,],[34,34,58,58,58,58,58,58,58,58,123,58,123,58,58,150,58,58,58,123,58,173,123,58,123,123,123,123,123,58,123,123,123,123,123,]),'main_scope':([36,],[42,]),'function_scope':([37,38,],[44,46,]),'close_var_declaration':([39,93,96,],[47,127,129,]),'expression':([41,67,71,100,124,131,139,140,142,152,169,187,],[51,90,98,132,141,147,153,154,159,165,159,190,]),'t_expression':([41,53,67,71,100,124,131,139,140,142,152,169,187,],[52,76,52,52,52,52,52,52,52,52,52,52,52,]),'g_expression':([41,53,67,71,73,100,124,131,139,140,142,152,169,187,],[54,54,54,54,101,54,54,54,54,54,54,54,54,54,]),'m_expression':([41,53,67,71,73,77,100,124,131,139,140,142,152,169,187,],[55,55,55,55,55,102,55,55,55,55,55,55,55,55,55,]),'term':([41,53,67,71,73,77,84,100,124,131,139,140,142,152,169,187,],[56,56,56,56,56,56,103,56,56,56,56,56,56,56,56,56,]),'factor':([41,53,67,71,73,77,84,87,100,124,131,139,140,142,152,169,187,],[57,57,57,57,57,57,57,104,57,57,57,57,57,57,57,57,57,]),'cte':([41,53,67,71,73,77,84,87,100,124,131,139,140,142,152,169,187,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'expression_parenthesis':([41,53,67,71,73,77,84,87,100,124,131,139,140,142,152,169,187,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'invocation':([41,53,67,71,73,77,84,87,91,100,106,124,131,139,140,142,151,152,164,169,170,171,180,181,184,187,188,189,191,201,202,],[61,61,61,61,61,61,61,61,113,61,113,61,61,61,61,61,113,61,113,61,113,113,113,113,113,61,113,113,113,113,113,]),'boolean_operator':([52,76,],[73,73,]),'comparison_operator':([54,101,],[77,77,]),'addition_operator':([55,102,],[84,84,]),'multiplication_operator':([56,103,],[87,87,]),'parameters':([69,70,],[93,96,]),'parameter':([69,70,128,],[94,94,144,]),'expressions':([71,],[97,]),'statements':([91,151,170,171,184,188,201,],[106,164,180,181,189,191,202,]),'statement':([91,106,151,164,170,171,180,181,184,188,189,191,201,202,],[107,134,107,134,107,107,134,134,107,107,134,134,107,134,]),'read':([91,106,151,164,170,171,180,181,184,188,189,191,201,202,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'do_while':([91,106,151,164,170,171,180,181,184,188,189,191,201,202,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'while':([91,106,151,164,170,171,180,181,184,188,189,191,201,202,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'if_else':([91,106,151,164,170,171,180,181,184,188,189,191,201,202,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'if':([91,106,151,164,170,171,180,181,184,188,189,191,201,202,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'assingation':([91,106,151,164,170,171,180,181,184,188,189,191,201,202,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'return':([91,106,151,164,170,171,180,181,184,188,189,191,201,202,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'print':([91,106,151,164,170,171,180,181,184,188,189,191,201,202,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,]),'breadcrumb':([119,120,],[136,138,]),'variable_list':([135,],[149,]),'print_arguments':([142,],[156,]),'print_argument':([142,169,],[157,179,]),'gotof':([166,175,],[176,183,]),'gotot':([193,],[196,]),'goto':([195,],[198,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON global_scope var_declarations functions main END','program',8,'p_program','grammar.py',22),
  ('global_scope -> empty','global_scope',1,'p_global_scope','grammar.py',29),
  ('functions -> functions function','functions',2,'p_functions','grammar.py',39),
  ('functions -> function','functions',1,'p_functions','grammar.py',40),
  ('functions -> empty','functions',1,'p_functions','grammar.py',41),
  ('function -> FUNCTION simple_type ID LPAREN function_scope open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE','function',13,'p_function','grammar.py',46),
  ('function -> FUNCTION VOID ID LPAREN function_scope open_var_declaration parameters close_var_declaration RPAREN var_declarations LBRACE statements RBRACE','function',13,'p_function','grammar.py',47),
  ('function_scope -> empty','function_scope',1,'p_function_scope','grammar.py',52),
  ('main -> MAIN LPAREN RPAREN main_scope var_declarations LBRACE statements RBRACE','main',8,'p_main','grammar.py',62),
  ('main_scope -> empty','main_scope',1,'p_main_scope','grammar.py',67),
  ('var_declarations -> var_declaration var_declarations','var_declarations',2,'p_var_declarations','grammar.py',78),
  ('var_declarations -> var_declaration','var_declarations',1,'p_var_declarations','grammar.py',79),
  ('var_declarations -> empty','var_declarations',1,'p_var_declarations','grammar.py',80),
  ('var_declaration -> VARIABLE open_var_declaration simple_type variables SEMICOLON close_var_declaration','var_declaration',6,'p_var_declaration','grammar.py',90),
  ('open_var_declaration -> empty','open_var_declaration',1,'p_open_var_declaration','grammar.py',98),
  ('close_var_declaration -> empty','close_var_declaration',1,'p_close_var_declaration','grammar.py',104),
  ('variables -> variable','variables',1,'p_variables','grammar.py',111),
  ('variables -> variable COMMA variables','variables',3,'p_variables','grammar.py',112),
  ('variable -> ID','variable',1,'p_variable','grammar.py',126),
  ('variable -> ID LBRACK expression RBRACK','variable',4,'p_variable','grammar.py',127),
  ('variable -> ID LBRACK expression RBRACK LBRACK expression RBRACK','variable',7,'p_variable','grammar.py',128),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','grammar.py',140),
  ('parameters -> parameter','parameters',1,'p_parameters','grammar.py',141),
  ('parameters -> empty','parameters',1,'p_parameters','grammar.py',142),
  ('parameter -> simple_type ID','parameter',2,'p_parameter','grammar.py',148),
  ('statements -> statements statement','statements',2,'p_statements','grammar.py',157),
  ('statements -> statement','statements',1,'p_statements','grammar.py',158),
  ('statements -> empty','statements',1,'p_statements','grammar.py',159),
  ('statement -> read','statement',1,'p_statement','grammar.py',164),
  ('statement -> do_while','statement',1,'p_statement','grammar.py',165),
  ('statement -> while','statement',1,'p_statement','grammar.py',166),
  ('statement -> if_else','statement',1,'p_statement','grammar.py',167),
  ('statement -> invocation','statement',1,'p_statement','grammar.py',168),
  ('statement -> if','statement',1,'p_statement','grammar.py',169),
  ('statement -> assingation','statement',1,'p_statement','grammar.py',170),
  ('statement -> return','statement',1,'p_statement','grammar.py',171),
  ('statement -> print','statement',1,'p_statement','grammar.py',172),
  ('do_while -> DO breadcrumb LBRACE statements RBRACE WHILE LPAREN expression RPAREN gotot SEMICOLON','do_while',11,'p_do_while','grammar.py',177),
  ('while -> WHILE breadcrumb LPAREN expression RPAREN gotof LBRACE statements RBRACE','while',9,'p_while','grammar.py',182),
  ('breadcrumb -> empty','breadcrumb',1,'p_breadcrumb','grammar.py',189),
  ('if -> IF LPAREN expression RPAREN gotof LBRACE statements RBRACE','if',8,'p_if','grammar.py',195),
  ('if_else -> IF LPAREN expression RPAREN gotof LBRACE statements RBRACE ELSE goto LBRACE statements RBRACE','if_else',13,'p_if_else','grammar.py',202),
  ('gotot -> empty','gotot',1,'p_gotot','grammar.py',208),
  ('goto -> empty','goto',1,'p_goto','grammar.py',214),
  ('gotof -> empty','gotof',1,'p_gotof','grammar.py',220),
  ('return -> RETURN expression SEMICOLON','return',3,'p_return','grammar.py',227),
  ('read -> READ LPAREN variable_list RPAREN SEMICOLON','read',5,'p_read','grammar.py',232),
  ('variable_list -> variable','variable_list',1,'p_variable_list','grammar.py',241),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','grammar.py',242),
  ('invocation -> ID LPAREN expressions RPAREN SEMICOLON','invocation',5,'p_invocation','grammar.py',252),
  ('expressions -> expressions COMMA expression','expressions',3,'p_expressions','grammar.py',257),
  ('expressions -> expression','expressions',1,'p_expressions','grammar.py',258),
  ('expressions -> empty','expressions',1,'p_expressions','grammar.py',259),
  ('print -> PRINT LPAREN print_arguments RPAREN SEMICOLON','print',5,'p_print','grammar.py',264),
  ('print_arguments -> print_argument','print_arguments',1,'p_print_arguments','grammar.py',269),
  ('print_arguments -> print_arguments COMMA print_argument','print_arguments',3,'p_print_arguments','grammar.py',270),
  ('print_argument -> CTES','print_argument',1,'p_print_argument','grammar.py',282),
  ('print_argument -> expression','print_argument',1,'p_print_argument','grammar.py',283),
  ('assingation -> variable ASSIGN expression SEMICOLON','assingation',4,'p_assingation','grammar.py',297),
  ('expression -> t_expression','expression',1,'p_expression','grammar.py',310),
  ('expression -> NOT t_expression','expression',2,'p_expression','grammar.py',311),
  ('t_expression -> g_expression','t_expression',1,'p_t_expression','grammar.py',321),
  ('t_expression -> t_expression boolean_operator g_expression','t_expression',3,'p_t_expression','grammar.py',322),
  ('g_expression -> m_expression','g_expression',1,'p_g_expression','grammar.py',333),
  ('g_expression -> g_expression comparison_operator m_expression','g_expression',3,'p_g_expression','grammar.py',334),
  ('m_expression -> term','m_expression',1,'p_m_expression','grammar.py',344),
  ('m_expression -> m_expression addition_operator term','m_expression',3,'p_m_expression','grammar.py',345),
  ('term -> factor','term',1,'p_term','grammar.py',356),
  ('term -> term multiplication_operator factor','term',3,'p_term','grammar.py',357),
  ('factor -> variable','factor',1,'p_factor','grammar.py',369),
  ('factor -> cte','factor',1,'p_factor','grammar.py',370),
  ('factor -> expression_parenthesis','factor',1,'p_factor','grammar.py',371),
  ('factor -> invocation','factor',1,'p_factor','grammar.py',372),
  ('expression_parenthesis -> LPAREN expression RPAREN','expression_parenthesis',3,'p_expression_parenthesis','grammar.py',385),
  ('comparison_operator -> LESS','comparison_operator',1,'p_comparison_operator','grammar.py',392),
  ('comparison_operator -> GREATER','comparison_operator',1,'p_comparison_operator','grammar.py',393),
  ('comparison_operator -> EQUALS','comparison_operator',1,'p_comparison_operator','grammar.py',394),
  ('comparison_operator -> NOTEQUAL','comparison_operator',1,'p_comparison_operator','grammar.py',395),
  ('comparison_operator -> GREATERTHAN','comparison_operator',1,'p_comparison_operator','grammar.py',396),
  ('comparison_operator -> LESSTHAN','comparison_operator',1,'p_comparison_operator','grammar.py',397),
  ('addition_operator -> PLUS','addition_operator',1,'p_addition_operator','grammar.py',403),
  ('addition_operator -> MINUS','addition_operator',1,'p_addition_operator','grammar.py',404),
  ('boolean_operator -> AND','boolean_operator',1,'p_boolean_operator','grammar.py',411),
  ('boolean_operator -> OR','boolean_operator',1,'p_boolean_operator','grammar.py',412),
  ('multiplication_operator -> TIMES','multiplication_operator',1,'p_multiplication_operator','grammar.py',419),
  ('multiplication_operator -> DIVIDE','multiplication_operator',1,'p_multiplication_operator','grammar.py',420),
  ('simple_type -> INT','simple_type',1,'p_simple_type','grammar.py',427),
  ('simple_type -> FLOAT','simple_type',1,'p_simple_type','grammar.py',428),
  ('simple_type -> CHAR','simple_type',1,'p_simple_type','grammar.py',429),
  ('simple_type -> STRING','simple_type',1,'p_simple_type','grammar.py',430),
  ('simple_type -> BOOLEAN','simple_type',1,'p_simple_type','grammar.py',431),
  ('cte -> CTEI','cte',1,'p_cte','grammar.py',438),
  ('cte -> CTEF','cte',1,'p_cte','grammar.py',439),
  ('cte -> CTEC','cte',1,'p_cte','grammar.py',440),
  ('cte -> CTES','cte',1,'p_cte','grammar.py',441),
  ('cte -> CTEB','cte',1,'p_cte','grammar.py',442),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',451),
]
